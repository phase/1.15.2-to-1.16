--- com/mojang/datafixers/DataFixerUpper.java
+++ com/mojang/datafixers/DataFixerUpper.java
@@ -3,19 +3,20 @@
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.Lists;
 import com.mojang.datafixers.functions.PointFreeRule;
 import com.mojang.datafixers.schemas.Schema;
 import com.mojang.datafixers.types.Type;
+import com.mojang.serialization.DataResult;
+import com.mojang.serialization.Dynamic;
 import it.unimi.dsi.fastutil.ints.Int2ObjectSortedMap;
 import it.unimi.dsi.fastutil.ints.IntSortedSet;
 import it.unimi.dsi.fastutil.longs.Long2ObjectMap;
 import it.unimi.dsi.fastutil.longs.Long2ObjectMaps;
 import it.unimi.dsi.fastutil.longs.Long2ObjectOpenHashMap;
 import java.util.ArrayList;
 import java.util.Iterator;
 import java.util.List;
-import java.util.Optional;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
 public class DataFixerUpper implements DataFixer {
    public static boolean ERRORS_ARE_FATAL = false;
@@ -47,25 +48,20 @@
       this.globalList = var2;
       this.fixerVersions = var3;
    }
 
    public <T> Dynamic<T> update(DSL.TypeReference var1, Dynamic<T> var2, int var3, int var4) {
-      try {
-         if (var3 < var4) {
-            Type var5 = this.getType(var1, var3);
-            Optional var6 = var5.readAndWrite(var2.getOps(), this.getType(var1, var4), this.getRule(var3, var4), OPTIMIZATION_RULE, var2.getValue());
-            if (!var6.isPresent()) {
-               throw new IllegalStateException("Could not parse for fixing " + var5);
-            }
-
-            return new Dynamic(var2.getOps(), var6.get());
-         }
-      } catch (Throwable var7) {
-         LOGGER.error("Something went wrong upgrading!", var7);
+      if (var3 < var4) {
+         Type var5 = this.getType(var1, var3);
+         DataResult var6 = var5.readAndWrite(var2.getOps(), this.getType(var1, var4), this.getRule(var3, var4), OPTIMIZATION_RULE, var2.getValue());
+         Logger var10001 = LOGGER;
+         var10001.getClass();
+         Object var7 = var6.resultOrPartial(var10001::error).orElse(var2.getValue());
+         return new Dynamic(var2.getOps(), var7);
+      } else {
+         return var2;
       }
-
-      return var2;
    }
 
    public Schema getSchema(int var1) {
       return (Schema)this.schemas.get(getLowestSchemaSameVersion(this.schemas, var1));
    }
