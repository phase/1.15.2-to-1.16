--- com/mojang/datafixers/DynamicLike.java
+++ com/mojang/datafixers/DynamicLike.java
@@ -1,195 +1,0 @@
-package com.mojang.datafixers;
-
-import com.google.common.collect.ImmutableList;
-import com.google.common.collect.ImmutableMap;
-import com.mojang.datafixers.types.DynamicOps;
-import java.nio.ByteBuffer;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Map;
-import java.util.Optional;
-import java.util.Map.Entry;
-import java.util.function.Function;
-import java.util.stream.IntStream;
-import java.util.stream.LongStream;
-import java.util.stream.Stream;
-
-public abstract class DynamicLike<T> {
-   protected final DynamicOps<T> ops;
-
-   public DynamicLike(DynamicOps<T> var1) {
-      this.ops = var1;
-   }
-
-   public DynamicOps<T> getOps() {
-      return this.ops;
-   }
-
-   public abstract Optional<Number> asNumber();
-
-   public abstract Optional<String> asString();
-
-   public abstract Optional<Stream<Dynamic<T>>> asStreamOpt();
-
-   public abstract Optional<ByteBuffer> asByteBufferOpt();
-
-   public abstract Optional<IntStream> asIntStreamOpt();
-
-   public abstract Optional<LongStream> asLongStreamOpt();
-
-   public abstract OptionalDynamic<T> get(String var1);
-
-   public abstract Optional<T> getGeneric(T var1);
-
-   public abstract Optional<T> getElement(String var1);
-
-   public abstract Optional<T> getElementGeneric(T var1);
-
-   public abstract <U> Optional<List<U>> asListOpt(Function<Dynamic<T>, U> var1);
-
-   public abstract <K, V> Optional<Map<K, V>> asMapOpt(Function<Dynamic<T>, K> var1, Function<Dynamic<T>, V> var2);
-
-   public Number asNumber(Number var1) {
-      return (Number)this.asNumber().orElse(var1);
-   }
-
-   public int asInt(int var1) {
-      return this.asNumber(var1).intValue();
-   }
-
-   public long asLong(long var1) {
-      return this.asNumber(var1).longValue();
-   }
-
-   public float asFloat(float var1) {
-      return this.asNumber(var1).floatValue();
-   }
-
-   public double asDouble(double var1) {
-      return this.asNumber(var1).doubleValue();
-   }
-
-   public byte asByte(byte var1) {
-      return this.asNumber(var1).byteValue();
-   }
-
-   public short asShort(short var1) {
-      return this.asNumber(var1).shortValue();
-   }
-
-   public boolean asBoolean(boolean var1) {
-      return this.asNumber(var1 ? 1 : 0).intValue() != 0;
-   }
-
-   public String asString(String var1) {
-      return (String)this.asString().orElse(var1);
-   }
-
-   public Stream<Dynamic<T>> asStream() {
-      return (Stream)this.asStreamOpt().orElseGet(Stream::empty);
-   }
-
-   public ByteBuffer asByteBuffer() {
-      return (ByteBuffer)this.asByteBufferOpt().orElseGet(() -> {
-         return ByteBuffer.wrap(new byte[0]);
-      });
-   }
-
-   public IntStream asIntStream() {
-      return (IntStream)this.asIntStreamOpt().orElseGet(IntStream::empty);
-   }
-
-   public LongStream asLongStream() {
-      return (LongStream)this.asLongStreamOpt().orElseGet(LongStream::empty);
-   }
-
-   public <U> List<U> asList(Function<Dynamic<T>, U> var1) {
-      return (List)this.asListOpt(var1).orElseGet(ImmutableList::of);
-   }
-
-   public <K, V> Map<K, V> asMap(Function<Dynamic<T>, K> var1, Function<Dynamic<T>, V> var2) {
-      return (Map)this.asMapOpt(var1, var2).orElseGet(ImmutableMap::of);
-   }
-
-   public T getElement(String var1, T var2) {
-      return this.getElement(var1).orElse(var2);
-   }
-
-   public T getElementGeneric(T var1, T var2) {
-      return this.getElementGeneric(var1).orElse(var2);
-   }
-
-   public Dynamic<T> emptyList() {
-      return new Dynamic(this.ops, this.ops.emptyList());
-   }
-
-   public Dynamic<T> emptyMap() {
-      return new Dynamic(this.ops, this.ops.emptyMap());
-   }
-
-   public Dynamic<T> createNumeric(Number var1) {
-      return new Dynamic(this.ops, this.ops.createNumeric(var1));
-   }
-
-   public Dynamic<T> createByte(byte var1) {
-      return new Dynamic(this.ops, this.ops.createByte(var1));
-   }
-
-   public Dynamic<T> createShort(short var1) {
-      return new Dynamic(this.ops, this.ops.createShort(var1));
-   }
-
-   public Dynamic<T> createInt(int var1) {
-      return new Dynamic(this.ops, this.ops.createInt(var1));
-   }
-
-   public Dynamic<T> createLong(long var1) {
-      return new Dynamic(this.ops, this.ops.createLong(var1));
-   }
-
-   public Dynamic<T> createFloat(float var1) {
-      return new Dynamic(this.ops, this.ops.createFloat(var1));
-   }
-
-   public Dynamic<T> createDouble(double var1) {
-      return new Dynamic(this.ops, this.ops.createDouble(var1));
-   }
-
-   public Dynamic<T> createBoolean(boolean var1) {
-      return new Dynamic(this.ops, this.ops.createBoolean(var1));
-   }
-
-   public Dynamic<T> createString(String var1) {
-      return new Dynamic(this.ops, this.ops.createString(var1));
-   }
-
-   public Dynamic<T> createList(Stream<? extends Dynamic<?>> var1) {
-      return new Dynamic(this.ops, this.ops.createList(var1.map((var1x) -> {
-         return var1x.cast(this.ops);
-      })));
-   }
-
-   public Dynamic<T> createMap(Map<? extends Dynamic<?>, ? extends Dynamic<?>> var1) {
-      ImmutableMap.Builder var2 = ImmutableMap.builder();
-      Iterator var3 = var1.entrySet().iterator();
-
-      while(var3.hasNext()) {
-         Entry var4 = (Entry)var3.next();
-         var2.put(((Dynamic)var4.getKey()).cast(this.ops), ((Dynamic)var4.getValue()).cast(this.ops));
-      }
-
-      return new Dynamic(this.ops, this.ops.createMap(var2.build()));
-   }
-
-   public Dynamic<?> createByteList(ByteBuffer var1) {
-      return new Dynamic(this.ops, this.ops.createByteList(var1));
-   }
-
-   public Dynamic<?> createIntList(IntStream var1) {
-      return new Dynamic(this.ops, this.ops.createIntList(var1));
-   }
-
-   public Dynamic<?> createLongList(LongStream var1) {
-      return new Dynamic(this.ops, this.ops.createLongList(var1));
-   }
-}
