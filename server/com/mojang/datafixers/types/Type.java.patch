--- com/mojang/datafixers/types/Type.java
+++ com/mojang/datafixers/types/Type.java
@@ -1,11 +1,10 @@
 package com.mojang.datafixers.types;
 
 import com.google.common.collect.Maps;
 import com.mojang.datafixers.DSL;
 import com.mojang.datafixers.DataFixUtils;
-import com.mojang.datafixers.Dynamic;
 import com.mojang.datafixers.FieldFinder;
 import com.mojang.datafixers.FunctionType;
 import com.mojang.datafixers.OpticFinder;
 import com.mojang.datafixers.RewriteResult;
 import com.mojang.datafixers.TypeRewriteRule;
@@ -20,24 +19,30 @@
 import com.mojang.datafixers.types.families.RecursiveTypeFamily;
 import com.mojang.datafixers.types.templates.TaggedChoice;
 import com.mojang.datafixers.types.templates.TypeTemplate;
 import com.mojang.datafixers.util.Either;
 import com.mojang.datafixers.util.Pair;
+import com.mojang.serialization.Codec;
+import com.mojang.serialization.DataResult;
+import com.mojang.serialization.Dynamic;
+import com.mojang.serialization.DynamicOps;
 import java.util.Map;
 import java.util.Objects;
 import java.util.Optional;
 import java.util.concurrent.CompletableFuture;
-import java.util.concurrent.atomic.AtomicReference;
 import java.util.function.Function;
 import javax.annotation.Nullable;
+import org.apache.commons.lang3.mutable.MutableObject;
 import org.apache.commons.lang3.tuple.Triple;
 
 public abstract class Type<A> implements App<Type.Mu, A> {
    private static final Map<Triple<Type<?>, TypeRewriteRule, PointFreeRule>, CompletableFuture<Optional<? extends RewriteResult<?, ?>>>> PENDING_REWRITE_CACHE = Maps.newConcurrentMap();
    private static final Map<Triple<Type<?>, TypeRewriteRule, PointFreeRule>, Optional<? extends RewriteResult<?, ?>>> REWRITE_CACHE = Maps.newConcurrentMap();
    @Nullable
    private TypeTemplate template;
+   @Nullable
+   private Codec<A> codec;
 
    public Type() {
    }
 
    public static <A> Type<A> unbox(App<Type.Mu, A> var0) {
@@ -87,84 +92,89 @@
 
    public Optional<Type<?>> findCheckedType(int var1) {
       return Optional.empty();
    }
 
-   public final <T> Pair<Dynamic<T>, Optional<A>> read(Dynamic<T> var1) {
-      return this.read(var1.getOps(), var1.getValue()).mapFirst((var1x) -> {
-         return new Dynamic(var1.getOps(), var1x);
+   public final <T> DataResult<Pair<A, Dynamic<T>>> read(Dynamic<T> var1) {
+      return this.codec().decode(var1.getOps(), var1.getValue()).map((var1x) -> {
+         return var1x.mapSecond((var1xx) -> {
+            return new Dynamic(var1.getOps(), var1xx);
+         });
       });
    }
 
-   public abstract <T> Pair<T, Optional<A>> read(DynamicOps<T> var1, T var2);
+   public final Codec<A> codec() {
+      if (this.codec == null) {
+         this.codec = this.buildCodec();
+      }
 
-   public abstract <T> T write(DynamicOps<T> var1, T var2, A var3);
-
-   public final <T> T write(DynamicOps<T> var1, A var2) {
-      return this.write(var1, var1.empty(), var2);
+      return this.codec;
    }
 
-   public final <T> Dynamic<T> writeDynamic(DynamicOps<T> var1, T var2, A var3) {
-      return new Dynamic(var1, this.write(var1, var2, var3));
+   protected abstract Codec<A> buildCodec();
+
+   public final <T> DataResult<T> write(DynamicOps<T> var1, A var2) {
+      return this.codec().encode(var2, var1, var1.empty());
    }
 
-   public final <T> Dynamic<T> writeDynamic(DynamicOps<T> var1, A var2) {
-      return new Dynamic(var1, this.write(var1, var2));
+   public final <T> DataResult<Dynamic<T>> writeDynamic(DynamicOps<T> var1, A var2) {
+      return this.write(var1, var2).map((var1x) -> {
+         return new Dynamic(var1, var1x);
+      });
    }
 
-   public <T> Pair<T, Optional<Typed<A>>> readTyped(Dynamic<T> var1) {
+   public <T> DataResult<Pair<Typed<A>, T>> readTyped(Dynamic<T> var1) {
       return this.readTyped(var1.getOps(), var1.getValue());
    }
 
-   public <T> Pair<T, Optional<Typed<A>>> readTyped(DynamicOps<T> var1, T var2) {
-      return this.read(var1, var2).mapSecond((var2x) -> {
-         return var2x.map((var2) -> {
+   public <T> DataResult<Pair<Typed<A>, T>> readTyped(DynamicOps<T> var1, T var2) {
+      return this.codec().decode(var1, var2).map((var2x) -> {
+         return var2x.mapFirst((var2) -> {
             return new Typed(this, var1, var2);
          });
       });
    }
 
-   public <T> Pair<T, Optional<?>> read(DynamicOps<T> var1, TypeRewriteRule var2, PointFreeRule var3, T var4) {
-      return this.read(var1, var4).mapSecond((var4x) -> {
-         return var4x.map((var4) -> {
+   public <T> DataResult<Pair<Optional<?>, T>> read(DynamicOps<T> var1, TypeRewriteRule var2, PointFreeRule var3, T var4) {
+      return this.codec().decode(var1, var4).map((var4x) -> {
+         return var4x.mapFirst((var4) -> {
             return this.rewrite(var2, var3).map((var2x) -> {
                return ((Function)var2x.view().function().evalCached().apply(var1)).apply(var4);
             });
          });
       });
    }
 
-   public <T> Optional<T> readAndWrite(DynamicOps<T> var1, Type<?> var2, TypeRewriteRule var3, PointFreeRule var4, T var5) {
-      Pair var6 = this.read(var1, var5);
-      return ((Optional)var6.getSecond()).flatMap((var6x) -> {
-         return this.rewrite(var3, var4).map((var5) -> {
-            return this.capWrite(var1, var2, var6.getFirst(), var6x, var5.view());
+   public <T> DataResult<T> readAndWrite(DynamicOps<T> var1, Type<?> var2, TypeRewriteRule var3, PointFreeRule var4, T var5) {
+      Optional var6 = this.rewrite(var3, var4);
+      if (!var6.isPresent()) {
+         return DataResult.error("Could not build a rewrite rule: " + var3 + " " + var4, var5);
+      } else {
+         View var7 = ((RewriteResult)var6.get()).view();
+         return this.codec().decode(var1, var5).flatMap((var4x) -> {
+            return this.capWrite(var1, var2, var4x.getSecond(), var4x.getFirst(), var7);
          });
-      });
+      }
    }
 
-   public <T, B> T capWrite(DynamicOps<T> var1, Type<?> var2, T var3, A var4, View<A, B> var5) {
-      if (!var2.equals(var5.newType(), true, true)) {
-         throw new IllegalStateException("Rewritten type doesn't match.");
-      } else {
-         return var5.newType().write(var1, var3, ((Function)var5.function().evalCached().apply(var1)).apply(var4));
-      }
+   private <T, B> DataResult<T> capWrite(DynamicOps<T> var1, Type<?> var2, T var3, A var4, View<A, B> var5) {
+      return !var2.equals(var5.newType(), true, true) ? DataResult.error("Rewritten type doesn't match") : var5.newType().codec().encode(((Function)var5.function().evalCached().apply(var1)).apply(var4), var1, var3);
    }
 
    public Optional<RewriteResult<A, ?>> rewrite(TypeRewriteRule var1, PointFreeRule var2) {
       Triple var3 = Triple.of(this, var1, var2);
       Optional var4 = (Optional)REWRITE_CACHE.get(var3);
       if (var4 != null) {
          return var4;
       } else {
-         AtomicReference var5 = new AtomicReference();
+         MutableObject var5 = new MutableObject();
          CompletableFuture var6 = (CompletableFuture)PENDING_REWRITE_CACHE.computeIfAbsent(var3, (var1x) -> {
             CompletableFuture var2 = new CompletableFuture();
-            var5.set(var2);
+            var5.setValue(var2);
             return var2;
          });
-         if (var5.get() != null) {
+         if (var5.getValue() != null) {
             Optional var7 = var1.rewrite(this).flatMap((var1x) -> {
                return var1x.view().rewrite(var2).map((var1) -> {
                   return RewriteResult.create(var1, var1x.recData());
                });
             });
