--- com/mojang/datafixers/types/templates/Tag.java
+++ com/mojang/datafixers/types/templates/Tag.java
@@ -5,23 +5,19 @@
 import com.mojang.datafixers.RewriteResult;
 import com.mojang.datafixers.TypeRewriteRule;
 import com.mojang.datafixers.TypedOptic;
 import com.mojang.datafixers.View;
 import com.mojang.datafixers.functions.Functions;
-import com.mojang.datafixers.types.DynamicOps;
 import com.mojang.datafixers.types.Type;
 import com.mojang.datafixers.types.families.RecursiveTypeFamily;
 import com.mojang.datafixers.types.families.TypeFamily;
 import com.mojang.datafixers.util.Either;
-import com.mojang.datafixers.util.Pair;
-import java.util.Map;
+import com.mojang.serialization.Codec;
+import com.mojang.serialization.DynamicOps;
 import java.util.Objects;
 import java.util.Optional;
-import java.util.Map.Entry;
-import java.util.function.Function;
 import java.util.function.IntFunction;
-import java.util.stream.Collectors;
 import javax.annotation.Nullable;
 
 public final class Tag implements TypeTemplate {
    private final String name;
    private final TypeTemplate element;
@@ -126,30 +122,14 @@
 
       public TypeTemplate buildTemplate() {
          return DSL.field(this.name, this.element.template());
       }
 
-      public <T> Pair<T, Optional<A>> read(DynamicOps<T> var1, T var2) {
-         Optional var3 = var1.getMapValues(var2);
-         Object var4 = var1.createString(this.name);
-         Object var5;
-         if (var3.isPresent() && (var5 = ((Map)var3.get()).get(var4)) != null) {
-            Optional var6 = (Optional)this.element.read(var1, var5).getSecond();
-            if (var6.isPresent()) {
-               return Pair.of(var1.createMap((Map)((Map)var3.get()).entrySet().stream().filter((var1x) -> {
-                  return !Objects.equals(var1x.getKey(), var4);
-               }).collect(Collectors.toMap(Entry::getKey, Entry::getValue))), var6);
-            }
-         }
-
-         return Pair.of(var2, Optional.empty());
+      protected Codec<A> buildCodec() {
+         return this.element.codec().fieldOf(this.name).codec();
       }
 
-      public <T> T write(DynamicOps<T> var1, T var2, A var3) {
-         return var1.mergeInto(var2, var1.createString(this.name), this.element.write(var1, var1.empty(), var3));
-      }
-
       public String toString() {
          return "Tag[\"" + this.name + "\", " + this.element + "]";
       }
 
       public boolean equals(Object var1, boolean var2, boolean var3) {
@@ -165,14 +145,10 @@
 
       public int hashCode() {
          return Objects.hash(new Object[]{this.name, this.element});
       }
 
-      public <A2> Tag.TagType<A2> map(Function<? super Type<A>, ? extends Type<A2>> var1) {
-         return new Tag.TagType(this.name, (Type)var1.apply(this.element));
-      }
-
       public Optional<Type<?>> findFieldTypeOpt(String var1) {
          return Objects.equals(var1, this.name) ? Optional.of(this.element) : Optional.empty();
       }
 
       public Optional<A> point(DynamicOps<?> var1) {
