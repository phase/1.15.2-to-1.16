--- com/mojang/datafixers/types/templates/Check.java
+++ com/mojang/datafixers/types/templates/Check.java
@@ -5,16 +5,20 @@
 import com.mojang.datafixers.RewriteResult;
 import com.mojang.datafixers.TypeRewriteRule;
 import com.mojang.datafixers.TypedOptic;
 import com.mojang.datafixers.functions.Functions;
 import com.mojang.datafixers.functions.PointFreeRule;
-import com.mojang.datafixers.types.DynamicOps;
 import com.mojang.datafixers.types.Type;
 import com.mojang.datafixers.types.families.RecursiveTypeFamily;
 import com.mojang.datafixers.types.families.TypeFamily;
 import com.mojang.datafixers.util.Either;
 import com.mojang.datafixers.util.Pair;
+import com.mojang.serialization.Codec;
+import com.mojang.serialization.DataResult;
+import com.mojang.serialization.Decoder;
+import com.mojang.serialization.DynamicOps;
+import com.mojang.serialization.Encoder;
 import java.util.Objects;
 import java.util.Optional;
 import java.util.function.IntFunction;
 import javax.annotation.Nullable;
 
@@ -96,16 +100,16 @@
          this.index = var2;
          this.expectedIndex = var3;
          this.delegate = var4;
       }
 
-      public <T> Pair<T, Optional<A>> read(DynamicOps<T> var1, T var2) {
-         return this.index != this.expectedIndex ? Pair.of(var2, Optional.empty()) : this.delegate.read(var1, var2);
+      protected Codec<A> buildCodec() {
+         return Codec.of((Encoder)this.delegate.codec(), (Decoder)(this::read));
       }
 
-      public <T> T write(DynamicOps<T> var1, T var2, A var3) {
-         return this.delegate.write(var1, var2, var3);
+      private <T> DataResult<Pair<A, T>> read(DynamicOps<T> var1, T var2) {
+         return this.index != this.expectedIndex ? DataResult.error("Index mismatch: " + this.index + " != " + this.expectedIndex) : this.delegate.codec().decode(var1, var2);
       }
 
       public static <A, B> RewriteResult<A, ?> fix(Check.CheckType<A> var0, RewriteResult<A, B> var1) {
          return Objects.equals(var1.view().function(), Functions.id()) ? RewriteResult.nop(var0) : opticView(var0, var1, wrapOptic(var0, TypedOptic.adapter(var1.view().type(), var1.view().newType())));
       }
