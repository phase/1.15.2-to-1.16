--- com/mojang/datafixers/types/templates/Const.java
+++ com/mojang/datafixers/types/templates/Const.java
@@ -10,10 +10,11 @@
 import com.mojang.datafixers.optics.profunctors.AffineP;
 import com.mojang.datafixers.optics.profunctors.Profunctor;
 import com.mojang.datafixers.types.Type;
 import com.mojang.datafixers.types.families.TypeFamily;
 import com.mojang.datafixers.util.Either;
+import com.mojang.serialization.Codec;
 import java.util.Objects;
 import java.util.function.IntFunction;
 import javax.annotation.Nullable;
 
 public final class Const implements TypeTemplate {
@@ -80,18 +81,29 @@
 
    public Type<?> type() {
       return this.type;
    }
 
-   public abstract static class ConstType<A> extends Type<A> {
-      public ConstType() {
+   public static final class PrimitiveType<A> extends Type<A> {
+      private final Codec<A> codec;
+
+      public PrimitiveType(Codec<A> var1) {
+         this.codec = var1;
       }
 
       public boolean equals(Object var1, boolean var2, boolean var3) {
          return this == var1;
       }
 
       public TypeTemplate buildTemplate() {
          return DSL.constType(this);
       }
+
+      protected Codec<A> buildCodec() {
+         return this.codec;
+      }
+
+      public String toString() {
+         return this.codec.toString();
+      }
    }
 }
