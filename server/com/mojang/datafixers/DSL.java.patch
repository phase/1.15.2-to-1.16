--- com/mojang/datafixers/DSL.java
+++ com/mojang/datafixers/DSL.java
@@ -2,21 +2,12 @@
 
 import com.google.common.collect.Maps;
 import com.mojang.datafixers.schemas.Schema;
 import com.mojang.datafixers.types.Func;
 import com.mojang.datafixers.types.Type;
-import com.mojang.datafixers.types.constant.BoolType;
-import com.mojang.datafixers.types.constant.ByteType;
-import com.mojang.datafixers.types.constant.DoubleType;
-import com.mojang.datafixers.types.constant.FloatType;
-import com.mojang.datafixers.types.constant.IntType;
-import com.mojang.datafixers.types.constant.LongType;
-import com.mojang.datafixers.types.constant.NamespacedStringType;
-import com.mojang.datafixers.types.constant.NilDrop;
-import com.mojang.datafixers.types.constant.NilSave;
-import com.mojang.datafixers.types.constant.ShortType;
-import com.mojang.datafixers.types.constant.StringType;
+import com.mojang.datafixers.types.constant.EmptyPart;
+import com.mojang.datafixers.types.constant.EmptyPartPassthrough;
 import com.mojang.datafixers.types.templates.Check;
 import com.mojang.datafixers.types.templates.CompoundList;
 import com.mojang.datafixers.types.templates.Const;
 import com.mojang.datafixers.types.templates.Hook;
 import com.mojang.datafixers.types.templates.List;
@@ -28,14 +19,15 @@
 import com.mojang.datafixers.types.templates.TaggedChoice;
 import com.mojang.datafixers.types.templates.TypeTemplate;
 import com.mojang.datafixers.util.Either;
 import com.mojang.datafixers.util.Pair;
 import com.mojang.datafixers.util.Unit;
+import com.mojang.serialization.Codec;
+import com.mojang.serialization.Dynamic;
 import java.util.Map;
 import java.util.function.Function;
 import java.util.function.Supplier;
-import java.util.stream.Collectors;
 import org.apache.commons.lang3.ArrayUtils;
 import org.apache.commons.lang3.tuple.Triple;
 
 public interface DSL {
    static Type<Boolean> bool() {
@@ -68,28 +60,24 @@
 
    static Type<String> string() {
       return DSL.Instances.STRING_TYPE;
    }
 
-   static Type<String> namespacedString() {
-      return DSL.Instances.NAMESPACED_STRING_TYPE;
+   static TypeTemplate emptyPart() {
+      return constType(DSL.Instances.EMPTY_PART);
    }
 
-   static TypeTemplate nil() {
-      return constType(DSL.Instances.NIL_DROP);
+   static Type<Unit> emptyPartType() {
+      return DSL.Instances.EMPTY_PART;
    }
 
-   static Type<Unit> nilType() {
-      return DSL.Instances.NIL_DROP;
-   }
-
    static TypeTemplate remainder() {
-      return constType(DSL.Instances.NIL_SAVE);
+      return constType(DSL.Instances.EMPTY_PASSTHROUGH);
    }
 
    static Type<Dynamic<?>> remainderType() {
-      return DSL.Instances.NIL_SAVE;
+      return DSL.Instances.EMPTY_PASSTHROUGH;
    }
 
    static TypeTemplate check(String var0, int var1, TypeTemplate var2) {
       return new Check(var0, var1, var2);
    }
@@ -197,29 +185,29 @@
    }
 
    static <K> TaggedChoice<K> taggedChoiceLazy(String var0, Type<K> var1, Map<K, Supplier<TypeTemplate>> var2) {
       return taggedChoice(var0, var1, (Map)var2.entrySet().stream().map((var0x) -> {
          return Pair.of(var0x.getKey(), ((Supplier)var0x.getValue()).get());
-      }).collect(Collectors.toMap(Pair::getFirst, Pair::getSecond)));
+      }).collect(Pair.toMap()));
    }
 
-   static <K> Type<Pair<K, ?>> taggedChoiceType(String var0, Type<K> var1, Map<K, Type<?>> var2) {
+   static <K> Type<Pair<K, ?>> taggedChoiceType(String var0, Type<K> var1, Map<K, ? extends Type<?>> var2) {
       return (Type)DSL.Instances.TAGGED_CHOICE_TYPE_CACHE.computeIfAbsent(Triple.of(var0, var1, var2), (var0x) -> {
          return new TaggedChoice.TaggedChoiceType((String)var0x.getLeft(), (Type)var0x.getMiddle(), (Map)var0x.getRight());
       });
    }
 
    static <A, B> Type<Function<A, B>> func(Type<A> var0, Type<B> var1) {
       return new Func(var0, var1);
    }
 
    static <A> Type<Either<A, Unit>> optional(Type<A> var0) {
-      return or(var0, nilType());
+      return or(var0, emptyPartType());
    }
 
    static TypeTemplate optional(TypeTemplate var0) {
-      return or(var0, nil());
+      return or(var0, emptyPart());
    }
 
    static TypeTemplate fields(String var0, TypeTemplate var1) {
       return allWithRemainder(field(var0, var1));
    }
@@ -299,30 +287,44 @@
    static <FT> OpticFinder<FT> namedChoice(String var0, Type<FT> var1) {
       return new NamedChoiceFinder(var0, var1);
    }
 
    static Unit unit() {
-      return null;
+      return Unit.INSTANCE;
    }
 
    public static final class Instances {
-      private static final Type<Boolean> BOOL_TYPE = new BoolType();
-      private static final Type<Integer> INT_TYPE = new IntType();
-      private static final Type<Long> LONG_TYPE = new LongType();
-      private static final Type<Byte> BYTE_TYPE = new ByteType();
-      private static final Type<Short> SHORT_TYPE = new ShortType();
-      private static final Type<Float> FLOAT_TYPE = new FloatType();
-      private static final Type<Double> DOUBLE_TYPE = new DoubleType();
-      private static final Type<String> STRING_TYPE = new StringType();
-      private static final Type<String> NAMESPACED_STRING_TYPE = new NamespacedStringType();
-      private static final Type<Unit> NIL_DROP = new NilDrop();
-      private static final Type<Dynamic<?>> NIL_SAVE = new NilSave();
-      private static final OpticFinder<Dynamic<?>> REMAINDER_FINDER = DSL.remainderType().finder();
-      private static final Map<Triple<String, Type<?>, Map<?, Type<?>>>, Type<? extends Pair<?, ?>>> TAGGED_CHOICE_TYPE_CACHE = Maps.newConcurrentMap();
+      private static final Type<Boolean> BOOL_TYPE;
+      private static final Type<Integer> INT_TYPE;
+      private static final Type<Long> LONG_TYPE;
+      private static final Type<Byte> BYTE_TYPE;
+      private static final Type<Short> SHORT_TYPE;
+      private static final Type<Float> FLOAT_TYPE;
+      private static final Type<Double> DOUBLE_TYPE;
+      private static final Type<String> STRING_TYPE;
+      private static final Type<Unit> EMPTY_PART;
+      private static final Type<Dynamic<?>> EMPTY_PASSTHROUGH;
+      private static final OpticFinder<Dynamic<?>> REMAINDER_FINDER;
+      private static final Map<Triple<String, Type<?>, Map<?, ? extends Type<?>>>, Type<? extends Pair<?, ?>>> TAGGED_CHOICE_TYPE_CACHE;
 
       public Instances() {
       }
+
+      static {
+         BOOL_TYPE = new Const.PrimitiveType(Codec.BOOL);
+         INT_TYPE = new Const.PrimitiveType(Codec.INT);
+         LONG_TYPE = new Const.PrimitiveType(Codec.LONG);
+         BYTE_TYPE = new Const.PrimitiveType(Codec.BYTE);
+         SHORT_TYPE = new Const.PrimitiveType(Codec.SHORT);
+         FLOAT_TYPE = new Const.PrimitiveType(Codec.FLOAT);
+         DOUBLE_TYPE = new Const.PrimitiveType(Codec.DOUBLE);
+         STRING_TYPE = new Const.PrimitiveType(Codec.STRING);
+         EMPTY_PART = new EmptyPart();
+         EMPTY_PASSTHROUGH = new EmptyPartPassthrough();
+         REMAINDER_FINDER = DSL.remainderType().finder();
+         TAGGED_CHOICE_TYPE_CACHE = Maps.newConcurrentMap();
+      }
    }
 
    public interface TypeReference {
       String typeName();
 
