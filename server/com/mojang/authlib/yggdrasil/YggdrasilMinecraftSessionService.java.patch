--- com/mojang/authlib/yggdrasil/YggdrasilMinecraftSessionService.java
+++ com/mojang/authlib/yggdrasil/YggdrasilMinecraftSessionService.java
@@ -5,10 +5,11 @@
 import com.google.common.cache.LoadingCache;
 import com.google.common.collect.Iterables;
 import com.google.gson.Gson;
 import com.google.gson.GsonBuilder;
 import com.google.gson.JsonParseException;
+import com.mojang.authlib.Environment;
 import com.mojang.authlib.GameProfile;
 import com.mojang.authlib.HttpAuthenticationService;
 import com.mojang.authlib.exceptions.AuthenticationException;
 import com.mojang.authlib.exceptions.AuthenticationUnavailableException;
 import com.mojang.authlib.minecraft.HttpMinecraftSessionService;
@@ -41,51 +42,54 @@
 import org.apache.logging.log4j.Logger;
 
 public class YggdrasilMinecraftSessionService extends HttpMinecraftSessionService {
    private static final String[] WHITELISTED_DOMAINS = new String[]{".minecraft.net", ".mojang.com"};
    private static final Logger LOGGER = LogManager.getLogger();
-   private static final String BASE_URL = "https://sessionserver.mojang.com/session/minecraft/";
-   private static final URL JOIN_URL = HttpAuthenticationService.constantURL("https://sessionserver.mojang.com/session/minecraft/join");
-   private static final URL CHECK_URL = HttpAuthenticationService.constantURL("https://sessionserver.mojang.com/session/minecraft/hasJoined");
+   private final String baseUrl;
+   private final URL joinUrl;
+   private final URL checkUrl;
    private final PublicKey publicKey;
    private final Gson gson = (new GsonBuilder()).registerTypeAdapter(UUID.class, new UUIDTypeAdapter()).create();
    private final LoadingCache<GameProfile, GameProfile> insecureProfiles;
 
-   protected YggdrasilMinecraftSessionService(YggdrasilAuthenticationService var1) {
+   protected YggdrasilMinecraftSessionService(YggdrasilAuthenticationService var1, Environment var2) {
       super(var1);
       this.insecureProfiles = CacheBuilder.newBuilder().expireAfterWrite(6L, TimeUnit.HOURS).build(new CacheLoader<GameProfile, GameProfile>() {
          public GameProfile load(GameProfile var1) throws Exception {
             return YggdrasilMinecraftSessionService.this.fillGameProfile(var1, false);
          }
       });
+      this.baseUrl = var2.getSessionHost() + "/session/minecraft/";
+      this.joinUrl = HttpAuthenticationService.constantURL(this.baseUrl + "join");
+      this.checkUrl = HttpAuthenticationService.constantURL(this.baseUrl + "hasJoined");
 
       try {
-         X509EncodedKeySpec var2 = new X509EncodedKeySpec(IOUtils.toByteArray(YggdrasilMinecraftSessionService.class.getResourceAsStream("/yggdrasil_session_pubkey.der")));
-         KeyFactory var3 = KeyFactory.getInstance("RSA");
-         this.publicKey = var3.generatePublic(var2);
-      } catch (Exception var4) {
+         X509EncodedKeySpec var3 = new X509EncodedKeySpec(IOUtils.toByteArray(YggdrasilMinecraftSessionService.class.getResourceAsStream("/yggdrasil_session_pubkey.der")));
+         KeyFactory var4 = KeyFactory.getInstance("RSA");
+         this.publicKey = var4.generatePublic(var3);
+      } catch (Exception var5) {
          throw new Error("Missing/invalid yggdrasil public key!");
       }
    }
 
    public void joinServer(GameProfile var1, String var2, String var3) throws AuthenticationException {
       JoinMinecraftServerRequest var4 = new JoinMinecraftServerRequest();
       var4.accessToken = var2;
       var4.selectedProfile = var1.getId();
       var4.serverId = var3;
-      this.getAuthenticationService().makeRequest(JOIN_URL, var4, Response.class);
+      this.getAuthenticationService().makeRequest(this.joinUrl, var4, Response.class);
    }
 
    public GameProfile hasJoinedServer(GameProfile var1, String var2, InetAddress var3) throws AuthenticationUnavailableException {
       HashMap var4 = new HashMap();
       var4.put("username", var1.getName());
       var4.put("serverId", var2);
       if (var3 != null) {
          var4.put("ip", var3.getHostAddress());
       }
 
-      URL var5 = HttpAuthenticationService.concatenateURL(CHECK_URL, HttpAuthenticationService.buildQuery(var4));
+      URL var5 = HttpAuthenticationService.concatenateURL(this.checkUrl, HttpAuthenticationService.buildQuery(var4));
 
       try {
          HasJoinedMinecraftServerResponse var6 = (HasJoinedMinecraftServerResponse)this.getAuthenticationService().makeRequest(var5, (Object)null, HasJoinedMinecraftServerResponse.class);
          if (var6 != null && var6.getId() != null) {
             GameProfile var7 = new GameProfile(var6.getId(), var1.getName());
@@ -158,11 +162,11 @@
       }
    }
 
    protected GameProfile fillGameProfile(GameProfile var1, boolean var2) {
       try {
-         URL var3 = HttpAuthenticationService.constantURL("https://sessionserver.mojang.com/session/minecraft/profile/" + UUIDTypeAdapter.fromUUID(var1.getId()));
+         URL var3 = HttpAuthenticationService.constantURL(this.baseUrl + "profile/" + UUIDTypeAdapter.fromUUID(var1.getId()));
          var3 = HttpAuthenticationService.concatenateURL(var3, "unsigned=" + !var2);
          MinecraftProfilePropertiesResponse var4 = (MinecraftProfilePropertiesResponse)this.getAuthenticationService().makeRequest(var3, (Object)null, MinecraftProfilePropertiesResponse.class);
          if (var4 == null) {
             LOGGER.debug("Couldn't fetch profile properties for " + var1 + " as the profile does not exist");
             return var1;
