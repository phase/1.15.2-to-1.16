--- com/mojang/authlib/yggdrasil/YggdrasilUserAuthentication.java
+++ com/mojang/authlib/yggdrasil/YggdrasilUserAuthentication.java
@@ -1,8 +1,9 @@
 package com.mojang.authlib.yggdrasil;
 
 import com.mojang.authlib.Agent;
+import com.mojang.authlib.Environment;
 import com.mojang.authlib.GameProfile;
 import com.mojang.authlib.HttpAuthenticationService;
 import com.mojang.authlib.HttpUserAuthentication;
 import com.mojang.authlib.UserType;
 import com.mojang.authlib.exceptions.AuthenticationException;
@@ -22,25 +23,34 @@
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
 public class YggdrasilUserAuthentication extends HttpUserAuthentication {
    private static final Logger LOGGER = LogManager.getLogger();
-   private static final String BASE_URL = "https://authserver.mojang.com/";
-   private static final URL ROUTE_AUTHENTICATE = HttpAuthenticationService.constantURL("https://authserver.mojang.com/authenticate");
-   private static final URL ROUTE_REFRESH = HttpAuthenticationService.constantURL("https://authserver.mojang.com/refresh");
-   private static final URL ROUTE_VALIDATE = HttpAuthenticationService.constantURL("https://authserver.mojang.com/validate");
-   private static final URL ROUTE_INVALIDATE = HttpAuthenticationService.constantURL("https://authserver.mojang.com/invalidate");
-   private static final URL ROUTE_SIGNOUT = HttpAuthenticationService.constantURL("https://authserver.mojang.com/signout");
+   private final URL routeAuthenticate;
+   private final URL routeRefresh;
+   private final URL routeValidate;
+   private final URL routeInvalidate;
+   private final URL routeSignout;
    private static final String STORAGE_KEY_ACCESS_TOKEN = "accessToken";
    private final Agent agent;
    private GameProfile[] profiles;
    private String accessToken;
    private boolean isOnline;
 
    public YggdrasilUserAuthentication(YggdrasilAuthenticationService var1, Agent var2) {
+      this(var1, var2, YggdrasilEnvironment.PROD);
+   }
+
+   public YggdrasilUserAuthentication(YggdrasilAuthenticationService var1, Agent var2, Environment var3) {
       super(var1);
       this.agent = var2;
+      LOGGER.info("Environment: " + var3.getName(), ". AuthHost: " + var3.getAuthHost());
+      this.routeAuthenticate = HttpAuthenticationService.constantURL(var3.getAuthHost() + "/authenticate");
+      this.routeRefresh = HttpAuthenticationService.constantURL(var3.getAuthHost() + "/refresh");
+      this.routeValidate = HttpAuthenticationService.constantURL(var3.getAuthHost() + "/validate");
+      this.routeInvalidate = HttpAuthenticationService.constantURL(var3.getAuthHost() + "/invalidate");
+      this.routeSignout = HttpAuthenticationService.constantURL(var3.getAuthHost() + "/signout");
    }
 
    public boolean canLogIn() {
       return !this.canPlayOnline() && StringUtils.isNotBlank(this.getUsername()) && (StringUtils.isNotBlank(this.getPassword()) || StringUtils.isNotBlank(this.getAuthenticatedToken()));
    }
@@ -68,11 +78,11 @@
       } else if (StringUtils.isBlank(this.getPassword())) {
          throw new InvalidCredentialsException("Invalid password");
       } else {
          LOGGER.info("Logging in with username & password");
          AuthenticationRequest var1 = new AuthenticationRequest(this, this.getUsername(), this.getPassword());
-         AuthenticationResponse var2 = (AuthenticationResponse)this.getAuthenticationService().makeRequest(ROUTE_AUTHENTICATE, var1, AuthenticationResponse.class);
+         AuthenticationResponse var2 = (AuthenticationResponse)this.getAuthenticationService().makeRequest(this.routeAuthenticate, var1, AuthenticationResponse.class);
          if (!var2.getClientToken().equals(this.getAuthenticationService().getClientToken())) {
             throw new AuthenticationException("Server requested we change our client token. Don't know how to handle this!");
          } else {
             if (var2.getSelectedProfile() != null) {
                this.setUserType(var2.getSelectedProfile().isLegacy() ? UserType.LEGACY : UserType.MOJANG);
@@ -122,11 +132,11 @@
          if (this.checkTokenValidity()) {
             LOGGER.debug("Skipping refresh call as we're safely logged in.");
             this.isOnline = true;
          } else {
             RefreshRequest var1 = new RefreshRequest(this);
-            RefreshResponse var2 = (RefreshResponse)this.getAuthenticationService().makeRequest(ROUTE_REFRESH, var1, RefreshResponse.class);
+            RefreshResponse var2 = (RefreshResponse)this.getAuthenticationService().makeRequest(this.routeRefresh, var1, RefreshResponse.class);
             if (!var2.getClientToken().equals(this.getAuthenticationService().getClientToken())) {
                throw new AuthenticationException("Server requested we change our client token. Don't know how to handle this!");
             } else {
                if (var2.getSelectedProfile() != null) {
                   this.setUserType(var2.getSelectedProfile().isLegacy() ? UserType.LEGACY : UserType.MOJANG);
@@ -153,11 +163,11 @@
 
    protected boolean checkTokenValidity() throws AuthenticationException {
       ValidateRequest var1 = new ValidateRequest(this);
 
       try {
-         this.getAuthenticationService().makeRequest(ROUTE_VALIDATE, var1, Response.class);
+         this.getAuthenticationService().makeRequest(this.routeValidate, var1, Response.class);
          return true;
       } catch (AuthenticationException var3) {
          return false;
       }
    }
@@ -186,11 +196,11 @@
          throw new AuthenticationException("Cannot change game profile whilst not logged in");
       } else if (this.getSelectedProfile() != null) {
          throw new AuthenticationException("Cannot change game profile. You must log out and back in.");
       } else if (var1 != null && ArrayUtils.contains(this.profiles, var1)) {
          RefreshRequest var2 = new RefreshRequest(this, var1);
-         RefreshResponse var3 = (RefreshResponse)this.getAuthenticationService().makeRequest(ROUTE_REFRESH, var2, RefreshResponse.class);
+         RefreshResponse var3 = (RefreshResponse)this.getAuthenticationService().makeRequest(this.routeRefresh, var2, RefreshResponse.class);
          if (!var3.getClientToken().equals(this.getAuthenticationService().getClientToken())) {
             throw new AuthenticationException("Server requested we change our client token. Don't know how to handle this!");
          } else {
             this.isOnline = true;
             this.accessToken = var3.getAccessToken();
