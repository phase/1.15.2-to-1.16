--- net/minecraft/tags/StaticTagHelper.java
+++ net/minecraft/tags/StaticTagHelper.java
@@ -1,0 +1,82 @@
+package net.minecraft.tags;
+
+import com.google.common.collect.ImmutableSet;
+import com.google.common.collect.Lists;
+import com.google.common.collect.Sets;
+import java.util.List;
+import java.util.Optional;
+import java.util.Set;
+import java.util.function.Function;
+import java.util.stream.Collectors;
+import javax.annotation.Nullable;
+import net.minecraft.resources.ResourceLocation;
+
+public class StaticTagHelper<T> {
+   private final TagCollection<T> empty = new TagCollection((var0) -> {
+      return Optional.empty();
+   }, "", "");
+   private TagCollection<T> source;
+   private final List<StaticTagHelper.Wrapper<T>> wrappers;
+
+   public StaticTagHelper() {
+      this.source = this.empty;
+      this.wrappers = Lists.newArrayList();
+   }
+
+   public Tag.Named<T> bind(String var1) {
+      StaticTagHelper.Wrapper var2 = new StaticTagHelper.Wrapper(new ResourceLocation(var1));
+      this.wrappers.add(var2);
+      return var2;
+   }
+
+   public void reset(TagCollection<T> var1) {
+      this.source = var1;
+      this.wrappers.forEach((var1x) -> {
+         var1x.rebind(var1::getTag);
+      });
+   }
+
+   public TagCollection<T> getAllTags() {
+      return this.source;
+   }
+
+   public Set<ResourceLocation> getMissingTags(TagCollection<T> var1) {
+      Set var2 = (Set)this.wrappers.stream().map(StaticTagHelper.Wrapper::getName).collect(Collectors.toSet());
+      ImmutableSet var3 = ImmutableSet.copyOf(var1.getAvailableTags());
+      return Sets.difference(var2, var3);
+   }
+
+   static class Wrapper<T> implements Tag.Named<T> {
+      @Nullable
+      private Tag<T> tag;
+      protected final ResourceLocation name;
+
+      private Wrapper(ResourceLocation var1) {
+         this.name = var1;
+      }
+
+      public ResourceLocation getName() {
+         return this.name;
+      }
+
+      private Tag<T> resolve() {
+         if (this.tag == null) {
+            throw new IllegalStateException("Tag " + this.name + " used before it was bound");
+         } else {
+            return this.tag;
+         }
+      }
+
+      void rebind(Function<ResourceLocation, Tag<T>> var1) {
+         this.tag = (Tag)var1.apply(this.name);
+      }
+
+      public boolean contains(T var1) {
+         return this.resolve().contains(var1);
+      }
+
+      public List<T> getValues() {
+         return this.resolve().getValues();
+      }
+   }
+}
