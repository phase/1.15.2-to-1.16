--- net/minecraft/world/item/WrittenBookItem.java
+++ net/minecraft/world/item/WrittenBookItem.java
@@ -7,10 +7,11 @@
 import net.minecraft.nbt.ListTag;
 import net.minecraft.nbt.StringTag;
 import net.minecraft.nbt.Tag;
 import net.minecraft.network.chat.Component;
 import net.minecraft.network.chat.ComponentUtils;
+import net.minecraft.network.chat.MutableComponent;
 import net.minecraft.network.chat.TextComponent;
 import net.minecraft.stats.Stats;
 import net.minecraft.util.StringUtil;
 import net.minecraft.world.InteractionHand;
 import net.minecraft.world.InteractionResult;
@@ -60,22 +61,22 @@
 
    public InteractionResult useOn(UseOnContext var1) {
       Level var2 = var1.getLevel();
       BlockPos var3 = var1.getClickedPos();
       BlockState var4 = var2.getBlockState(var3);
-      if (var4.getBlock() == Blocks.LECTERN) {
-         return LecternBlock.tryPlaceBook(var2, var3, var4, var1.getItemInHand()) ? InteractionResult.SUCCESS : InteractionResult.PASS;
+      if (var4.is(Blocks.LECTERN)) {
+         return LecternBlock.tryPlaceBook(var2, var3, var4, var1.getItemInHand()) ? InteractionResult.sidedSuccess(var2.isClientSide) : InteractionResult.PASS;
       } else {
          return InteractionResult.PASS;
       }
    }
 
    public InteractionResultHolder<ItemStack> use(Level var1, Player var2, InteractionHand var3) {
       ItemStack var4 = var2.getItemInHand(var3);
       var2.openItemGui(var4, var3);
       var2.awardStat(Stats.ITEM_USED.get(this));
-      return InteractionResultHolder.success(var4);
+      return InteractionResultHolder.sidedSuccess(var4, var1.isClientSide());
    }
 
    public static boolean resolveBookComponents(ItemStack var0, @Nullable CommandSourceStack var1, @Nullable Player var2) {
       CompoundTag var3 = var0.getTag();
       if (var3 != null && !var3.getBoolean("resolved")) {
@@ -88,11 +89,11 @@
             for(int var5 = 0; var5 < var4.size(); ++var5) {
                String var6 = var4.getString(var5);
 
                Object var7;
                try {
-                  Component var10 = Component.Serializer.fromJsonLenient(var6);
+                  MutableComponent var10 = Component.Serializer.fromJsonLenient(var6);
                   var7 = ComponentUtils.updateForEntity(var1, var10, var2, 0);
                } catch (Exception var9) {
                   var7 = new TextComponent(var6);
                }
 
