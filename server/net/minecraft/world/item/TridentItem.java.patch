--- net/minecraft/world/item/TridentItem.java
+++ net/minecraft/world/item/TridentItem.java
@@ -1,10 +1,10 @@
 package net.minecraft.world.item;
 
+import com.google.common.collect.ImmutableMultimap;
 import com.google.common.collect.Multimap;
 import net.minecraft.core.BlockPos;
-import net.minecraft.resources.ResourceLocation;
 import net.minecraft.sounds.SoundEvent;
 import net.minecraft.sounds.SoundEvents;
 import net.minecraft.sounds.SoundSource;
 import net.minecraft.stats.Stats;
 import net.minecraft.util.Mth;
@@ -12,26 +12,30 @@
 import net.minecraft.world.InteractionResultHolder;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EquipmentSlot;
 import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.MoverType;
+import net.minecraft.world.entity.ai.attributes.Attribute;
 import net.minecraft.world.entity.ai.attributes.AttributeModifier;
-import net.minecraft.world.entity.monster.SharedMonsterAttributes;
+import net.minecraft.world.entity.ai.attributes.Attributes;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.entity.projectile.AbstractArrow;
 import net.minecraft.world.entity.projectile.ThrownTrident;
 import net.minecraft.world.item.enchantment.EnchantmentHelper;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.phys.Vec3;
 
-public class TridentItem extends Item {
+public class TridentItem extends Item implements Vanishable {
+   private final Multimap<Attribute, AttributeModifier> defaultModifiers;
+
    public TridentItem(Item.Properties var1) {
       super(var1);
-      this.addProperty(new ResourceLocation("throwing"), (var0, var1x, var2) -> {
-         return var2 != null && var2.isUsingItem() && var2.getUseItem() == var0 ? 1.0F : 0.0F;
-      });
+      ImmutableMultimap.Builder var2 = ImmutableMultimap.builder();
+      var2.put(Attributes.ATTACK_DAMAGE, new AttributeModifier(BASE_ATTACK_DAMAGE_UUID, "Tool modifier", 8.0D, AttributeModifier.Operation.ADDITION));
+      var2.put(Attributes.ATTACK_SPEED, new AttributeModifier(BASE_ATTACK_SPEED_UUID, "Tool modifier", -2.9000000953674316D, AttributeModifier.Operation.ADDITION));
+      this.defaultModifiers = var2.build();
    }
 
    public boolean canAttackBlock(BlockState var1, Level var2, BlockPos var3, Player var4) {
       return !var4.isCreative();
    }
@@ -82,11 +86,11 @@
                   var10 *= var14 / var13;
                   var11 *= var14 / var13;
                   var12 *= var14 / var13;
                   var5.push((double)var10, (double)var11, (double)var12);
                   var5.startAutoSpinAttack(20);
-                  if (var5.onGround) {
+                  if (var5.isOnGround()) {
                      float var15 = 1.1999999F;
                      var5.move(MoverType.SELF, new Vec3(0.0D, 1.1999999284744263D, 0.0D));
                   }
 
                   SoundEvent var17;
@@ -133,18 +137,12 @@
       }
 
       return true;
    }
 
-   public Multimap<String, AttributeModifier> getDefaultAttributeModifiers(EquipmentSlot var1) {
-      Multimap var2 = super.getDefaultAttributeModifiers(var1);
-      if (var1 == EquipmentSlot.MAINHAND) {
-         var2.put(SharedMonsterAttributes.ATTACK_DAMAGE.getName(), new AttributeModifier(BASE_ATTACK_DAMAGE_UUID, "Tool modifier", 8.0D, AttributeModifier.Operation.ADDITION));
-         var2.put(SharedMonsterAttributes.ATTACK_SPEED.getName(), new AttributeModifier(BASE_ATTACK_SPEED_UUID, "Tool modifier", -2.9000000953674316D, AttributeModifier.Operation.ADDITION));
-      }
-
-      return var2;
+   public Multimap<Attribute, AttributeModifier> getDefaultAttributeModifiers(EquipmentSlot var1) {
+      return var1 == EquipmentSlot.MAINHAND ? this.defaultModifiers : super.getDefaultAttributeModifiers(var1);
    }
 
    public int getEnchantmentValue() {
       return 1;
    }
