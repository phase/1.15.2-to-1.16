--- net/minecraft/world/item/ItemStack.java
+++ net/minecraft/world/item/ItemStack.java
@@ -3,29 +3,36 @@
 import com.google.common.collect.HashMultimap;
 import com.google.common.collect.Multimap;
 import com.google.gson.JsonParseException;
 import com.mojang.brigadier.StringReader;
 import com.mojang.brigadier.exceptions.CommandSyntaxException;
+import com.mojang.datafixers.util.Function3;
+import com.mojang.serialization.Codec;
+import com.mojang.serialization.codecs.RecordCodecBuilder;
 import java.text.DecimalFormat;
 import java.text.DecimalFormatSymbols;
 import java.util.Locale;
 import java.util.Objects;
+import java.util.Optional;
 import java.util.Random;
 import java.util.function.Consumer;
 import java.util.function.Predicate;
 import javax.annotation.Nullable;
 import net.minecraft.ChatFormatting;
+import net.minecraft.Util;
 import net.minecraft.advancements.CriteriaTriggers;
 import net.minecraft.commands.arguments.blocks.BlockPredicateArgument;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Registry;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.ListTag;
 import net.minecraft.nbt.Tag;
 import net.minecraft.network.chat.Component;
 import net.minecraft.network.chat.ComponentUtils;
 import net.minecraft.network.chat.HoverEvent;
+import net.minecraft.network.chat.MutableComponent;
+import net.minecraft.network.chat.Style;
 import net.minecraft.network.chat.TextComponent;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.sounds.SoundEvent;
 import net.minecraft.stats.Stats;
@@ -34,13 +41,13 @@
 import net.minecraft.world.InteractionResult;
 import net.minecraft.world.InteractionResultHolder;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EquipmentSlot;
 import net.minecraft.world.entity.LivingEntity;
+import net.minecraft.world.entity.ai.attributes.Attribute;
 import net.minecraft.world.entity.ai.attributes.AttributeModifier;
 import net.minecraft.world.entity.decoration.ItemFrame;
-import net.minecraft.world.entity.monster.SharedMonsterAttributes;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.item.enchantment.DigDurabilityEnchantment;
 import net.minecraft.world.item.enchantment.Enchantment;
 import net.minecraft.world.item.enchantment.EnchantmentHelper;
 import net.minecraft.world.item.enchantment.Enchantments;
@@ -50,35 +57,46 @@
 import net.minecraft.world.level.block.state.pattern.BlockInWorld;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
 public final class ItemStack {
+   public static final Codec<ItemStack> CODEC = RecordCodecBuilder.create((var0) -> {
+      return var0.group(Registry.ITEM.fieldOf("id").forGetter((var0x) -> {
+         return var0x.item;
+      }), Codec.INT.fieldOf("Count").forGetter((var0x) -> {
+         return var0x.count;
+      }), CompoundTag.CODEC.optionalFieldOf("tag").forGetter((var0x) -> {
+         return Optional.ofNullable(var0x.tag);
+      })).apply(var0, (Function3)(ItemStack::new));
+   });
    private static final Logger LOGGER = LogManager.getLogger();
    public static final ItemStack EMPTY = new ItemStack((Item)null);
-   public static final DecimalFormat ATTRIBUTE_MODIFIER_FORMAT = getAttributeDecimalFormat();
+   public static final DecimalFormat ATTRIBUTE_MODIFIER_FORMAT = (DecimalFormat)Util.make(new DecimalFormat("#.##"), (var0) -> {
+      var0.setDecimalFormatSymbols(DecimalFormatSymbols.getInstance(Locale.ROOT));
+   });
+   private static final Style LORE_STYLE;
    private int count;
    private int popTime;
    @Deprecated
    private final Item item;
    private CompoundTag tag;
    private boolean emptyCacheFlag;
-   private ItemFrame frame;
+   private Entity entityRepresentation;
    private BlockInWorld cachedBreakBlock;
    private boolean cachedBreakBlockResult;
    private BlockInWorld cachedPlaceBlock;
    private boolean cachedPlaceBlockResult;
 
-   private static DecimalFormat getAttributeDecimalFormat() {
-      DecimalFormat var0 = new DecimalFormat("#.##");
-      var0.setDecimalFormatSymbols(DecimalFormatSymbols.getInstance(Locale.ROOT));
-      return var0;
-   }
-
    public ItemStack(ItemLike var1) {
       this(var1, 1);
    }
 
+   private ItemStack(ItemLike var1, int var2, Optional<CompoundTag> var3) {
+      this(var1, var2);
+      var3.ifPresent(this::setTag);
+   }
+
    public ItemStack(ItemLike var1, int var2) {
       this.item = var1 == null ? null : var1.asItem();
       this.count = var2;
       if (this.item != null && this.item.canBeDepleted()) {
          this.setDamageValue(this.getDamageValue());
@@ -145,11 +163,11 @@
       if (var2 != null && !var2.abilities.mayBuild && !this.hasAdventureModePlaceTagForBlock(var1.getLevel().getTagManager(), var4)) {
          return InteractionResult.PASS;
       } else {
          Item var5 = this.getItem();
          InteractionResult var6 = var5.useOn(var1);
-         if (var2 != null && var6 == InteractionResult.SUCCESS) {
+         if (var2 != null && var6.consumesAction()) {
             var2.awardStat(Stats.ITEM_USED.get(var5));
          }
 
          return var6;
       }
@@ -274,12 +292,12 @@
          var4.awardStat(Stats.ITEM_USED.get(var5));
       }
 
    }
 
-   public boolean canDestroySpecial(BlockState var1) {
-      return this.getItem().canDestroySpecial(var1);
+   public boolean isCorrectToolForDrops(BlockState var1) {
+      return this.getItem().isCorrectToolForDrops(var1);
    }
 
    public boolean interactEnemy(Player var1, LivingEntity var2, InteractionHand var3) {
       return this.getItem().interactEnemy(this, var1, var2, var3);
    }
@@ -456,11 +474,11 @@
 
    public Component getHoverName() {
       CompoundTag var1 = this.getTagElement("display");
       if (var1 != null && var1.contains("Name", 8)) {
          try {
-            Component var2 = Component.Serializer.fromJson(var1.getString("Name"));
+            MutableComponent var2 = Component.Serializer.fromJson(var1.getString("Name"));
             if (var2 != null) {
                return var2;
             }
 
             var1.remove("Name");
@@ -543,80 +561,86 @@
    public void addTagElement(String var1, Tag var2) {
       this.getOrCreateTag().put(var1, var2);
    }
 
    public boolean isFramed() {
-      return this.frame != null;
+      return this.entityRepresentation instanceof ItemFrame;
    }
 
-   public void setFramed(@Nullable ItemFrame var1) {
-      this.frame = var1;
+   public void setEntityRepresentation(@Nullable Entity var1) {
+      this.entityRepresentation = var1;
    }
 
    @Nullable
    public ItemFrame getFrame() {
-      return this.emptyCacheFlag ? null : this.frame;
+      return this.entityRepresentation instanceof ItemFrame ? (ItemFrame)this.getEntityRepresentation() : null;
    }
 
+   @Nullable
+   public Entity getEntityRepresentation() {
+      return !this.emptyCacheFlag ? this.entityRepresentation : null;
+   }
+
    public int getBaseRepairCost() {
       return this.hasTag() && this.tag.contains("RepairCost", 3) ? this.tag.getInt("RepairCost") : 0;
    }
 
    public void setRepairCost(int var1) {
       this.getOrCreateTag().putInt("RepairCost", var1);
    }
 
-   public Multimap<String, AttributeModifier> getAttributeModifiers(EquipmentSlot var1) {
+   public Multimap<Attribute, AttributeModifier> getAttributeModifiers(EquipmentSlot var1) {
       Object var2;
       if (this.hasTag() && this.tag.contains("AttributeModifiers", 9)) {
          var2 = HashMultimap.create();
          ListTag var3 = this.tag.getList("AttributeModifiers", 10);
 
          for(int var4 = 0; var4 < var3.size(); ++var4) {
             CompoundTag var5 = var3.getCompound(var4);
-            AttributeModifier var6 = SharedMonsterAttributes.loadAttributeModifier(var5);
-            if (var6 != null && (!var5.contains("Slot", 8) || var5.getString("Slot").equals(var1.getName())) && var6.getId().getLeastSignificantBits() != 0L && var6.getId().getMostSignificantBits() != 0L) {
-               ((Multimap)var2).put(var5.getString("AttributeName"), var6);
+            if (!var5.contains("Slot", 8) || var5.getString("Slot").equals(var1.getName())) {
+               Optional var6 = Registry.ATTRIBUTES.getOptional(ResourceLocation.tryParse(var5.getString("AttributeName")));
+               if (var6.isPresent()) {
+                  AttributeModifier var7 = AttributeModifier.load(var5);
+                  if (var7 != null && var7.getId().getLeastSignificantBits() != 0L && var7.getId().getMostSignificantBits() != 0L) {
+                     ((Multimap)var2).put(var6.get(), var7);
+                  }
+               }
             }
          }
       } else {
          var2 = this.getItem().getDefaultAttributeModifiers(var1);
       }
 
-      ((Multimap)var2).values().forEach((var0) -> {
-         var0.setSerialize(false);
-      });
       return (Multimap)var2;
    }
 
-   public void addAttributeModifier(String var1, AttributeModifier var2, @Nullable EquipmentSlot var3) {
+   public void addAttributeModifier(Attribute var1, AttributeModifier var2, @Nullable EquipmentSlot var3) {
       this.getOrCreateTag();
       if (!this.tag.contains("AttributeModifiers", 9)) {
          this.tag.put("AttributeModifiers", new ListTag());
       }
 
       ListTag var4 = this.tag.getList("AttributeModifiers", 10);
-      CompoundTag var5 = SharedMonsterAttributes.saveAttributeModifier(var2);
-      var5.putString("AttributeName", var1);
+      CompoundTag var5 = var2.save();
+      var5.putString("AttributeName", Registry.ATTRIBUTES.getKey(var1).toString());
       if (var3 != null) {
          var5.putString("Slot", var3.getName());
       }
 
       var4.add(var5);
    }
 
    public Component getDisplayName() {
-      Component var1 = (new TextComponent("")).append(this.getHoverName());
+      MutableComponent var1 = (new TextComponent("")).append(this.getHoverName());
       if (this.hasCustomHoverName()) {
          var1.withStyle(ChatFormatting.ITALIC);
       }
 
-      Component var2 = ComponentUtils.wrapInSquareBrackets(var1);
+      MutableComponent var2 = ComponentUtils.wrapInSquareBrackets(var1);
       if (!this.emptyCacheFlag) {
-         CompoundTag var3 = this.save(new CompoundTag());
          var2.withStyle(this.getRarity().color).withStyle((var1x) -> {
-            var1x.setHoverEvent(new HoverEvent(HoverEvent.Action.SHOW_ITEM, new TextComponent(var3.toString())));
+            return var1x.withHoverEvent(new HoverEvent(HoverEvent.Action.SHOW_ITEM, new HoverEvent.ItemStackInfo(this)));
          });
       }
 
       return var2;
    }
@@ -725,6 +749,10 @@
    }
 
    public SoundEvent getEatingSound() {
       return this.getItem().getEatingSound();
    }
+
+   static {
+      LORE_STYLE = Style.EMPTY.withColor(ChatFormatting.DARK_PURPLE).withItalic(true);
+   }
 }
