--- net/minecraft/world/item/ArmorItem.java
+++ net/minecraft/world/item/ArmorItem.java
@@ -1,7 +1,8 @@
 package net.minecraft.world.item;
 
+import com.google.common.collect.ImmutableMultimap;
 import com.google.common.collect.Multimap;
 import java.util.List;
 import java.util.UUID;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.BlockSource;
@@ -12,28 +13,31 @@
 import net.minecraft.world.InteractionResultHolder;
 import net.minecraft.world.entity.EntitySelector;
 import net.minecraft.world.entity.EquipmentSlot;
 import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.Mob;
+import net.minecraft.world.entity.ai.attributes.Attribute;
 import net.minecraft.world.entity.ai.attributes.AttributeModifier;
-import net.minecraft.world.entity.monster.SharedMonsterAttributes;
+import net.minecraft.world.entity.ai.attributes.Attributes;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.block.DispenserBlock;
 import net.minecraft.world.phys.AABB;
 
-public class ArmorItem extends Item {
+public class ArmorItem extends Item implements Wearable {
    private static final UUID[] ARMOR_MODIFIER_UUID_PER_SLOT = new UUID[]{UUID.fromString("845DB27C-C624-495F-8C9F-6020A9A58B6B"), UUID.fromString("D8499B04-0E66-4726-AB29-64469D734E0D"), UUID.fromString("9F3D476D-C118-4544-8365-64846904B48E"), UUID.fromString("2AD3F246-FEE1-4E67-B886-69FD380BB150")};
    public static final DispenseItemBehavior DISPENSE_ITEM_BEHAVIOR = new DefaultDispenseItemBehavior() {
       protected ItemStack execute(BlockSource var1, ItemStack var2) {
          return ArmorItem.dispenseArmor(var1, var2) ? var2 : super.execute(var1, var2);
       }
    };
    protected final EquipmentSlot slot;
-   protected final int defense;
-   protected final float toughness;
+   private final int defense;
+   private final float toughness;
+   protected final float knockbackResistance;
    protected final ArmorMaterial material;
+   private final Multimap<Attribute, AttributeModifier> defaultModifiers;
 
    public static boolean dispenseArmor(BlockSource var0, ItemStack var1) {
       BlockPos var2 = var0.getPos().relative((Direction)var0.getBlockState().getValue(DispenserBlock.FACING));
       List var3 = var0.getLevel().getEntitiesOfClass(LivingEntity.class, new AABB(var2), EntitySelector.NO_SPECTATORS.and(new EntitySelector.MobCanWearArmourEntitySelector(var1)));
       if (var3.isEmpty()) {
@@ -56,11 +60,21 @@
       super(var3.defaultDurability(var1.getDurabilityForSlot(var2)));
       this.material = var1;
       this.slot = var2;
       this.defense = var1.getDefenseForSlot(var2);
       this.toughness = var1.getToughness();
+      this.knockbackResistance = var1.getKnockbackResistance();
       DispenserBlock.registerBehavior(this, DISPENSE_ITEM_BEHAVIOR);
+      ImmutableMultimap.Builder var4 = ImmutableMultimap.builder();
+      UUID var5 = ARMOR_MODIFIER_UUID_PER_SLOT[var2.getIndex()];
+      var4.put(Attributes.ARMOR, new AttributeModifier(var5, "Armor modifier", (double)this.defense, AttributeModifier.Operation.ADDITION));
+      var4.put(Attributes.ARMOR_TOUGHNESS, new AttributeModifier(var5, "Armor toughness", (double)this.toughness, AttributeModifier.Operation.ADDITION));
+      if (var1 == ArmorMaterials.NETHERITE) {
+         var4.put(Attributes.KNOCKBACK_RESISTANCE, new AttributeModifier(var5, "Armor knockback resistance", (double)this.knockbackResistance, AttributeModifier.Operation.ADDITION));
+      }
+
+      this.defaultModifiers = var4.build();
    }
 
    public EquipmentSlot getSlot() {
       return this.slot;
    }
@@ -82,25 +96,23 @@
       EquipmentSlot var5 = Mob.getEquipmentSlotForItem(var4);
       ItemStack var6 = var2.getItemBySlot(var5);
       if (var6.isEmpty()) {
          var2.setItemSlot(var5, var4.copy());
          var4.setCount(0);
-         return InteractionResultHolder.success(var4);
+         return InteractionResultHolder.sidedSuccess(var4, var1.isClientSide());
       } else {
          return InteractionResultHolder.fail(var4);
       }
    }
 
-   public Multimap<String, AttributeModifier> getDefaultAttributeModifiers(EquipmentSlot var1) {
-      Multimap var2 = super.getDefaultAttributeModifiers(var1);
-      if (var1 == this.slot) {
-         var2.put(SharedMonsterAttributes.ARMOR.getName(), new AttributeModifier(ARMOR_MODIFIER_UUID_PER_SLOT[var1.getIndex()], "Armor modifier", (double)this.defense, AttributeModifier.Operation.ADDITION));
-         var2.put(SharedMonsterAttributes.ARMOR_TOUGHNESS.getName(), new AttributeModifier(ARMOR_MODIFIER_UUID_PER_SLOT[var1.getIndex()], "Armor toughness", (double)this.toughness, AttributeModifier.Operation.ADDITION));
-      }
-
-      return var2;
+   public Multimap<Attribute, AttributeModifier> getDefaultAttributeModifiers(EquipmentSlot var1) {
+      return var1 == this.slot ? this.defaultModifiers : super.getDefaultAttributeModifiers(var1);
    }
 
    public int getDefense() {
       return this.defense;
    }
+
+   public float getToughness() {
+      return this.toughness;
+   }
 }
