--- net/minecraft/world/item/CompassItem.java
+++ net/minecraft/world/item/CompassItem.java
@@ -1,11 +1,100 @@
 package net.minecraft.world.item;
 
-import net.minecraft.resources.ResourceLocation;
+import com.mojang.serialization.DataResult;
+import java.util.Optional;
+import net.minecraft.core.BlockPos;
+import net.minecraft.nbt.CompoundTag;
+import net.minecraft.nbt.NbtOps;
+import net.minecraft.nbt.NbtUtils;
+import net.minecraft.resources.ResourceKey;
+import net.minecraft.server.level.ServerLevel;
+import net.minecraft.sounds.SoundEvents;
+import net.minecraft.sounds.SoundSource;
+import net.minecraft.world.InteractionResult;
+import net.minecraft.world.entity.Entity;
+import net.minecraft.world.entity.ai.village.poi.PoiType;
+import net.minecraft.world.entity.player.Player;
+import net.minecraft.world.level.Level;
+import net.minecraft.world.level.block.Blocks;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
 
-public class CompassItem extends Item {
+public class CompassItem extends Item implements Vanishable {
+   private static final Logger LOGGER = LogManager.getLogger();
+
    public CompassItem(Item.Properties var1) {
       super(var1);
-      this.addProperty(new ResourceLocation("angle"), new ItemPropertyFunction() {
+   }
+
+   public static boolean isLodestoneCompass(ItemStack var0) {
+      CompoundTag var1 = var0.getTag();
+      return var1 != null && (var1.contains("LodestoneDimension") || var1.contains("LodestonePos"));
+   }
+
+   public boolean isFoil(ItemStack var1) {
+      return isLodestoneCompass(var1) || super.isFoil(var1);
+   }
+
+   public static Optional<ResourceKey<Level>> getLodestoneDimension(CompoundTag var0) {
+      return Level.RESOURCE_KEY_CODEC.parse(NbtOps.INSTANCE, var0.get("LodestoneDimension")).result();
+   }
+
+   public void inventoryTick(ItemStack var1, Level var2, Entity var3, int var4, boolean var5) {
+      if (!var2.isClientSide) {
+         if (isLodestoneCompass(var1)) {
+            CompoundTag var6 = var1.getOrCreateTag();
+            if (var6.contains("LodestoneTracked") && !var6.getBoolean("LodestoneTracked")) {
+               return;
+            }
+
+            Optional var7 = getLodestoneDimension(var6);
+            if (var7.isPresent() && var7.get() == var2.dimension() && var6.contains("LodestonePos") && !((ServerLevel)var2).getPoiManager().existsAtPosition(PoiType.LODESTONE, NbtUtils.readBlockPos(var6.getCompound("LodestonePos")))) {
+               var6.remove("LodestonePos");
+            }
+         }
+
+      }
+   }
+
+   public InteractionResult useOn(UseOnContext var1) {
+      BlockPos var2 = var1.hitResult.getBlockPos();
+      if (!var1.level.getBlockState(var2).is(Blocks.LODESTONE)) {
+         return super.useOn(var1);
+      } else {
+         var1.level.playSound((Player)null, (BlockPos)var2, SoundEvents.LODESTONE_COMPASS_LOCK, SoundSource.PLAYERS, 1.0F, 1.0F);
+         boolean var3 = !var1.player.abilities.instabuild && var1.itemStack.getCount() == 1;
+         if (var3) {
+            this.addLodestoneTags(var1.level.dimension(), var2, var1.itemStack.getOrCreateTag());
+         } else {
+            ItemStack var4 = new ItemStack(Items.COMPASS, 1);
+            CompoundTag var5 = var1.itemStack.hasTag() ? var1.itemStack.getTag().copy() : new CompoundTag();
+            var4.setTag(var5);
+            if (!var1.player.abilities.instabuild) {
+               var1.itemStack.shrink(1);
+            }
+
+            this.addLodestoneTags(var1.level.dimension(), var2, var5);
+            if (!var1.player.inventory.add(var4)) {
+               var1.player.drop(var4, false);
+            }
+         }
+
+         return InteractionResult.sidedSuccess(var1.level.isClientSide);
+      }
+   }
+
+   private void addLodestoneTags(ResourceKey<Level> var1, BlockPos var2, CompoundTag var3) {
+      var3.put("LodestonePos", NbtUtils.writeBlockPos(var2));
+      DataResult var10000 = Level.RESOURCE_KEY_CODEC.encodeStart(NbtOps.INSTANCE, var1);
+      Logger var10001 = LOGGER;
+      var10001.getClass();
+      var10000.resultOrPartial(var10001::error).ifPresent((var1x) -> {
+         var3.put("LodestoneDimension", var1x);
       });
+      var3.putBoolean("LodestoneTracked", true);
    }
+
+   public String getDescriptionId(ItemStack var1) {
+      return isLodestoneCompass(var1) ? "item.minecraft.lodestone_compass" : super.getDescriptionId(var1);
+   }
 }
