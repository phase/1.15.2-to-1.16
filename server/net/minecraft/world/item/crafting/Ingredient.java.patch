--- net/minecraft/world/item/crafting/Ingredient.java
+++ net/minecraft/world/item/crafting/Ingredient.java
@@ -19,29 +19,26 @@
 import java.util.stream.StreamSupport;
 import javax.annotation.Nullable;
 import net.minecraft.core.Registry;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.resources.ResourceLocation;
-import net.minecraft.tags.ItemTags;
+import net.minecraft.tags.SerializationTags;
 import net.minecraft.tags.Tag;
 import net.minecraft.util.GsonHelper;
 import net.minecraft.world.entity.player.StackedContents;
 import net.minecraft.world.item.Item;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.level.ItemLike;
 
 public final class Ingredient implements Predicate<ItemStack> {
-   private static final Predicate<? super Ingredient.Value> NON_ALL_EMPTY = (var0) -> {
-      return !var0.getItems().stream().allMatch(ItemStack::isEmpty);
-   };
    public static final Ingredient EMPTY = new Ingredient(Stream.empty());
    private final Ingredient.Value[] values;
    private ItemStack[] itemStacks;
    private IntList stackingIds;
 
    private Ingredient(Stream<? extends Ingredient.Value> var1) {
-      this.values = (Ingredient.Value[])var1.filter(NON_ALL_EMPTY).toArray((var0) -> {
+      this.values = (Ingredient.Value[])var1.toArray((var0) -> {
          return new Ingredient.Value[var0];
       });
    }
 
    private void dissolve() {
@@ -56,25 +53,27 @@
    }
 
    public boolean test(@Nullable ItemStack var1) {
       if (var1 == null) {
          return false;
-      } else if (this.values.length == 0) {
-         return var1.isEmpty();
       } else {
          this.dissolve();
-         ItemStack[] var2 = this.itemStacks;
-         int var3 = var2.length;
+         if (this.itemStacks.length == 0) {
+            return var1.isEmpty();
+         } else {
+            ItemStack[] var2 = this.itemStacks;
+            int var3 = var2.length;
 
-         for(int var4 = 0; var4 < var3; ++var4) {
-            ItemStack var5 = var2[var4];
-            if (var5.getItem() == var1.getItem()) {
-               return true;
+            for(int var4 = 0; var4 < var3; ++var4) {
+               ItemStack var5 = var2[var4];
+               if (var5.getItem() == var1.getItem()) {
+                  return true;
+               }
             }
-         }
 
-         return false;
+            return false;
+         }
       }
    }
 
    public IntList getStackingIds() {
       if (this.stackingIds == null) {
@@ -129,12 +128,18 @@
       Ingredient var1 = new Ingredient(var0);
       return var1.values.length == 0 ? EMPTY : var1;
    }
 
    public static Ingredient of(ItemLike... var0) {
-      return fromValues(Arrays.stream(var0).map((var0x) -> {
-         return new Ingredient.ItemValue(new ItemStack(var0x));
+      return of(Arrays.stream(var0).map(ItemStack::new));
+   }
+
+   public static Ingredient of(Stream<ItemStack> var0) {
+      return fromValues(var0.filter((var0x) -> {
+         return !var0x.isEmpty();
+      }).map((var0x) -> {
+         return new Ingredient.ItemValue(var0x);
       }));
    }
 
    public static Ingredient of(Tag<Item> var0) {
       return fromValues(Stream.of(new Ingredient.TagValue(var0)));
@@ -166,11 +171,11 @@
       } else {
          throw new JsonSyntaxException("Item cannot be null");
       }
    }
 
-   public static Ingredient.Value valueFromJson(JsonObject var0) {
+   private static Ingredient.Value valueFromJson(JsonObject var0) {
       if (var0.has("item") && var0.has("tag")) {
          throw new JsonParseException("An ingredient entry is either a tag or an item, not both");
       } else {
          ResourceLocation var1;
          if (var0.has("item")) {
@@ -179,11 +184,11 @@
                return new JsonSyntaxException("Unknown item '" + var1 + "'");
             });
             return new Ingredient.ItemValue(new ItemStack(var3));
          } else if (var0.has("tag")) {
             var1 = new ResourceLocation(GsonHelper.getAsString(var0, "tag"));
-            Tag var2 = ItemTags.getAllTags().getTag(var1);
+            Tag var2 = SerializationTags.getInstance().getItems().getTag(var1);
             if (var2 == null) {
                throw new JsonSyntaxException("Unknown item tag '" + var1 + "'");
             } else {
                return new Ingredient.TagValue(var2);
             }
@@ -212,11 +217,11 @@
          return var1;
       }
 
       public JsonObject serialize() {
          JsonObject var1 = new JsonObject();
-         var1.addProperty("tag", this.tag.getId().toString());
+         var1.addProperty("tag", SerializationTags.getInstance().getItems().getIdOrThrow(this.tag).toString());
          return var1;
       }
    }
 
    static class ItemValue implements Ingredient.Value {
