--- net/minecraft/world/entity/item/FallingBlockEntity.java
+++ net/minecraft/world/entity/item/FallingBlockEntity.java
@@ -19,13 +19,12 @@
 import net.minecraft.util.Mth;
 import net.minecraft.world.damagesource.DamageSource;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.entity.MoverType;
-import net.minecraft.world.item.BlockPlaceContext;
-import net.minecraft.world.item.DirectionalPlaceContext;
 import net.minecraft.world.item.ItemStack;
+import net.minecraft.world.item.context.DirectionalPlaceContext;
 import net.minecraft.world.level.ClipContext;
 import net.minecraft.world.level.GameRules;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.block.AnvilBlock;
 import net.minecraft.world.level.block.Block;
@@ -67,11 +66,11 @@
       this.setPos(var2, var4 + (double)((1.0F - this.getBbHeight()) / 2.0F), var6);
       this.setDeltaMovement(Vec3.ZERO);
       this.xo = var2;
       this.yo = var4;
       this.zo = var6;
-      this.setStartPos(new BlockPos(this));
+      this.setStartPos(this.blockPosition());
    }
 
    public boolean isAttackable() {
       return false;
    }
@@ -97,12 +96,12 @@
          this.remove();
       } else {
          Block var1 = this.blockState.getBlock();
          BlockPos var2;
          if (this.time++ == 0) {
-            var2 = new BlockPos(this);
-            if (this.level.getBlockState(var2).getBlock() == var1) {
+            var2 = this.blockPosition();
+            if (this.level.getBlockState(var2).is(var1)) {
                this.level.removeBlock(var2, false);
             } else if (!this.level.isClientSide) {
                this.remove();
                return;
             }
@@ -112,11 +111,11 @@
             this.setDeltaMovement(this.getDeltaMovement().add(0.0D, -0.04D, 0.0D));
          }
 
          this.move(MoverType.SELF, this.getDeltaMovement());
          if (!this.level.isClientSide) {
-            var2 = new BlockPos(this);
+            var2 = this.blockPosition();
             boolean var3 = this.blockState.getBlock() instanceof ConcretePowderBlock;
             boolean var4 = var3 && this.level.getFluidState(var2).is(FluidTags.WATER);
             double var5 = this.getDeltaMovement().lengthSqr();
             if (var3 && var5 > 1.0D) {
                BlockHitResult var7 = this.level.clip(new ClipContext(new Vec3(this.xo, this.yo, this.zo), this.position(), ClipContext.Block.COLLIDER, ClipContext.Fluid.SOURCE_ONLY, this));
@@ -135,24 +134,24 @@
                   this.remove();
                }
             } else {
                BlockState var16 = this.level.getBlockState(var2);
                this.setDeltaMovement(this.getDeltaMovement().multiply(0.7D, -0.5D, 0.7D));
-               if (var16.getBlock() != Blocks.MOVING_PISTON) {
+               if (!var16.is(Blocks.MOVING_PISTON)) {
                   this.remove();
                   if (!this.cancelDrop) {
-                     boolean var8 = var16.canBeReplaced((BlockPlaceContext)(new DirectionalPlaceContext(this.level, var2, Direction.DOWN, ItemStack.EMPTY, Direction.UP)));
+                     boolean var8 = var16.canBeReplaced(new DirectionalPlaceContext(this.level, var2, Direction.DOWN, ItemStack.EMPTY, Direction.UP));
                      boolean var9 = FallingBlock.isFree(this.level.getBlockState(var2.below())) && (!var3 || !var4);
                      boolean var10 = this.blockState.canSurvive(this.level, var2) && !var9;
                      if (var8 && var10) {
                         if (this.blockState.hasProperty(BlockStateProperties.WATERLOGGED) && this.level.getFluidState(var2).getType() == Fluids.WATER) {
                            this.blockState = (BlockState)this.blockState.setValue(BlockStateProperties.WATERLOGGED, true);
                         }
 
                         if (this.level.setBlock(var2, this.blockState, 3)) {
                            if (var1 instanceof FallingBlock) {
-                              ((FallingBlock)var1).onLand(this.level, var2, this.blockState, var16);
+                              ((FallingBlock)var1).onLand(this.level, var2, this.blockState, var16, this);
                            }
 
                            if (this.blockData != null && var1 instanceof EntityBlock) {
                               BlockEntity var11 = this.level.getBlockEntity(var2);
                               if (var11 != null) {
@@ -165,22 +164,22 @@
                                     if (!"x".equals(var14) && !"y".equals(var14) && !"z".equals(var14)) {
                                        var12.put(var14, var15.copy());
                                     }
                                  }
 
-                                 var11.load(var12);
+                                 var11.load(this.blockState, var12);
                                  var11.setChanged();
                               }
                            }
                         } else if (this.dropItem && this.level.getGameRules().getBoolean(GameRules.RULE_DOENTITYDROPS)) {
                            this.spawnAtLocation(var1);
                         }
                      } else if (this.dropItem && this.level.getGameRules().getBoolean(GameRules.RULE_DOENTITYDROPS)) {
                         this.spawnAtLocation(var1);
                      }
                   } else if (var1 instanceof FallingBlock) {
-                     ((FallingBlock)var1).onBroken(this.level, var2);
+                     ((FallingBlock)var1).onBroken(this.level, var2, this);
                   }
                }
             }
          }
 
