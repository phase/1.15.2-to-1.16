--- net/minecraft/world/entity/projectile/AbstractArrow.java
+++ net/minecraft/world/entity/projectile/AbstractArrow.java
@@ -3,12 +3,10 @@
 import com.google.common.collect.Lists;
 import it.unimi.dsi.fastutil.ints.IntOpenHashSet;
 import java.util.Arrays;
 import java.util.Iterator;
 import java.util.List;
-import java.util.Optional;
-import java.util.UUID;
 import javax.annotation.Nullable;
 import net.minecraft.advancements.CriteriaTriggers;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Registry;
 import net.minecraft.core.particles.ParticleTypes;
@@ -19,20 +17,20 @@
 import net.minecraft.network.protocol.game.ClientboundGameEventPacket;
 import net.minecraft.network.syncher.EntityDataAccessor;
 import net.minecraft.network.syncher.EntityDataSerializers;
 import net.minecraft.network.syncher.SynchedEntityData;
 import net.minecraft.resources.ResourceLocation;
-import net.minecraft.server.level.ServerLevel;
 import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.sounds.SoundEvent;
 import net.minecraft.sounds.SoundEvents;
 import net.minecraft.util.Mth;
 import net.minecraft.world.damagesource.DamageSource;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EntityDimensions;
 import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.entity.LivingEntity;
+import net.minecraft.world.entity.MoverType;
 import net.minecraft.world.entity.Pose;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.enchantment.EnchantmentHelper;
 import net.minecraft.world.item.enchantment.Enchantments;
@@ -44,23 +42,20 @@
 import net.minecraft.world.phys.EntityHitResult;
 import net.minecraft.world.phys.HitResult;
 import net.minecraft.world.phys.Vec3;
 import net.minecraft.world.phys.shapes.VoxelShape;
 
-public abstract class AbstractArrow extends Entity implements Projectile {
+public abstract class AbstractArrow extends Projectile {
    private static final EntityDataAccessor<Byte> ID_FLAGS;
-   protected static final EntityDataAccessor<Optional<UUID>> DATA_OWNERUUID_ID;
    private static final EntityDataAccessor<Byte> PIERCE_LEVEL;
    @Nullable
    private BlockState lastState;
    protected boolean inGround;
    protected int inGroundTime;
    public AbstractArrow.Pickup pickup;
    public int shakeTime;
-   public UUID ownerUUID;
    private int life;
-   private int flightTime;
    private double baseDamage;
    private int knockback;
    private SoundEvent soundEvent;
    private IntOpenHashSet piercingIgnoreEntityIds;
    private List<Entity> piercedAndKilledEntities;
@@ -90,30 +85,15 @@
       this.soundEvent = var1;
    }
 
    protected void defineSynchedData() {
       this.entityData.define(ID_FLAGS, (byte)0);
-      this.entityData.define(DATA_OWNERUUID_ID, Optional.empty());
       this.entityData.define(PIERCE_LEVEL, (byte)0);
    }
 
-   public void shootFromRotation(Entity var1, float var2, float var3, float var4, float var5, float var6) {
-      float var7 = -Mth.sin(var3 * 0.017453292F) * Mth.cos(var2 * 0.017453292F);
-      float var8 = -Mth.sin(var2 * 0.017453292F);
-      float var9 = Mth.cos(var3 * 0.017453292F) * Mth.cos(var2 * 0.017453292F);
-      this.shoot((double)var7, (double)var8, (double)var9, var5, var6);
-      this.setDeltaMovement(this.getDeltaMovement().add(var1.getDeltaMovement().x, var1.onGround ? 0.0D : var1.getDeltaMovement().y, var1.getDeltaMovement().z));
-   }
-
    public void shoot(double var1, double var3, double var5, float var7, float var8) {
-      Vec3 var9 = (new Vec3(var1, var3, var5)).normalize().add(this.random.nextGaussian() * 0.007499999832361937D * (double)var8, this.random.nextGaussian() * 0.007499999832361937D * (double)var8, this.random.nextGaussian() * 0.007499999832361937D * (double)var8).scale((double)var7);
-      this.setDeltaMovement(var9);
-      float var10 = Mth.sqrt(getHorizontalDistanceSqr(var9));
-      this.yRot = (float)(Mth.atan2(var9.x, var9.z) * 57.2957763671875D);
-      this.xRot = (float)(Mth.atan2(var9.y, (double)var10) * 57.2957763671875D);
-      this.yRotO = this.yRot;
-      this.xRotO = this.xRot;
+      super.shoot(var1, var3, var5, var7, var8);
       this.life = 0;
    }
 
    public void tick() {
       super.tick();
@@ -125,11 +105,11 @@
          this.xRot = (float)(Mth.atan2(var2.y, (double)var3) * 57.2957763671875D);
          this.yRotO = this.yRot;
          this.xRotO = this.xRot;
       }
 
-      BlockPos var25 = new BlockPos(this);
+      BlockPos var25 = this.blockPosition();
       BlockState var4 = this.level.getBlockState(var25);
       Vec3 var6;
       if (!var4.isAir() && !var1) {
          VoxelShape var5 = var4.getCollisionShape(this.level, var25);
          if (!var5.isEmpty()) {
@@ -153,23 +133,19 @@
       if (this.isInWaterOrRain()) {
          this.clearFire();
       }
 
       if (this.inGround && !var1) {
-         if (this.lastState != var4 && this.level.noCollision(this.getBoundingBox().inflate(0.06D))) {
-            this.inGround = false;
-            this.setDeltaMovement(var2.multiply((double)(this.random.nextFloat() * 0.2F), (double)(this.random.nextFloat() * 0.2F), (double)(this.random.nextFloat() * 0.2F)));
-            this.life = 0;
-            this.flightTime = 0;
+         if (this.lastState != var4 && this.shouldFall()) {
+            this.startFalling();
          } else if (!this.level.isClientSide) {
             this.tickDespawn();
          }
 
          ++this.inGroundTime;
       } else {
          this.inGroundTime = 0;
-         ++this.flightTime;
          Vec3 var26 = this.position();
          var6 = var26.add(var2);
          Object var27 = this.level.clip(new ClipContext(var26, var6, ClipContext.Block.COLLIDER, ClipContext.Fluid.NONE, this));
          if (((HitResult)var27).getType() != HitResult.Type.MISS) {
             var6 = ((HitResult)var27).getLocation();
@@ -220,27 +196,13 @@
             this.yRot = (float)(Mth.atan2(-var29, -var12) * 57.2957763671875D);
          } else {
             this.yRot = (float)(Mth.atan2(var29, var12) * 57.2957763671875D);
          }
 
-         for(this.xRot = (float)(Mth.atan2(var30, (double)var20) * 57.2957763671875D); this.xRot - this.xRotO < -180.0F; this.xRotO -= 360.0F) {
-         }
-
-         while(this.xRot - this.xRotO >= 180.0F) {
-            this.xRotO += 360.0F;
-         }
-
-         while(this.yRot - this.yRotO < -180.0F) {
-            this.yRotO -= 360.0F;
-         }
-
-         while(this.yRot - this.yRotO >= 180.0F) {
-            this.yRotO += 360.0F;
-         }
-
-         this.xRot = Mth.lerp(0.2F, this.xRotO, this.xRot);
-         this.yRot = Mth.lerp(0.2F, this.yRotO, this.yRot);
+         this.xRot = (float)(Mth.atan2(var30, (double)var20) * 57.2957763671875D);
+         this.xRot = lerpRotation(this.xRotO, this.xRot);
+         this.yRot = lerpRotation(this.yRotO, this.yRot);
          float var21 = 0.99F;
          float var22 = 0.05F;
          if (this.isInWater()) {
             for(int var23 = 0; var23 < 4; ++var23) {
                float var24 = 0.25F;
@@ -259,43 +221,37 @@
          this.setPos(var31, var16, var18);
          this.checkInsideBlocks();
       }
    }
 
+   private boolean shouldFall() {
+      return this.inGround && this.level.noCollision((new AABB(this.position(), this.position())).inflate(0.06D));
+   }
+
+   private void startFalling() {
+      this.inGround = false;
+      Vec3 var1 = this.getDeltaMovement();
+      this.setDeltaMovement(var1.multiply((double)(this.random.nextFloat() * 0.2F), (double)(this.random.nextFloat() * 0.2F), (double)(this.random.nextFloat() * 0.2F)));
+      this.life = 0;
+   }
+
+   public void move(MoverType var1, Vec3 var2) {
+      super.move(var1, var2);
+      if (var1 != MoverType.SELF && this.shouldFall()) {
+         this.startFalling();
+      }
+
+   }
+
    protected void tickDespawn() {
       ++this.life;
       if (this.life >= 1200) {
          this.remove();
       }
 
    }
 
-   protected void onHit(HitResult var1) {
-      HitResult.Type var2 = var1.getType();
-      if (var2 == HitResult.Type.ENTITY) {
-         this.onHitEntity((EntityHitResult)var1);
-      } else if (var2 == HitResult.Type.BLOCK) {
-         BlockHitResult var3 = (BlockHitResult)var1;
-         BlockState var4 = this.level.getBlockState(var3.getBlockPos());
-         this.lastState = var4;
-         Vec3 var5 = var3.getLocation().subtract(this.getX(), this.getY(), this.getZ());
-         this.setDeltaMovement(var5);
-         Vec3 var6 = var5.normalize().scale(0.05000000074505806D);
-         this.setPosRaw(this.getX() - var6.x, this.getY() - var6.y, this.getZ() - var6.z);
-         this.playSound(this.getHitGroundSoundEvent(), 1.0F, 1.2F / (this.random.nextFloat() * 0.2F + 0.9F));
-         this.inGround = true;
-         this.shakeTime = 7;
-         this.setCritArrow(false);
-         this.setPierceLevel((byte)0);
-         this.setSoundEvent(SoundEvents.ARROW_HIT);
-         this.setShotFromCrossbow(false);
-         this.resetPiercedEntities();
-         var4.onProjectileHit(this.level, var4, var3, this);
-      }
-
-   }
-
    private void resetPiercedEntities() {
       if (this.piercedAndKilledEntities != null) {
          this.piercedAndKilledEntities.clear();
       }
 
@@ -304,10 +260,11 @@
       }
 
    }
 
    protected void onHitEntity(EntityHitResult var1) {
+      super.onHitEntity(var1);
       Entity var2 = var1.getEntity();
       float var3 = (float)this.getDeltaMovement().length();
       int var4 = Mth.ceil(Math.max((double)var3 * this.baseDamage, 0.0D));
       if (this.getPierceLevel() > 0) {
          if (this.piercingIgnoreEntityIds == null) {
@@ -369,24 +326,24 @@
                EnchantmentHelper.doPostHurtEffects(var9, var6);
                EnchantmentHelper.doPostDamageEffects((LivingEntity)var6, var9);
             }
 
             this.doPostHurtEffects(var9);
-            if (var6 != null && var9 != var6 && var9 instanceof Player && var6 instanceof ServerPlayer) {
-               ((ServerPlayer)var6).connection.send(new ClientboundGameEventPacket(6, 0.0F));
+            if (var6 != null && var9 != var6 && var9 instanceof Player && var6 instanceof ServerPlayer && !this.isSilent()) {
+               ((ServerPlayer)var6).connection.send(new ClientboundGameEventPacket(ClientboundGameEventPacket.ARROW_HIT_PLAYER, 0.0F));
             }
 
             if (!var2.isAlive() && this.piercedAndKilledEntities != null) {
                this.piercedAndKilledEntities.add(var9);
             }
 
             if (!this.level.isClientSide && var6 instanceof ServerPlayer) {
                ServerPlayer var11 = (ServerPlayer)var6;
                if (this.piercedAndKilledEntities != null && this.shotFromCrossbow()) {
-                  CriteriaTriggers.KILLED_BY_CROSSBOW.trigger(var11, this.piercedAndKilledEntities, this.piercedAndKilledEntities.size());
+                  CriteriaTriggers.KILLED_BY_CROSSBOW.trigger(var11, this.piercedAndKilledEntities);
                } else if (!var2.isAlive() && this.shotFromCrossbow()) {
-                  CriteriaTriggers.KILLED_BY_CROSSBOW.trigger(var11, Arrays.asList(var2), 0);
+                  CriteriaTriggers.KILLED_BY_CROSSBOW.trigger(var11, Arrays.asList(var2));
                }
             }
          }
 
          this.playSound(this.soundEvent, 1.0F, 1.2F / (this.random.nextFloat() * 0.2F + 0.9F));
@@ -396,11 +353,10 @@
       } else {
          var2.setRemainingFireTicks(var8);
          this.setDeltaMovement(this.getDeltaMovement().scale(-0.1D));
          this.yRot += 180.0F;
          this.yRotO += 180.0F;
-         this.flightTime = 0;
          if (!this.level.isClientSide && this.getDeltaMovement().lengthSqr() < 1.0E-7D) {
             if (this.pickup == AbstractArrow.Pickup.ALLOWED) {
                this.spawnAtLocation(this.getPickupItem(), 0.1F);
             }
 
@@ -408,10 +364,27 @@
          }
       }
 
    }
 
+   protected void onHitBlock(BlockHitResult var1) {
+      this.lastState = this.level.getBlockState(var1.getBlockPos());
+      super.onHitBlock(var1);
+      Vec3 var2 = var1.getLocation().subtract(this.getX(), this.getY(), this.getZ());
+      this.setDeltaMovement(var2);
+      Vec3 var3 = var2.normalize().scale(0.05000000074505806D);
+      this.setPosRaw(this.getX() - var3.x, this.getY() - var3.y, this.getZ() - var3.z);
+      this.playSound(this.getHitGroundSoundEvent(), 1.0F, 1.2F / (this.random.nextFloat() * 0.2F + 0.9F));
+      this.inGround = true;
+      this.shakeTime = 7;
+      this.setCritArrow(false);
+      this.setPierceLevel((byte)0);
+      this.setSoundEvent(SoundEvents.ARROW_HIT);
+      this.setShotFromCrossbow(false);
+      this.resetPiercedEntities();
+   }
+
    protected SoundEvent getDefaultHitGroundSoundEvent() {
       return SoundEvents.ARROW_HIT;
    }
 
    protected final SoundEvent getHitGroundSoundEvent() {
@@ -421,16 +394,19 @@
    protected void doPostHurtEffects(LivingEntity var1) {
    }
 
    @Nullable
    protected EntityHitResult findHitEntity(Vec3 var1, Vec3 var2) {
-      return ProjectileUtil.getHitResult(this.level, this, var1, var2, this.getBoundingBox().expandTowards(this.getDeltaMovement()).inflate(1.0D), (var1x) -> {
-         return !var1x.isSpectator() && var1x.isAlive() && var1x.isPickable() && (var1x != this.getOwner() || this.flightTime >= 5) && (this.piercingIgnoreEntityIds == null || !this.piercingIgnoreEntityIds.contains(var1x.getId()));
-      });
+      return ProjectileUtil.getEntityHitResult(this.level, this, var1, var2, this.getBoundingBox().expandTowards(this.getDeltaMovement()).inflate(1.0D), this::canHitEntity);
    }
 
+   protected boolean canHitEntity(Entity var1) {
+      return super.canHitEntity(var1) && (this.piercingIgnoreEntityIds == null || !this.piercingIgnoreEntityIds.contains(var1.getId()));
+   }
+
    public void addAdditionalSaveData(CompoundTag var1) {
+      super.addAdditionalSaveData(var1);
       var1.putShort("life", (short)this.life);
       if (this.lastState != null) {
          var1.put("inBlockState", NbtUtils.writeBlockState(this.lastState));
       }
 
@@ -438,19 +414,16 @@
       var1.putBoolean("inGround", this.inGround);
       var1.putByte("pickup", (byte)this.pickup.ordinal());
       var1.putDouble("damage", this.baseDamage);
       var1.putBoolean("crit", this.isCritArrow());
       var1.putByte("PierceLevel", this.getPierceLevel());
-      if (this.ownerUUID != null) {
-         var1.putUUID("OwnerUUID", this.ownerUUID);
-      }
-
       var1.putString("SoundEvent", Registry.SOUND_EVENT.getKey(this.soundEvent).toString());
       var1.putBoolean("ShotFromCrossbow", this.shotFromCrossbow());
    }
 
    public void readAdditionalSaveData(CompoundTag var1) {
+      super.readAdditionalSaveData(var1);
       this.life = var1.getShort("life");
       if (var1.contains("inBlockState", 10)) {
          this.lastState = NbtUtils.readBlockState(var1.getCompound("inBlockState"));
       }
 
@@ -466,34 +439,25 @@
          this.pickup = var1.getBoolean("player") ? AbstractArrow.Pickup.ALLOWED : AbstractArrow.Pickup.DISALLOWED;
       }
 
       this.setCritArrow(var1.getBoolean("crit"));
       this.setPierceLevel(var1.getByte("PierceLevel"));
-      if (var1.hasUUID("OwnerUUID")) {
-         this.ownerUUID = var1.getUUID("OwnerUUID");
-      }
-
       if (var1.contains("SoundEvent", 8)) {
          this.soundEvent = (SoundEvent)Registry.SOUND_EVENT.getOptional(new ResourceLocation(var1.getString("SoundEvent"))).orElse(this.getDefaultHitGroundSoundEvent());
       }
 
       this.setShotFromCrossbow(var1.getBoolean("ShotFromCrossbow"));
    }
 
    public void setOwner(@Nullable Entity var1) {
-      this.ownerUUID = var1 == null ? null : var1.getUUID();
+      super.setOwner(var1);
       if (var1 instanceof Player) {
          this.pickup = ((Player)var1).abilities.instabuild ? AbstractArrow.Pickup.CREATIVE_ONLY : AbstractArrow.Pickup.ALLOWED;
       }
 
    }
 
-   @Nullable
-   public Entity getOwner() {
-      return this.ownerUUID != null && this.level instanceof ServerLevel ? ((ServerLevel)this.level).getEntity(this.ownerUUID) : null;
-   }
-
    public void playerTouch(Player var1) {
       if (!this.level.isClientSide && (this.inGround || this.isNoPhysics()) && this.shakeTime <= 0) {
          boolean var2 = this.pickup == AbstractArrow.Pickup.ALLOWED || this.pickup == AbstractArrow.Pickup.CREATIVE_ONLY && var1.abilities.instabuild || this.isNoPhysics() && this.getOwner().getUUID() == var1.getUUID();
          if (this.pickup == AbstractArrow.Pickup.ALLOWED && !var1.inventory.add(this.getPickupItem())) {
             var2 = false;
@@ -528,11 +492,11 @@
    public boolean isAttackable() {
       return false;
    }
 
    protected float getEyeHeight(Pose var1, EntityDimensions var2) {
-      return 0.0F;
+      return 0.13F;
    }
 
    public void setCritArrow(boolean var1) {
       this.setFlag(1, var1);
    }
@@ -609,11 +573,10 @@
       return new ClientboundAddEntityPacket(this, var1 == null ? 0 : var1.getId());
    }
 
    static {
       ID_FLAGS = SynchedEntityData.defineId(AbstractArrow.class, EntityDataSerializers.BYTE);
-      DATA_OWNERUUID_ID = SynchedEntityData.defineId(AbstractArrow.class, EntityDataSerializers.OPTIONAL_UUID);
       PIERCE_LEVEL = SynchedEntityData.defineId(AbstractArrow.class, EntityDataSerializers.BYTE);
    }
 
    public static enum Pickup {
       DISALLOWED,
