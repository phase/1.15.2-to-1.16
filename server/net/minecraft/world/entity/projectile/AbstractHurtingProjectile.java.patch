--- net/minecraft/world/entity/projectile/AbstractHurtingProjectile.java
+++ net/minecraft/world/entity/projectile/AbstractHurtingProjectile.java
@@ -1,8 +1,7 @@
 package net.minecraft.world.entity.projectile;
 
-import net.minecraft.core.BlockPos;
 import net.minecraft.core.particles.ParticleOptions;
 import net.minecraft.core.particles.ParticleTypes;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.ListTag;
 import net.minecraft.network.protocol.Packet;
@@ -12,19 +11,14 @@
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.level.ClipContext;
 import net.minecraft.world.level.Level;
-import net.minecraft.world.level.block.state.BlockState;
-import net.minecraft.world.phys.BlockHitResult;
 import net.minecraft.world.phys.HitResult;
 import net.minecraft.world.phys.Vec3;
 
-public abstract class AbstractHurtingProjectile extends Entity {
-   public LivingEntity owner;
-   private int life;
-   private int flightTime;
+public abstract class AbstractHurtingProjectile extends Projectile {
    public double xPower;
    public double yPower;
    public double zPower;
 
    protected AbstractHurtingProjectile(EntityType<? extends AbstractHurtingProjectile> var1, Level var2) {
@@ -32,71 +26,69 @@
    }
 
    public AbstractHurtingProjectile(EntityType<? extends AbstractHurtingProjectile> var1, double var2, double var4, double var6, double var8, double var10, double var12, Level var14) {
       this(var1, var14);
       this.moveTo(var2, var4, var6, this.yRot, this.xRot);
-      this.setPos(var2, var4, var6);
+      this.reapplyPosition();
       double var15 = (double)Mth.sqrt(var8 * var8 + var10 * var10 + var12 * var12);
-      this.xPower = var8 / var15 * 0.1D;
-      this.yPower = var10 / var15 * 0.1D;
-      this.zPower = var12 / var15 * 0.1D;
+      if (var15 != 0.0D) {
+         this.xPower = var8 / var15 * 0.1D;
+         this.yPower = var10 / var15 * 0.1D;
+         this.zPower = var12 / var15 * 0.1D;
+      }
+
    }
 
    public AbstractHurtingProjectile(EntityType<? extends AbstractHurtingProjectile> var1, LivingEntity var2, double var3, double var5, double var7, Level var9) {
-      this(var1, var9);
-      this.owner = var2;
-      this.moveTo(var2.getX(), var2.getY(), var2.getZ(), var2.yRot, var2.xRot);
-      this.reapplyPosition();
-      this.setDeltaMovement(Vec3.ZERO);
-      var3 += this.random.nextGaussian() * 0.4D;
-      var5 += this.random.nextGaussian() * 0.4D;
-      var7 += this.random.nextGaussian() * 0.4D;
-      double var10 = (double)Mth.sqrt(var3 * var3 + var5 * var5 + var7 * var7);
-      this.xPower = var3 / var10 * 0.1D;
-      this.yPower = var5 / var10 * 0.1D;
-      this.zPower = var7 / var10 * 0.1D;
+      this(var1, var2.getX(), var2.getY(), var2.getZ(), var3, var5, var7, var9);
+      this.setOwner(var2);
+      this.setRot(var2.yRot, var2.xRot);
    }
 
    protected void defineSynchedData() {
    }
 
    public void tick() {
-      if (!this.level.isClientSide && (this.owner != null && this.owner.removed || !this.level.hasChunkAt(new BlockPos(this)))) {
-         this.remove();
-      } else {
+      Entity var1 = this.getOwner();
+      if (this.level.isClientSide || (var1 == null || !var1.removed) && this.level.hasChunkAt(this.blockPosition())) {
          super.tick();
          if (this.shouldBurn()) {
             this.setSecondsOnFire(1);
          }
 
-         ++this.flightTime;
-         HitResult var1 = ProjectileUtil.forwardsRaycast(this, true, this.flightTime >= 25, this.owner, ClipContext.Block.COLLIDER);
-         if (var1.getType() != HitResult.Type.MISS) {
-            this.onHit(var1);
+         HitResult var2 = ProjectileUtil.getHitResult(this, this::canHitEntity, ClipContext.Block.COLLIDER);
+         if (var2.getType() != HitResult.Type.MISS) {
+            this.onHit(var2);
          }
 
-         Vec3 var2 = this.getDeltaMovement();
-         double var3 = this.getX() + var2.x;
-         double var5 = this.getY() + var2.y;
-         double var7 = this.getZ() + var2.z;
+         Vec3 var3 = this.getDeltaMovement();
+         double var4 = this.getX() + var3.x;
+         double var6 = this.getY() + var3.y;
+         double var8 = this.getZ() + var3.z;
          ProjectileUtil.rotateTowardsMovement(this, 0.2F);
-         float var9 = this.getInertia();
+         float var10 = this.getInertia();
          if (this.isInWater()) {
-            for(int var10 = 0; var10 < 4; ++var10) {
-               float var11 = 0.25F;
-               this.level.addParticle(ParticleTypes.BUBBLE, var3 - var2.x * 0.25D, var5 - var2.y * 0.25D, var7 - var2.z * 0.25D, var2.x, var2.y, var2.z);
+            for(int var11 = 0; var11 < 4; ++var11) {
+               float var12 = 0.25F;
+               this.level.addParticle(ParticleTypes.BUBBLE, var4 - var3.x * 0.25D, var6 - var3.y * 0.25D, var8 - var3.z * 0.25D, var3.x, var3.y, var3.z);
             }
 
-            var9 = 0.8F;
+            var10 = 0.8F;
          }
 
-         this.setDeltaMovement(var2.add(this.xPower, this.yPower, this.zPower).scale((double)var9));
-         this.level.addParticle(this.getTrailParticle(), var3, var5 + 0.5D, var7, 0.0D, 0.0D, 0.0D);
-         this.setPos(var3, var5, var7);
+         this.setDeltaMovement(var3.add(this.xPower, this.yPower, this.zPower).scale((double)var10));
+         this.level.addParticle(this.getTrailParticle(), var4, var6 + 0.5D, var8, 0.0D, 0.0D, 0.0D);
+         this.setPos(var4, var6, var8);
+      } else {
+         this.remove();
       }
    }
 
+   protected boolean canHitEntity(Entity var1) {
+      return super.canHitEntity(var1) && !var1.noPhysics;
+   }
+
    protected boolean shouldBurn() {
       return true;
    }
 
    protected ParticleOptions getTrailParticle() {
@@ -105,46 +97,26 @@
 
    protected float getInertia() {
       return 0.95F;
    }
 
-   protected void onHit(HitResult var1) {
-      HitResult.Type var2 = var1.getType();
-      if (var2 == HitResult.Type.BLOCK) {
-         BlockHitResult var3 = (BlockHitResult)var1;
-         BlockState var4 = this.level.getBlockState(var3.getBlockPos());
-         var4.onProjectileHit(this.level, var4, var3, this);
-      }
-
-   }
-
    public void addAdditionalSaveData(CompoundTag var1) {
-      Vec3 var2 = this.getDeltaMovement();
-      var1.put("direction", this.newDoubleList(new double[]{var2.x, var2.y, var2.z}));
+      super.addAdditionalSaveData(var1);
       var1.put("power", this.newDoubleList(new double[]{this.xPower, this.yPower, this.zPower}));
-      var1.putInt("life", this.life);
    }
 
    public void readAdditionalSaveData(CompoundTag var1) {
-      ListTag var2;
+      super.readAdditionalSaveData(var1);
       if (var1.contains("power", 9)) {
-         var2 = var1.getList("power", 6);
+         ListTag var2 = var1.getList("power", 6);
          if (var2.size() == 3) {
             this.xPower = var2.getDouble(0);
             this.yPower = var2.getDouble(1);
             this.zPower = var2.getDouble(2);
          }
       }
 
-      this.life = var1.getInt("life");
-      if (var1.contains("direction", 9) && var1.getList("direction", 6).size() == 3) {
-         var2 = var1.getList("direction", 6);
-         this.setDeltaMovement(var2.getDouble(0), var2.getDouble(1), var2.getDouble(2));
-      } else {
-         this.remove();
-      }
-
    }
 
    public boolean isPickable() {
       return true;
    }
@@ -156,20 +128,18 @@
    public boolean hurt(DamageSource var1, float var2) {
       if (this.isInvulnerableTo(var1)) {
          return false;
       } else {
          this.markHurt();
-         if (var1.getEntity() != null) {
-            Vec3 var3 = var1.getEntity().getLookAngle();
-            this.setDeltaMovement(var3);
-            this.xPower = var3.x * 0.1D;
-            this.yPower = var3.y * 0.1D;
-            this.zPower = var3.z * 0.1D;
-            if (var1.getEntity() instanceof LivingEntity) {
-               this.owner = (LivingEntity)var1.getEntity();
-            }
-
+         Entity var3 = var1.getEntity();
+         if (var3 != null) {
+            Vec3 var4 = var3.getLookAngle();
+            this.setDeltaMovement(var4);
+            this.xPower = var4.x * 0.1D;
+            this.yPower = var4.y * 0.1D;
+            this.zPower = var4.z * 0.1D;
+            this.setOwner(var3);
             return true;
          } else {
             return false;
          }
       }
@@ -178,9 +148,10 @@
    public float getBrightness() {
       return 1.0F;
    }
 
    public Packet<?> getAddEntityPacket() {
-      int var1 = this.owner == null ? 0 : this.owner.getId();
-      return new ClientboundAddEntityPacket(this.getId(), this.getUUID(), this.getX(), this.getY(), this.getZ(), this.xRot, this.yRot, this.getType(), var1, new Vec3(this.xPower, this.yPower, this.zPower));
+      Entity var1 = this.getOwner();
+      int var2 = var1 == null ? 0 : var1.getId();
+      return new ClientboundAddEntityPacket(this.getId(), this.getUUID(), this.getX(), this.getY(), this.getZ(), this.xRot, this.yRot, this.getType(), var2, new Vec3(this.xPower, this.yPower, this.zPower));
    }
 }
