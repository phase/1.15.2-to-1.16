--- net/minecraft/world/entity/projectile/ProjectileUtil.java
+++ net/minecraft/world/entity/projectile/ProjectileUtil.java
@@ -1,15 +1,11 @@
 package net.minecraft.world.entity.projectile;
 
-import com.google.common.collect.ImmutableSet;
 import java.util.Iterator;
 import java.util.Optional;
-import java.util.Set;
 import java.util.function.Predicate;
 import javax.annotation.Nullable;
-import net.minecraft.core.BlockPos;
-import net.minecraft.core.Direction;
 import net.minecraft.util.Mth;
 import net.minecraft.world.InteractionHand;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.item.ArrowItem;
@@ -17,108 +13,83 @@
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.Items;
 import net.minecraft.world.level.ClipContext;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.phys.AABB;
-import net.minecraft.world.phys.BlockHitResult;
 import net.minecraft.world.phys.EntityHitResult;
 import net.minecraft.world.phys.HitResult;
 import net.minecraft.world.phys.Vec3;
 
 public final class ProjectileUtil {
-   public static HitResult forwardsRaycast(Entity var0, boolean var1, boolean var2, @Nullable Entity var3, ClipContext.Block var4) {
-      return forwardsRaycast(var0, var1, var2, var3, var4, true, (var2x) -> {
-         return !var2x.isSpectator() && var2x.isPickable() && (var2 || !var2x.is(var3)) && !var2x.noPhysics;
-      }, var0.getBoundingBox().expandTowards(var0.getDeltaMovement()).inflate(1.0D));
-   }
+   public static HitResult getHitResult(Entity var0, Predicate<Entity> var1, ClipContext.Block var2) {
+      Vec3 var3 = var0.getDeltaMovement();
+      Level var4 = var0.level;
+      Vec3 var5 = var0.position();
+      Vec3 var6 = var5.add(var3);
+      Object var7 = var4.clip(new ClipContext(var5, var6, var2, ClipContext.Fluid.NONE, var0));
+      if (((HitResult)var7).getType() != HitResult.Type.MISS) {
+         var6 = ((HitResult)var7).getLocation();
+      }
 
-   public static HitResult getHitResult(Entity var0, AABB var1, Predicate<Entity> var2, ClipContext.Block var3, boolean var4) {
-      return forwardsRaycast(var0, var4, false, (Entity)null, var3, false, var2, var1);
-   }
+      EntityHitResult var8 = getEntityHitResult(var4, var0, var5, var6, var0.getBoundingBox().expandTowards(var0.getDeltaMovement()).inflate(1.0D), var1);
+      if (var8 != null) {
+         var7 = var8;
+      }
 
-   @Nullable
-   public static EntityHitResult getHitResult(Level var0, Entity var1, Vec3 var2, Vec3 var3, AABB var4, Predicate<Entity> var5) {
-      return getHitResult(var0, var1, var2, var3, var4, var5, Double.MAX_VALUE);
+      return (HitResult)var7;
    }
 
-   private static HitResult forwardsRaycast(Entity var0, boolean var1, boolean var2, @Nullable Entity var3, ClipContext.Block var4, boolean var5, Predicate<Entity> var6, AABB var7) {
-      Vec3 var8 = var0.getDeltaMovement();
-      Level var9 = var0.level;
-      Vec3 var10 = var0.position();
-      if (var5 && !var9.noCollision(var0, var0.getBoundingBox(), (Set)(!var2 && var3 != null ? getIgnoredEntities(var3) : ImmutableSet.of()))) {
-         return new BlockHitResult(var10, Direction.getNearest(var8.x, var8.y, var8.z), new BlockPos(var0), false);
-      } else {
-         Vec3 var11 = var10.add(var8);
-         Object var12 = var9.clip(new ClipContext(var10, var11, var4, ClipContext.Fluid.NONE, var0));
-         if (var1) {
-            if (((HitResult)var12).getType() != HitResult.Type.MISS) {
-               var11 = ((HitResult)var12).getLocation();
-            }
-
-            EntityHitResult var13 = getHitResult(var9, var0, var10, var11, var7, var6);
-            if (var13 != null) {
-               var12 = var13;
-            }
-         }
-
-         return (HitResult)var12;
-      }
-   }
-
    @Nullable
-   public static EntityHitResult getHitResult(Level var0, Entity var1, Vec3 var2, Vec3 var3, AABB var4, Predicate<Entity> var5, double var6) {
-      double var8 = var6;
-      Entity var10 = null;
-      Iterator var11 = var0.getEntities(var1, var4, var5).iterator();
+   public static EntityHitResult getEntityHitResult(Level var0, Entity var1, Vec3 var2, Vec3 var3, AABB var4, Predicate<Entity> var5) {
+      double var6 = Double.MAX_VALUE;
+      Entity var8 = null;
+      Iterator var9 = var0.getEntities(var1, var4, var5).iterator();
 
-      while(var11.hasNext()) {
-         Entity var12 = (Entity)var11.next();
-         AABB var13 = var12.getBoundingBox().inflate(0.30000001192092896D);
-         Optional var14 = var13.clip(var2, var3);
-         if (var14.isPresent()) {
-            double var15 = var2.distanceToSqr((Vec3)var14.get());
-            if (var15 < var8) {
-               var10 = var12;
-               var8 = var15;
+      while(var9.hasNext()) {
+         Entity var10 = (Entity)var9.next();
+         AABB var11 = var10.getBoundingBox().inflate(0.30000001192092896D);
+         Optional var12 = var11.clip(var2, var3);
+         if (var12.isPresent()) {
+            double var13 = var2.distanceToSqr((Vec3)var12.get());
+            if (var13 < var6) {
+               var8 = var10;
+               var6 = var13;
             }
          }
       }
 
-      if (var10 == null) {
+      if (var8 == null) {
          return null;
       } else {
-         return new EntityHitResult(var10);
+         return new EntityHitResult(var8);
       }
    }
 
-   private static Set<Entity> getIgnoredEntities(Entity var0) {
-      Entity var1 = var0.getVehicle();
-      return var1 != null ? ImmutableSet.of(var0, var1) : ImmutableSet.of(var0);
-   }
-
    public static final void rotateTowardsMovement(Entity var0, float var1) {
       Vec3 var2 = var0.getDeltaMovement();
-      float var3 = Mth.sqrt(Entity.getHorizontalDistanceSqr(var2));
-      var0.yRot = (float)(Mth.atan2(var2.z, var2.x) * 57.2957763671875D) + 90.0F;
+      if (var2.lengthSqr() != 0.0D) {
+         float var3 = Mth.sqrt(Entity.getHorizontalDistanceSqr(var2));
+         var0.yRot = (float)(Mth.atan2(var2.z, var2.x) * 57.2957763671875D) + 90.0F;
 
-      for(var0.xRot = (float)(Mth.atan2((double)var3, var2.y) * 57.2957763671875D) - 90.0F; var0.xRot - var0.xRotO < -180.0F; var0.xRotO -= 360.0F) {
-      }
+         for(var0.xRot = (float)(Mth.atan2((double)var3, var2.y) * 57.2957763671875D) - 90.0F; var0.xRot - var0.xRotO < -180.0F; var0.xRotO -= 360.0F) {
+         }
 
-      while(var0.xRot - var0.xRotO >= 180.0F) {
-         var0.xRotO += 360.0F;
-      }
+         while(var0.xRot - var0.xRotO >= 180.0F) {
+            var0.xRotO += 360.0F;
+         }
 
-      while(var0.yRot - var0.yRotO < -180.0F) {
-         var0.yRotO -= 360.0F;
-      }
+         while(var0.yRot - var0.yRotO < -180.0F) {
+            var0.yRotO -= 360.0F;
+         }
 
-      while(var0.yRot - var0.yRotO >= 180.0F) {
-         var0.yRotO += 360.0F;
-      }
+         while(var0.yRot - var0.yRotO >= 180.0F) {
+            var0.yRotO += 360.0F;
+         }
 
-      var0.xRot = Mth.lerp(var1, var0.xRotO, var0.xRot);
-      var0.yRot = Mth.lerp(var1, var0.yRotO, var0.yRot);
+         var0.xRot = Mth.lerp(var1, var0.xRotO, var0.xRot);
+         var0.yRot = Mth.lerp(var1, var0.yRotO, var0.yRot);
+      }
    }
 
    public static InteractionHand getWeaponHoldingHand(LivingEntity var0, Item var1) {
       return var0.getMainHandItem().getItem() == var1 ? InteractionHand.MAIN_HAND : InteractionHand.OFF_HAND;
    }
