--- net/minecraft/world/entity/projectile/ThrowableProjectile.java
+++ net/minecraft/world/entity/projectile/ThrowableProjectile.java
@@ -1,210 +1,91 @@
 package net.minecraft.world.entity.projectile;
 
-import java.util.Iterator;
-import java.util.UUID;
-import javax.annotation.Nullable;
+import net.minecraft.core.BlockPos;
 import net.minecraft.core.particles.ParticleTypes;
-import net.minecraft.nbt.CompoundTag;
-import net.minecraft.nbt.NbtUtils;
 import net.minecraft.network.protocol.Packet;
 import net.minecraft.network.protocol.game.ClientboundAddEntityPacket;
-import net.minecraft.server.level.ServerLevel;
-import net.minecraft.util.Mth;
-import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.level.ClipContext;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.block.Blocks;
-import net.minecraft.world.phys.AABB;
+import net.minecraft.world.level.block.entity.BlockEntity;
+import net.minecraft.world.level.block.entity.TheEndGatewayBlockEntity;
+import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.phys.BlockHitResult;
 import net.minecraft.world.phys.HitResult;
 import net.minecraft.world.phys.Vec3;
 
-public abstract class ThrowableProjectile extends Entity implements Projectile {
-   private int xBlock;
-   private int yBlock;
-   private int zBlock;
-   protected boolean inGround;
-   public int shakeTime;
-   protected LivingEntity owner;
-   private UUID ownerId;
-   private Entity entityToIgnore;
-   private int timeToIgnore;
-
+public abstract class ThrowableProjectile extends Projectile {
    protected ThrowableProjectile(EntityType<? extends ThrowableProjectile> var1, Level var2) {
       super(var1, var2);
-      this.xBlock = -1;
-      this.yBlock = -1;
-      this.zBlock = -1;
    }
 
    protected ThrowableProjectile(EntityType<? extends ThrowableProjectile> var1, double var2, double var4, double var6, Level var8) {
       this(var1, var8);
       this.setPos(var2, var4, var6);
    }
 
    protected ThrowableProjectile(EntityType<? extends ThrowableProjectile> var1, LivingEntity var2, Level var3) {
       this(var1, var2.getX(), var2.getEyeY() - 0.10000000149011612D, var2.getZ(), var3);
-      this.owner = var2;
-      this.ownerId = var2.getUUID();
+      this.setOwner(var2);
    }
 
-   public void shootFromRotation(Entity var1, float var2, float var3, float var4, float var5, float var6) {
-      float var7 = -Mth.sin(var3 * 0.017453292F) * Mth.cos(var2 * 0.017453292F);
-      float var8 = -Mth.sin((var2 + var4) * 0.017453292F);
-      float var9 = Mth.cos(var3 * 0.017453292F) * Mth.cos(var2 * 0.017453292F);
-      this.shoot((double)var7, (double)var8, (double)var9, var5, var6);
-      Vec3 var10 = var1.getDeltaMovement();
-      this.setDeltaMovement(this.getDeltaMovement().add(var10.x, var1.onGround ? 0.0D : var10.y, var10.z));
-   }
-
-   public void shoot(double var1, double var3, double var5, float var7, float var8) {
-      Vec3 var9 = (new Vec3(var1, var3, var5)).normalize().add(this.random.nextGaussian() * 0.007499999832361937D * (double)var8, this.random.nextGaussian() * 0.007499999832361937D * (double)var8, this.random.nextGaussian() * 0.007499999832361937D * (double)var8).scale((double)var7);
-      this.setDeltaMovement(var9);
-      float var10 = Mth.sqrt(getHorizontalDistanceSqr(var9));
-      this.yRot = (float)(Mth.atan2(var9.x, var9.z) * 57.2957763671875D);
-      this.xRot = (float)(Mth.atan2(var9.y, (double)var10) * 57.2957763671875D);
-      this.yRotO = this.yRot;
-      this.xRotO = this.xRot;
-   }
-
    public void tick() {
       super.tick();
-      if (this.shakeTime > 0) {
-         --this.shakeTime;
-      }
+      HitResult var1 = ProjectileUtil.getHitResult(this, this::canHitEntity, ClipContext.Block.OUTLINE);
+      boolean var2 = false;
+      if (var1.getType() == HitResult.Type.BLOCK) {
+         BlockPos var3 = ((BlockHitResult)var1).getBlockPos();
+         BlockState var4 = this.level.getBlockState(var3);
+         if (var4.is(Blocks.NETHER_PORTAL)) {
+            this.handleInsidePortal(var3);
+            var2 = true;
+         } else if (var4.is(Blocks.END_GATEWAY)) {
+            BlockEntity var5 = this.level.getBlockEntity(var3);
+            if (var5 instanceof TheEndGatewayBlockEntity && TheEndGatewayBlockEntity.canEntityTeleport(this)) {
+               ((TheEndGatewayBlockEntity)var5).teleportEntity(this);
+            }
 
-      if (this.inGround) {
-         this.inGround = false;
-         this.setDeltaMovement(this.getDeltaMovement().multiply((double)(this.random.nextFloat() * 0.2F), (double)(this.random.nextFloat() * 0.2F), (double)(this.random.nextFloat() * 0.2F)));
-      }
-
-      AABB var1 = this.getBoundingBox().expandTowards(this.getDeltaMovement()).inflate(1.0D);
-      Iterator var2 = this.level.getEntities((Entity)this, var1, (var0) -> {
-         return !var0.isSpectator() && var0.isPickable();
-      }).iterator();
-
-      while(var2.hasNext()) {
-         Entity var3 = (Entity)var2.next();
-         if (var3 == this.entityToIgnore) {
-            ++this.timeToIgnore;
-            break;
+            var2 = true;
          }
-
-         if (this.owner != null && this.tickCount < 2 && this.entityToIgnore == null) {
-            this.entityToIgnore = var3;
-            this.timeToIgnore = 3;
-            break;
-         }
       }
 
-      HitResult var14 = ProjectileUtil.getHitResult(this, var1, (var1x) -> {
-         return !var1x.isSpectator() && var1x.isPickable() && var1x != this.entityToIgnore;
-      }, ClipContext.Block.OUTLINE, true);
-      if (this.entityToIgnore != null && this.timeToIgnore-- <= 0) {
-         this.entityToIgnore = null;
+      if (var1.getType() != HitResult.Type.MISS && !var2) {
+         this.onHit(var1);
       }
 
-      if (var14.getType() != HitResult.Type.MISS) {
-         if (var14.getType() == HitResult.Type.BLOCK && this.level.getBlockState(((BlockHitResult)var14).getBlockPos()).getBlock() == Blocks.NETHER_PORTAL) {
-            this.handleInsidePortal(((BlockHitResult)var14).getBlockPos());
-         } else {
-            this.onHit(var14);
-         }
-      }
-
-      Vec3 var15 = this.getDeltaMovement();
-      double var4 = this.getX() + var15.x;
-      double var6 = this.getY() + var15.y;
-      double var8 = this.getZ() + var15.z;
-      float var10 = Mth.sqrt(getHorizontalDistanceSqr(var15));
-      this.yRot = (float)(Mth.atan2(var15.x, var15.z) * 57.2957763671875D);
-
-      for(this.xRot = (float)(Mth.atan2(var15.y, (double)var10) * 57.2957763671875D); this.xRot - this.xRotO < -180.0F; this.xRotO -= 360.0F) {
-      }
-
-      while(this.xRot - this.xRotO >= 180.0F) {
-         this.xRotO += 360.0F;
-      }
-
-      while(this.yRot - this.yRotO < -180.0F) {
-         this.yRotO -= 360.0F;
-      }
-
-      while(this.yRot - this.yRotO >= 180.0F) {
-         this.yRotO += 360.0F;
-      }
-
-      this.xRot = Mth.lerp(0.2F, this.xRotO, this.xRot);
-      this.yRot = Mth.lerp(0.2F, this.yRotO, this.yRot);
-      float var11;
+      Vec3 var13 = this.getDeltaMovement();
+      double var14 = this.getX() + var13.x;
+      double var6 = this.getY() + var13.y;
+      double var8 = this.getZ() + var13.z;
+      this.updateRotation();
+      float var10;
       if (this.isInWater()) {
-         for(int var12 = 0; var12 < 4; ++var12) {
-            float var13 = 0.25F;
-            this.level.addParticle(ParticleTypes.BUBBLE, var4 - var15.x * 0.25D, var6 - var15.y * 0.25D, var8 - var15.z * 0.25D, var15.x, var15.y, var15.z);
+         for(int var11 = 0; var11 < 4; ++var11) {
+            float var12 = 0.25F;
+            this.level.addParticle(ParticleTypes.BUBBLE, var14 - var13.x * 0.25D, var6 - var13.y * 0.25D, var8 - var13.z * 0.25D, var13.x, var13.y, var13.z);
          }
 
-         var11 = 0.8F;
+         var10 = 0.8F;
       } else {
-         var11 = 0.99F;
+         var10 = 0.99F;
       }
 
-      this.setDeltaMovement(var15.scale((double)var11));
+      this.setDeltaMovement(var13.scale((double)var10));
       if (!this.isNoGravity()) {
-         Vec3 var16 = this.getDeltaMovement();
-         this.setDeltaMovement(var16.x, var16.y - (double)this.getGravity(), var16.z);
+         Vec3 var15 = this.getDeltaMovement();
+         this.setDeltaMovement(var15.x, var15.y - (double)this.getGravity(), var15.z);
       }
 
-      this.setPos(var4, var6, var8);
+      this.setPos(var14, var6, var8);
    }
 
    protected float getGravity() {
       return 0.03F;
    }
 
-   protected abstract void onHit(HitResult var1);
-
-   public void addAdditionalSaveData(CompoundTag var1) {
-      var1.putInt("xTile", this.xBlock);
-      var1.putInt("yTile", this.yBlock);
-      var1.putInt("zTile", this.zBlock);
-      var1.putByte("shake", (byte)this.shakeTime);
-      var1.putBoolean("inGround", this.inGround);
-      if (this.ownerId != null) {
-         var1.put("owner", NbtUtils.createUUIDTag(this.ownerId));
-      }
-
-   }
-
-   public void readAdditionalSaveData(CompoundTag var1) {
-      this.xBlock = var1.getInt("xTile");
-      this.yBlock = var1.getInt("yTile");
-      this.zBlock = var1.getInt("zTile");
-      this.shakeTime = var1.getByte("shake") & 255;
-      this.inGround = var1.getBoolean("inGround");
-      this.owner = null;
-      if (var1.contains("owner", 10)) {
-         this.ownerId = NbtUtils.loadUUIDTag(var1.getCompound("owner"));
-      }
-
-   }
-
-   @Nullable
-   public LivingEntity getOwner() {
-      if ((this.owner == null || this.owner.removed) && this.ownerId != null && this.level instanceof ServerLevel) {
-         Entity var1 = ((ServerLevel)this.level).getEntity(this.ownerId);
-         if (var1 instanceof LivingEntity) {
-            this.owner = (LivingEntity)var1;
-         } else {
-            this.owner = null;
-         }
-      }
-
-      return this.owner;
-   }
-
    public Packet<?> getAddEntityPacket() {
       return new ClientboundAddEntityPacket(this);
    }
 }
