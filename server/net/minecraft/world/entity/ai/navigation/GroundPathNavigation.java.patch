--- net/minecraft/world/entity/ai/navigation/GroundPathNavigation.java
+++ net/minecraft/world/entity/ai/navigation/GroundPathNavigation.java
@@ -28,11 +28,11 @@
       this.nodeEvaluator.setCanPassDoors(true);
       return new PathFinder(this.nodeEvaluator, var1);
    }
 
    protected boolean canUpdatePath() {
-      return this.mob.onGround || this.isInLiquid() || this.mob.isPassenger();
+      return this.mob.isOnGround() || this.isInLiquid() || this.mob.isPassenger();
    }
 
    protected Vec3 getTempMobPos() {
       return new Vec3(this.mob.getX(), (double)this.getSurfaceY(), this.mob.getZ());
    }
@@ -63,11 +63,11 @@
          return super.createPath(var3, var2);
       }
    }
 
    public Path createPath(Entity var1, int var2) {
-      return this.createPath(new BlockPos(var1), var2);
+      return this.createPath(var1.blockPosition(), var2);
    }
 
    private int getSurfaceY() {
       if (this.mob.isInWater() && this.canFloat()) {
          int var1 = Mth.floor(this.mob.getY());
@@ -179,22 +179,14 @@
             for(int var15 = var13; var15 < var13 + var6; ++var15) {
                double var16 = (double)var14 + 0.5D - var7.x;
                double var18 = (double)var15 + 0.5D - var7.z;
                if (var16 * var8 + var18 * var10 >= 0.0D) {
                   BlockPathTypes var20 = this.nodeEvaluator.getBlockPathType(this.level, var14, var2 - 1, var15, this.mob, var4, var5, var6, true, true);
-                  if (var20 == BlockPathTypes.WATER) {
+                  if (!this.hasValidPathType(var20)) {
                      return false;
                   }
 
-                  if (var20 == BlockPathTypes.LAVA) {
-                     return false;
-                  }
-
-                  if (var20 == BlockPathTypes.OPEN) {
-                     return false;
-                  }
-
                   var20 = this.nodeEvaluator.getBlockPathType(this.level, var14, var2, var15, this.mob, var4, var5, var6, true, true);
                   float var21 = this.mob.getPathfindingMalus(var20);
                   if (var21 < 0.0F || var21 >= 8.0F) {
                      return false;
                   }
@@ -208,10 +200,20 @@
 
          return true;
       }
    }
 
+   protected boolean hasValidPathType(BlockPathTypes var1) {
+      if (var1 == BlockPathTypes.WATER) {
+         return false;
+      } else if (var1 == BlockPathTypes.LAVA) {
+         return false;
+      } else {
+         return var1 != BlockPathTypes.OPEN;
+      }
+   }
+
    private boolean canWalkAbove(int var1, int var2, int var3, int var4, int var5, int var6, Vec3 var7, double var8, double var10) {
       Iterator var12 = BlockPos.betweenClosed(new BlockPos(var1, var2, var3), new BlockPos(var1 + var4 - 1, var2 + var5 - 1, var3 + var6 - 1)).iterator();
 
       BlockPos var13;
       double var14;
