--- net/minecraft/world/entity/ai/navigation/WaterBoundPathNavigation.java
+++ net/minecraft/world/entity/ai/navigation/WaterBoundPathNavigation.java
@@ -1,9 +1,10 @@
 package net.minecraft.world.entity.ai.navigation;
 
 import net.minecraft.Util;
 import net.minecraft.core.BlockPos;
+import net.minecraft.core.Vec3i;
 import net.minecraft.network.protocol.game.DebugPackets;
 import net.minecraft.util.Mth;
 import net.minecraft.world.entity.Mob;
 import net.minecraft.world.entity.animal.Dolphin;
 import net.minecraft.world.level.ClipContext;
@@ -41,11 +42,11 @@
       }
 
       if (!this.isDone()) {
          Vec3 var1;
          if (this.canUpdatePath()) {
-            this.updatePath();
+            this.followThePath();
          } else if (this.path != null && this.path.getIndex() < this.path.getSize()) {
             var1 = this.path.getPos(this.mob, this.path.getIndex());
             if (Mth.floor(this.mob.getX()) == Mth.floor(var1.x) && Mth.floor(this.mob.getY()) == Mth.floor(var1.y) && Mth.floor(this.mob.getZ()) == Mth.floor(var1.z)) {
                this.path.setIndex(this.path.getIndex() + 1);
             }
@@ -57,23 +58,23 @@
             this.mob.getMoveControl().setWantedPosition(var1.x, var1.y, var1.z, this.speedModifier);
          }
       }
    }
 
-   protected void updatePath() {
+   protected void followThePath() {
       if (this.path != null) {
          Vec3 var1 = this.getTempMobPos();
          float var2 = this.mob.getBbWidth();
          float var3 = var2 > 0.75F ? var2 / 2.0F : 0.75F - var2 / 2.0F;
          Vec3 var4 = this.mob.getDeltaMovement();
          if (Math.abs(var4.x) > 0.2D || Math.abs(var4.z) > 0.2D) {
             var3 = (float)((double)var3 * var4.length() * 6.0D);
          }
 
          boolean var5 = true;
-         Vec3 var6 = this.path.currentPos();
-         if (Math.abs(this.mob.getX() - (var6.x + 0.5D)) < (double)var3 && Math.abs(this.mob.getZ() - (var6.z + 0.5D)) < (double)var3 && Math.abs(this.mob.getY() - var6.y) < (double)(var3 * 2.0F)) {
+         Vec3 var6 = Vec3.atBottomCenterOf(this.path.currentPos());
+         if (Math.abs(this.mob.getX() - var6.x) < (double)var3 && Math.abs(this.mob.getZ() - var6.z) < (double)var3 && Math.abs(this.mob.getY() - var6.y) < (double)(var3 * 2.0F)) {
             this.path.next();
          }
 
          for(int var7 = Math.min(this.path.getIndex() + 6, this.path.getSize() - 1); var7 > this.path.getIndex(); --var7) {
             var6 = this.path.getPos(this.mob, var7);
@@ -96,21 +97,21 @@
          this.lastStuckCheck = this.tick;
          this.lastStuckCheckPos = var1;
       }
 
       if (this.path != null && !this.path.isDone()) {
-         Vec3 var2 = this.path.currentPos();
+         Vec3i var2 = this.path.currentPos();
          if (var2.equals(this.timeoutCachedNode)) {
             this.timeoutTimer += Util.getMillis() - this.lastTimeoutCheck;
          } else {
             this.timeoutCachedNode = var2;
-            double var3 = var1.distanceTo(this.timeoutCachedNode);
+            double var3 = var1.distanceTo(Vec3.atCenterOf(this.timeoutCachedNode));
             this.timeoutLimit = this.mob.getSpeed() > 0.0F ? var3 / (double)this.mob.getSpeed() * 100.0D : 0.0D;
          }
 
          if (this.timeoutLimit > 0.0D && (double)this.timeoutTimer > this.timeoutLimit * 2.0D) {
-            this.timeoutCachedNode = Vec3.ZERO;
+            this.timeoutCachedNode = Vec3i.ZERO;
             this.timeoutTimer = 0L;
             this.timeoutLimit = 0.0D;
             this.stop();
          }
 
