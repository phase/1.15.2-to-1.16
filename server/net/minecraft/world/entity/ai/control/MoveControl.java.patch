--- net/minecraft/world/entity/ai/control/MoveControl.java
+++ net/minecraft/world/entity/ai/control/MoveControl.java
@@ -1,14 +1,15 @@
 package net.minecraft.world.entity.ai.control;
 
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.tags.BlockTags;
+import net.minecraft.tags.Tag;
 import net.minecraft.util.Mth;
 import net.minecraft.world.entity.Mob;
+import net.minecraft.world.entity.ai.attributes.Attributes;
 import net.minecraft.world.entity.ai.navigation.PathNavigation;
-import net.minecraft.world.entity.monster.SharedMonsterAttributes;
 import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.pathfinder.BlockPathTypes;
 import net.minecraft.world.level.pathfinder.NodeEvaluator;
 import net.minecraft.world.phys.shapes.VoxelShape;
@@ -55,11 +56,11 @@
    }
 
    public void tick() {
       float var9;
       if (this.operation == MoveControl.Operation.STRAFE) {
-         float var1 = (float)this.mob.getAttribute(SharedMonsterAttributes.MOVEMENT_SPEED).getValue();
+         float var1 = (float)this.mob.getAttributeValue(Attributes.MOVEMENT_SPEED);
          float var2 = (float)this.speedModifier * var1;
          float var3 = this.strafeForwards;
          float var4 = this.strafeRight;
          float var5 = Mth.sqrt(var3 * var3 + var4 * var4);
          if (var5 < 1.0F) {
@@ -71,18 +72,13 @@
          var4 *= var5;
          float var6 = Mth.sin(this.mob.yRot * 0.017453292F);
          float var7 = Mth.cos(this.mob.yRot * 0.017453292F);
          float var8 = var3 * var7 - var4 * var6;
          var9 = var4 * var7 + var3 * var6;
-         PathNavigation var10 = this.mob.getNavigation();
-         if (var10 != null) {
-            NodeEvaluator var11 = var10.getNodeEvaluator();
-            if (var11 != null && var11.getBlockPathType(this.mob.level, Mth.floor(this.mob.getX() + (double)var8), Mth.floor(this.mob.getY()), Mth.floor(this.mob.getZ() + (double)var9)) != BlockPathTypes.WALKABLE) {
-               this.strafeForwards = 1.0F;
-               this.strafeRight = 0.0F;
-               var2 = var1;
-            }
+         if (!this.isWalkable(var8, var9)) {
+            this.strafeForwards = 1.0F;
+            this.strafeRight = 0.0F;
          }
 
          this.mob.setSpeed(var2);
          this.mob.setZza(this.strafeForwards);
          this.mob.setXxa(this.strafeRight);
@@ -98,30 +94,42 @@
             return;
          }
 
          var9 = (float)(Mth.atan2(var15, var14) * 57.2957763671875D) - 90.0F;
          this.mob.yRot = this.rotlerp(this.mob.yRot, var9, 90.0F);
-         this.mob.setSpeed((float)(this.speedModifier * this.mob.getAttribute(SharedMonsterAttributes.MOVEMENT_SPEED).getValue()));
-         BlockPos var18 = new BlockPos(this.mob);
-         BlockState var19 = this.mob.level.getBlockState(var18);
-         Block var12 = var19.getBlock();
-         VoxelShape var13 = var19.getCollisionShape(this.mob.level, var18);
-         if (var16 > (double)this.mob.maxUpStep && var14 * var14 + var15 * var15 < (double)Math.max(1.0F, this.mob.getBbWidth()) || !var13.isEmpty() && this.mob.getY() < var13.max(Direction.Axis.Y) + (double)var18.getY() && !var12.is(BlockTags.DOORS) && !var12.is(BlockTags.FENCES)) {
+         this.mob.setSpeed((float)(this.speedModifier * this.mob.getAttributeValue(Attributes.MOVEMENT_SPEED)));
+         BlockPos var10 = this.mob.blockPosition();
+         BlockState var11 = this.mob.level.getBlockState(var10);
+         Block var12 = var11.getBlock();
+         VoxelShape var13 = var11.getCollisionShape(this.mob.level, var10);
+         if (var16 > (double)this.mob.maxUpStep && var14 * var14 + var15 * var15 < (double)Math.max(1.0F, this.mob.getBbWidth()) || !var13.isEmpty() && this.mob.getY() < var13.max(Direction.Axis.Y) + (double)var10.getY() && !var12.is((Tag)BlockTags.DOORS) && !var12.is((Tag)BlockTags.FENCES)) {
             this.mob.getJumpControl().jump();
             this.operation = MoveControl.Operation.JUMPING;
          }
       } else if (this.operation == MoveControl.Operation.JUMPING) {
-         this.mob.setSpeed((float)(this.speedModifier * this.mob.getAttribute(SharedMonsterAttributes.MOVEMENT_SPEED).getValue()));
-         if (this.mob.onGround) {
+         this.mob.setSpeed((float)(this.speedModifier * this.mob.getAttributeValue(Attributes.MOVEMENT_SPEED)));
+         if (this.mob.isOnGround()) {
             this.operation = MoveControl.Operation.WAIT;
          }
       } else {
          this.mob.setZza(0.0F);
       }
 
    }
 
+   private boolean isWalkable(float var1, float var2) {
+      PathNavigation var3 = this.mob.getNavigation();
+      if (var3 != null) {
+         NodeEvaluator var4 = var3.getNodeEvaluator();
+         if (var4 != null && var4.getBlockPathType(this.mob.level, Mth.floor(this.mob.getX() + (double)var1), Mth.floor(this.mob.getY()), Mth.floor(this.mob.getZ() + (double)var2)) != BlockPathTypes.WALKABLE) {
+            return false;
+         }
+      }
+
+      return true;
+   }
+
    protected float rotlerp(float var1, float var2, float var3) {
       float var4 = Mth.wrapDegrees(var2 - var1);
       if (var4 > var3) {
          var4 = var3;
       }
