--- net/minecraft/world/entity/ai/goal/target/HurtByTargetGoal.java
+++ net/minecraft/world/entity/ai/goal/target/HurtByTargetGoal.java
@@ -1,16 +1,18 @@
 package net.minecraft.world.entity.ai.goal.target;
 
 import java.util.EnumSet;
 import java.util.Iterator;
 import java.util.List;
+import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.Mob;
 import net.minecraft.world.entity.PathfinderMob;
 import net.minecraft.world.entity.TamableAnimal;
 import net.minecraft.world.entity.ai.goal.Goal;
 import net.minecraft.world.entity.ai.targeting.TargetingConditions;
+import net.minecraft.world.level.GameRules;
 import net.minecraft.world.phys.AABB;
 
 public class HurtByTargetGoal extends TargetGoal {
    private static final TargetingConditions HURT_BY_TARGETING = (new TargetingConditions()).allowUnseeable().ignoreInvisibilityTesting();
    private boolean alertSameType;
@@ -26,21 +28,25 @@
 
    public boolean canUse() {
       int var1 = this.mob.getLastHurtByMobTimestamp();
       LivingEntity var2 = this.mob.getLastHurtByMob();
       if (var1 != this.timestamp && var2 != null) {
-         Class[] var3 = this.toIgnoreDamage;
-         int var4 = var3.length;
+         if (var2.getType() == EntityType.PLAYER && this.mob.level.getGameRules().getBoolean(GameRules.RULE_UNIVERSAL_ANGER)) {
+            return false;
+         } else {
+            Class[] var3 = this.toIgnoreDamage;
+            int var4 = var3.length;
 
-         for(int var5 = 0; var5 < var4; ++var5) {
-            Class var6 = var3[var5];
-            if (var6.isAssignableFrom(var2.getClass())) {
-               return false;
+            for(int var5 = 0; var5 < var4; ++var5) {
+               Class var6 = var3[var5];
+               if (var6.isAssignableFrom(var2.getClass())) {
+                  return false;
+               }
             }
-         }
 
-         return this.canAttack(var2, HURT_BY_TARGETING);
+            return this.canAttack(var2, HURT_BY_TARGETING);
+         }
       } else {
          return false;
       }
    }
 
@@ -62,49 +68,50 @@
       super.start();
    }
 
    protected void alertOthers() {
       double var1 = this.getFollowDistance();
-      List var3 = this.mob.level.getLoadedEntitiesOfClass(this.mob.getClass(), (new AABB(this.mob.getX(), this.mob.getY(), this.mob.getZ(), this.mob.getX() + 1.0D, this.mob.getY() + 1.0D, this.mob.getZ() + 1.0D)).inflate(var1, 10.0D, var1));
-      Iterator var4 = var3.iterator();
+      AABB var3 = AABB.unitCubeFromLowerCorner(this.mob.position()).inflate(var1, 10.0D, var1);
+      List var4 = this.mob.level.getLoadedEntitiesOfClass(this.mob.getClass(), var3);
+      Iterator var5 = var4.iterator();
 
       while(true) {
-         Mob var5;
-         boolean var6;
+         Mob var6;
+         boolean var7;
          do {
             do {
                do {
                   do {
                      do {
-                        if (!var4.hasNext()) {
+                        if (!var5.hasNext()) {
                            return;
                         }
 
-                        var5 = (Mob)var4.next();
-                     } while(this.mob == var5);
-                  } while(var5.getTarget() != null);
-               } while(this.mob instanceof TamableAnimal && ((TamableAnimal)this.mob).getOwner() != ((TamableAnimal)var5).getOwner());
-            } while(var5.isAlliedTo(this.mob.getLastHurtByMob()));
+                        var6 = (Mob)var5.next();
+                     } while(this.mob == var6);
+                  } while(var6.getTarget() != null);
+               } while(this.mob instanceof TamableAnimal && ((TamableAnimal)this.mob).getOwner() != ((TamableAnimal)var6).getOwner());
+            } while(var6.isAlliedTo(this.mob.getLastHurtByMob()));
 
             if (this.toIgnoreAlert == null) {
                break;
             }
 
-            var6 = false;
-            Class[] var7 = this.toIgnoreAlert;
-            int var8 = var7.length;
+            var7 = false;
+            Class[] var8 = this.toIgnoreAlert;
+            int var9 = var8.length;
 
-            for(int var9 = 0; var9 < var8; ++var9) {
-               Class var10 = var7[var9];
-               if (var5.getClass() == var10) {
-                  var6 = true;
+            for(int var10 = 0; var10 < var9; ++var10) {
+               Class var11 = var8[var10];
+               if (var6.getClass() == var11) {
+                  var7 = true;
                   break;
                }
             }
-         } while(var6);
+         } while(var7);
 
-         this.alertOther(var5, this.mob.getLastHurtByMob());
+         this.alertOther(var6, this.mob.getLastHurtByMob());
       }
    }
 
    protected void alertOther(Mob var1, LivingEntity var2) {
       var1.setTarget(var2);
