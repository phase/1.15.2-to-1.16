--- net/minecraft/world/entity/ai/goal/MeleeAttackGoal.java
+++ net/minecraft/world/entity/ai/goal/MeleeAttackGoal.java
@@ -1,43 +1,42 @@
 package net.minecraft.world.entity.ai.goal;
 
 import java.util.EnumSet;
-import net.minecraft.core.BlockPos;
 import net.minecraft.world.InteractionHand;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EntitySelector;
 import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.PathfinderMob;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.level.pathfinder.Path;
 
 public class MeleeAttackGoal extends Goal {
    protected final PathfinderMob mob;
-   protected int attackTime;
    private final double speedModifier;
-   private final boolean trackTarget;
+   private final boolean followingTargetEvenIfNotSeen;
    private Path path;
-   private int timeToRecalcPath;
    private double pathedTargetX;
    private double pathedTargetY;
    private double pathedTargetZ;
-   protected final int attackInterval = 20;
-   private long lastUpdate;
+   private int ticksUntilNextPathRecalculation;
+   private int ticksUntilNextAttack;
+   private final int attackInterval = 20;
+   private long lastCanUseCheck;
 
    public MeleeAttackGoal(PathfinderMob var1, double var2, boolean var4) {
       this.mob = var1;
       this.speedModifier = var2;
-      this.trackTarget = var4;
+      this.followingTargetEvenIfNotSeen = var4;
       this.setFlags(EnumSet.of(Goal.Flag.MOVE, Goal.Flag.LOOK));
    }
 
    public boolean canUse() {
       long var1 = this.mob.level.getGameTime();
-      if (var1 - this.lastUpdate < 20L) {
+      if (var1 - this.lastCanUseCheck < 20L) {
          return false;
       } else {
-         this.lastUpdate = var1;
+         this.lastCanUseCheck = var1;
          LivingEntity var3 = this.mob.getTarget();
          if (var3 == null) {
             return false;
          } else if (!var3.isAlive()) {
             return false;
@@ -56,23 +55,24 @@
       LivingEntity var1 = this.mob.getTarget();
       if (var1 == null) {
          return false;
       } else if (!var1.isAlive()) {
          return false;
-      } else if (!this.trackTarget) {
+      } else if (!this.followingTargetEvenIfNotSeen) {
          return !this.mob.getNavigation().isDone();
-      } else if (!this.mob.isWithinRestriction(new BlockPos(var1))) {
+      } else if (!this.mob.isWithinRestriction(var1.blockPosition())) {
          return false;
       } else {
          return !(var1 instanceof Player) || !var1.isSpectator() && !((Player)var1).isCreative();
       }
    }
 
    public void start() {
       this.mob.getNavigation().moveTo(this.path, this.speedModifier);
       this.mob.setAggressive(true);
-      this.timeToRecalcPath = 0;
+      this.ticksUntilNextPathRecalculation = 0;
+      this.ticksUntilNextAttack = 0;
    }
 
    public void stop() {
       LivingEntity var1 = this.mob.getTarget();
       if (!EntitySelector.NO_CREATIVE_OR_SPECTATOR.test(var1)) {
@@ -85,40 +85,56 @@
 
    public void tick() {
       LivingEntity var1 = this.mob.getTarget();
       this.mob.getLookControl().setLookAt(var1, 30.0F, 30.0F);
       double var2 = this.mob.distanceToSqr(var1.getX(), var1.getY(), var1.getZ());
-      --this.timeToRecalcPath;
-      if ((this.trackTarget || this.mob.getSensing().canSee(var1)) && this.timeToRecalcPath <= 0 && (this.pathedTargetX == 0.0D && this.pathedTargetY == 0.0D && this.pathedTargetZ == 0.0D || var1.distanceToSqr(this.pathedTargetX, this.pathedTargetY, this.pathedTargetZ) >= 1.0D || this.mob.getRandom().nextFloat() < 0.05F)) {
+      this.ticksUntilNextPathRecalculation = Math.max(this.ticksUntilNextPathRecalculation - 1, 0);
+      if ((this.followingTargetEvenIfNotSeen || this.mob.getSensing().canSee(var1)) && this.ticksUntilNextPathRecalculation <= 0 && (this.pathedTargetX == 0.0D && this.pathedTargetY == 0.0D && this.pathedTargetZ == 0.0D || var1.distanceToSqr(this.pathedTargetX, this.pathedTargetY, this.pathedTargetZ) >= 1.0D || this.mob.getRandom().nextFloat() < 0.05F)) {
          this.pathedTargetX = var1.getX();
          this.pathedTargetY = var1.getY();
          this.pathedTargetZ = var1.getZ();
-         this.timeToRecalcPath = 4 + this.mob.getRandom().nextInt(7);
+         this.ticksUntilNextPathRecalculation = 4 + this.mob.getRandom().nextInt(7);
          if (var2 > 1024.0D) {
-            this.timeToRecalcPath += 10;
+            this.ticksUntilNextPathRecalculation += 10;
          } else if (var2 > 256.0D) {
-            this.timeToRecalcPath += 5;
+            this.ticksUntilNextPathRecalculation += 5;
          }
 
          if (!this.mob.getNavigation().moveTo((Entity)var1, this.speedModifier)) {
-            this.timeToRecalcPath += 15;
+            this.ticksUntilNextPathRecalculation += 15;
          }
       }
 
-      this.attackTime = Math.max(this.attackTime - 1, 0);
+      this.ticksUntilNextAttack = Math.max(this.ticksUntilNextAttack - 1, 0);
       this.checkAndPerformAttack(var1, var2);
    }
 
    protected void checkAndPerformAttack(LivingEntity var1, double var2) {
       double var4 = this.getAttackReachSqr(var1);
-      if (var2 <= var4 && this.attackTime <= 0) {
-         this.attackTime = 20;
+      if (var2 <= var4 && this.ticksUntilNextAttack <= 0) {
+         this.resetAttackCooldown();
          this.mob.swing(InteractionHand.MAIN_HAND);
          this.mob.doHurtTarget(var1);
       }
 
    }
 
+   protected void resetAttackCooldown() {
+      this.ticksUntilNextAttack = 20;
+   }
+
+   protected boolean isTimeToAttack() {
+      return this.ticksUntilNextAttack <= 0;
+   }
+
+   protected int getTicksUntilNextAttack() {
+      return this.ticksUntilNextAttack;
+   }
+
+   protected int getAttackInterval() {
+      return 20;
+   }
+
    protected double getAttackReachSqr(LivingEntity var1) {
       return (double)(this.mob.getBbWidth() * 2.0F * this.mob.getBbWidth() * 2.0F + var1.getBbWidth());
    }
 }
