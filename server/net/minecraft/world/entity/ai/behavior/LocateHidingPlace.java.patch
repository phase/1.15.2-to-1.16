--- net/minecraft/world/entity/ai/behavior/LocateHidingPlace.java
+++ net/minecraft/world/entity/ai/behavior/LocateHidingPlace.java
@@ -12,28 +12,28 @@
 import net.minecraft.world.entity.ai.memory.WalkTarget;
 import net.minecraft.world.entity.ai.village.poi.PoiManager;
 import net.minecraft.world.entity.ai.village.poi.PoiType;
 
 public class LocateHidingPlace extends Behavior<LivingEntity> {
-   private final float speed;
+   private final float speedModifier;
    private final int radius;
    private final int closeEnoughDist;
    private Optional<BlockPos> currentPos = Optional.empty();
 
    public LocateHidingPlace(int var1, float var2, int var3) {
       super(ImmutableMap.of(MemoryModuleType.WALK_TARGET, MemoryStatus.VALUE_ABSENT, MemoryModuleType.HOME, MemoryStatus.REGISTERED, MemoryModuleType.HIDING_PLACE, MemoryStatus.REGISTERED));
       this.radius = var1;
-      this.speed = var2;
+      this.speedModifier = var2;
       this.closeEnoughDist = var3;
    }
 
    protected boolean checkExtraStartConditions(ServerLevel var1, LivingEntity var2) {
       Optional var3 = var1.getPoiManager().find((var0) -> {
          return var0 == PoiType.HOME;
       }, (var0) -> {
          return true;
-      }, new BlockPos(var2), this.closeEnoughDist + 1, PoiManager.Occupancy.ANY);
+      }, var2.blockPosition(), this.closeEnoughDist + 1, PoiManager.Occupancy.ANY);
       if (var3.isPresent() && ((BlockPos)var3.get()).closerThan(var2.position(), (double)this.closeEnoughDist)) {
          this.currentPos = var3;
       } else {
          this.currentPos = Optional.empty();
       }
@@ -47,11 +47,11 @@
       if (!var6.isPresent()) {
          var6 = var1.getPoiManager().getRandom((var0) -> {
             return var0 == PoiType.HOME;
          }, (var0) -> {
             return true;
-         }, PoiManager.Occupancy.ANY, new BlockPos(var2), this.radius, var2.getRandom());
+         }, PoiManager.Occupancy.ANY, var2.blockPosition(), this.radius, var2.getRandom());
          if (!var6.isPresent()) {
             Optional var7 = var5.getMemory(MemoryModuleType.HOME);
             if (var7.isPresent()) {
                var6 = Optional.of(((GlobalPos)var7.get()).pos());
             }
@@ -61,13 +61,13 @@
       if (var6.isPresent()) {
          var5.eraseMemory(MemoryModuleType.PATH);
          var5.eraseMemory(MemoryModuleType.LOOK_TARGET);
          var5.eraseMemory(MemoryModuleType.BREED_TARGET);
          var5.eraseMemory(MemoryModuleType.INTERACTION_TARGET);
-         var5.setMemory(MemoryModuleType.HIDING_PLACE, (Object)GlobalPos.of(var1.getDimension().getType(), (BlockPos)var6.get()));
+         var5.setMemory(MemoryModuleType.HIDING_PLACE, (Object)GlobalPos.of(var1.dimension(), (BlockPos)var6.get()));
          if (!((BlockPos)var6.get()).closerThan(var2.position(), (double)this.closeEnoughDist)) {
-            var5.setMemory(MemoryModuleType.WALK_TARGET, (Object)(new WalkTarget((BlockPos)var6.get(), this.speed, this.closeEnoughDist)));
+            var5.setMemory(MemoryModuleType.WALK_TARGET, (Object)(new WalkTarget((BlockPos)var6.get(), this.speedModifier, this.closeEnoughDist)));
          }
       }
 
    }
 }
