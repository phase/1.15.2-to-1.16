--- net/minecraft/world/entity/ai/behavior/WorkAtPoi.java
+++ net/minecraft/world/entity/ai/behavior/WorkAtPoi.java
@@ -1,11 +1,10 @@
 package net.minecraft.world.entity.ai.behavior;
 
 import com.google.common.collect.ImmutableMap;
-import java.util.Objects;
+import java.util.Optional;
 import net.minecraft.core.GlobalPos;
-import net.minecraft.core.SerializableLong;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.world.entity.ai.Brain;
 import net.minecraft.world.entity.ai.memory.MemoryModuleType;
 import net.minecraft.world.entity.ai.memory.MemoryStatus;
 import net.minecraft.world.entity.npc.Villager;
@@ -23,22 +22,36 @@
       } else if (var1.random.nextInt(2) != 0) {
          return false;
       } else {
          this.lastCheck = var1.getGameTime();
          GlobalPos var3 = (GlobalPos)var2.getBrain().getMemory(MemoryModuleType.JOB_SITE).get();
-         return Objects.equals(var3.dimension(), var1.getDimension().getType()) && var3.pos().closerThan(var2.position(), 1.73D);
+         return var3.dimension() == var1.dimension() && var3.pos().closerThan(var2.position(), 1.73D);
       }
    }
 
    protected void start(ServerLevel var1, Villager var2, long var3) {
       Brain var5 = var2.getBrain();
-      var5.setMemory(MemoryModuleType.LAST_WORKED_AT_POI, (Object)SerializableLong.of(var3));
+      var5.setMemory(MemoryModuleType.LAST_WORKED_AT_POI, (Object)var3);
       var5.getMemory(MemoryModuleType.JOB_SITE).ifPresent((var1x) -> {
-         var5.setMemory(MemoryModuleType.LOOK_TARGET, (Object)(new BlockPosWrapper(var1x.pos())));
+         var5.setMemory(MemoryModuleType.LOOK_TARGET, (Object)(new BlockPosTracker(var1x.pos())));
       });
       var2.playWorkSound();
+      this.useWorkstation(var1, var2);
       if (var2.shouldRestock()) {
          var2.restock();
       }
 
    }
+
+   protected void useWorkstation(ServerLevel var1, Villager var2) {
+   }
+
+   protected boolean canStillUse(ServerLevel var1, Villager var2, long var3) {
+      Optional var5 = var2.getBrain().getMemory(MemoryModuleType.JOB_SITE);
+      if (!var5.isPresent()) {
+         return false;
+      } else {
+         GlobalPos var6 = (GlobalPos)var5.get();
+         return var6.dimension() == var1.dimension() && var6.pos().closerThan(var2.position(), 1.73D);
+      }
+   }
 }
