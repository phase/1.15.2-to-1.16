--- net/minecraft/world/entity/monster/Ravager.java
+++ net/minecraft/world/entity/monster/Ravager.java
@@ -14,10 +14,12 @@
 import net.minecraft.world.damagesource.DamageSource;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.Mob;
+import net.minecraft.world.entity.ai.attributes.AttributeSupplier;
+import net.minecraft.world.entity.ai.attributes.Attributes;
 import net.minecraft.world.entity.ai.goal.FloatGoal;
 import net.minecraft.world.entity.ai.goal.Goal;
 import net.minecraft.world.entity.ai.goal.LookAtPlayerGoal;
 import net.minecraft.world.entity.ai.goal.MeleeAttackGoal;
 import net.minecraft.world.entity.ai.goal.WaterAvoidingRandomStrollGoal;
@@ -77,18 +79,12 @@
       this.goalSelector.setControlFlag(Goal.Flag.JUMP, var1 && var2);
       this.goalSelector.setControlFlag(Goal.Flag.LOOK, var1);
       this.goalSelector.setControlFlag(Goal.Flag.TARGET, var1);
    }
 
-   protected void registerAttributes() {
-      super.registerAttributes();
-      this.getAttribute(SharedMonsterAttributes.MAX_HEALTH).setBaseValue(100.0D);
-      this.getAttribute(SharedMonsterAttributes.MOVEMENT_SPEED).setBaseValue(0.3D);
-      this.getAttribute(SharedMonsterAttributes.KNOCKBACK_RESISTANCE).setBaseValue(0.5D);
-      this.getAttribute(SharedMonsterAttributes.ATTACK_DAMAGE).setBaseValue(12.0D);
-      this.getAttribute(SharedMonsterAttributes.ATTACK_KNOCKBACK).setBaseValue(1.5D);
-      this.getAttribute(SharedMonsterAttributes.FOLLOW_RANGE).setBaseValue(32.0D);
+   public static AttributeSupplier.Builder createAttributes() {
+      return Monster.createMonsterAttributes().add(Attributes.MAX_HEALTH, 100.0D).add(Attributes.MOVEMENT_SPEED, 0.3D).add(Attributes.KNOCKBACK_RESISTANCE, 0.75D).add(Attributes.ATTACK_DAMAGE, 12.0D).add(Attributes.ATTACK_KNOCKBACK, 1.5D).add(Attributes.FOLLOW_RANGE, 32.0D);
    }
 
    public void addAdditionalSaveData(CompoundTag var1) {
       super.addAdditionalSaveData(var1);
       var1.putInt("AttackTick", this.attackTick);
@@ -113,11 +109,11 @@
 
    public int getMaxHeadYRot() {
       return 45;
    }
 
-   public double getRideHeight() {
+   public double getPassengersRidingOffset() {
       return 2.1D;
    }
 
    public boolean canBeControlledByRider() {
       return !this.isNoAi() && this.getControllingPassenger() instanceof LivingEntity;
@@ -130,15 +126,15 @@
 
    public void aiStep() {
       super.aiStep();
       if (this.isAlive()) {
          if (this.isImmobile()) {
-            this.getAttribute(SharedMonsterAttributes.MOVEMENT_SPEED).setBaseValue(0.0D);
+            this.getAttribute(Attributes.MOVEMENT_SPEED).setBaseValue(0.0D);
          } else {
             double var1 = this.getTarget() != null ? 0.35D : 0.3D;
-            double var3 = this.getAttribute(SharedMonsterAttributes.MOVEMENT_SPEED).getBaseValue();
-            this.getAttribute(SharedMonsterAttributes.MOVEMENT_SPEED).setBaseValue(Mth.lerp(0.1D, var3, var1));
+            double var3 = this.getAttribute(Attributes.MOVEMENT_SPEED).getBaseValue();
+            this.getAttribute(Attributes.MOVEMENT_SPEED).setBaseValue(Mth.lerp(0.1D, var3, var1));
          }
 
          if (this.horizontalCollision && this.level.getGameRules().getBoolean(GameRules.RULE_MOBGRIEFING)) {
             boolean var7 = false;
             AABB var2 = this.getBoundingBox().inflate(0.2D);
