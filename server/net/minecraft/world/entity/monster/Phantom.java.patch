--- net/minecraft/world/entity/monster/Phantom.java
+++ net/minecraft/world/entity/monster/Phantom.java
@@ -1,7 +1,8 @@
 package net.minecraft.world.entity.monster;
 
+import java.util.Comparator;
 import java.util.EnumSet;
 import java.util.Iterator;
 import java.util.List;
 import javax.annotation.Nullable;
 import net.minecraft.core.BlockPos;
@@ -14,29 +15,31 @@
 import net.minecraft.sounds.SoundEvents;
 import net.minecraft.sounds.SoundSource;
 import net.minecraft.util.Mth;
 import net.minecraft.world.DifficultyInstance;
 import net.minecraft.world.damagesource.DamageSource;
+import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EntityDimensions;
 import net.minecraft.world.entity.EntitySelector;
 import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.entity.FlyingMob;
 import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.Mob;
 import net.minecraft.world.entity.MobSpawnType;
 import net.minecraft.world.entity.MobType;
 import net.minecraft.world.entity.Pose;
 import net.minecraft.world.entity.SpawnGroupData;
+import net.minecraft.world.entity.ai.attributes.Attributes;
 import net.minecraft.world.entity.ai.control.BodyRotationControl;
 import net.minecraft.world.entity.ai.control.LookControl;
 import net.minecraft.world.entity.ai.control.MoveControl;
 import net.minecraft.world.entity.ai.goal.Goal;
 import net.minecraft.world.entity.ai.targeting.TargetingConditions;
 import net.minecraft.world.entity.animal.Cat;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.level.Level;
-import net.minecraft.world.level.LevelAccessor;
+import net.minecraft.world.level.ServerLevelAccessor;
 import net.minecraft.world.level.levelgen.Heightmap;
 import net.minecraft.world.phys.Vec3;
 
 public class Phantom extends FlyingMob implements Enemy {
    private static final EntityDataAccessor<Integer> ID_SIZE;
@@ -63,15 +66,10 @@
       this.goalSelector.addGoal(2, new Phantom.PhantomSweepAttackGoal());
       this.goalSelector.addGoal(3, new Phantom.PhantomCircleAroundAnchorGoal());
       this.targetSelector.addGoal(1, new Phantom.PhantomAttackPlayerTargetGoal());
    }
 
-   protected void registerAttributes() {
-      super.registerAttributes();
-      this.getAttributes().registerAttribute(SharedMonsterAttributes.ATTACK_DAMAGE);
-   }
-
    protected void defineSynchedData() {
       super.defineSynchedData();
       this.entityData.define(ID_SIZE, 0);
    }
 
@@ -79,11 +77,11 @@
       this.entityData.set(ID_SIZE, Mth.clamp(var1, 0, 64));
    }
 
    private void updatePhantomSizeInfo() {
       this.refreshDimensions();
-      this.getAttribute(SharedMonsterAttributes.ATTACK_DAMAGE).setBaseValue((double)(6 + this.getPhantomSize()));
+      this.getAttribute(Attributes.ATTACK_DAMAGE).setBaseValue((double)(6 + this.getPhantomSize()));
    }
 
    public int getPhantomSize() {
       return (Integer)this.entityData.get(ID_SIZE);
    }
@@ -133,12 +131,12 @@
 
    protected void customServerAiStep() {
       super.customServerAiStep();
    }
 
-   public SpawnGroupData finalizeSpawn(LevelAccessor var1, DifficultyInstance var2, MobSpawnType var3, @Nullable SpawnGroupData var4, @Nullable CompoundTag var5) {
-      this.anchorPoint = (new BlockPos(this)).above(5);
+   public SpawnGroupData finalizeSpawn(ServerLevelAccessor var1, DifficultyInstance var2, MobSpawnType var3, @Nullable SpawnGroupData var4, @Nullable CompoundTag var5) {
+      this.anchorPoint = this.blockPosition().above(5);
       this.setPhantomSize(0);
       return super.finalizeSpawn(var1, var2, var3, var4, var5);
    }
 
    public void readAdditionalSaveData(CompoundTag var1) {
@@ -212,13 +210,11 @@
             return false;
          } else {
             this.nextScanTick = 60;
             List var1 = Phantom.this.level.getNearbyPlayers(this.attackTargeting, Phantom.this, Phantom.this.getBoundingBox().inflate(16.0D, 64.0D, 16.0D));
             if (!var1.isEmpty()) {
-               var1.sort((var0, var1x) -> {
-                  return var0.getY() > var1x.getY() ? -1 : 1;
-               });
+               var1.sort(Comparator.comparing(Entity::getY).reversed());
                Iterator var2 = var1.iterator();
 
                while(var2.hasNext()) {
                   Player var3 = (Player)var2.next();
                   if (Phantom.this.canAttack(var3, TargetingConditions.DEFAULT)) {
@@ -271,11 +267,11 @@
          }
 
       }
 
       private void setAnchorAboveTarget() {
-         Phantom.this.anchorPoint = (new BlockPos(Phantom.this.getTarget())).above(20 + Phantom.this.random.nextInt(20));
+         Phantom.this.anchorPoint = Phantom.this.getTarget().blockPosition().above(20 + Phantom.this.random.nextInt(20));
          if (Phantom.this.anchorPoint.getY() < Phantom.this.level.getSeaLevel()) {
             Phantom.this.anchorPoint = new BlockPos(Phantom.this.anchorPoint.getX(), Phantom.this.level.getSeaLevel() + 1, Phantom.this.anchorPoint.getZ());
          }
 
       }
@@ -331,11 +327,13 @@
          LivingEntity var1 = Phantom.this.getTarget();
          Phantom.this.moveTargetPoint = new Vec3(var1.getX(), var1.getY(0.5D), var1.getZ());
          if (Phantom.this.getBoundingBox().inflate(0.20000000298023224D).intersects(var1.getBoundingBox())) {
             Phantom.this.doHurtTarget(var1);
             Phantom.this.attackPhase = Phantom.AttackPhase.CIRCLE;
-            Phantom.this.level.levelEvent(1039, new BlockPos(Phantom.this), 0);
+            if (!Phantom.this.isSilent()) {
+               Phantom.this.level.levelEvent(1039, Phantom.this.blockPosition(), 0);
+            }
          } else if (Phantom.this.horizontalCollision || Phantom.this.hurtTime > 0) {
             Phantom.this.attackPhase = Phantom.AttackPhase.CIRCLE;
          }
 
       }
@@ -382,29 +380,29 @@
 
          if (this.touchingTarget()) {
             this.selectNext();
          }
 
-         if (Phantom.this.moveTargetPoint.y < Phantom.this.getY() && !Phantom.this.level.isEmptyBlock((new BlockPos(Phantom.this)).below(1))) {
+         if (Phantom.this.moveTargetPoint.y < Phantom.this.getY() && !Phantom.this.level.isEmptyBlock(Phantom.this.blockPosition().below(1))) {
             this.height = Math.max(1.0F, this.height);
             this.selectNext();
          }
 
-         if (Phantom.this.moveTargetPoint.y > Phantom.this.getY() && !Phantom.this.level.isEmptyBlock((new BlockPos(Phantom.this)).above(1))) {
+         if (Phantom.this.moveTargetPoint.y > Phantom.this.getY() && !Phantom.this.level.isEmptyBlock(Phantom.this.blockPosition().above(1))) {
             this.height = Math.min(-1.0F, this.height);
             this.selectNext();
          }
 
       }
 
       private void selectNext() {
          if (BlockPos.ZERO.equals(Phantom.this.anchorPoint)) {
-            Phantom.this.anchorPoint = new BlockPos(Phantom.this);
+            Phantom.this.anchorPoint = Phantom.this.blockPosition();
          }
 
          this.angle += this.clockwise * 15.0F * 0.017453292F;
-         Phantom.this.moveTargetPoint = (new Vec3(Phantom.this.anchorPoint)).add((double)(this.distance * Mth.cos(this.angle)), (double)(-4.0F + this.height), (double)(this.distance * Mth.sin(this.angle)));
+         Phantom.this.moveTargetPoint = Vec3.atLowerCornerOf(Phantom.this.anchorPoint).add((double)(this.distance * Mth.cos(this.angle)), (double)(-4.0F + this.height), (double)(this.distance * Mth.sin(this.angle)));
       }
    }
 
    abstract class PhantomMoveTargetGoal extends Goal {
       public PhantomMoveTargetGoal() {
