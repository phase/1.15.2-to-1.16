--- net/minecraft/world/entity/monster/EnderMan.java
+++ net/minecraft/world/entity/monster/EnderMan.java
@@ -12,32 +12,40 @@
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.NbtUtils;
 import net.minecraft.network.syncher.EntityDataAccessor;
 import net.minecraft.network.syncher.EntityDataSerializers;
 import net.minecraft.network.syncher.SynchedEntityData;
+import net.minecraft.server.level.ServerLevel;
 import net.minecraft.sounds.SoundEvent;
 import net.minecraft.sounds.SoundEvents;
 import net.minecraft.tags.BlockTags;
 import net.minecraft.tags.FluidTags;
+import net.minecraft.tags.Tag;
+import net.minecraft.util.IntRange;
 import net.minecraft.util.Mth;
+import net.minecraft.util.TimeUtil;
 import net.minecraft.world.damagesource.DamageSource;
 import net.minecraft.world.damagesource.IndirectEntityDamageSource;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EntityDimensions;
 import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.entity.LivingEntity;
+import net.minecraft.world.entity.NeutralMob;
 import net.minecraft.world.entity.Pose;
 import net.minecraft.world.entity.ai.attributes.AttributeInstance;
 import net.minecraft.world.entity.ai.attributes.AttributeModifier;
+import net.minecraft.world.entity.ai.attributes.AttributeSupplier;
+import net.minecraft.world.entity.ai.attributes.Attributes;
 import net.minecraft.world.entity.ai.goal.FloatGoal;
 import net.minecraft.world.entity.ai.goal.Goal;
 import net.minecraft.world.entity.ai.goal.LookAtPlayerGoal;
 import net.minecraft.world.entity.ai.goal.MeleeAttackGoal;
 import net.minecraft.world.entity.ai.goal.RandomLookAroundGoal;
 import net.minecraft.world.entity.ai.goal.WaterAvoidingRandomStrollGoal;
 import net.minecraft.world.entity.ai.goal.target.HurtByTargetGoal;
 import net.minecraft.world.entity.ai.goal.target.NearestAttackableTargetGoal;
+import net.minecraft.world.entity.ai.goal.target.ResetUniversalAngerTargetGoal;
 import net.minecraft.world.entity.ai.targeting.TargetingConditions;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.level.ClipContext;
 import net.minecraft.world.level.GameRules;
@@ -48,19 +56,22 @@
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.pathfinder.BlockPathTypes;
 import net.minecraft.world.phys.BlockHitResult;
 import net.minecraft.world.phys.Vec3;
 
-public class EnderMan extends Monster {
+public class EnderMan extends Monster implements NeutralMob {
    private static final UUID SPEED_MODIFIER_ATTACKING_UUID = UUID.fromString("020E0DFB-87AE-4653-9556-831010E291A0");
    private static final AttributeModifier SPEED_MODIFIER_ATTACKING;
    private static final EntityDataAccessor<Optional<BlockState>> DATA_CARRY_STATE;
    private static final EntityDataAccessor<Boolean> DATA_CREEPY;
    private static final EntityDataAccessor<Boolean> DATA_STARED_AT;
    private static final Predicate<LivingEntity> ENDERMITE_SELECTOR;
    private int lastStareSound = Integer.MIN_VALUE;
    private int targetChangeTime;
+   private static final IntRange PERSISTENT_ANGER_TIME;
+   private int remainingPersistentAngerTime;
+   private UUID persistentAngerTarget;
 
    public EnderMan(EntityType<? extends EnderMan> var1, Level var2) {
       super(var1, var2);
       this.maxUpStep = 1.0F;
       this.setPathfindingMalus(BlockPathTypes.WATER, -1.0F);
@@ -73,36 +84,33 @@
       this.goalSelector.addGoal(7, new WaterAvoidingRandomStrollGoal(this, 1.0D, 0.0F));
       this.goalSelector.addGoal(8, new LookAtPlayerGoal(this, Player.class, 8.0F));
       this.goalSelector.addGoal(8, new RandomLookAroundGoal(this));
       this.goalSelector.addGoal(10, new EnderMan.EndermanLeaveBlockGoal(this));
       this.goalSelector.addGoal(11, new EnderMan.EndermanTakeBlockGoal(this));
-      this.targetSelector.addGoal(1, new EnderMan.EndermanLookForPlayerGoal(this));
+      this.targetSelector.addGoal(1, new EnderMan.EndermanLookForPlayerGoal(this, this::isAngryAt));
       this.targetSelector.addGoal(2, new HurtByTargetGoal(this, new Class[0]));
       this.targetSelector.addGoal(3, new NearestAttackableTargetGoal(this, Endermite.class, 10, true, false, ENDERMITE_SELECTOR));
+      this.targetSelector.addGoal(4, new ResetUniversalAngerTargetGoal(this, false));
    }
 
-   protected void registerAttributes() {
-      super.registerAttributes();
-      this.getAttribute(SharedMonsterAttributes.MAX_HEALTH).setBaseValue(40.0D);
-      this.getAttribute(SharedMonsterAttributes.MOVEMENT_SPEED).setBaseValue(0.30000001192092896D);
-      this.getAttribute(SharedMonsterAttributes.ATTACK_DAMAGE).setBaseValue(7.0D);
-      this.getAttribute(SharedMonsterAttributes.FOLLOW_RANGE).setBaseValue(64.0D);
+   public static AttributeSupplier.Builder createAttributes() {
+      return Monster.createMonsterAttributes().add(Attributes.MAX_HEALTH, 40.0D).add(Attributes.MOVEMENT_SPEED, 0.30000001192092896D).add(Attributes.ATTACK_DAMAGE, 7.0D).add(Attributes.FOLLOW_RANGE, 64.0D);
    }
 
    public void setTarget(@Nullable LivingEntity var1) {
       super.setTarget(var1);
-      AttributeInstance var2 = this.getAttribute(SharedMonsterAttributes.MOVEMENT_SPEED);
+      AttributeInstance var2 = this.getAttribute(Attributes.MOVEMENT_SPEED);
       if (var1 == null) {
          this.targetChangeTime = 0;
          this.entityData.set(DATA_CREEPY, false);
          this.entityData.set(DATA_STARED_AT, false);
          var2.removeModifier(SPEED_MODIFIER_ATTACKING);
       } else {
          this.targetChangeTime = this.tickCount;
          this.entityData.set(DATA_CREEPY, true);
          if (!var2.hasModifier(SPEED_MODIFIER_ATTACKING)) {
-            var2.addModifier(SPEED_MODIFIER_ATTACKING);
+            var2.addTransientModifier(SPEED_MODIFIER_ATTACKING);
          }
       }
 
    }
 
@@ -111,10 +119,30 @@
       this.entityData.define(DATA_CARRY_STATE, Optional.empty());
       this.entityData.define(DATA_CREEPY, false);
       this.entityData.define(DATA_STARED_AT, false);
    }
 
+   public void startPersistentAngerTimer() {
+      this.setRemainingPersistentAngerTime(PERSISTENT_ANGER_TIME.randomValue(this.random));
+   }
+
+   public void setRemainingPersistentAngerTime(int var1) {
+      this.remainingPersistentAngerTime = var1;
+   }
+
+   public int getRemainingPersistentAngerTime() {
+      return this.remainingPersistentAngerTime;
+   }
+
+   public void setPersistentAngerTarget(@Nullable UUID var1) {
+      this.persistentAngerTarget = var1;
+   }
+
+   public UUID getPersistentAngerTarget() {
+      return this.persistentAngerTarget;
+   }
+
    public void playStareSound() {
       if (this.tickCount >= this.lastStareSound + 400) {
          this.lastStareSound = this.tickCount;
          if (!this.isSilent()) {
             this.level.playLocalSound(this.getX(), this.getEyeY(), this.getZ(), SoundEvents.ENDERMAN_STARE, this.getSoundSource(), 2.5F, 1.0F, false);
@@ -136,10 +164,11 @@
       BlockState var2 = this.getCarriedBlock();
       if (var2 != null) {
          var1.put("carriedBlockState", NbtUtils.writeBlockState(var2));
       }
 
+      this.addPersistentAngerSaveData(var1);
    }
 
    public void readAdditionalSaveData(CompoundTag var1) {
       super.readAdditionalSaveData(var1);
       BlockState var2 = null;
@@ -149,10 +178,11 @@
             var2 = null;
          }
       }
 
       this.setCarriedBlock(var2);
+      this.readPersistentAngerSaveData((ServerLevel)this.level, var1);
    }
 
    private boolean isLookingAtMe(Player var1) {
       ItemStack var2 = (ItemStack)var1.inventory.armor.get(3);
       if (var2.getItem() == Blocks.CARVED_PUMPKIN.asItem()) {
@@ -177,21 +207,25 @@
             this.level.addParticle(ParticleTypes.PORTAL, this.getRandomX(0.5D), this.getRandomY() - 0.25D, this.getRandomZ(0.5D), (this.random.nextDouble() - 0.5D) * 2.0D, -this.random.nextDouble(), (this.random.nextDouble() - 0.5D) * 2.0D);
          }
       }
 
       this.jumping = false;
+      if (!this.level.isClientSide) {
+         this.updatePersistentAnger((ServerLevel)this.level, true);
+      }
+
       super.aiStep();
    }
 
-   protected void customServerAiStep() {
-      if (this.isInWaterRainOrBubble()) {
-         this.hurt(DamageSource.DROWN, 1.0F);
-      }
+   public boolean isSensitiveToWater() {
+      return true;
+   }
 
+   protected void customServerAiStep() {
       if (this.level.isDay() && this.tickCount >= this.targetChangeTime + 600) {
          float var1 = this.getBrightness();
-         if (var1 > 0.5F && this.level.canSeeSky(new BlockPos(this)) && this.random.nextFloat() * 30.0F < (var1 - 0.4F) * 2.0F) {
+         if (var1 > 0.5F && this.level.canSeeSky(this.blockPosition()) && this.random.nextFloat() * 30.0F < (var1 - 0.4F) * 2.0F) {
             this.setTarget((LivingEntity)null);
             this.teleport();
          }
       }
 
@@ -229,11 +263,11 @@
       BlockState var8 = this.level.getBlockState(var7);
       boolean var9 = var8.getMaterial().blocksMotion();
       boolean var10 = var8.getFluidState().is(FluidTags.WATER);
       if (var9 && !var10) {
          boolean var11 = this.randomTeleport(var1, var3, var5, true);
-         if (var11) {
+         if (var11 && !this.isSilent()) {
             this.level.playSound((Player)null, this.xo, this.yo, this.zo, SoundEvents.ENDERMAN_TELEPORT, this.getSoundSource(), 1.0F, 1.0F);
             this.playSound(SoundEvents.ENDERMAN_TELEPORT, 1.0F, 1.0F);
          }
 
          return var11;
@@ -273,25 +307,25 @@
    }
 
    public boolean hurt(DamageSource var1, float var2) {
       if (this.isInvulnerableTo(var1)) {
          return false;
-      } else if (!(var1 instanceof IndirectEntityDamageSource) && var1 != DamageSource.FIREWORKS) {
-         boolean var4 = super.hurt(var1, var2);
-         if (!this.level.isClientSide() && var1.isBypassArmor() && this.random.nextInt(10) != 0) {
-            this.teleport();
-         }
-
-         return var4;
-      } else {
-         for(int var3 = 0; var3 < 64; ++var3) {
+      } else if (var1 instanceof IndirectEntityDamageSource) {
+         for(int var4 = 0; var4 < 64; ++var4) {
             if (this.teleport()) {
                return true;
             }
          }
 
          return false;
+      } else {
+         boolean var3 = super.hurt(var1, var2);
+         if (!this.level.isClientSide() && !(var1.getEntity() instanceof LivingEntity) && this.random.nextInt(10) != 0) {
+            this.teleport();
+         }
+
+         return var3;
       }
    }
 
    public boolean isCreepy() {
       return (Boolean)this.entityData.get(DATA_CREEPY);
@@ -303,18 +337,23 @@
 
    public void setBeingStaredAt() {
       this.entityData.set(DATA_STARED_AT, true);
    }
 
+   public boolean requiresCustomPersistence() {
+      return super.requiresCustomPersistence() || this.getCarriedBlock() != null;
+   }
+
    static {
-      SPEED_MODIFIER_ATTACKING = (new AttributeModifier(SPEED_MODIFIER_ATTACKING_UUID, "Attacking speed boost", 0.15000000596046448D, AttributeModifier.Operation.ADDITION)).setSerialize(false);
+      SPEED_MODIFIER_ATTACKING = new AttributeModifier(SPEED_MODIFIER_ATTACKING_UUID, "Attacking speed boost", 0.15000000596046448D, AttributeModifier.Operation.ADDITION);
       DATA_CARRY_STATE = SynchedEntityData.defineId(EnderMan.class, EntityDataSerializers.BLOCK_STATE);
       DATA_CREEPY = SynchedEntityData.defineId(EnderMan.class, EntityDataSerializers.BOOLEAN);
       DATA_STARED_AT = SynchedEntityData.defineId(EnderMan.class, EntityDataSerializers.BOOLEAN);
       ENDERMITE_SELECTOR = (var0) -> {
          return var0 instanceof Endermite && ((Endermite)var0).isPlayerSpawned();
       };
+      PERSISTENT_ANGER_TIME = TimeUtil.rangeOfSeconds(20, 39);
    }
 
    static class EndermanTakeBlockGoal extends Goal {
       private final EnderMan enderman;
 
@@ -343,11 +382,11 @@
          Block var8 = var7.getBlock();
          Vec3 var9 = new Vec3((double)Mth.floor(this.enderman.getX()) + 0.5D, (double)var4 + 0.5D, (double)Mth.floor(this.enderman.getZ()) + 0.5D);
          Vec3 var10 = new Vec3((double)var3 + 0.5D, (double)var4 + 0.5D, (double)var5 + 0.5D);
          BlockHitResult var11 = var2.clip(new ClipContext(var9, var10, ClipContext.Block.OUTLINE, ClipContext.Fluid.NONE, this.enderman));
          boolean var12 = var11.getBlockPos().equals(var6);
-         if (var8.is(BlockTags.ENDERMAN_HOLDABLE) && var12) {
+         if (var8.is((Tag)BlockTags.ENDERMAN_HOLDABLE) && var12) {
             this.enderman.setCarriedBlock(var7);
             var2.removeBlock(var6, false);
          }
 
       }
@@ -427,12 +466,12 @@
       private int aggroTime;
       private int teleportTime;
       private final TargetingConditions startAggroTargetConditions;
       private final TargetingConditions continueAggroTargetConditions = (new TargetingConditions()).allowUnseeable();
 
-      public EndermanLookForPlayerGoal(EnderMan var1) {
-         super(var1, Player.class, false);
+      public EndermanLookForPlayerGoal(EnderMan var1, @Nullable Predicate<LivingEntity> var2) {
+         super(var1, Player.class, 10, false, false, var2);
          this.enderman = var1;
          this.startAggroTargetConditions = (new TargetingConditions()).range(this.getFollowDistance()).selector((var1x) -> {
             return var1.isLookingAtMe((Player)var1x);
          });
       }
@@ -465,10 +504,14 @@
             return this.target != null && this.continueAggroTargetConditions.test(this.enderman, this.target) ? true : super.canContinueToUse();
          }
       }
 
       public void tick() {
+         if (this.enderman.getTarget() == null) {
+            super.setTarget((LivingEntity)null);
+         }
+
          if (this.pendingTarget != null) {
             if (--this.aggroTime <= 0) {
                this.target = this.pendingTarget;
                this.pendingTarget = null;
                super.start();
