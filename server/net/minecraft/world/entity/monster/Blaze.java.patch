--- net/minecraft/world/entity/monster/Blaze.java
+++ net/minecraft/world/entity/monster/Blaze.java
@@ -1,19 +1,20 @@
 package net.minecraft.world.entity.monster;
 
 import java.util.EnumSet;
-import net.minecraft.core.BlockPos;
 import net.minecraft.core.particles.ParticleTypes;
 import net.minecraft.network.syncher.EntityDataAccessor;
 import net.minecraft.network.syncher.EntityDataSerializers;
 import net.minecraft.network.syncher.SynchedEntityData;
 import net.minecraft.sounds.SoundEvent;
 import net.minecraft.sounds.SoundEvents;
 import net.minecraft.util.Mth;
 import net.minecraft.world.damagesource.DamageSource;
 import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.entity.LivingEntity;
+import net.minecraft.world.entity.ai.attributes.AttributeSupplier;
+import net.minecraft.world.entity.ai.attributes.Attributes;
 import net.minecraft.world.entity.ai.goal.Goal;
 import net.minecraft.world.entity.ai.goal.LookAtPlayerGoal;
 import net.minecraft.world.entity.ai.goal.MoveTowardsRestrictionGoal;
 import net.minecraft.world.entity.ai.goal.RandomLookAroundGoal;
 import net.minecraft.world.entity.ai.goal.WaterAvoidingRandomStrollGoal;
@@ -47,15 +48,12 @@
       this.goalSelector.addGoal(8, new RandomLookAroundGoal(this));
       this.targetSelector.addGoal(1, (new HurtByTargetGoal(this, new Class[0])).setAlertOthers());
       this.targetSelector.addGoal(2, new NearestAttackableTargetGoal(this, Player.class, true));
    }
 
-   protected void registerAttributes() {
-      super.registerAttributes();
-      this.getAttribute(SharedMonsterAttributes.ATTACK_DAMAGE).setBaseValue(6.0D);
-      this.getAttribute(SharedMonsterAttributes.MOVEMENT_SPEED).setBaseValue(0.23000000417232513D);
-      this.getAttribute(SharedMonsterAttributes.FOLLOW_RANGE).setBaseValue(48.0D);
+   public static AttributeSupplier.Builder createAttributes() {
+      return Monster.createMonsterAttributes().add(Attributes.ATTACK_DAMAGE, 6.0D).add(Attributes.MOVEMENT_SPEED, 0.23000000417232513D).add(Attributes.FOLLOW_RANGE, 48.0D);
    }
 
    protected void defineSynchedData() {
       super.defineSynchedData();
       this.entityData.define(DATA_FLAGS_ID, (byte)0);
@@ -93,15 +91,15 @@
       }
 
       super.aiStep();
    }
 
-   protected void customServerAiStep() {
-      if (this.isInWaterRainOrBubble()) {
-         this.hurt(DamageSource.DROWN, 1.0F);
-      }
+   public boolean isSensitiveToWater() {
+      return true;
+   }
 
+   protected void customServerAiStep() {
       --this.nextHeightOffsetChangeTick;
       if (this.nextHeightOffsetChangeTick <= 0) {
          this.nextHeightOffsetChangeTick = 100;
          this.allowedHeightOffset = 0.5F + (float)this.random.nextGaussian() * 3.0F;
       }
@@ -208,11 +206,13 @@
                      this.blaze.setCharged(false);
                   }
 
                   if (this.attackStep > 1) {
                      float var11 = Mth.sqrt(Mth.sqrt(var3)) * 0.5F;
-                     this.blaze.level.levelEvent((Player)null, 1018, new BlockPos(this.blaze), 0);
+                     if (!this.blaze.isSilent()) {
+                        this.blaze.level.levelEvent((Player)null, 1018, this.blaze.blockPosition(), 0);
+                     }
 
                      for(int var12 = 0; var12 < 1; ++var12) {
                         SmallFireball var13 = new SmallFireball(this.blaze.level, this.blaze, var5 + this.blaze.getRandom().nextGaussian() * (double)var11, var7, var9 + this.blaze.getRandom().nextGaussian() * (double)var11);
                         var13.setPos(var13.getX(), this.blaze.getY(0.5D) + 0.5D, var13.getZ());
                         this.blaze.level.addFreshEntity(var13);
@@ -228,9 +228,9 @@
             super.tick();
          }
       }
 
       private double getFollowDistance() {
-         return this.blaze.getAttribute(SharedMonsterAttributes.FOLLOW_RANGE).getValue();
+         return this.blaze.getAttributeValue(Attributes.FOLLOW_RANGE);
       }
    }
 }
