--- net/minecraft/world/entity/monster/Spider.java
+++ net/minecraft/world/entity/monster/Spider.java
@@ -20,10 +20,12 @@
 import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.MobSpawnType;
 import net.minecraft.world.entity.MobType;
 import net.minecraft.world.entity.Pose;
 import net.minecraft.world.entity.SpawnGroupData;
+import net.minecraft.world.entity.ai.attributes.AttributeSupplier;
+import net.minecraft.world.entity.ai.attributes.Attributes;
 import net.minecraft.world.entity.ai.goal.FloatGoal;
 import net.minecraft.world.entity.ai.goal.LeapAtTargetGoal;
 import net.minecraft.world.entity.ai.goal.LookAtPlayerGoal;
 import net.minecraft.world.entity.ai.goal.MeleeAttackGoal;
 import net.minecraft.world.entity.ai.goal.RandomLookAroundGoal;
@@ -57,11 +59,11 @@
       this.targetSelector.addGoal(1, new HurtByTargetGoal(this, new Class[0]));
       this.targetSelector.addGoal(2, new Spider.SpiderTargetGoal(this, Player.class));
       this.targetSelector.addGoal(3, new Spider.SpiderTargetGoal(this, IronGolem.class));
    }
 
-   public double getRideHeight() {
+   public double getPassengersRidingOffset() {
       return (double)(this.getBbHeight() * 0.5F);
    }
 
    protected PathNavigation createNavigation(Level var1) {
       return new WallClimberNavigation(this, var1);
@@ -78,14 +80,12 @@
          this.setClimbing(this.horizontalCollision);
       }
 
    }
 
-   protected void registerAttributes() {
-      super.registerAttributes();
-      this.getAttribute(SharedMonsterAttributes.MAX_HEALTH).setBaseValue(16.0D);
-      this.getAttribute(SharedMonsterAttributes.MOVEMENT_SPEED).setBaseValue(0.30000001192092896D);
+   public static AttributeSupplier.Builder createAttributes() {
+      return Monster.createMonsterAttributes().add(Attributes.MAX_HEALTH, 16.0D).add(Attributes.MOVEMENT_SPEED, 0.30000001192092896D);
    }
 
    protected SoundEvent getAmbientSound() {
       return SoundEvents.SPIDER_AMBIENT;
    }
@@ -100,16 +100,16 @@
 
    protected void playStepSound(BlockPos var1, BlockState var2) {
       this.playSound(SoundEvents.SPIDER_STEP, 0.15F, 1.0F);
    }
 
-   public boolean onLadder() {
+   public boolean onClimbable() {
       return this.isClimbing();
    }
 
    public void makeStuckInBlock(BlockState var1, Vec3 var2) {
-      if (var1.getBlock() != Blocks.COBWEB) {
+      if (!var1.is(Blocks.COBWEB)) {
          super.makeStuckInBlock(var1, var2);
       }
 
    }
 
@@ -141,12 +141,12 @@
       Object var7 = super.finalizeSpawn(var1, var2, var3, var4, var5);
       if (var1.getRandom().nextInt(100) == 0) {
          Skeleton var6 = (Skeleton)EntityType.SKELETON.create(this.level);
          var6.moveTo(this.getX(), this.getY(), this.getZ(), this.yRot, 0.0F);
          var6.finalizeSpawn(var1, var2, var3, (SpawnGroupData)null, (CompoundTag)null);
-         var1.addFreshEntity(var6);
          var6.startRiding(this);
+         var1.addFreshEntity(var6);
       }
 
       if (var7 == null) {
          var7 = new Spider.SpiderEffectsGroupData();
          if (var1.getDifficulty() == Difficulty.HARD && var1.getRandom().nextFloat() < 0.1F * var2.getSpecialMultiplier()) {
