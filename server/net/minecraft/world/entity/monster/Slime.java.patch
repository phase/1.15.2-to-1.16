--- net/minecraft/world/entity/monster/Slime.java
+++ net/minecraft/world/entity/monster/Slime.java
@@ -5,10 +5,11 @@
 import javax.annotation.Nullable;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.particles.ParticleOptions;
 import net.minecraft.core.particles.ParticleTypes;
 import net.minecraft.nbt.CompoundTag;
+import net.minecraft.network.chat.Component;
 import net.minecraft.network.syncher.EntityDataAccessor;
 import net.minecraft.network.syncher.EntityDataSerializers;
 import net.minecraft.network.syncher.SynchedEntityData;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.sounds.SoundEvent;
@@ -24,19 +25,20 @@
 import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.Mob;
 import net.minecraft.world.entity.MobSpawnType;
 import net.minecraft.world.entity.Pose;
 import net.minecraft.world.entity.SpawnGroupData;
+import net.minecraft.world.entity.ai.attributes.Attributes;
 import net.minecraft.world.entity.ai.control.MoveControl;
 import net.minecraft.world.entity.ai.goal.Goal;
 import net.minecraft.world.entity.ai.goal.target.NearestAttackableTargetGoal;
 import net.minecraft.world.entity.animal.IronGolem;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.level.ChunkPos;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.LevelAccessor;
-import net.minecraft.world.level.LevelType;
+import net.minecraft.world.level.WorldGenLevel;
 import net.minecraft.world.level.biome.Biome;
 import net.minecraft.world.level.biome.Biomes;
 import net.minecraft.world.level.levelgen.WorldgenRandom;
 import net.minecraft.world.level.storage.loot.BuiltInLootTables;
 import net.minecraft.world.phys.Vec3;
@@ -67,22 +69,17 @@
    protected void defineSynchedData() {
       super.defineSynchedData();
       this.entityData.define(ID_SIZE, 1);
    }
 
-   protected void registerAttributes() {
-      super.registerAttributes();
-      this.getAttributes().registerAttribute(SharedMonsterAttributes.ATTACK_DAMAGE);
-   }
-
    protected void setSize(int var1, boolean var2) {
       this.entityData.set(ID_SIZE, var1);
       this.reapplyPosition();
       this.refreshDimensions();
-      this.getAttribute(SharedMonsterAttributes.MAX_HEALTH).setBaseValue((double)(var1 * var1));
-      this.getAttribute(SharedMonsterAttributes.MOVEMENT_SPEED).setBaseValue((double)(0.2F + 0.1F * (float)var1));
-      this.getAttribute(SharedMonsterAttributes.ATTACK_DAMAGE).setBaseValue((double)var1);
+      this.getAttribute(Attributes.MAX_HEALTH).setBaseValue((double)(var1 * var1));
+      this.getAttribute(Attributes.MOVEMENT_SPEED).setBaseValue((double)(0.2F + 0.1F * (float)var1));
+      this.getAttribute(Attributes.ATTACK_DAMAGE).setBaseValue((double)var1);
       if (var2) {
          this.setHealth(this.getMaxHealth());
       }
 
       this.xpReward = var1;
@@ -180,28 +177,30 @@
    }
 
    public void remove() {
       int var1 = this.getSize();
       if (!this.level.isClientSide && var1 > 1 && this.getHealth() <= 0.0F) {
-         int var2 = 2 + this.random.nextInt(3);
+         Component var2 = this.getCustomName();
+         boolean var3 = this.isNoAi();
+         float var4 = (float)var1 / 4.0F;
+         int var5 = var1 / 2;
+         int var6 = 2 + this.random.nextInt(3);
 
-         for(int var3 = 0; var3 < var2; ++var3) {
-            float var4 = ((float)(var3 % 2) - 0.5F) * (float)var1 / 4.0F;
-            float var5 = ((float)(var3 / 2) - 0.5F) * (float)var1 / 4.0F;
-            Slime var6 = (Slime)this.getType().create(this.level);
-            if (this.hasCustomName()) {
-               var6.setCustomName(this.getCustomName());
-            }
-
+         for(int var7 = 0; var7 < var6; ++var7) {
+            float var8 = ((float)(var7 % 2) - 0.5F) * var4;
+            float var9 = ((float)(var7 / 2) - 0.5F) * var4;
+            Slime var10 = (Slime)this.getType().create(this.level);
             if (this.isPersistenceRequired()) {
-               var6.setPersistenceRequired();
+               var10.setPersistenceRequired();
             }
 
-            var6.setInvulnerable(this.isInvulnerable());
-            var6.setSize(var1 / 2, true);
-            var6.moveTo(this.getX() + (double)var4, this.getY() + 0.5D, this.getZ() + (double)var5, this.random.nextFloat() * 360.0F, 0.0F);
-            this.level.addFreshEntity(var6);
+            var10.setCustomName(var2);
+            var10.setNoAi(var3);
+            var10.setInvulnerable(this.isInvulnerable());
+            var10.setSize(var5, true);
+            var10.moveTo(this.getX() + (double)var8, this.getY() + 0.5D, this.getZ() + (double)var9, this.random.nextFloat() * 360.0F, 0.0F);
+            this.level.addFreshEntity(var10);
          }
       }
 
       super.remove();
    }
@@ -239,11 +238,11 @@
    protected boolean isDealsDamage() {
       return !this.isTiny() && this.isEffectiveAi();
    }
 
    protected float getAttackDamage() {
-      return (float)this.getAttribute(SharedMonsterAttributes.ATTACK_DAMAGE).getValue();
+      return (float)this.getAttributeValue(Attributes.ATTACK_DAMAGE);
    }
 
    protected SoundEvent getHurtSound(DamageSource var1) {
       return this.isTiny() ? SoundEvents.SLIME_HURT_SMALL : SoundEvents.SLIME_HURT;
    }
@@ -259,28 +258,28 @@
    protected ResourceLocation getDefaultLootTable() {
       return this.getSize() == 1 ? this.getType().getDefaultLootTable() : BuiltInLootTables.EMPTY;
    }
 
    public static boolean checkSlimeSpawnRules(EntityType<Slime> var0, LevelAccessor var1, MobSpawnType var2, BlockPos var3, Random var4) {
-      if (var1.getLevelData().getGeneratorType() == LevelType.FLAT && var4.nextInt(4) != 1) {
-         return false;
-      } else {
-         if (var1.getDifficulty() != Difficulty.PEACEFUL) {
-            Biome var5 = var1.getBiome(var3);
-            if (var5 == Biomes.SWAMP && var3.getY() > 50 && var3.getY() < 70 && var4.nextFloat() < 0.5F && var4.nextFloat() < var1.getMoonBrightness() && var1.getMaxLocalRawBrightness(var3) <= var4.nextInt(8)) {
-               return checkMobSpawnRules(var0, var1, var2, var3, var4);
-            }
+      if (var1.getDifficulty() != Difficulty.PEACEFUL) {
+         Biome var5 = var1.getBiome(var3);
+         if (var5 == Biomes.SWAMP && var3.getY() > 50 && var3.getY() < 70 && var4.nextFloat() < 0.5F && var4.nextFloat() < var1.getMoonBrightness() && var1.getMaxLocalRawBrightness(var3) <= var4.nextInt(8)) {
+            return checkMobSpawnRules(var0, var1, var2, var3, var4);
+         }
 
-            ChunkPos var6 = new ChunkPos(var3);
-            boolean var7 = WorldgenRandom.seedSlimeChunk(var6.x, var6.z, var1.getSeed(), 987234911L).nextInt(10) == 0;
-            if (var4.nextInt(10) == 0 && var7 && var3.getY() < 40) {
-               return checkMobSpawnRules(var0, var1, var2, var3, var4);
-            }
+         if (!(var1 instanceof WorldGenLevel)) {
+            return false;
          }
 
-         return false;
+         ChunkPos var6 = new ChunkPos(var3);
+         boolean var7 = WorldgenRandom.seedSlimeChunk(var6.x, var6.z, ((WorldGenLevel)var1).getSeed(), 987234911L).nextInt(10) == 0;
+         if (var4.nextInt(10) == 0 && var7 && var3.getY() < 40) {
+            return checkMobSpawnRules(var0, var1, var2, var3, var4);
+         }
       }
+
+      return false;
    }
 
    protected float getSoundVolume() {
       return 0.4F * (float)this.getSize();
    }
@@ -309,10 +308,15 @@
       int var7 = 1 << var6;
       this.setSize(var7, true);
       return super.finalizeSpawn(var1, var2, var3, var4, var5);
    }
 
+   private float getSoundPitch() {
+      float var1 = this.isTiny() ? 1.4F : 0.8F;
+      return ((this.random.nextFloat() - this.random.nextFloat()) * 0.2F + 1.0F) * var1;
+   }
+
    protected SoundEvent getJumpSound() {
       return this.isTiny() ? SoundEvents.SLIME_JUMP_SMALL : SoundEvents.SLIME_JUMP;
    }
 
    public EntityDimensions getDimensions(Pose var1) {
@@ -458,29 +462,29 @@
          this.mob.yBodyRot = this.mob.yRot;
          if (this.operation != MoveControl.Operation.MOVE_TO) {
             this.mob.setZza(0.0F);
          } else {
             this.operation = MoveControl.Operation.WAIT;
-            if (this.mob.onGround) {
-               this.mob.setSpeed((float)(this.speedModifier * this.mob.getAttribute(SharedMonsterAttributes.MOVEMENT_SPEED).getValue()));
+            if (this.mob.isOnGround()) {
+               this.mob.setSpeed((float)(this.speedModifier * this.mob.getAttributeValue(Attributes.MOVEMENT_SPEED)));
                if (this.jumpDelay-- <= 0) {
                   this.jumpDelay = this.slime.getJumpDelay();
                   if (this.isAggressive) {
                      this.jumpDelay /= 3;
                   }
 
                   this.slime.getJumpControl().jump();
                   if (this.slime.doPlayJumpSound()) {
-                     this.slime.playSound(this.slime.getJumpSound(), this.slime.getSoundVolume(), ((this.slime.getRandom().nextFloat() - this.slime.getRandom().nextFloat()) * 0.2F + 1.0F) * 0.8F);
+                     this.slime.playSound(this.slime.getJumpSound(), this.slime.getSoundVolume(), this.slime.getSoundPitch());
                   }
                } else {
                   this.slime.xxa = 0.0F;
                   this.slime.zza = 0.0F;
                   this.mob.setSpeed(0.0F);
                }
             } else {
-               this.mob.setSpeed((float)(this.speedModifier * this.mob.getAttribute(SharedMonsterAttributes.MOVEMENT_SPEED).getValue()));
+               this.mob.setSpeed((float)(this.speedModifier * this.mob.getAttributeValue(Attributes.MOVEMENT_SPEED)));
             }
 
          }
       }
    }
