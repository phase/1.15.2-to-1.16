--- net/minecraft/world/entity/decoration/ItemFrame.java
+++ net/minecraft/world/entity/decoration/ItemFrame.java
@@ -9,14 +9,16 @@
 import net.minecraft.network.syncher.EntityDataAccessor;
 import net.minecraft.network.syncher.EntityDataSerializers;
 import net.minecraft.network.syncher.SynchedEntityData;
 import net.minecraft.sounds.SoundEvents;
 import net.minecraft.world.InteractionHand;
+import net.minecraft.world.InteractionResult;
 import net.minecraft.world.damagesource.DamageSource;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EntityDimensions;
 import net.minecraft.world.entity.EntityType;
+import net.minecraft.world.entity.MoverType;
 import net.minecraft.world.entity.Pose;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.Items;
 import net.minecraft.world.item.MapItem;
@@ -25,19 +27,21 @@
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.DiodeBlock;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.saveddata.maps.MapItemSavedData;
 import net.minecraft.world.phys.AABB;
+import net.minecraft.world.phys.Vec3;
 import org.apache.commons.lang3.Validate;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
 public class ItemFrame extends HangingEntity {
    private static final Logger LOGGER = LogManager.getLogger();
    private static final EntityDataAccessor<ItemStack> DATA_ITEM;
    private static final EntityDataAccessor<Integer> DATA_ROTATION;
    private float dropChance = 1.0F;
+   private boolean fixed;
 
    public ItemFrame(EntityType<? extends ItemFrame> var1, Level var2) {
       super(var1, var2);
    }
 
@@ -99,29 +103,47 @@
          this.setBoundingBox(new AABB(var3 - var9, var5 - var11, var7 - var13, var3 + var9, var5 + var11, var7 + var13));
       }
    }
 
    public boolean survives() {
-      if (!this.level.noCollision(this)) {
+      if (this.fixed) {
+         return true;
+      } else if (!this.level.noCollision(this)) {
          return false;
       } else {
          BlockState var1 = this.level.getBlockState(this.pos.relative(this.direction.getOpposite()));
          return var1.getMaterial().isSolid() || this.direction.getAxis().isHorizontal() && DiodeBlock.isDiode(var1) ? this.level.getEntities((Entity)this, this.getBoundingBox(), HANGING_ENTITY).isEmpty() : false;
       }
    }
 
+   public void move(MoverType var1, Vec3 var2) {
+      if (!this.fixed) {
+         super.move(var1, var2);
+      }
+
+   }
+
+   public void push(double var1, double var3, double var5) {
+      if (!this.fixed) {
+         super.push(var1, var3, var5);
+      }
+
+   }
+
    public float getPickRadius() {
       return 0.0F;
    }
 
    public void kill() {
       this.removeFramedMap(this.getItem());
       super.kill();
    }
 
    public boolean hurt(DamageSource var1, float var2) {
-      if (this.isInvulnerableTo(var1)) {
+      if (this.fixed) {
+         return var1 != DamageSource.OUT_OF_WORLD && !var1.isCreativePlayer() ? false : super.hurt(var1, var2);
+      } else if (this.isInvulnerableTo(var1)) {
          return false;
       } else if (!var1.isExplosion() && !this.getItem().isEmpty()) {
          if (!this.level.isClientSide) {
             this.dropItem(var1.getEntity(), false);
             this.playSound(SoundEvents.ITEM_FRAME_REMOVE_ITEM, 1.0F, 1.0F);
@@ -149,49 +171,51 @@
    public void playPlacementSound() {
       this.playSound(SoundEvents.ITEM_FRAME_PLACE, 1.0F, 1.0F);
    }
 
    private void dropItem(@Nullable Entity var1, boolean var2) {
-      if (!this.level.getGameRules().getBoolean(GameRules.RULE_DOENTITYDROPS)) {
-         if (var1 == null) {
-            this.removeFramedMap(this.getItem());
-         }
+      if (!this.fixed) {
+         if (!this.level.getGameRules().getBoolean(GameRules.RULE_DOENTITYDROPS)) {
+            if (var1 == null) {
+               this.removeFramedMap(this.getItem());
+            }
 
-      } else {
-         ItemStack var3 = this.getItem();
-         this.setItem(ItemStack.EMPTY);
-         if (var1 instanceof Player) {
-            Player var4 = (Player)var1;
-            if (var4.abilities.instabuild) {
-               this.removeFramedMap(var3);
-               return;
+         } else {
+            ItemStack var3 = this.getItem();
+            this.setItem(ItemStack.EMPTY);
+            if (var1 instanceof Player) {
+               Player var4 = (Player)var1;
+               if (var4.abilities.instabuild) {
+                  this.removeFramedMap(var3);
+                  return;
+               }
             }
-         }
 
-         if (var2) {
-            this.spawnAtLocation(Items.ITEM_FRAME);
-         }
+            if (var2) {
+               this.spawnAtLocation(Items.ITEM_FRAME);
+            }
 
-         if (!var3.isEmpty()) {
-            var3 = var3.copy();
-            this.removeFramedMap(var3);
-            if (this.random.nextFloat() < this.dropChance) {
-               this.spawnAtLocation(var3);
+            if (!var3.isEmpty()) {
+               var3 = var3.copy();
+               this.removeFramedMap(var3);
+               if (this.random.nextFloat() < this.dropChance) {
+                  this.spawnAtLocation(var3);
+               }
             }
-         }
 
+         }
       }
    }
 
    private void removeFramedMap(ItemStack var1) {
       if (var1.getItem() == Items.FILLED_MAP) {
          MapItemSavedData var2 = MapItem.getOrCreateSavedData(var1, this.level);
          var2.removedFromFrame(this.pos, this.getId());
          var2.setDirty(true);
       }
 
-      var1.setFramed((ItemFrame)null);
+      var1.setEntityRepresentation((Entity)null);
    }
 
    public ItemStack getItem() {
       return (ItemStack)this.getEntityData().get(DATA_ITEM);
    }
@@ -202,11 +226,11 @@
 
    public void setItem(ItemStack var1, boolean var2) {
       if (!var1.isEmpty()) {
          var1 = var1.copy();
          var1.setCount(1);
-         var1.setFramed(this);
+         var1.setEntityRepresentation(this);
       }
 
       this.getEntityData().set(DATA_ITEM, var1);
       if (!var1.isEmpty()) {
          this.playSound(SoundEvents.ITEM_FRAME_ADD_ITEM, 1.0F, 1.0F);
@@ -229,11 +253,11 @@
 
    public void onSyncedDataUpdated(EntityDataAccessor<?> var1) {
       if (var1.equals(DATA_ITEM)) {
          ItemStack var2 = this.getItem();
          if (!var2.isEmpty() && var2.getFrame() != this) {
-            var2.setFramed(this);
+            var2.setEntityRepresentation(this);
          }
       }
 
    }
 
@@ -260,10 +284,12 @@
          var1.putByte("ItemRotation", (byte)this.getRotation());
          var1.putFloat("ItemDropChance", this.dropChance);
       }
 
       var1.putByte("Facing", (byte)this.direction.get3DDataValue());
+      var1.putBoolean("Invisible", this.isInvisible());
+      var1.putBoolean("Fixed", this.fixed);
    }
 
    public void readAdditionalSaveData(CompoundTag var1) {
       super.readAdditionalSaveData(var1);
       CompoundTag var2 = var1.getCompound("Item");
@@ -284,32 +310,36 @@
             this.dropChance = var1.getFloat("ItemDropChance");
          }
       }
 
       this.setDirection(Direction.from3DDataValue(var1.getByte("Facing")));
+      this.setInvisible(var1.getBoolean("Invisible"));
+      this.fixed = var1.getBoolean("Fixed");
    }
 
-   public boolean interact(Player var1, InteractionHand var2) {
+   public InteractionResult interact(Player var1, InteractionHand var2) {
       ItemStack var3 = var1.getItemInHand(var2);
       boolean var4 = !this.getItem().isEmpty();
       boolean var5 = !var3.isEmpty();
-      if (!this.level.isClientSide) {
+      if (this.fixed) {
+         return InteractionResult.PASS;
+      } else if (!this.level.isClientSide) {
          if (!var4) {
-            if (var5) {
+            if (var5 && !this.removed) {
                this.setItem(var3);
                if (!var1.abilities.instabuild) {
                   var3.shrink(1);
                }
             }
          } else {
             this.playSound(SoundEvents.ITEM_FRAME_ROTATE_ITEM, 1.0F, 1.0F);
             this.setRotation(this.getRotation() + 1);
          }
 
-         return true;
+         return InteractionResult.CONSUME;
       } else {
-         return var4 || var5;
+         return !var4 && !var5 ? InteractionResult.PASS : InteractionResult.SUCCESS;
       }
    }
 
    public int getAnalogOutput() {
       return this.getItem().isEmpty() ? 0 : this.getRotation() % 8 + 1;
