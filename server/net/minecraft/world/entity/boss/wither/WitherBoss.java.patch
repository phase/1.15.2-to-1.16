--- net/minecraft/world/entity/boss/wither/WitherBoss.java
+++ net/minecraft/world/entity/boss/wither/WitherBoss.java
@@ -26,10 +26,12 @@
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.Mob;
 import net.minecraft.world.entity.MobType;
+import net.minecraft.world.entity.ai.attributes.AttributeSupplier;
+import net.minecraft.world.entity.ai.attributes.Attributes;
 import net.minecraft.world.entity.ai.goal.Goal;
 import net.minecraft.world.entity.ai.goal.LookAtPlayerGoal;
 import net.minecraft.world.entity.ai.goal.RandomLookAroundGoal;
 import net.minecraft.world.entity.ai.goal.RangedAttackGoal;
 import net.minecraft.world.entity.ai.goal.WaterAvoidingRandomStrollGoal;
@@ -37,11 +39,10 @@
 import net.minecraft.world.entity.ai.goal.target.NearestAttackableTargetGoal;
 import net.minecraft.world.entity.ai.targeting.TargetingConditions;
 import net.minecraft.world.entity.item.ItemEntity;
 import net.minecraft.world.entity.monster.Monster;
 import net.minecraft.world.entity.monster.RangedAttackMob;
-import net.minecraft.world.entity.monster.SharedMonsterAttributes;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.entity.projectile.AbstractArrow;
 import net.minecraft.world.entity.projectile.WitherSkull;
 import net.minecraft.world.item.Items;
 import net.minecraft.world.level.Explosion;
@@ -207,11 +208,13 @@
       if (this.getInvulnerableTicks() > 0) {
          var1 = this.getInvulnerableTicks() - 1;
          if (var1 <= 0) {
             Explosion.BlockInteraction var14 = this.level.getGameRules().getBoolean(GameRules.RULE_MOBGRIEFING) ? Explosion.BlockInteraction.DESTROY : Explosion.BlockInteraction.NONE;
             this.level.explode(this, this.getX(), this.getEyeY(), this.getZ(), 7.0F, false, var14);
-            this.level.globalLevelEvent(1023, new BlockPos(this), 0);
+            if (!this.isSilent()) {
+               this.level.globalLevelEvent(1023, this.blockPosition(), 0);
+            }
          }
 
          this.setInvulnerableTicks(var1);
          if (this.tickCount % 10 == 0) {
             this.heal(10.0F);
@@ -304,11 +307,11 @@
                      }
                   }
                }
 
                if (var19) {
-                  this.level.levelEvent((Player)null, 1022, new BlockPos(this), 0);
+                  this.level.levelEvent((Player)null, 1022, this.blockPosition(), 0);
                }
             }
          }
 
          if (this.tickCount % 20 == 0) {
@@ -381,18 +384,22 @@
    private void performRangedAttack(int var1, LivingEntity var2) {
       this.performRangedAttack(var1, var2.getX(), var2.getY() + (double)var2.getEyeHeight() * 0.5D, var2.getZ(), var1 == 0 && this.random.nextFloat() < 0.001F);
    }
 
    private void performRangedAttack(int var1, double var2, double var4, double var6, boolean var8) {
-      this.level.levelEvent((Player)null, 1024, new BlockPos(this), 0);
+      if (!this.isSilent()) {
+         this.level.levelEvent((Player)null, 1024, this.blockPosition(), 0);
+      }
+
       double var9 = this.getHeadX(var1);
       double var11 = this.getHeadY(var1);
       double var13 = this.getHeadZ(var1);
       double var15 = var2 - var9;
       double var17 = var4 - var11;
       double var19 = var6 - var13;
       WitherSkull var21 = new WitherSkull(this.level, this, var15, var17, var19);
+      var21.setOwner(this);
       if (var8) {
          var21.setDangerous(true);
       }
 
       var21.setPosRaw(var9, var11, var13);
@@ -462,16 +469,12 @@
 
    public boolean addEffect(MobEffectInstance var1) {
       return false;
    }
 
-   protected void registerAttributes() {
-      super.registerAttributes();
-      this.getAttribute(SharedMonsterAttributes.MAX_HEALTH).setBaseValue(300.0D);
-      this.getAttribute(SharedMonsterAttributes.MOVEMENT_SPEED).setBaseValue(0.6000000238418579D);
-      this.getAttribute(SharedMonsterAttributes.FOLLOW_RANGE).setBaseValue(40.0D);
-      this.getAttribute(SharedMonsterAttributes.ARMOR).setBaseValue(4.0D);
+   public static AttributeSupplier.Builder createAttributes() {
+      return Monster.createMonsterAttributes().add(Attributes.MAX_HEALTH, 300.0D).add(Attributes.MOVEMENT_SPEED, 0.6000000238418579D).add(Attributes.FOLLOW_RANGE, 40.0D).add(Attributes.ARMOR, 4.0D);
    }
 
    public int getInvulnerableTicks() {
       return (Integer)this.entityData.get(DATA_ID_INV);
    }
