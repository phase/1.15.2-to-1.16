--- net/minecraft/world/entity/npc/WanderingTraderSpawner.java
+++ net/minecraft/world/entity/npc/WanderingTraderSpawner.java
@@ -15,139 +15,148 @@
 import net.minecraft.world.entity.SpawnPlacements;
 import net.minecraft.world.entity.ai.village.poi.PoiManager;
 import net.minecraft.world.entity.ai.village.poi.PoiType;
 import net.minecraft.world.entity.animal.horse.TraderLlama;
 import net.minecraft.world.entity.player.Player;
+import net.minecraft.world.level.BlockGetter;
+import net.minecraft.world.level.CustomSpawner;
 import net.minecraft.world.level.GameRules;
+import net.minecraft.world.level.LevelReader;
 import net.minecraft.world.level.NaturalSpawner;
 import net.minecraft.world.level.biome.Biomes;
 import net.minecraft.world.level.levelgen.Heightmap;
-import net.minecraft.world.level.storage.LevelData;
+import net.minecraft.world.level.storage.ServerLevelData;
 
-public class WanderingTraderSpawner {
+public class WanderingTraderSpawner implements CustomSpawner {
    private final Random random = new Random();
-   private final ServerLevel level;
+   private final ServerLevelData serverLevelData;
    private int tickDelay;
    private int spawnDelay;
    private int spawnChance;
 
-   public WanderingTraderSpawner(ServerLevel var1) {
-      this.level = var1;
+   public WanderingTraderSpawner(ServerLevelData var1) {
+      this.serverLevelData = var1;
       this.tickDelay = 1200;
-      LevelData var2 = var1.getLevelData();
-      this.spawnDelay = var2.getWanderingTraderSpawnDelay();
-      this.spawnChance = var2.getWanderingTraderSpawnChance();
+      this.spawnDelay = var1.getWanderingTraderSpawnDelay();
+      this.spawnChance = var1.getWanderingTraderSpawnChance();
       if (this.spawnDelay == 0 && this.spawnChance == 0) {
          this.spawnDelay = 24000;
-         var2.setWanderingTraderSpawnDelay(this.spawnDelay);
+         var1.setWanderingTraderSpawnDelay(this.spawnDelay);
          this.spawnChance = 25;
-         var2.setWanderingTraderSpawnChance(this.spawnChance);
+         var1.setWanderingTraderSpawnChance(this.spawnChance);
       }
 
    }
 
-   public void tick() {
-      if (this.level.getGameRules().getBoolean(GameRules.RULE_DO_TRADER_SPAWNING)) {
-         if (--this.tickDelay <= 0) {
-            this.tickDelay = 1200;
-            LevelData var1 = this.level.getLevelData();
-            this.spawnDelay -= 1200;
-            var1.setWanderingTraderSpawnDelay(this.spawnDelay);
-            if (this.spawnDelay <= 0) {
-               this.spawnDelay = 24000;
-               if (this.level.getGameRules().getBoolean(GameRules.RULE_DOMOBSPAWNING)) {
-                  int var2 = this.spawnChance;
-                  this.spawnChance = Mth.clamp(this.spawnChance + 25, 25, 75);
-                  var1.setWanderingTraderSpawnChance(this.spawnChance);
-                  if (this.random.nextInt(100) <= var2) {
-                     if (this.spawn()) {
-                        this.spawnChance = 25;
-                     }
-
-                  }
+   public int tick(ServerLevel var1, boolean var2, boolean var3) {
+      if (!var1.getGameRules().getBoolean(GameRules.RULE_DO_TRADER_SPAWNING)) {
+         return 0;
+      } else if (--this.tickDelay > 0) {
+         return 0;
+      } else {
+         this.tickDelay = 1200;
+         this.spawnDelay -= 1200;
+         this.serverLevelData.setWanderingTraderSpawnDelay(this.spawnDelay);
+         if (this.spawnDelay > 0) {
+            return 0;
+         } else {
+            this.spawnDelay = 24000;
+            if (!var1.getGameRules().getBoolean(GameRules.RULE_DOMOBSPAWNING)) {
+               return 0;
+            } else {
+               int var4 = this.spawnChance;
+               this.spawnChance = Mth.clamp(this.spawnChance + 25, 25, 75);
+               this.serverLevelData.setWanderingTraderSpawnChance(this.spawnChance);
+               if (this.random.nextInt(100) > var4) {
+                  return 0;
+               } else if (this.spawn(var1)) {
+                  this.spawnChance = 25;
+                  return 1;
+               } else {
+                  return 0;
                }
             }
          }
       }
    }
 
-   private boolean spawn() {
-      ServerPlayer var1 = this.level.getRandomPlayer();
-      if (var1 == null) {
+   private boolean spawn(ServerLevel var1) {
+      ServerPlayer var2 = var1.getRandomPlayer();
+      if (var2 == null) {
          return true;
       } else if (this.random.nextInt(10) != 0) {
          return false;
       } else {
-         BlockPos var2 = var1.getCommandSenderBlockPosition();
-         boolean var3 = true;
-         PoiManager var4 = this.level.getPoiManager();
-         Optional var5 = var4.find(PoiType.MEETING.getPredicate(), (var0) -> {
+         BlockPos var3 = var2.blockPosition();
+         boolean var4 = true;
+         PoiManager var5 = var1.getPoiManager();
+         Optional var6 = var5.find(PoiType.MEETING.getPredicate(), (var0) -> {
             return true;
-         }, var2, 48, PoiManager.Occupancy.ANY);
-         BlockPos var6 = (BlockPos)var5.orElse(var2);
-         BlockPos var7 = this.findSpawnPositionNear(var6, 48);
-         if (var7 != null && this.hasEnoughSpace(var7)) {
-            if (this.level.getBiome(var7) == Biomes.THE_VOID) {
+         }, var3, 48, PoiManager.Occupancy.ANY);
+         BlockPos var7 = (BlockPos)var6.orElse(var3);
+         BlockPos var8 = this.findSpawnPositionNear(var1, var7, 48);
+         if (var8 != null && this.hasEnoughSpace(var1, var8)) {
+            if (var1.getBiome(var8) == Biomes.THE_VOID) {
                return false;
             }
 
-            WanderingTrader var8 = (WanderingTrader)EntityType.WANDERING_TRADER.spawn(this.level, (CompoundTag)null, (Component)null, (Player)null, var7, MobSpawnType.EVENT, false, false);
-            if (var8 != null) {
-               for(int var9 = 0; var9 < 2; ++var9) {
-                  this.tryToSpawnLlamaFor(var8, 4);
+            WanderingTrader var9 = (WanderingTrader)EntityType.WANDERING_TRADER.spawn(var1, (CompoundTag)null, (Component)null, (Player)null, var8, MobSpawnType.EVENT, false, false);
+            if (var9 != null) {
+               for(int var10 = 0; var10 < 2; ++var10) {
+                  this.tryToSpawnLlamaFor(var9, 4);
                }
 
-               this.level.getLevelData().setWanderingTraderId(var8.getUUID());
-               var8.setDespawnDelay(48000);
-               var8.setWanderTarget(var6);
-               var8.restrictTo(var6, 16);
+               this.serverLevelData.setWanderingTraderId(var9.getUUID());
+               var9.setDespawnDelay(48000);
+               var9.setWanderTarget(var7);
+               var9.restrictTo(var7, 16);
                return true;
             }
          }
 
          return false;
       }
    }
 
    private void tryToSpawnLlamaFor(WanderingTrader var1, int var2) {
-      BlockPos var3 = this.findSpawnPositionNear(new BlockPos(var1), var2);
+      BlockPos var3 = this.findSpawnPositionNear(var1.level, var1.blockPosition(), var2);
       if (var3 != null) {
-         TraderLlama var4 = (TraderLlama)EntityType.TRADER_LLAMA.spawn(this.level, (CompoundTag)null, (Component)null, (Player)null, var3, MobSpawnType.EVENT, false, false);
+         TraderLlama var4 = (TraderLlama)EntityType.TRADER_LLAMA.spawn(var1.level, (CompoundTag)null, (Component)null, (Player)null, var3, MobSpawnType.EVENT, false, false);
          if (var4 != null) {
             var4.setLeashedTo(var1, true);
          }
       }
    }
 
    @Nullable
-   private BlockPos findSpawnPositionNear(BlockPos var1, int var2) {
-      BlockPos var3 = null;
+   private BlockPos findSpawnPositionNear(LevelReader var1, BlockPos var2, int var3) {
+      BlockPos var4 = null;
 
-      for(int var4 = 0; var4 < 10; ++var4) {
-         int var5 = var1.getX() + this.random.nextInt(var2 * 2) - var2;
-         int var6 = var1.getZ() + this.random.nextInt(var2 * 2) - var2;
-         int var7 = this.level.getHeight(Heightmap.Types.WORLD_SURFACE, var5, var6);
-         BlockPos var8 = new BlockPos(var5, var7, var6);
-         if (NaturalSpawner.isSpawnPositionOk(SpawnPlacements.Type.ON_GROUND, this.level, var8, EntityType.WANDERING_TRADER)) {
-            var3 = var8;
+      for(int var5 = 0; var5 < 10; ++var5) {
+         int var6 = var2.getX() + this.random.nextInt(var3 * 2) - var3;
+         int var7 = var2.getZ() + this.random.nextInt(var3 * 2) - var3;
+         int var8 = var1.getHeight(Heightmap.Types.WORLD_SURFACE, var6, var7);
+         BlockPos var9 = new BlockPos(var6, var8, var7);
+         if (NaturalSpawner.isSpawnPositionOk(SpawnPlacements.Type.ON_GROUND, var1, var9, EntityType.WANDERING_TRADER)) {
+            var4 = var9;
             break;
          }
       }
 
-      return var3;
+      return var4;
    }
 
-   private boolean hasEnoughSpace(BlockPos var1) {
-      Iterator var2 = BlockPos.betweenClosed(var1, var1.offset(1, 2, 1)).iterator();
+   private boolean hasEnoughSpace(BlockGetter var1, BlockPos var2) {
+      Iterator var3 = BlockPos.betweenClosed(var2, var2.offset(1, 2, 1)).iterator();
 
-      BlockPos var3;
+      BlockPos var4;
       do {
-         if (!var2.hasNext()) {
+         if (!var3.hasNext()) {
             return true;
          }
 
-         var3 = (BlockPos)var2.next();
-      } while(this.level.getBlockState(var3).getCollisionShape(this.level, var3).isEmpty());
+         var4 = (BlockPos)var3.next();
+      } while(var1.getBlockState(var4).getCollisionShape(var1, var4).isEmpty());
 
       return false;
    }
 }
