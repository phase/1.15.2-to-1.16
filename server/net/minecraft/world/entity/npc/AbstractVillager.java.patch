--- net/minecraft/world/entity/npc/AbstractVillager.java
+++ net/minecraft/world/entity/npc/AbstractVillager.java
@@ -4,14 +4,14 @@
 import java.util.HashSet;
 import java.util.Iterator;
 import javax.annotation.Nullable;
 import net.minecraft.advancements.CriteriaTriggers;
 import net.minecraft.nbt.CompoundTag;
-import net.minecraft.nbt.ListTag;
 import net.minecraft.network.syncher.EntityDataAccessor;
 import net.minecraft.network.syncher.EntityDataSerializers;
 import net.minecraft.network.syncher.SynchedEntityData;
+import net.minecraft.server.level.ServerLevel;
 import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.sounds.SoundEvent;
 import net.minecraft.sounds.SoundEvents;
 import net.minecraft.world.DifficultyInstance;
 import net.minecraft.world.SimpleContainer;
@@ -28,11 +28,11 @@
 import net.minecraft.world.item.trading.Merchant;
 import net.minecraft.world.item.trading.MerchantOffer;
 import net.minecraft.world.item.trading.MerchantOffers;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.LevelAccessor;
-import net.minecraft.world.level.dimension.DimensionType;
+import net.minecraft.world.level.pathfinder.BlockPathTypes;
 
 public abstract class AbstractVillager extends AgableMob implements Npc, Merchant {
    private static final EntityDataAccessor<Integer> DATA_UNHAPPY_COUNTER;
    @Nullable
    private Player tradingPlayer;
@@ -40,10 +40,12 @@
    protected MerchantOffers offers;
    private final SimpleContainer inventory = new SimpleContainer(8);
 
    public AbstractVillager(EntityType<? extends AbstractVillager> var1, Level var2) {
       super(var1, var2);
+      this.setPathfindingMalus(BlockPathTypes.DANGER_FIRE, 16.0F);
+      this.setPathfindingMalus(BlockPathTypes.DAMAGE_FIRE, -1.0F);
    }
 
    public SpawnGroupData finalizeSpawn(LevelAccessor var1, DifficultyInstance var2, MobSpawnType var3, @Nullable SpawnGroupData var4, @Nullable CompoundTag var5) {
       if (var4 == null) {
          var4 = new AgableMob.AgableMobGroupData();
@@ -140,41 +142,24 @@
       MerchantOffers var2 = this.getOffers();
       if (!var2.isEmpty()) {
          var1.put("Offers", var2.createTag());
       }
 
-      ListTag var3 = new ListTag();
-
-      for(int var4 = 0; var4 < this.inventory.getContainerSize(); ++var4) {
-         ItemStack var5 = this.inventory.getItem(var4);
-         if (!var5.isEmpty()) {
-            var3.add(var5.save(new CompoundTag()));
-         }
-      }
-
-      var1.put("Inventory", var3);
+      var1.put("Inventory", this.inventory.createTag());
    }
 
    public void readAdditionalSaveData(CompoundTag var1) {
       super.readAdditionalSaveData(var1);
       if (var1.contains("Offers", 10)) {
          this.offers = new MerchantOffers(var1.getCompound("Offers"));
       }
 
-      ListTag var2 = var1.getList("Inventory", 10);
-
-      for(int var3 = 0; var3 < var2.size(); ++var3) {
-         ItemStack var4 = ItemStack.of(var2.getCompound(var3));
-         if (!var4.isEmpty()) {
-            this.inventory.addItem(var4);
-         }
-      }
-
+      this.inventory.fromTag(var1.getList("Inventory", 10));
    }
 
    @Nullable
-   public Entity changeDimension(DimensionType var1) {
+   public Entity changeDimension(ServerLevel var1) {
       this.stopTrading();
       return super.changeDimension(var1);
    }
 
    protected void stopTrading() {
