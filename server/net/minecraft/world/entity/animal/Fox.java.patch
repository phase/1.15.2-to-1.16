--- net/minecraft/world/entity/animal/Fox.java
+++ net/minecraft/world/entity/animal/Fox.java
@@ -24,10 +24,11 @@
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.sounds.SoundEvent;
 import net.minecraft.sounds.SoundEvents;
 import net.minecraft.stats.Stats;
+import net.minecraft.tags.FluidTags;
 import net.minecraft.util.Mth;
 import net.minecraft.world.DifficultyInstance;
 import net.minecraft.world.damagesource.DamageSource;
 import net.minecraft.world.entity.AgableMob;
 import net.minecraft.world.entity.Entity;
@@ -40,10 +41,12 @@
 import net.minecraft.world.entity.Mob;
 import net.minecraft.world.entity.MobSpawnType;
 import net.minecraft.world.entity.Pose;
 import net.minecraft.world.entity.SpawnGroupData;
 import net.minecraft.world.entity.TamableAnimal;
+import net.minecraft.world.entity.ai.attributes.AttributeSupplier;
+import net.minecraft.world.entity.ai.attributes.Attributes;
 import net.minecraft.world.entity.ai.control.LookControl;
 import net.minecraft.world.entity.ai.control.MoveControl;
 import net.minecraft.world.entity.ai.goal.AvoidEntityGoal;
 import net.minecraft.world.entity.ai.goal.BreedGoal;
 import net.minecraft.world.entity.ai.goal.FleeSunGoal;
@@ -60,11 +63,10 @@
 import net.minecraft.world.entity.ai.goal.WaterAvoidingRandomStrollGoal;
 import net.minecraft.world.entity.ai.goal.target.NearestAttackableTargetGoal;
 import net.minecraft.world.entity.ai.targeting.TargetingConditions;
 import net.minecraft.world.entity.item.ItemEntity;
 import net.minecraft.world.entity.monster.Monster;
-import net.minecraft.world.entity.monster.SharedMonsterAttributes;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.item.Item;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.Items;
 import net.minecraft.world.level.GameRules;
@@ -131,10 +133,13 @@
          return AVOID_PLAYERS.test(var1) && !this.trusts(var1.getUUID()) && !this.isDefending();
       }));
       this.goalSelector.addGoal(4, new AvoidEntityGoal(this, Wolf.class, 8.0F, 1.6D, 1.4D, (var1) -> {
          return !((Wolf)var1).isTame() && !this.isDefending();
       }));
+      this.goalSelector.addGoal(4, new AvoidEntityGoal(this, PolarBear.class, 8.0F, 1.6D, 1.4D, (var1) -> {
+         return !this.isDefending();
+      }));
       this.goalSelector.addGoal(5, new Fox.StalkPreyGoal());
       this.goalSelector.addGoal(6, new Fox.FoxPounceGoal());
       this.goalSelector.addGoal(6, new Fox.SeekShelterGoal(1.25D));
       this.goalSelector.addGoal(7, new Fox.FoxMeleeAttackGoal(1.2000000476837158D, true));
       this.goalSelector.addGoal(7, new Fox.SleepGoal());
@@ -192,11 +197,11 @@
       }
 
    }
 
    protected boolean isImmobile() {
-      return this.getHealth() <= 0.0F;
+      return this.isDeadOrDying();
    }
 
    private boolean canEat(ItemStack var1) {
       return var1.getItem().isEdible() && this.getTarget() == null && this.onGround && !this.isSleeping();
    }
@@ -222,27 +227,23 @@
          this.setItemSlot(EquipmentSlot.MAINHAND, var3);
       }
 
    }
 
-   protected void registerAttributes() {
-      super.registerAttributes();
-      this.getAttribute(SharedMonsterAttributes.MOVEMENT_SPEED).setBaseValue(0.30000001192092896D);
-      this.getAttribute(SharedMonsterAttributes.MAX_HEALTH).setBaseValue(10.0D);
-      this.getAttribute(SharedMonsterAttributes.FOLLOW_RANGE).setBaseValue(32.0D);
-      this.getAttributes().registerAttribute(SharedMonsterAttributes.ATTACK_DAMAGE).setBaseValue(2.0D);
+   public static AttributeSupplier.Builder createAttributes() {
+      return Mob.createMobAttributes().add(Attributes.MOVEMENT_SPEED, 0.30000001192092896D).add(Attributes.MAX_HEALTH, 10.0D).add(Attributes.FOLLOW_RANGE, 32.0D).add(Attributes.ATTACK_DAMAGE, 2.0D);
    }
 
    public Fox getBreedOffspring(AgableMob var1) {
       Fox var2 = (Fox)EntityType.FOX.create(this.level);
       var2.setFoxType(this.random.nextBoolean() ? this.getFoxType() : ((Fox)var1).getFoxType());
       return var2;
    }
 
    @Nullable
    public SpawnGroupData finalizeSpawn(LevelAccessor var1, DifficultyInstance var2, MobSpawnType var3, @Nullable SpawnGroupData var4, @Nullable CompoundTag var5) {
-      Biome var6 = var1.getBiome(new BlockPos(this));
+      Biome var6 = var1.getBiome(this.blockPosition());
       Fox.Type var7 = Fox.Type.byBiome(var6);
       boolean var8 = false;
       if (var4 instanceof Fox.FoxGroupData) {
          var7 = ((Fox.FoxGroupData)var4).type;
          if (((Fox.FoxGroupData)var4).getGroupSize() >= 2) {
@@ -255,11 +256,14 @@
       this.setFoxType(var7);
       if (var8) {
          this.setAge(-24000);
       }
 
-      this.setTargetGoals();
+      if (var1 instanceof ServerLevel) {
+         this.setTargetGoals();
+      }
+
       this.populateDefaultEquipmentSlots(var2);
       return super.finalizeSpawn(var1, var2, var3, (SpawnGroupData)var4, var5);
    }
 
    private void setTargetGoals() {
@@ -318,34 +322,37 @@
       Iterator var4 = var2.iterator();
 
       while(var4.hasNext()) {
          UUID var5 = (UUID)var4.next();
          if (var5 != null) {
-            var3.add(NbtUtils.createUUIDTag(var5));
+            var3.add(NbtUtils.createUUID(var5));
          }
       }
 
-      var1.put("TrustedUUIDs", var3);
+      var1.put("Trusted", var3);
       var1.putBoolean("Sleeping", this.isSleeping());
       var1.putString("Type", this.getFoxType().getName());
       var1.putBoolean("Sitting", this.isSitting());
       var1.putBoolean("Crouching", this.isCrouching());
    }
 
    public void readAdditionalSaveData(CompoundTag var1) {
       super.readAdditionalSaveData(var1);
-      ListTag var2 = var1.getList("TrustedUUIDs", 10);
+      ListTag var2 = var1.getList("Trusted", 11);
 
       for(int var3 = 0; var3 < var2.size(); ++var3) {
-         this.addTrustedUUID(NbtUtils.loadUUIDTag(var2.getCompound(var3)));
+         this.addTrustedUUID(NbtUtils.loadUUID(var2.get(var3)));
       }
 
       this.setSleeping(var1.getBoolean("Sleeping"));
       this.setFoxType(Fox.Type.byName(var1.getString("Type")));
       this.setSitting(var1.getBoolean("Sitting"));
       this.setIsCrouching(var1.getBoolean("Crouching"));
-      this.setTargetGoals();
+      if (this.level instanceof ServerLevel) {
+         this.setTargetGoals();
+      }
+
    }
 
    public boolean isSitting() {
       return this.getFlag(1);
    }
@@ -398,11 +405,11 @@
       } else {
          return var2 == EquipmentSlot.MAINHAND && super.canTakeItem(var1);
       }
    }
 
-   protected boolean canHoldItem(ItemStack var1) {
+   public boolean canHoldItem(ItemStack var1) {
       Item var2 = var1.getItem();
       ItemStack var3 = this.getItemBySlot(EquipmentSlot.MAINHAND);
       return var3.isEmpty() || this.ticksSinceEaten > 0 && var2.isEdible() && !var3.getItem().isEdible();
    }
 
@@ -428,10 +435,11 @@
          if (var3 > 1) {
             this.dropItemStack(var2.split(var3 - 1));
          }
 
          this.spitOutItem(this.getItemBySlot(EquipmentSlot.MAINHAND));
+         this.onItemPickup(var1);
          this.setItemSlot(EquipmentSlot.MAINHAND, var2.split(1));
          this.handDropChances[EquipmentSlot.MAINHAND.getIndex()] = 2.0F;
          this.take(var1, var2.getCount());
          var1.remove();
          this.ticksSinceEaten = 0;
@@ -450,11 +458,11 @@
          if (var1 || this.isSleeping()) {
             this.setSitting(false);
          }
 
          if (this.isFaceplanted() && this.level.random.nextFloat() < 0.2F) {
-            BlockPos var2 = new BlockPos(this);
+            BlockPos var2 = this.blockPosition();
             BlockState var3 = this.level.getBlockState(var2);
             this.level.levelEvent(2001, var2, Block.getId(var3));
          }
       }
 
@@ -479,11 +487,11 @@
 
    public boolean isFood(ItemStack var1) {
       return var1.getItem() == Items.SWEET_BERRIES;
    }
 
-   protected void onOffspringSpawnedFromEgg(Player var1, AgableMob var2) {
+   protected void onOffspringSpawnedFromEgg(Player var1, Mob var2) {
       ((Fox)var2).addTrustedUUID(var1.getUUID());
    }
 
    public boolean isPouncing() {
       return this.getFlag(16);
@@ -767,11 +775,11 @@
             }
          }
 
          if (var1 != null && Fox.this.distanceTo(var1) <= 2.0F) {
             Fox.this.doHurtTarget(var1);
-         } else if (Fox.this.xRot > 0.0F && Fox.this.onGround && (float)Fox.this.getDeltaMovement().y != 0.0F && Fox.this.level.getBlockState(new BlockPos(Fox.this)).getBlock() == Blocks.SNOW) {
+         } else if (Fox.this.xRot > 0.0F && Fox.this.onGround && (float)Fox.this.getDeltaMovement().y != 0.0F && Fox.this.level.getBlockState(Fox.this.blockPosition()).is(Blocks.SNOW)) {
             Fox.this.xRot = 60.0F;
             Fox.this.setTarget((LivingEntity)null);
             Fox.this.setFaceplanted(true);
          }
 
@@ -787,11 +795,11 @@
          super.start();
          Fox.this.clearStates();
       }
 
       public boolean canUse() {
-         return Fox.this.isInWater() && Fox.this.getWaterHeight() > 0.25D || Fox.this.isInLava();
+         return Fox.this.isInWater() && Fox.this.getFluidHeight(FluidTags.WATER) > 0.25D || Fox.this.isInLava();
       }
    }
 
    class FoxStrollThroughVillageGoal extends StrollThroughVillageGoal {
       public FoxStrollThroughVillageGoal(int var2, int var3) {
@@ -878,11 +886,11 @@
          return this.tryTicks % 100 == 0;
       }
 
       protected boolean isValidTarget(LevelReader var1, BlockPos var2) {
          BlockState var3 = var1.getBlockState(var2);
-         return var3.getBlock() == Blocks.SWEET_BERRY_BUSH && (Integer)var3.getValue(SweetBerryBushBlock.AGE) >= 2;
+         return var3.is(Blocks.SWEET_BERRY_BUSH) && (Integer)var3.getValue(SweetBerryBushBlock.AGE) >= 2;
       }
 
       public void tick() {
          if (this.isReachedTarget()) {
             if (this.ticksWaited >= 40) {
@@ -898,11 +906,11 @@
       }
 
       protected void onReachedTarget() {
          if (Fox.this.level.getGameRules().getBoolean(GameRules.RULE_MOBGRIEFING)) {
             BlockState var1 = Fox.this.level.getBlockState(this.blockPos);
-            if (var1.getBlock() == Blocks.SWEET_BERRY_BUSH) {
+            if (var1.is(Blocks.SWEET_BERRY_BUSH)) {
                int var2 = (Integer)var1.getValue(SweetBerryBushBlock.AGE);
                var1.setValue(SweetBerryBushBlock.AGE, 1);
                int var3 = 1 + Fox.this.level.random.nextInt(2) + (var2 == 3 ? 1 : 0);
                ItemStack var4 = Fox.this.getItemBySlot(EquipmentSlot.MAINHAND);
                if (var4.isEmpty()) {
@@ -1031,11 +1039,11 @@
       private FoxBehaviorGoal() {
          this.alertableTargeting = (new TargetingConditions()).range(12.0D).allowUnseeable().selector(Fox.this.new FoxAlertableEntitiesSelector());
       }
 
       protected boolean hasShelter() {
-         BlockPos var1 = new BlockPos(Fox.this);
+         BlockPos var1 = new BlockPos(Fox.this.getX(), Fox.this.getBoundingBox().maxY, Fox.this.getZ());
          return !Fox.this.level.canSeeSky(var1) && Fox.this.getWalkTargetValue(var1) >= 0.0F;
       }
 
       protected boolean alertable() {
          return !Fox.this.level.getNearbyEntities(LivingEntity.class, this.alertableTargeting, Fox.this, Fox.this.getBoundingBox().inflate(12.0D, 6.0D, 12.0D)).isEmpty();
@@ -1079,11 +1087,11 @@
             } else if (this.interval > 0) {
                --this.interval;
                return false;
             } else {
                this.interval = 100;
-               BlockPos var1 = new BlockPos(this.mob);
+               BlockPos var1 = this.mob.blockPosition();
                return Fox.this.level.isDay() && Fox.this.level.canSeeSky(var1) && !((ServerLevel)Fox.this.level).isVillage(var1) && this.setWantedPos();
             }
          } else {
             return false;
          }
@@ -1128,11 +1136,11 @@
             return false;
          }
       }
 
       public void start() {
-         Fox.this.setTarget(this.trustedLastHurtBy);
+         this.setTarget(this.trustedLastHurtBy);
          this.target = this.trustedLastHurtBy;
          if (this.trustedLastHurt != null) {
             this.timestamp = this.trustedLastHurt.getLastHurtByMobTimestamp();
          }
 
@@ -1173,11 +1181,10 @@
             if (var4 != null) {
                var4.awardStat(Stats.ANIMALS_BRED);
                CriteriaTriggers.BRED_ANIMALS.trigger(var4, this.animal, this.partner, var1);
             }
 
-            boolean var5 = true;
             this.animal.setAge(6000);
             this.partner.setAge(6000);
             this.animal.resetLove();
             this.partner.resetLove();
             var1.setAge(-24000);
@@ -1197,12 +1204,12 @@
          super(Fox.this, var2, var4);
       }
 
       protected void checkAndPerformAttack(LivingEntity var1, double var2) {
          double var4 = this.getAttackReachSqr(var1);
-         if (var2 <= var4 && this.attackTime <= 0) {
-            this.attackTime = 20;
+         if (var2 <= var4 && this.isTimeToAttack()) {
+            this.resetAttackCooldown();
             this.mob.doHurtTarget(var1);
             Fox.this.playSound(SoundEvents.FOX_BITE, 1.0F, 1.0F);
          }
 
       }
