--- net/minecraft/world/entity/animal/Rabbit.java
+++ net/minecraft/world/entity/animal/Rabbit.java
@@ -8,22 +8,26 @@
 import net.minecraft.network.chat.TranslatableComponent;
 import net.minecraft.network.syncher.EntityDataAccessor;
 import net.minecraft.network.syncher.EntityDataSerializers;
 import net.minecraft.network.syncher.SynchedEntityData;
 import net.minecraft.resources.ResourceLocation;
+import net.minecraft.server.level.ServerLevel;
 import net.minecraft.sounds.SoundEvent;
 import net.minecraft.sounds.SoundEvents;
 import net.minecraft.sounds.SoundSource;
 import net.minecraft.util.Mth;
 import net.minecraft.world.DifficultyInstance;
 import net.minecraft.world.damagesource.DamageSource;
 import net.minecraft.world.entity.AgableMob;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.entity.LivingEntity;
+import net.minecraft.world.entity.Mob;
 import net.minecraft.world.entity.MobSpawnType;
 import net.minecraft.world.entity.SpawnGroupData;
+import net.minecraft.world.entity.ai.attributes.AttributeSupplier;
+import net.minecraft.world.entity.ai.attributes.Attributes;
 import net.minecraft.world.entity.ai.control.JumpControl;
 import net.minecraft.world.entity.ai.control.MoveControl;
 import net.minecraft.world.entity.ai.goal.AvoidEntityGoal;
 import net.minecraft.world.entity.ai.goal.BreedGoal;
 import net.minecraft.world.entity.ai.goal.FloatGoal;
@@ -34,20 +38,20 @@
 import net.minecraft.world.entity.ai.goal.TemptGoal;
 import net.minecraft.world.entity.ai.goal.WaterAvoidingRandomStrollGoal;
 import net.minecraft.world.entity.ai.goal.target.HurtByTargetGoal;
 import net.minecraft.world.entity.ai.goal.target.NearestAttackableTargetGoal;
 import net.minecraft.world.entity.monster.Monster;
-import net.minecraft.world.entity.monster.SharedMonsterAttributes;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.item.Item;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.Items;
 import net.minecraft.world.item.crafting.Ingredient;
 import net.minecraft.world.level.GameRules;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.LevelAccessor;
 import net.minecraft.world.level.LevelReader;
+import net.minecraft.world.level.ServerLevelAccessor;
 import net.minecraft.world.level.biome.Biome;
 import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.CarrotBlock;
 import net.minecraft.world.level.block.state.BlockState;
@@ -185,11 +189,12 @@
       }
 
       this.wasOnGround = this.onGround;
    }
 
-   public void updateSprintingState() {
+   public boolean canSpawnSprintParticle() {
+      return false;
    }
 
    private void facePoint(double var1, double var3) {
       this.yRot = (float)(Mth.atan2(var3 - this.getZ(), var1 - this.getX()) * 57.2957763671875D) - 90.0F;
    }
@@ -226,14 +231,12 @@
          this.setJumping(false);
       }
 
    }
 
-   protected void registerAttributes() {
-      super.registerAttributes();
-      this.getAttribute(SharedMonsterAttributes.MAX_HEALTH).setBaseValue(3.0D);
-      this.getAttribute(SharedMonsterAttributes.MOVEMENT_SPEED).setBaseValue(0.30000001192092896D);
+   public static AttributeSupplier.Builder createAttributes() {
+      return Mob.createMobAttributes().add(Attributes.MAX_HEALTH, 3.0D).add(Attributes.MOVEMENT_SPEED, 0.30000001192092896D);
    }
 
    public void addAdditionalSaveData(CompoundTag var1) {
       super.addAdditionalSaveData(var1);
       var1.putInt("RabbitType", this.getRabbitType());
@@ -281,23 +284,23 @@
 
    private boolean isTemptingItem(Item var1) {
       return var1 == Items.CARROT || var1 == Items.GOLDEN_CARROT || var1 == Blocks.DANDELION.asItem();
    }
 
-   public Rabbit getBreedOffspring(AgableMob var1) {
-      Rabbit var2 = (Rabbit)EntityType.RABBIT.create(this.level);
-      int var3 = this.getRandomRabbitType(this.level);
+   public Rabbit getBreedOffspring(ServerLevel var1, AgableMob var2) {
+      Rabbit var3 = (Rabbit)EntityType.RABBIT.create(var1);
+      int var4 = this.getRandomRabbitType(var1);
       if (this.random.nextInt(20) != 0) {
-         if (var1 instanceof Rabbit && this.random.nextBoolean()) {
-            var3 = ((Rabbit)var1).getRabbitType();
+         if (var2 instanceof Rabbit && this.random.nextBoolean()) {
+            var4 = ((Rabbit)var2).getRabbitType();
          } else {
-            var3 = this.getRabbitType();
+            var4 = this.getRabbitType();
          }
       }
 
-      var2.setRabbitType(var3);
-      return var2;
+      var3.setRabbitType(var4);
+      return var3;
    }
 
    public boolean isFood(ItemStack var1) {
       return this.isTemptingItem(var1.getItem());
    }
@@ -306,25 +309,25 @@
       return (Integer)this.entityData.get(DATA_TYPE_ID);
    }
 
    public void setRabbitType(int var1) {
       if (var1 == 99) {
-         this.getAttribute(SharedMonsterAttributes.ARMOR).setBaseValue(8.0D);
+         this.getAttribute(Attributes.ARMOR).setBaseValue(8.0D);
          this.goalSelector.addGoal(4, new Rabbit.EvilRabbitAttackGoal(this));
          this.targetSelector.addGoal(1, (new HurtByTargetGoal(this, new Class[0])).setAlertOthers());
          this.targetSelector.addGoal(2, new NearestAttackableTargetGoal(this, Player.class, true));
          this.targetSelector.addGoal(2, new NearestAttackableTargetGoal(this, Wolf.class, true));
          if (!this.hasCustomName()) {
-            this.setCustomName(new TranslatableComponent(Util.makeDescriptionId("entity", KILLER_BUNNY), new Object[0]));
+            this.setCustomName(new TranslatableComponent(Util.makeDescriptionId("entity", KILLER_BUNNY)));
          }
       }
 
       this.entityData.set(DATA_TYPE_ID, var1);
    }
 
    @Nullable
-   public SpawnGroupData finalizeSpawn(LevelAccessor var1, DifficultyInstance var2, MobSpawnType var3, @Nullable SpawnGroupData var4, @Nullable CompoundTag var5) {
+   public SpawnGroupData finalizeSpawn(ServerLevelAccessor var1, DifficultyInstance var2, MobSpawnType var3, @Nullable SpawnGroupData var4, @Nullable CompoundTag var5) {
       int var6 = this.getRandomRabbitType(var1);
       if (var4 instanceof Rabbit.RabbitGroupData) {
          var6 = ((Rabbit.RabbitGroupData)var4).rabbitType;
       } else {
          var4 = new Rabbit.RabbitGroupData(var6);
@@ -333,11 +336,11 @@
       this.setRabbitType(var6);
       return super.finalizeSpawn(var1, var2, var3, (SpawnGroupData)var4, var5);
    }
 
    private int getRandomRabbitType(LevelAccessor var1) {
-      Biome var2 = var1.getBiome(new BlockPos(this));
+      Biome var2 = var1.getBiome(this.blockPosition());
       int var3 = this.random.nextInt(100);
       if (var2.getPrecipitation() == Biome.Precipitation.SNOW) {
          return var3 < 80 ? 1 : 3;
       } else if (var2.getBiomeCategory() == Biome.BiomeCategory.DESERT) {
          return 4;
@@ -345,12 +348,12 @@
          return var3 < 50 ? 0 : (var3 < 90 ? 5 : 2);
       }
    }
 
    public static boolean checkRabbitSpawnRules(EntityType<Rabbit> var0, LevelAccessor var1, MobSpawnType var2, BlockPos var3, Random var4) {
-      Block var5 = var1.getBlockState(var3.below()).getBlock();
-      return (var5 == Blocks.GRASS_BLOCK || var5 == Blocks.SNOW || var5 == Blocks.SAND) && var1.getRawBrightness(var3, 0) > 8;
+      BlockState var5 = var1.getBlockState(var3.below());
+      return (var5.is(Blocks.GRASS_BLOCK) || var5.is(Blocks.SNOW) || var5.is(Blocks.SAND)) && var1.getRawBrightness(var3, 0) > 8;
    }
 
    private boolean wantsMoreFood() {
       return this.moreCarrotTicks == 0;
    }
@@ -532,10 +535,10 @@
 
    public static class RabbitGroupData extends AgableMob.AgableMobGroupData {
       public final int rabbitType;
 
       public RabbitGroupData(int var1) {
+         super(1.0F);
          this.rabbitType = var1;
-         this.setBabySpawnChance(1.0F);
       }
    }
 }
