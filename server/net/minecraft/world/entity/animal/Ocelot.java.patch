--- net/minecraft/world/entity/animal/Ocelot.java
+++ net/minecraft/world/entity/animal/Ocelot.java
@@ -19,31 +19,32 @@
 import net.minecraft.world.entity.AgableMob;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EntitySelector;
 import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.entity.LivingEntity;
+import net.minecraft.world.entity.Mob;
 import net.minecraft.world.entity.MobSpawnType;
 import net.minecraft.world.entity.Pose;
 import net.minecraft.world.entity.SpawnGroupData;
+import net.minecraft.world.entity.ai.attributes.AttributeSupplier;
+import net.minecraft.world.entity.ai.attributes.Attributes;
 import net.minecraft.world.entity.ai.goal.AvoidEntityGoal;
 import net.minecraft.world.entity.ai.goal.BreedGoal;
 import net.minecraft.world.entity.ai.goal.FloatGoal;
 import net.minecraft.world.entity.ai.goal.LeapAtTargetGoal;
 import net.minecraft.world.entity.ai.goal.LookAtPlayerGoal;
 import net.minecraft.world.entity.ai.goal.OcelotAttackGoal;
 import net.minecraft.world.entity.ai.goal.TemptGoal;
 import net.minecraft.world.entity.ai.goal.WaterAvoidingRandomStrollGoal;
 import net.minecraft.world.entity.ai.goal.target.NearestAttackableTargetGoal;
-import net.minecraft.world.entity.monster.SharedMonsterAttributes;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.Items;
 import net.minecraft.world.item.crafting.Ingredient;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.LevelAccessor;
 import net.minecraft.world.level.LevelReader;
-import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.state.BlockState;
 
 public class Ocelot extends Animal {
    private static final Ingredient TEMPT_INGREDIENT;
@@ -115,15 +116,12 @@
 
    public boolean removeWhenFarAway(double var1) {
       return !this.isTrusting() && this.tickCount > 2400;
    }
 
-   protected void registerAttributes() {
-      super.registerAttributes();
-      this.getAttribute(SharedMonsterAttributes.MAX_HEALTH).setBaseValue(10.0D);
-      this.getAttribute(SharedMonsterAttributes.MOVEMENT_SPEED).setBaseValue(0.30000001192092896D);
-      this.getAttributes().registerAttribute(SharedMonsterAttributes.ATTACK_DAMAGE).setBaseValue(3.0D);
+   public static AttributeSupplier.Builder createAttributes() {
+      return Mob.createMobAttributes().add(Attributes.MAX_HEALTH, 10.0D).add(Attributes.MOVEMENT_SPEED, 0.30000001192092896D).add(Attributes.ATTACK_DAMAGE, 3.0D);
    }
 
    public boolean causeFallDamage(float var1, float var2) {
       return false;
    }
@@ -144,11 +142,11 @@
    protected SoundEvent getDeathSound() {
       return SoundEvents.OCELOT_DEATH;
    }
 
    private float getAttackDamage() {
-      return (float)this.getAttribute(SharedMonsterAttributes.ATTACK_DAMAGE).getValue();
+      return (float)this.getAttributeValue(Attributes.ATTACK_DAMAGE);
    }
 
    public boolean doHurtTarget(Entity var1) {
       return var1.hurt(DamageSource.mobAttack(this), this.getAttackDamage());
    }
@@ -217,18 +215,17 @@
       return var4.nextInt(3) != 0;
    }
 
    public boolean checkSpawnObstruction(LevelReader var1) {
       if (var1.isUnobstructed(this) && !var1.containsAnyLiquid(this.getBoundingBox())) {
-         BlockPos var2 = new BlockPos(this);
+         BlockPos var2 = this.blockPosition();
          if (var2.getY() < var1.getSeaLevel()) {
             return false;
          }
 
          BlockState var3 = var1.getBlockState(var2.below());
-         Block var4 = var3.getBlock();
-         if (var4 == Blocks.GRASS_BLOCK || var3.is(BlockTags.LEAVES)) {
+         if (var3.is(Blocks.GRASS_BLOCK) || var3.is(BlockTags.LEAVES)) {
             return true;
          }
       }
 
       return false;
