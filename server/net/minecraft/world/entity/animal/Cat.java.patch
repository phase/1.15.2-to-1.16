--- net/minecraft/world/entity/animal/Cat.java
+++ net/minecraft/world/entity/animal/Cat.java
@@ -7,63 +7,65 @@
 import java.util.Random;
 import java.util.function.Predicate;
 import javax.annotation.Nullable;
 import net.minecraft.Util;
 import net.minecraft.core.BlockPos;
-import net.minecraft.core.Direction;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.network.syncher.EntityDataAccessor;
 import net.minecraft.network.syncher.EntityDataSerializers;
 import net.minecraft.network.syncher.SynchedEntityData;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.sounds.SoundEvent;
 import net.minecraft.sounds.SoundEvents;
 import net.minecraft.tags.BlockTags;
+import net.minecraft.tags.Tag;
 import net.minecraft.util.Mth;
 import net.minecraft.world.DifficultyInstance;
 import net.minecraft.world.InteractionHand;
+import net.minecraft.world.InteractionResult;
 import net.minecraft.world.damagesource.DamageSource;
 import net.minecraft.world.entity.AgableMob;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EntityDimensions;
 import net.minecraft.world.entity.EntitySelector;
 import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.entity.LivingEntity;
+import net.minecraft.world.entity.Mob;
 import net.minecraft.world.entity.MobSpawnType;
 import net.minecraft.world.entity.Pose;
 import net.minecraft.world.entity.SpawnGroupData;
 import net.minecraft.world.entity.TamableAnimal;
+import net.minecraft.world.entity.ai.attributes.AttributeSupplier;
+import net.minecraft.world.entity.ai.attributes.Attributes;
 import net.minecraft.world.entity.ai.goal.AvoidEntityGoal;
 import net.minecraft.world.entity.ai.goal.BreedGoal;
 import net.minecraft.world.entity.ai.goal.CatLieOnBedGoal;
 import net.minecraft.world.entity.ai.goal.CatSitOnBlockGoal;
 import net.minecraft.world.entity.ai.goal.FloatGoal;
 import net.minecraft.world.entity.ai.goal.FollowOwnerGoal;
 import net.minecraft.world.entity.ai.goal.Goal;
 import net.minecraft.world.entity.ai.goal.LeapAtTargetGoal;
 import net.minecraft.world.entity.ai.goal.LookAtPlayerGoal;
 import net.minecraft.world.entity.ai.goal.OcelotAttackGoal;
-import net.minecraft.world.entity.ai.goal.SitGoal;
+import net.minecraft.world.entity.ai.goal.SitWhenOrderedToGoal;
 import net.minecraft.world.entity.ai.goal.TemptGoal;
 import net.minecraft.world.entity.ai.goal.WaterAvoidingRandomStrollGoal;
 import net.minecraft.world.entity.ai.goal.target.NonTameRandomTargetGoal;
 import net.minecraft.world.entity.item.ItemEntity;
-import net.minecraft.world.entity.monster.SharedMonsterAttributes;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.item.DyeColor;
 import net.minecraft.world.item.DyeItem;
 import net.minecraft.world.item.Item;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.Items;
-import net.minecraft.world.item.SpawnEggItem;
 import net.minecraft.world.item.crafting.Ingredient;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.LevelAccessor;
 import net.minecraft.world.level.block.BedBlock;
 import net.minecraft.world.level.block.state.BlockState;
-import net.minecraft.world.level.levelgen.feature.Feature;
+import net.minecraft.world.level.levelgen.feature.StructureFeature;
 import net.minecraft.world.level.storage.loot.BuiltInLootTables;
 import net.minecraft.world.level.storage.loot.LootContext;
 import net.minecraft.world.level.storage.loot.LootTable;
 import net.minecraft.world.level.storage.loot.parameters.LootContextParamSets;
 import net.minecraft.world.level.storage.loot.parameters.LootContextParams;
@@ -92,15 +94,14 @@
    public ResourceLocation getResourceLocation() {
       return (ResourceLocation)TEXTURE_BY_TYPE.getOrDefault(this.getCatType(), TEXTURE_BY_TYPE.get(0));
    }
 
    protected void registerGoals() {
-      this.sitGoal = new SitGoal(this);
       this.temptGoal = new Cat.CatTemptGoal(this, 0.6D, TEMPT_INGREDIENT, true);
       this.goalSelector.addGoal(1, new FloatGoal(this));
-      this.goalSelector.addGoal(1, new Cat.CatRelaxOnOwnerGoal(this));
-      this.goalSelector.addGoal(2, this.sitGoal);
+      this.goalSelector.addGoal(1, new SitWhenOrderedToGoal(this));
+      this.goalSelector.addGoal(2, new Cat.CatRelaxOnOwnerGoal(this));
       this.goalSelector.addGoal(3, this.temptGoal);
       this.goalSelector.addGoal(5, new CatLieOnBedGoal(this, 1.1D, 8));
       this.goalSelector.addGoal(6, new FollowOwnerGoal(this, 1.0D, 10.0F, 5.0F, false));
       this.goalSelector.addGoal(7, new CatSitOnBlockGoal(this, 0.8D));
       this.goalSelector.addGoal(8, new LeapAtTargetGoal(this, 0.3F));
@@ -218,15 +219,12 @@
 
    protected SoundEvent getDeathSound() {
       return SoundEvents.CAT_DEATH;
    }
 
-   protected void registerAttributes() {
-      super.registerAttributes();
-      this.getAttribute(SharedMonsterAttributes.MAX_HEALTH).setBaseValue(10.0D);
-      this.getAttribute(SharedMonsterAttributes.MOVEMENT_SPEED).setBaseValue(0.30000001192092896D);
-      this.getAttributes().registerAttribute(SharedMonsterAttributes.ATTACK_DAMAGE).setBaseValue(3.0D);
+   public static AttributeSupplier.Builder createAttributes() {
+      return Mob.createMobAttributes().add(Attributes.MAX_HEALTH, 10.0D).add(Attributes.MOVEMENT_SPEED, 0.30000001192092896D).add(Attributes.ATTACK_DAMAGE, 3.0D);
    }
 
    public boolean causeFallDamage(float var1, float var2) {
       return false;
    }
@@ -238,11 +236,11 @@
 
       super.usePlayerItem(var1, var2);
    }
 
    private float getAttackDamage() {
-      return (float)this.getAttribute(SharedMonsterAttributes.ATTACK_DAMAGE).getValue();
+      return (float)this.getAttributeValue(Attributes.ATTACK_DAMAGE);
    }
 
    public boolean doHurtTarget(Entity var1) {
       return var1.hurt(DamageSource.mobAttack(this), this.getAttackDamage());
    }
@@ -329,39 +327,42 @@
          this.setCatType(this.random.nextInt(11));
       } else {
          this.setCatType(this.random.nextInt(10));
       }
 
-      if (Feature.SWAMP_HUT.isInsideFeature(var1, new BlockPos(this))) {
+      Level var6 = var1.getLevel();
+      if (var6 instanceof ServerLevel && ((ServerLevel)var6).structureFeatureManager().getStructureAt(this.blockPosition(), true, StructureFeature.SWAMP_HUT).isValid()) {
          this.setCatType(10);
          this.setPersistenceRequired();
       }
 
       return var4;
    }
 
-   public boolean mobInteract(Player var1, InteractionHand var2) {
+   public InteractionResult mobInteract(Player var1, InteractionHand var2) {
       ItemStack var3 = var1.getItemInHand(var2);
       Item var4 = var3.getItem();
-      if (var3.getItem() instanceof SpawnEggItem) {
-         return super.mobInteract(var1, var2);
-      } else if (this.level.isClientSide) {
-         return this.isTame() && this.isOwnedBy(var1) || this.isFood(var3);
+      if (this.level.isClientSide) {
+         if (this.isTame() && this.isOwnedBy(var1)) {
+            return InteractionResult.SUCCESS;
+         } else {
+            return !this.isFood(var3) || this.getHealth() >= this.getMaxHealth() && this.isTame() ? InteractionResult.PASS : InteractionResult.SUCCESS;
+         }
       } else {
-         boolean var6;
+         InteractionResult var6;
          if (this.isTame()) {
             if (this.isOwnedBy(var1)) {
                if (!(var4 instanceof DyeItem)) {
                   if (var4.isEdible() && this.isFood(var3) && this.getHealth() < this.getMaxHealth()) {
                      this.usePlayerItem(var1, var3);
                      this.heal((float)var4.getFoodProperties().getNutrition());
-                     return true;
+                     return InteractionResult.CONSUME;
                   }
 
                   var6 = super.mobInteract(var1, var2);
-                  if (!var6 || this.isBaby()) {
-                     this.sitGoal.wantToSit(!this.isSitting());
+                  if (!var6.consumesAction() || this.isBaby()) {
+                     this.setOrderedToSit(!this.isOrderedToSit());
                   }
 
                   return var6;
                }
 
@@ -371,29 +372,29 @@
                   if (!var1.abilities.instabuild) {
                      var3.shrink(1);
                   }
 
                   this.setPersistenceRequired();
-                  return true;
+                  return InteractionResult.CONSUME;
                }
             }
          } else if (this.isFood(var3)) {
             this.usePlayerItem(var1, var3);
             if (this.random.nextInt(3) == 0) {
                this.tame(var1);
-               this.sitGoal.wantToSit(true);
+               this.setOrderedToSit(true);
                this.level.broadcastEntityEvent(this, (byte)7);
             } else {
                this.level.broadcastEntityEvent(this, (byte)6);
             }
 
             this.setPersistenceRequired();
-            return true;
+            return InteractionResult.CONSUME;
          }
 
          var6 = super.mobInteract(var1, var2);
-         if (var6) {
+         if (var6.consumesAction()) {
             this.setPersistenceRequired();
          }
 
          return var6;
       }
@@ -455,11 +456,11 @@
       }
 
       public boolean canUse() {
          if (!this.cat.isTame()) {
             return false;
-         } else if (this.cat.isSitting()) {
+         } else if (this.cat.isOrderedToSit()) {
             return false;
          } else {
             LivingEntity var1 = this.cat.getOwner();
             if (var1 instanceof Player) {
                this.ownerPlayer = (Player)var1;
@@ -469,15 +470,18 @@
 
                if (this.cat.distanceToSqr(this.ownerPlayer) > 100.0D) {
                   return false;
                }
 
-               BlockPos var2 = new BlockPos(this.ownerPlayer);
+               BlockPos var2 = this.ownerPlayer.blockPosition();
                BlockState var3 = this.cat.level.getBlockState(var2);
-               if (var3.getBlock().is(BlockTags.BEDS)) {
-                  Direction var4 = (Direction)var3.getValue(BedBlock.FACING);
-                  this.goalPos = new BlockPos(var2.getX() - var4.getStepX(), var2.getY(), var2.getZ() - var4.getStepZ());
+               if (var3.getBlock().is((Tag)BlockTags.BEDS)) {
+                  this.goalPos = (BlockPos)var3.getOptionalValue(BedBlock.FACING).map((var1x) -> {
+                     return var2.relative(var1x.getOpposite());
+                  }).orElseGet(() -> {
+                     return new BlockPos(var2);
+                  });
                   return !this.spaceIsOccupied();
                }
             }
 
             return false;
@@ -501,16 +505,16 @@
 
          return true;
       }
 
       public boolean canContinueToUse() {
-         return this.cat.isTame() && !this.cat.isSitting() && this.ownerPlayer != null && this.ownerPlayer.isSleeping() && this.goalPos != null && !this.spaceIsOccupied();
+         return this.cat.isTame() && !this.cat.isOrderedToSit() && this.ownerPlayer != null && this.ownerPlayer.isSleeping() && this.goalPos != null && !this.spaceIsOccupied();
       }
 
       public void start() {
          if (this.goalPos != null) {
-            this.cat.getSitGoal().wantToSit(false);
+            this.cat.setInSittingPose(false);
             this.cat.getNavigation().moveTo((double)this.goalPos.getX(), (double)this.goalPos.getY(), (double)this.goalPos.getZ(), 1.100000023841858D);
          }
 
       }
 
@@ -527,28 +531,28 @@
       }
 
       private void giveMorningGift() {
          Random var1 = this.cat.getRandom();
          BlockPos.MutableBlockPos var2 = new BlockPos.MutableBlockPos();
-         var2.set((Entity)this.cat);
+         var2.set(this.cat.blockPosition());
          this.cat.randomTeleport((double)(var2.getX() + var1.nextInt(11) - 5), (double)(var2.getY() + var1.nextInt(5) - 2), (double)(var2.getZ() + var1.nextInt(11) - 5), false);
-         var2.set((Entity)this.cat);
+         var2.set(this.cat.blockPosition());
          LootTable var3 = this.cat.level.getServer().getLootTables().get(BuiltInLootTables.CAT_MORNING_GIFT);
          LootContext.Builder var4 = (new LootContext.Builder((ServerLevel)this.cat.level)).withParameter(LootContextParams.BLOCK_POS, var2).withParameter(LootContextParams.THIS_ENTITY, this.cat).withRandom(var1);
          List var5 = var3.getRandomItems(var4.create(LootContextParamSets.GIFT));
          Iterator var6 = var5.iterator();
 
          while(var6.hasNext()) {
             ItemStack var7 = (ItemStack)var6.next();
-            this.cat.level.addFreshEntity(new ItemEntity(this.cat.level, (double)((float)var2.getX() - Mth.sin(this.cat.yBodyRot * 0.017453292F)), (double)var2.getY(), (double)((float)var2.getZ() + Mth.cos(this.cat.yBodyRot * 0.017453292F)), var7));
+            this.cat.level.addFreshEntity(new ItemEntity(this.cat.level, (double)var2.getX() - (double)Mth.sin(this.cat.yBodyRot * 0.017453292F), (double)var2.getY(), (double)var2.getZ() + (double)Mth.cos(this.cat.yBodyRot * 0.017453292F), var7));
          }
 
       }
 
       public void tick() {
          if (this.ownerPlayer != null && this.goalPos != null) {
-            this.cat.getSitGoal().wantToSit(false);
+            this.cat.setInSittingPose(false);
             this.cat.getNavigation().moveTo((double)this.goalPos.getX(), (double)this.goalPos.getY(), (double)this.goalPos.getZ(), 1.100000023841858D);
             if (this.cat.distanceToSqr(this.ownerPlayer) < 2.5D) {
                ++this.onBedTicks;
                if (this.onBedTicks > 16) {
                   this.cat.setLying(true);
