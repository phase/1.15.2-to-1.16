--- net/minecraft/world/entity/animal/IronGolem.java
+++ net/minecraft/world/entity/animal/IronGolem.java
@@ -2,90 +2,96 @@
 
 import com.google.common.collect.ImmutableList;
 import java.util.Comparator;
 import java.util.Iterator;
 import java.util.List;
+import java.util.UUID;
 import java.util.stream.Stream;
+import javax.annotation.Nullable;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.particles.BlockParticleOption;
 import net.minecraft.core.particles.ParticleTypes;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.network.syncher.EntityDataAccessor;
 import net.minecraft.network.syncher.EntityDataSerializers;
 import net.minecraft.network.syncher.SynchedEntityData;
+import net.minecraft.server.level.ServerLevel;
 import net.minecraft.sounds.SoundEvent;
 import net.minecraft.sounds.SoundEvents;
+import net.minecraft.util.IntRange;
 import net.minecraft.util.Mth;
+import net.minecraft.util.TimeUtil;
 import net.minecraft.world.InteractionHand;
+import net.minecraft.world.InteractionResult;
 import net.minecraft.world.damagesource.DamageSource;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.Mob;
+import net.minecraft.world.entity.NeutralMob;
+import net.minecraft.world.entity.ai.attributes.AttributeSupplier;
+import net.minecraft.world.entity.ai.attributes.Attributes;
+import net.minecraft.world.entity.ai.goal.GolemRandomStrollInVillageGoal;
 import net.minecraft.world.entity.ai.goal.LookAtPlayerGoal;
 import net.minecraft.world.entity.ai.goal.MeleeAttackGoal;
-import net.minecraft.world.entity.ai.goal.MoveBackToVillage;
-import net.minecraft.world.entity.ai.goal.MoveThroughVillageGoal;
+import net.minecraft.world.entity.ai.goal.MoveBackToVillageGoal;
 import net.minecraft.world.entity.ai.goal.MoveTowardsTargetGoal;
 import net.minecraft.world.entity.ai.goal.OfferFlowerGoal;
 import net.minecraft.world.entity.ai.goal.RandomLookAroundGoal;
-import net.minecraft.world.entity.ai.goal.WaterAvoidingRandomStrollGoal;
 import net.minecraft.world.entity.ai.goal.target.DefendVillageTargetGoal;
 import net.minecraft.world.entity.ai.goal.target.HurtByTargetGoal;
 import net.minecraft.world.entity.ai.goal.target.NearestAttackableTargetGoal;
+import net.minecraft.world.entity.ai.goal.target.ResetUniversalAngerTargetGoal;
 import net.minecraft.world.entity.monster.Creeper;
 import net.minecraft.world.entity.monster.Enemy;
-import net.minecraft.world.entity.monster.SharedMonsterAttributes;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.item.Item;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.Items;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.LevelReader;
 import net.minecraft.world.level.NaturalSpawner;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.material.Fluids;
 
-public class IronGolem extends AbstractGolem {
+public class IronGolem extends AbstractGolem implements NeutralMob {
    protected static final EntityDataAccessor<Byte> DATA_FLAGS_ID;
    private int attackAnimationTick;
    private int offerFlowerTick;
+   private static final IntRange PERSISTENT_ANGER_TIME;
+   private int remainingPersistentAngerTime;
+   private UUID persistentAngerTarget;
 
    public IronGolem(EntityType<? extends IronGolem> var1, Level var2) {
       super(var1, var2);
       this.maxUpStep = 1.0F;
    }
 
    protected void registerGoals() {
       this.goalSelector.addGoal(1, new MeleeAttackGoal(this, 1.0D, true));
       this.goalSelector.addGoal(2, new MoveTowardsTargetGoal(this, 0.9D, 32.0F));
-      this.goalSelector.addGoal(2, new MoveBackToVillage(this, 0.6D));
-      this.goalSelector.addGoal(3, new MoveThroughVillageGoal(this, 0.6D, false, 4, () -> {
-         return false;
-      }));
+      this.goalSelector.addGoal(2, new MoveBackToVillageGoal(this, 0.6D, false));
+      this.goalSelector.addGoal(4, new GolemRandomStrollInVillageGoal(this, 0.6D));
       this.goalSelector.addGoal(5, new OfferFlowerGoal(this));
-      this.goalSelector.addGoal(6, new WaterAvoidingRandomStrollGoal(this, 0.6D));
       this.goalSelector.addGoal(7, new LookAtPlayerGoal(this, Player.class, 6.0F));
       this.goalSelector.addGoal(8, new RandomLookAroundGoal(this));
       this.targetSelector.addGoal(1, new DefendVillageTargetGoal(this));
       this.targetSelector.addGoal(2, new HurtByTargetGoal(this, new Class[0]));
+      this.targetSelector.addGoal(3, new NearestAttackableTargetGoal(this, Player.class, 10, true, false, this::isAngryAt));
       this.targetSelector.addGoal(3, new NearestAttackableTargetGoal(this, Mob.class, 5, false, false, (var0) -> {
          return var0 instanceof Enemy && !(var0 instanceof Creeper);
       }));
+      this.targetSelector.addGoal(4, new ResetUniversalAngerTargetGoal(this, false));
    }
 
    protected void defineSynchedData() {
       super.defineSynchedData();
       this.entityData.define(DATA_FLAGS_ID, (byte)0);
    }
 
-   protected void registerAttributes() {
-      super.registerAttributes();
-      this.getAttribute(SharedMonsterAttributes.MAX_HEALTH).setBaseValue(100.0D);
-      this.getAttribute(SharedMonsterAttributes.MOVEMENT_SPEED).setBaseValue(0.25D);
-      this.getAttribute(SharedMonsterAttributes.KNOCKBACK_RESISTANCE).setBaseValue(1.0D);
-      this.getAttributes().registerAttribute(SharedMonsterAttributes.ATTACK_DAMAGE).setBaseValue(15.0D);
+   public static AttributeSupplier.Builder createAttributes() {
+      return Mob.createMobAttributes().add(Attributes.MAX_HEALTH, 100.0D).add(Attributes.MOVEMENT_SPEED, 0.25D).add(Attributes.KNOCKBACK_RESISTANCE, 1.0D).add(Attributes.ATTACK_DAMAGE, 15.0D);
    }
 
    protected int decreaseAirSupply(int var1) {
       return var1;
    }
@@ -116,10 +122,14 @@
          if (!var4.isAir()) {
             this.level.addParticle(new BlockParticleOption(ParticleTypes.BLOCK, var4), this.getX() + ((double)this.random.nextFloat() - 0.5D) * (double)this.getBbWidth(), this.getY() + 0.1D, this.getZ() + ((double)this.random.nextFloat() - 0.5D) * (double)this.getBbWidth(), 4.0D * ((double)this.random.nextFloat() - 0.5D), 0.5D, ((double)this.random.nextFloat() - 0.5D) * 4.0D);
          }
       }
 
+      if (!this.level.isClientSide) {
+         this.updatePersistentAnger((ServerLevel)this.level, true);
+      }
+
    }
 
    public boolean canAttackType(EntityType<?> var1) {
       if (this.isPlayerCreated() && var1 == EntityType.PLAYER) {
          return false;
@@ -129,26 +139,48 @@
    }
 
    public void addAdditionalSaveData(CompoundTag var1) {
       super.addAdditionalSaveData(var1);
       var1.putBoolean("PlayerCreated", this.isPlayerCreated());
+      this.addPersistentAngerSaveData(var1);
    }
 
    public void readAdditionalSaveData(CompoundTag var1) {
       super.readAdditionalSaveData(var1);
       this.setPlayerCreated(var1.getBoolean("PlayerCreated"));
+      this.readPersistentAngerSaveData((ServerLevel)this.level, var1);
    }
 
+   public void startPersistentAngerTimer() {
+      this.setRemainingPersistentAngerTime(PERSISTENT_ANGER_TIME.randomValue(this.random));
+   }
+
+   public void setRemainingPersistentAngerTime(int var1) {
+      this.remainingPersistentAngerTime = var1;
+   }
+
+   public int getRemainingPersistentAngerTime() {
+      return this.remainingPersistentAngerTime;
+   }
+
+   public void setPersistentAngerTarget(@Nullable UUID var1) {
+      this.persistentAngerTarget = var1;
+   }
+
+   public UUID getPersistentAngerTarget() {
+      return this.persistentAngerTarget;
+   }
+
    private float getAttackDamage() {
-      return (float)this.getAttribute(SharedMonsterAttributes.ATTACK_DAMAGE).getValue();
+      return (float)this.getAttributeValue(Attributes.ATTACK_DAMAGE);
    }
 
    public boolean doHurtTarget(Entity var1) {
       this.attackAnimationTick = 10;
       this.level.broadcastEntityEvent(this, (byte)4);
       float var2 = this.getAttackDamage();
-      float var3 = var2 > 0.0F ? var2 / 2.0F + (float)this.random.nextInt((int)var2) : 0.0F;
+      float var3 = (int)var2 > 0 ? var2 / 2.0F + (float)this.random.nextInt((int)var2) : var2;
       boolean var4 = var1.hurt(DamageSource.mobAttack(this), var3);
       if (var4) {
          var1.setDeltaMovement(var1.getDeltaMovement().add(0.0D, 0.4000000059604645D, 0.0D));
          this.doEnchantDamageEffects(this, var1);
       }
@@ -188,28 +220,28 @@
 
    protected SoundEvent getDeathSound() {
       return SoundEvents.IRON_GOLEM_DEATH;
    }
 
-   protected boolean mobInteract(Player var1, InteractionHand var2) {
+   protected InteractionResult mobInteract(Player var1, InteractionHand var2) {
       ItemStack var3 = var1.getItemInHand(var2);
       Item var4 = var3.getItem();
       if (var4 != Items.IRON_INGOT) {
-         return false;
+         return InteractionResult.PASS;
       } else {
          float var5 = this.getHealth();
          this.heal(25.0F);
          if (this.getHealth() == var5) {
-            return false;
+            return InteractionResult.PASS;
          } else {
             float var6 = 1.0F + (this.random.nextFloat() - this.random.nextFloat()) * 0.2F;
             this.playSound(SoundEvents.IRON_GOLEM_REPAIR, 1.0F, var6);
             if (!var1.abilities.instabuild) {
                var3.shrink(1);
             }
 
-            return true;
+            return InteractionResult.sidedSuccess(this.level.isClientSide);
          }
       }
    }
 
    protected void playStepSound(BlockPos var1, BlockState var2) {
@@ -233,30 +265,31 @@
    public void die(DamageSource var1) {
       super.die(var1);
    }
 
    public boolean checkSpawnObstruction(LevelReader var1) {
-      BlockPos var2 = new BlockPos(this);
+      BlockPos var2 = this.blockPosition();
       BlockPos var3 = var2.below();
       BlockState var4 = var1.getBlockState(var3);
       if (!var4.entityCanStandOn(var1, var3, this)) {
          return false;
       } else {
          for(int var5 = 1; var5 < 3; ++var5) {
             BlockPos var6 = var2.above(var5);
             BlockState var7 = var1.getBlockState(var6);
-            if (!NaturalSpawner.isValidEmptySpawnBlock(var1, var6, var7, var7.getFluidState())) {
+            if (!NaturalSpawner.isValidEmptySpawnBlock(var1, var6, var7, var7.getFluidState(), EntityType.IRON_GOLEM)) {
                return false;
             }
          }
 
-         return NaturalSpawner.isValidEmptySpawnBlock(var1, var2, var1.getBlockState(var2), Fluids.EMPTY.defaultFluidState()) && var1.isUnobstructed(this);
+         return NaturalSpawner.isValidEmptySpawnBlock(var1, var2, var1.getBlockState(var2), Fluids.EMPTY.defaultFluidState(), EntityType.IRON_GOLEM) && var1.isUnobstructed(this);
       }
    }
 
    static {
       DATA_FLAGS_ID = SynchedEntityData.defineId(IronGolem.class, EntityDataSerializers.BYTE);
+      PERSISTENT_ANGER_TIME = TimeUtil.rangeOfSeconds(20, 39);
    }
 
    public static enum Crackiness {
       NONE(1.0F),
       LOW(0.75F),
