--- net/minecraft/world/entity/animal/PolarBear.java
+++ net/minecraft/world/entity/animal/PolarBear.java
@@ -22,20 +22,21 @@
 import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.Mob;
 import net.minecraft.world.entity.MobSpawnType;
 import net.minecraft.world.entity.Pose;
 import net.minecraft.world.entity.SpawnGroupData;
+import net.minecraft.world.entity.ai.attributes.AttributeSupplier;
+import net.minecraft.world.entity.ai.attributes.Attributes;
 import net.minecraft.world.entity.ai.goal.FloatGoal;
 import net.minecraft.world.entity.ai.goal.FollowParentGoal;
 import net.minecraft.world.entity.ai.goal.LookAtPlayerGoal;
 import net.minecraft.world.entity.ai.goal.MeleeAttackGoal;
 import net.minecraft.world.entity.ai.goal.PanicGoal;
 import net.minecraft.world.entity.ai.goal.RandomLookAroundGoal;
 import net.minecraft.world.entity.ai.goal.RandomStrollGoal;
 import net.minecraft.world.entity.ai.goal.target.HurtByTargetGoal;
 import net.minecraft.world.entity.ai.goal.target.NearestAttackableTargetGoal;
-import net.minecraft.world.entity.monster.SharedMonsterAttributes;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.LevelAccessor;
 import net.minecraft.world.level.biome.Biome;
@@ -73,25 +74,20 @@
       this.targetSelector.addGoal(1, new PolarBear.PolarBearHurtByTargetGoal());
       this.targetSelector.addGoal(2, new PolarBear.PolarBearAttackPlayersGoal());
       this.targetSelector.addGoal(3, new NearestAttackableTargetGoal(this, Fox.class, 10, true, true, (Predicate)null));
    }
 
-   protected void registerAttributes() {
-      super.registerAttributes();
-      this.getAttribute(SharedMonsterAttributes.MAX_HEALTH).setBaseValue(30.0D);
-      this.getAttribute(SharedMonsterAttributes.FOLLOW_RANGE).setBaseValue(20.0D);
-      this.getAttribute(SharedMonsterAttributes.MOVEMENT_SPEED).setBaseValue(0.25D);
-      this.getAttributes().registerAttribute(SharedMonsterAttributes.ATTACK_DAMAGE);
-      this.getAttribute(SharedMonsterAttributes.ATTACK_DAMAGE).setBaseValue(6.0D);
+   public static AttributeSupplier.Builder createAttributes() {
+      return Mob.createMobAttributes().add(Attributes.MAX_HEALTH, 30.0D).add(Attributes.FOLLOW_RANGE, 20.0D).add(Attributes.MOVEMENT_SPEED, 0.25D).add(Attributes.ATTACK_DAMAGE, 6.0D);
    }
 
    public static boolean checkPolarBearSpawnRules(EntityType<PolarBear> var0, LevelAccessor var1, MobSpawnType var2, BlockPos var3, Random var4) {
       Biome var5 = var1.getBiome(var3);
       if (var5 != Biomes.FROZEN_OCEAN && var5 != Biomes.DEEP_FROZEN_OCEAN) {
          return checkAnimalSpawnRules(var0, var1, var2, var3, var4);
       } else {
-         return var1.getRawBrightness(var3, 0) > 8 && var1.getBlockState(var3.below()).getBlock() == Blocks.ICE;
+         return var1.getRawBrightness(var3, 0) > 8 && var1.getBlockState(var3.below()).is(Blocks.ICE);
       }
    }
 
    protected SoundEvent getAmbientSound() {
       return this.isBaby() ? SoundEvents.POLAR_BEAR_AMBIENT_BABY : SoundEvents.POLAR_BEAR_AMBIENT;
@@ -152,11 +148,11 @@
          return super.getDimensions(var1);
       }
    }
 
    public boolean doHurtTarget(Entity var1) {
-      boolean var2 = var1.hurt(DamageSource.mobAttack(this), (float)((int)this.getAttribute(SharedMonsterAttributes.ATTACK_DAMAGE).getValue()));
+      boolean var2 = var1.hurt(DamageSource.mobAttack(this), (float)((int)this.getAttributeValue(Attributes.ATTACK_DAMAGE)));
       if (var2) {
          this.doEnchantDamageEffects(this, var1);
       }
 
       return var2;
@@ -202,26 +198,26 @@
          super(PolarBear.this, 1.25D, true);
       }
 
       protected void checkAndPerformAttack(LivingEntity var1, double var2) {
          double var4 = this.getAttackReachSqr(var1);
-         if (var2 <= var4 && this.attackTime <= 0) {
-            this.attackTime = 20;
+         if (var2 <= var4 && this.isTimeToAttack()) {
+            this.resetAttackCooldown();
             this.mob.doHurtTarget(var1);
             PolarBear.this.setStanding(false);
          } else if (var2 <= var4 * 2.0D) {
-            if (this.attackTime <= 0) {
+            if (this.isTimeToAttack()) {
                PolarBear.this.setStanding(false);
-               this.attackTime = 20;
+               this.resetAttackCooldown();
             }
 
-            if (this.attackTime <= 10) {
+            if (this.getTicksUntilNextAttack() <= 10) {
                PolarBear.this.setStanding(true);
                PolarBear.this.playWarningSound();
             }
          } else {
-            this.attackTime = 20;
+            this.resetAttackCooldown();
             PolarBear.this.setStanding(false);
          }
 
       }
 
