--- net/minecraft/world/entity/animal/Pig.java
+++ net/minecraft/world/entity/animal/Pig.java
@@ -1,51 +1,62 @@
 package net.minecraft.world.entity.animal;
 
+import com.google.common.collect.UnmodifiableIterator;
 import javax.annotation.Nullable;
 import net.minecraft.core.BlockPos;
+import net.minecraft.core.Direction;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.network.syncher.EntityDataAccessor;
 import net.minecraft.network.syncher.EntityDataSerializers;
 import net.minecraft.network.syncher.SynchedEntityData;
 import net.minecraft.sounds.SoundEvent;
 import net.minecraft.sounds.SoundEvents;
-import net.minecraft.util.Mth;
+import net.minecraft.sounds.SoundSource;
+import net.minecraft.world.Difficulty;
 import net.minecraft.world.InteractionHand;
 import net.minecraft.world.damagesource.DamageSource;
 import net.minecraft.world.entity.AgableMob;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.entity.EquipmentSlot;
+import net.minecraft.world.entity.ItemBasedSteering;
+import net.minecraft.world.entity.ItemSteerable;
+import net.minecraft.world.entity.LivingEntity;
+import net.minecraft.world.entity.Mob;
+import net.minecraft.world.entity.Pose;
+import net.minecraft.world.entity.Saddleable;
+import net.minecraft.world.entity.ai.attributes.AttributeSupplier;
+import net.minecraft.world.entity.ai.attributes.Attributes;
 import net.minecraft.world.entity.ai.goal.BreedGoal;
 import net.minecraft.world.entity.ai.goal.FloatGoal;
 import net.minecraft.world.entity.ai.goal.FollowParentGoal;
 import net.minecraft.world.entity.ai.goal.LookAtPlayerGoal;
 import net.minecraft.world.entity.ai.goal.PanicGoal;
 import net.minecraft.world.entity.ai.goal.RandomLookAroundGoal;
 import net.minecraft.world.entity.ai.goal.TemptGoal;
 import net.minecraft.world.entity.ai.goal.WaterAvoidingRandomStrollGoal;
 import net.minecraft.world.entity.global.LightningBolt;
-import net.minecraft.world.entity.monster.PigZombie;
-import net.minecraft.world.entity.monster.SharedMonsterAttributes;
+import net.minecraft.world.entity.monster.ZombifiedPiglin;
 import net.minecraft.world.entity.player.Player;
+import net.minecraft.world.entity.vehicle.DismountHelper;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.Items;
 import net.minecraft.world.item.crafting.Ingredient;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.phys.AABB;
 import net.minecraft.world.phys.Vec3;
 
-public class Pig extends Animal {
+public class Pig extends Animal implements ItemSteerable, Saddleable {
    private static final EntityDataAccessor<Boolean> DATA_SADDLE_ID;
    private static final EntityDataAccessor<Integer> DATA_BOOST_TIME;
    private static final Ingredient FOOD_ITEMS;
-   private boolean boosting;
-   private int boostTime;
-   private int boostTimeTotal;
+   private final ItemBasedSteering steering;
 
    public Pig(EntityType<? extends Pig> var1, Level var2) {
       super(var1, var2);
+      this.steering = new ItemBasedSteering(this.entityData, DATA_BOOST_TIME, DATA_SADDLE_ID);
    }
 
    protected void registerGoals() {
       this.goalSelector.addGoal(0, new FloatGoal(this));
       this.goalSelector.addGoal(1, new PanicGoal(this, 1.25D));
@@ -56,14 +67,12 @@
       this.goalSelector.addGoal(6, new WaterAvoidingRandomStrollGoal(this, 1.0D));
       this.goalSelector.addGoal(7, new LookAtPlayerGoal(this, Player.class, 6.0F));
       this.goalSelector.addGoal(8, new RandomLookAroundGoal(this));
    }
 
-   protected void registerAttributes() {
-      super.registerAttributes();
-      this.getAttribute(SharedMonsterAttributes.MAX_HEALTH).setBaseValue(10.0D);
-      this.getAttribute(SharedMonsterAttributes.MOVEMENT_SPEED).setBaseValue(0.25D);
+   public static AttributeSupplier.Builder createAttributes() {
+      return Mob.createMobAttributes().add(Attributes.MAX_HEALTH, 10.0D).add(Attributes.MOVEMENT_SPEED, 0.25D);
    }
 
    @Nullable
    public Entity getControllingPassenger() {
       return this.getPassengers().isEmpty() ? null : (Entity)this.getPassengers().get(0);
@@ -79,13 +88,11 @@
       }
    }
 
    public void onSyncedDataUpdated(EntityDataAccessor<?> var1) {
       if (DATA_BOOST_TIME.equals(var1) && this.level.isClientSide) {
-         this.boosting = true;
-         this.boostTime = 0;
-         this.boostTimeTotal = (Integer)this.entityData.get(DATA_BOOST_TIME);
+         this.steering.onSynced();
       }
 
       super.onSyncedDataUpdated(var1);
    }
 
@@ -95,16 +102,16 @@
       this.entityData.define(DATA_BOOST_TIME, 0);
    }
 
    public void addAdditionalSaveData(CompoundTag var1) {
       super.addAdditionalSaveData(var1);
-      var1.putBoolean("Saddle", this.hasSaddle());
+      this.steering.addAdditionalSaveData(var1);
    }
 
    public void readAdditionalSaveData(CompoundTag var1) {
       super.readAdditionalSaveData(var1);
-      this.setSaddle(var1.getBoolean("Saddle"));
+      this.steering.readAdditionalSaveData(var1);
    }
 
    protected SoundEvent getAmbientSound() {
       return SoundEvents.PIG_AMBIENT;
    }
@@ -120,121 +127,119 @@
    protected void playStepSound(BlockPos var1, BlockState var2) {
       this.playSound(SoundEvents.PIG_STEP, 0.15F, 1.0F);
    }
 
    public boolean mobInteract(Player var1, InteractionHand var2) {
-      if (super.mobInteract(var1, var2)) {
-         return true;
-      } else {
-         ItemStack var3 = var1.getItemInHand(var2);
-         if (var3.getItem() == Items.NAME_TAG) {
-            var3.interactEnemy(var1, this, var2);
-            return true;
-         } else if (this.hasSaddle() && !this.isVehicle()) {
+      if (!super.mobInteract(var1, var2)) {
+         if (this.isSaddled() && !this.isVehicle()) {
             if (!this.level.isClientSide) {
                var1.startRiding(this);
             }
 
             return true;
          } else {
+            ItemStack var3 = var1.getItemInHand(var2);
             return var3.getItem() == Items.SADDLE && var3.interactEnemy(var1, this, var2);
          }
+      } else {
+         return true;
       }
    }
 
+   public boolean isSaddleable() {
+      return this.isAlive() && !this.isBaby();
+   }
+
    protected void dropEquipment() {
       super.dropEquipment();
-      if (this.hasSaddle()) {
+      if (this.isSaddled()) {
          this.spawnAtLocation(Items.SADDLE);
       }
 
    }
 
-   public boolean hasSaddle() {
-      return (Boolean)this.entityData.get(DATA_SADDLE_ID);
+   public boolean isSaddled() {
+      return this.steering.hasSaddle();
    }
 
-   public void setSaddle(boolean var1) {
-      if (var1) {
-         this.entityData.set(DATA_SADDLE_ID, true);
-      } else {
-         this.entityData.set(DATA_SADDLE_ID, false);
+   public void equipSaddle(@Nullable SoundSource var1) {
+      this.steering.setSaddle(true);
+      if (var1 != null) {
+         this.level.playSound((Player)null, (Entity)this, SoundEvents.PIG_SADDLE, var1, 0.5F, 1.0F);
       }
 
    }
 
-   public void thunderHit(LightningBolt var1) {
-      PigZombie var2 = (PigZombie)EntityType.ZOMBIE_PIGMAN.create(this.level);
-      var2.setItemSlot(EquipmentSlot.MAINHAND, new ItemStack(Items.GOLDEN_SWORD));
-      var2.moveTo(this.getX(), this.getY(), this.getZ(), this.yRot, this.xRot);
-      var2.setNoAi(this.isNoAi());
-      if (this.hasCustomName()) {
-         var2.setCustomName(this.getCustomName());
-         var2.setCustomNameVisible(this.isCustomNameVisible());
-      }
+   public Vec3 getDismountLocationForPassenger(LivingEntity var1) {
+      Direction var2 = this.getMotionDirection();
+      if (var2.getAxis() == Direction.Axis.Y) {
+         return super.getDismountLocationForPassenger(var1);
+      } else {
+         int[][] var3 = DismountHelper.offsetsForDirection(var2);
+         BlockPos var4 = this.blockPosition();
+         BlockPos.MutableBlockPos var5 = new BlockPos.MutableBlockPos();
+         UnmodifiableIterator var6 = var1.getDismountPoses().iterator();
 
-      this.level.addFreshEntity(var2);
-      this.remove();
-   }
+         while(var6.hasNext()) {
+            Pose var7 = (Pose)var6.next();
+            AABB var8 = var1.getLocalBoundsForPose(var7);
+            int[][] var9 = var3;
+            int var10 = var3.length;
 
-   public void travel(Vec3 var1) {
-      if (this.isAlive()) {
-         Entity var2 = this.getPassengers().isEmpty() ? null : (Entity)this.getPassengers().get(0);
-         if (this.isVehicle() && this.canBeControlledByRider()) {
-            this.yRot = var2.yRot;
-            this.yRotO = this.yRot;
-            this.xRot = var2.xRot * 0.5F;
-            this.setRot(this.yRot, this.xRot);
-            this.yBodyRot = this.yRot;
-            this.yHeadRot = this.yRot;
-            this.maxUpStep = 1.0F;
-            this.flyingSpeed = this.getSpeed() * 0.1F;
-            if (this.boosting && this.boostTime++ > this.boostTimeTotal) {
-               this.boosting = false;
-            }
-
-            if (this.isControlledByLocalInstance()) {
-               float var3 = (float)this.getAttribute(SharedMonsterAttributes.MOVEMENT_SPEED).getValue() * 0.225F;
-               if (this.boosting) {
-                  var3 += var3 * 1.15F * Mth.sin((float)this.boostTime / (float)this.boostTimeTotal * 3.1415927F);
+            for(int var11 = 0; var11 < var10; ++var11) {
+               int[] var12 = var9[var11];
+               var5.set(var4.getX() + var12[0], var4.getY(), var4.getZ() + var12[1]);
+               double var13 = this.level.getRelativeFloorHeight(var5);
+               if (DismountHelper.isFloorValid(var13)) {
+                  Vec3 var15 = Vec3.upFromBottomCenterOf(var5, var13);
+                  if (DismountHelper.canDismountTo(this.level, var1, var8.move(var15))) {
+                     var1.setPose(var7);
+                     return var15;
+                  }
                }
-
-               this.setSpeed(var3);
-               super.travel(new Vec3(0.0D, 0.0D, 1.0D));
-               this.lerpSteps = 0;
-            } else {
-               this.setDeltaMovement(Vec3.ZERO);
             }
+         }
 
-            this.animationSpeedOld = this.animationSpeed;
-            double var8 = this.getX() - this.xo;
-            double var5 = this.getZ() - this.zo;
-            float var7 = Mth.sqrt(var8 * var8 + var5 * var5) * 4.0F;
-            if (var7 > 1.0F) {
-               var7 = 1.0F;
-            }
+         return super.getDismountLocationForPassenger(var1);
+      }
+   }
 
-            this.animationSpeed += (var7 - this.animationSpeed) * 0.4F;
-            this.animationPosition += this.animationSpeed;
-         } else {
-            this.maxUpStep = 0.5F;
-            this.flyingSpeed = 0.02F;
-            super.travel(var1);
+   public void thunderHit(LightningBolt var1) {
+      if (this.level.getDifficulty() != Difficulty.PEACEFUL) {
+         ZombifiedPiglin var2 = (ZombifiedPiglin)EntityType.ZOMBIFIED_PIGLIN.create(this.level);
+         var2.setItemSlot(EquipmentSlot.MAINHAND, new ItemStack(Items.GOLDEN_SWORD));
+         var2.moveTo(this.getX(), this.getY(), this.getZ(), this.yRot, this.xRot);
+         var2.setNoAi(this.isNoAi());
+         var2.setBaby(this.isBaby());
+         if (this.hasCustomName()) {
+            var2.setCustomName(this.getCustomName());
+            var2.setCustomNameVisible(this.isCustomNameVisible());
          }
+
+         this.level.addFreshEntity(var2);
+         this.remove();
+      } else {
+         super.thunderHit(var1);
       }
+
    }
 
+   public void travel(Vec3 var1) {
+      this.setSpeed(this.getSteeringSpeed());
+      this.travel(this, this.steering, var1);
+   }
+
+   public float getSteeringSpeed() {
+      return (float)this.getAttributeValue(Attributes.MOVEMENT_SPEED) * 0.225F;
+   }
+
+   public void travelWithInput(Vec3 var1) {
+      super.travel(var1);
+   }
+
    public boolean boost() {
-      if (this.boosting) {
-         return false;
-      } else {
-         this.boosting = true;
-         this.boostTime = 0;
-         this.boostTimeTotal = this.getRandom().nextInt(841) + 140;
-         this.getEntityData().set(DATA_BOOST_TIME, this.boostTimeTotal);
-         return true;
-      }
+      return this.steering.boost(this.getRandom());
    }
 
    public Pig getBreedOffspring(AgableMob var1) {
       return (Pig)EntityType.PIG.create(this.level);
    }
