--- net/minecraft/world/entity/player/Player.java
+++ net/minecraft/world/entity/player/Player.java
@@ -1,7 +1,8 @@
 package net.minecraft.world.entity.player;
 
+import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableMap;
 import com.google.common.collect.Lists;
 import com.mojang.authlib.GameProfile;
 import com.mojang.datafixers.util.Either;
 import java.nio.charset.StandardCharsets;
@@ -21,10 +22,11 @@
 import net.minecraft.core.particles.ParticleTypes;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.ListTag;
 import net.minecraft.network.chat.ClickEvent;
 import net.minecraft.network.chat.Component;
+import net.minecraft.network.chat.MutableComponent;
 import net.minecraft.network.chat.TextComponent;
 import net.minecraft.network.chat.TranslatableComponent;
 import net.minecraft.network.protocol.game.ClientboundSetEntityMotionPacket;
 import net.minecraft.network.syncher.EntityDataAccessor;
 import net.minecraft.network.syncher.EntityDataSerializers;
@@ -58,20 +60,20 @@
 import net.minecraft.world.entity.Mob;
 import net.minecraft.world.entity.MobType;
 import net.minecraft.world.entity.MoverType;
 import net.minecraft.world.entity.Pose;
 import net.minecraft.world.entity.TamableAnimal;
-import net.minecraft.world.entity.ai.attributes.AttributeInstance;
+import net.minecraft.world.entity.ai.attributes.AttributeSupplier;
+import net.minecraft.world.entity.ai.attributes.Attributes;
 import net.minecraft.world.entity.animal.Parrot;
 import net.minecraft.world.entity.animal.Pig;
 import net.minecraft.world.entity.animal.horse.AbstractHorse;
 import net.minecraft.world.entity.boss.EnderDragonPart;
 import net.minecraft.world.entity.decoration.ArmorStand;
-import net.minecraft.world.entity.fishing.FishingHook;
 import net.minecraft.world.entity.item.ItemEntity;
-import net.minecraft.world.entity.monster.Monster;
-import net.minecraft.world.entity.monster.SharedMonsterAttributes;
+import net.minecraft.world.entity.monster.Strider;
+import net.minecraft.world.entity.projectile.FishingHook;
 import net.minecraft.world.entity.vehicle.AbstractMinecart;
 import net.minecraft.world.entity.vehicle.Boat;
 import net.minecraft.world.food.FoodData;
 import net.minecraft.world.inventory.AbstractContainerMenu;
 import net.minecraft.world.inventory.InventoryMenu;
@@ -89,14 +91,13 @@
 import net.minecraft.world.item.trading.MerchantOffers;
 import net.minecraft.world.level.BaseCommandBlock;
 import net.minecraft.world.level.GameRules;
 import net.minecraft.world.level.GameType;
 import net.minecraft.world.level.Level;
-import net.minecraft.world.level.LevelReader;
 import net.minecraft.world.level.block.BedBlock;
 import net.minecraft.world.level.block.Block;
-import net.minecraft.world.level.block.HorizontalDirectionalBlock;
+import net.minecraft.world.level.block.RespawnAnchorBlock;
 import net.minecraft.world.level.block.entity.CommandBlockEntity;
 import net.minecraft.world.level.block.entity.JigsawBlockEntity;
 import net.minecraft.world.level.block.entity.SignBlockEntity;
 import net.minecraft.world.level.block.entity.StructureBlockEntity;
 import net.minecraft.world.level.block.state.BlockState;
@@ -132,12 +133,10 @@
    public double xCloak;
    public double yCloak;
    public double zCloak;
    private int sleepCounter;
    protected boolean wasUnderwater;
-   private BlockPos respawnPosition;
-   private boolean respawnForced;
    public final Abilities abilities = new Abilities();
    public int experienceLevel;
    public int totalExperience;
    public float experienceProgress;
    protected int enchantmentSeed;
@@ -147,20 +146,19 @@
    private ItemStack lastItemInMainHand;
    private final ItemCooldowns cooldowns;
    @Nullable
    public FishingHook fishing;
 
-   public Player(Level var1, GameProfile var2) {
+   public Player(Level var1, BlockPos var2, GameProfile var3) {
       super(EntityType.PLAYER, var1);
       this.lastItemInMainHand = ItemStack.EMPTY;
       this.cooldowns = this.createItemCooldowns();
-      this.setUUID(createPlayerUUID(var2));
-      this.gameProfile = var2;
+      this.setUUID(createPlayerUUID(var3));
+      this.gameProfile = var3;
       this.inventoryMenu = new InventoryMenu(this.inventory, !var1.isClientSide, this);
       this.containerMenu = this.inventoryMenu;
-      BlockPos var3 = var1.getSharedSpawnPos();
-      this.moveTo((double)var3.getX() + 0.5D, (double)(var3.getY() + 1), (double)var3.getZ() + 0.5D, 0.0F, 0.0F);
+      this.moveTo((double)var2.getX() + 0.5D, (double)(var2.getY() + 1), (double)var2.getZ() + 0.5D, 0.0F, 0.0F);
       this.rotOffs = 180.0F;
    }
 
    public boolean blockActionRestricted(Level var1, BlockPos var2, GameType var3) {
       if (!var3.isBlockPlacingRestricted()) {
@@ -173,16 +171,12 @@
          ItemStack var4 = this.getMainHandItem();
          return var4.isEmpty() || !var4.hasAdventureModeBreakTagForBlock(var1.getTagManager(), new BlockInWorld(var1, var2, false));
       }
    }
 
-   protected void registerAttributes() {
-      super.registerAttributes();
-      this.getAttributes().registerAttribute(SharedMonsterAttributes.ATTACK_DAMAGE).setBaseValue(1.0D);
-      this.getAttribute(SharedMonsterAttributes.MOVEMENT_SPEED).setBaseValue(0.10000000149011612D);
-      this.getAttributes().registerAttribute(SharedMonsterAttributes.ATTACK_SPEED);
-      this.getAttributes().registerAttribute(SharedMonsterAttributes.LUCK);
+   public static AttributeSupplier.Builder createAttributes() {
+      return LivingEntity.createLivingAttributes().add(Attributes.ATTACK_DAMAGE, 1.0D).add(Attributes.MOVEMENT_SPEED, 0.10000000149011612D).add(Attributes.ATTACK_SPEED).add(Attributes.LUCK);
    }
 
    protected void defineSynchedData() {
       super.defineSynchedData();
       this.entityData.define(DATA_PLAYER_ABSORPTION_ID, 0.0F);
@@ -280,17 +274,17 @@
    protected boolean isStayingOnGroundSurface() {
       return this.isShiftKeyDown();
    }
 
    protected boolean updateIsUnderwater() {
-      this.wasUnderwater = this.isUnderLiquid(FluidTags.WATER, true);
+      this.wasUnderwater = this.isEyeInFluid(FluidTags.WATER);
       return this.wasUnderwater;
    }
 
    private void turtleHelmetTick() {
       ItemStack var1 = this.getItemBySlot(EquipmentSlot.HEAD);
-      if (var1.getItem() == Items.TURTLE_HELMET && !this.isUnderLiquid(FluidTags.WATER)) {
+      if (var1.getItem() == Items.TURTLE_HELMET && !this.isEyeInFluid(FluidTags.WATER)) {
          this.addEffect(new MobEffectInstance(MobEffects.WATER_BREATHING, 200, 0, false, false, true));
       }
 
    }
 
@@ -411,29 +405,21 @@
    protected void closeContainer() {
       this.containerMenu = this.inventoryMenu;
    }
 
    public void rideTick() {
-      if (!this.level.isClientSide && this.wantsToStopRiding() && this.isPassenger()) {
+      if (this.wantsToStopRiding() && this.isPassenger()) {
          this.stopRiding();
          this.setShiftKeyDown(false);
       } else {
          double var1 = this.getX();
          double var3 = this.getY();
          double var5 = this.getZ();
-         float var7 = this.yRot;
-         float var8 = this.xRot;
          super.rideTick();
          this.oBob = this.bob;
          this.bob = 0.0F;
-         this.checkRidingStatistiscs(this.getX() - var1, this.getY() - var3, this.getZ() - var5);
-         if (this.getVehicle() instanceof Pig) {
-            this.xRot = var8;
-            this.yRot = var7;
-            this.yBodyRot = ((Pig)this.getVehicle()).yBodyRot;
-         }
-
+         this.checkRidingStatistics(this.getX() - var1, this.getY() - var3, this.getZ() - var5);
       }
    }
 
    protected void serverAiStep() {
       super.serverAiStep();
@@ -457,43 +443,38 @@
       }
 
       this.inventory.tick();
       this.oBob = this.bob;
       super.aiStep();
-      AttributeInstance var1 = this.getAttribute(SharedMonsterAttributes.MOVEMENT_SPEED);
-      if (!this.level.isClientSide) {
-         var1.setBaseValue((double)this.abilities.getWalkingSpeed());
-      }
-
       this.flyingSpeed = 0.02F;
       if (this.isSprinting()) {
          this.flyingSpeed = (float)((double)this.flyingSpeed + 0.005999999865889549D);
       }
 
-      this.setSpeed((float)var1.getValue());
-      float var2;
-      if (this.onGround && this.getHealth() > 0.0F && !this.isSwimming()) {
-         var2 = Math.min(0.1F, Mth.sqrt(getHorizontalDistanceSqr(this.getDeltaMovement())));
+      this.setSpeed((float)this.getAttributeValue(Attributes.MOVEMENT_SPEED));
+      float var1;
+      if (this.onGround && !this.isDeadOrDying() && !this.isSwimming()) {
+         var1 = Math.min(0.1F, Mth.sqrt(getHorizontalDistanceSqr(this.getDeltaMovement())));
       } else {
-         var2 = 0.0F;
+         var1 = 0.0F;
       }
 
-      this.bob += (var2 - this.bob) * 0.4F;
+      this.bob += (var1 - this.bob) * 0.4F;
       if (this.getHealth() > 0.0F && !this.isSpectator()) {
-         AABB var3;
+         AABB var2;
          if (this.isPassenger() && !this.getVehicle().removed) {
-            var3 = this.getBoundingBox().minmax(this.getVehicle().getBoundingBox()).inflate(1.0D, 0.0D, 1.0D);
+            var2 = this.getBoundingBox().minmax(this.getVehicle().getBoundingBox()).inflate(1.0D, 0.0D, 1.0D);
          } else {
-            var3 = this.getBoundingBox().inflate(1.0D, 0.5D, 1.0D);
+            var2 = this.getBoundingBox().inflate(1.0D, 0.5D, 1.0D);
          }
 
-         List var4 = this.level.getEntities(this, var3);
+         List var3 = this.level.getEntities(this, var2);
 
-         for(int var5 = 0; var5 < var4.size(); ++var5) {
-            Entity var6 = (Entity)var4.get(var5);
-            if (!var6.removed) {
-               this.touch(var6);
+         for(int var4 = 0; var4 < var3.size(); ++var4) {
+            Entity var5 = (Entity)var3.get(var4);
+            if (!var5.removed) {
+               this.touch(var5);
             }
          }
       }
 
       this.playShoulderEntityAmbientSound(this.getShoulderEntityLeft());
@@ -503,16 +484,19 @@
       }
 
    }
 
    private void playShoulderEntityAmbientSound(@Nullable CompoundTag var1) {
-      if (var1 != null && !var1.contains("Silent") || !var1.getBoolean("Silent")) {
+      if (var1 != null && (!var1.contains("Silent") || !var1.getBoolean("Silent")) && this.level.random.nextInt(200) == 0) {
          String var2 = var1.getString("id");
          EntityType.byString(var2).filter((var0) -> {
             return var0 == EntityType.PARROT;
          }).ifPresent((var1x) -> {
-            Parrot.playAmbientSound(this.level, this);
+            if (!Parrot.imitateNearbyMobs(this.level, this)) {
+               this.level.playSound((Player)null, this.getX(), this.getY(), this.getZ(), Parrot.getAmbient(this.level, this.level.random), this.getSoundSource(), 1.0F, Parrot.getPitch(this.level.random));
+            }
+
          });
       }
 
    }
 
@@ -598,10 +582,14 @@
    @Nullable
    public ItemEntity drop(ItemStack var1, boolean var2, boolean var3) {
       if (var1.isEmpty()) {
          return null;
       } else {
+         if (this.level.isClientSide) {
+            this.swing(InteractionHand.MAIN_HAND);
+         }
+
          double var4 = this.getEyeY() - 0.30000001192092896D;
          ItemEntity var6 = new ItemEntity(this.level, this.getX(), var4, this.getZ(), var1);
          var6.setPickUpDelay(40);
          if (var3) {
             var6.setThrower(this.getUUID());
@@ -660,23 +648,23 @@
          }
 
          var2 *= var5;
       }
 
-      if (this.isUnderLiquid(FluidTags.WATER) && !EnchantmentHelper.hasAquaAffinity(this)) {
+      if (this.isEyeInFluid(FluidTags.WATER) && !EnchantmentHelper.hasAquaAffinity(this)) {
          var2 /= 5.0F;
       }
 
       if (!this.onGround) {
          var2 /= 5.0F;
       }
 
       return var2;
    }
 
-   public boolean canDestroy(BlockState var1) {
-      return var1.getMaterial().isAlwaysDestroyable() || this.inventory.canDestroy(var1);
+   public boolean hasCorrectToolForDrops(BlockState var1) {
+      return !var1.requiresCorrectToolForDrops() || this.inventory.getSelected().isCorrectToolForDrops(var1);
    }
 
    public void readAdditionalSaveData(CompoundTag var1) {
       super.readAdditionalSaveData(var1);
       this.setUUID(createPlayerUUID(this.gameProfile));
@@ -691,17 +679,13 @@
       if (this.enchantmentSeed == 0) {
          this.enchantmentSeed = this.random.nextInt();
       }
 
       this.setScore(var1.getInt("Score"));
-      if (var1.contains("SpawnX", 99) && var1.contains("SpawnY", 99) && var1.contains("SpawnZ", 99)) {
-         this.respawnPosition = new BlockPos(var1.getInt("SpawnX"), var1.getInt("SpawnY"), var1.getInt("SpawnZ"));
-         this.respawnForced = var1.getBoolean("SpawnForced");
-      }
-
       this.foodData.readAdditionalSaveData(var1);
       this.abilities.loadSaveData(var1);
+      this.getAttribute(Attributes.MOVEMENT_SPEED).setBaseValue((double)this.abilities.getWalkingSpeed());
       if (var1.contains("EnderItems", 9)) {
          this.enderChestInventory.fromTag(var1.getList("EnderItems", 10));
       }
 
       if (var1.contains("ShoulderEntityLeft", 10)) {
@@ -723,17 +707,10 @@
       var1.putFloat("XpP", this.experienceProgress);
       var1.putInt("XpLevel", this.experienceLevel);
       var1.putInt("XpTotal", this.totalExperience);
       var1.putInt("XpSeed", this.enchantmentSeed);
       var1.putInt("Score", this.getScore());
-      if (this.respawnPosition != null) {
-         var1.putInt("SpawnX", this.respawnPosition.getX());
-         var1.putInt("SpawnY", this.respawnPosition.getY());
-         var1.putInt("SpawnZ", this.respawnPosition.getZ());
-         var1.putBoolean("SpawnForced", this.respawnForced);
-      }
-
       this.foodData.addAdditionalSaveData(var1);
       this.abilities.addSaveData(var1);
       var1.put("EnderItems", this.enderChestInventory.createTag());
       if (!this.getShoulderEntityLeft().isEmpty()) {
          var1.put("ShoulderEntityLeft", this.getShoulderEntityLeft());
@@ -764,11 +741,11 @@
          return false;
       } else if (this.abilities.invulnerable && !var1.isBypassInvul()) {
          return false;
       } else {
          this.noActionTime = 0;
-         if (this.getHealth() <= 0.0F) {
+         if (this.isDeadOrDying()) {
             return false;
          } else {
             this.removeEntitiesOnShoulder();
             if (var1.scalesWithDifficulty()) {
                if (this.level.getDifficulty() == Difficulty.PEACEFUL) {
@@ -805,33 +782,39 @@
       } else {
          return !var2.isAlliedTo(var3) ? true : var2.isAllowFriendlyFire();
       }
    }
 
-   protected void hurtArmor(float var1) {
-      this.inventory.hurtArmor(var1);
+   protected void hurtArmor(DamageSource var1, float var2) {
+      this.inventory.hurtArmor(var1, var2);
    }
 
    protected void hurtCurrentlyUsedShield(float var1) {
-      if (var1 >= 3.0F && this.useItem.getItem() == Items.SHIELD) {
-         int var2 = 1 + Mth.floor(var1);
-         InteractionHand var3 = this.getUsedItemHand();
-         this.useItem.hurtAndBreak(var2, this, (var1x) -> {
-            var1x.broadcastBreakEvent(var3);
-         });
-         if (this.useItem.isEmpty()) {
-            if (var3 == InteractionHand.MAIN_HAND) {
-               this.setItemSlot(EquipmentSlot.MAINHAND, ItemStack.EMPTY);
-            } else {
-               this.setItemSlot(EquipmentSlot.OFFHAND, ItemStack.EMPTY);
-            }
+      if (this.useItem.getItem() == Items.SHIELD) {
+         if (!this.level.isClientSide) {
+            this.awardStat(Stats.ITEM_USED.get(this.useItem.getItem()));
+         }
 
-            this.useItem = ItemStack.EMPTY;
-            this.playSound(SoundEvents.SHIELD_BREAK, 0.8F, 0.8F + this.level.random.nextFloat() * 0.4F);
+         if (var1 >= 3.0F) {
+            int var2 = 1 + Mth.floor(var1);
+            InteractionHand var3 = this.getUsedItemHand();
+            this.useItem.hurtAndBreak(var2, this, (var1x) -> {
+               var1x.broadcastBreakEvent(var3);
+            });
+            if (this.useItem.isEmpty()) {
+               if (var3 == InteractionHand.MAIN_HAND) {
+                  this.setItemSlot(EquipmentSlot.MAINHAND, ItemStack.EMPTY);
+               } else {
+                  this.setItemSlot(EquipmentSlot.OFFHAND, ItemStack.EMPTY);
+               }
+
+               this.useItem = ItemStack.EMPTY;
+               this.playSound(SoundEvents.SHIELD_BREAK, 0.8F, 0.8F + this.level.random.nextFloat() * 0.4F);
+            }
          }
-      }
 
+      }
    }
 
    protected void actuallyHurt(DamageSource var1, float var2) {
       if (!this.isInvulnerableTo(var1)) {
          var2 = this.getDamageAfterArmorAbsorb(var1, var2);
@@ -855,10 +838,14 @@
 
          }
       }
    }
 
+   protected boolean onSoulSpeedBlock() {
+      return !this.abilities.flying && super.onSoulSpeedBlock();
+   }
+
    public void openTextEdit(SignBlockEntity var1) {
    }
 
    public void openMinecartCommandBlock(BaseCommandBlock var1) {
    }
@@ -893,49 +880,55 @@
 
          return InteractionResult.PASS;
       } else {
          ItemStack var3 = this.getItemInHand(var2);
          ItemStack var4 = var3.copy();
-         if (var1.interact(this, var2)) {
+         InteractionResult var5 = var1.interact(this, var2);
+         if (var5.consumesAction()) {
             if (this.abilities.instabuild && var3 == this.getItemInHand(var2) && var3.getCount() < var4.getCount()) {
                var3.setCount(var4.getCount());
             }
 
-            return InteractionResult.SUCCESS;
+            return var5;
          } else {
             if (!var3.isEmpty() && var1 instanceof LivingEntity) {
                if (this.abilities.instabuild) {
                   var3 = var4;
                }
 
-               if (var3.interactEnemy(this, (LivingEntity)var1, var2)) {
+               InteractionResult var6 = var3.interactLivingEntity(this, (LivingEntity)var1, var2);
+               if (var6.consumesAction()) {
                   if (var3.isEmpty() && !this.abilities.instabuild) {
                      this.setItemInHand(var2, ItemStack.EMPTY);
                   }
 
-                  return InteractionResult.SUCCESS;
+                  return var6;
                }
             }
 
             return InteractionResult.PASS;
          }
       }
    }
 
-   public double getRidingHeight() {
+   public double getMyRidingOffset() {
       return -0.35D;
    }
 
-   public void stopRiding() {
-      super.stopRiding();
+   public void removeVehicle() {
+      super.removeVehicle();
       this.boardingCooldown = 0;
    }
 
    protected boolean isImmobile() {
       return super.isImmobile() || this.isSleeping();
    }
 
+   public boolean isAffectedByFluids() {
+      return !this.abilities.flying;
+   }
+
    protected Vec3 maybeBackOffFromEdge(Vec3 var1, MoverType var2) {
       if ((var2 == MoverType.SELF || var2 == MoverType.PLAYER) && this.onGround && this.isStayingOnGroundSurface()) {
          double var3 = var1.x;
          double var5 = var1.z;
          double var7 = 0.05D;
@@ -992,11 +985,11 @@
    }
 
    public void attack(Entity var1) {
       if (var1.isAttackable()) {
          if (!var1.skipAttackInteraction(this)) {
-            float var2 = (float)this.getAttribute(SharedMonsterAttributes.ATTACK_DAMAGE).getValue();
+            float var2 = (float)this.getAttributeValue(Attributes.ATTACK_DAMAGE);
             float var3;
             if (var1 instanceof LivingEntity) {
                var3 = EnchantmentHelper.getDamageBonus(this.getMainHandItem(), ((LivingEntity)var1).getMobType());
             } else {
                var3 = EnchantmentHelper.getDamageBonus(this.getMainHandItem(), MobType.UNDEFINED);
@@ -1015,11 +1008,11 @@
                   this.level.playSound((Player)null, this.getX(), this.getY(), this.getZ(), SoundEvents.PLAYER_ATTACK_KNOCKBACK, this.getSoundSource(), 1.0F, 1.0F);
                   ++var21;
                   var6 = true;
                }
 
-               boolean var8 = var5 && this.fallDistance > 0.0F && !this.onGround && !this.onLadder() && !this.isInWater() && !this.hasEffect(MobEffects.BLINDNESS) && !this.isPassenger() && var1 instanceof LivingEntity;
+               boolean var8 = var5 && this.fallDistance > 0.0F && !this.onGround && !this.onClimbable() && !this.isInWater() && !this.hasEffect(MobEffects.BLINDNESS) && !this.isPassenger() && var1 instanceof LivingEntity;
                var8 = var8 && !this.isSprinting();
                if (var8) {
                   var2 *= 1.5F;
                }
 
@@ -1047,11 +1040,11 @@
                Vec3 var15 = var1.getDeltaMovement();
                boolean var16 = var1.hurt(DamageSource.playerAttack(this), var2);
                if (var16) {
                   if (var21 > 0) {
                      if (var1 instanceof LivingEntity) {
-                        ((LivingEntity)var1).knockback(this, (float)var21 * 0.5F, (double)Mth.sin(this.yRot * 0.017453292F), (double)(-Mth.cos(this.yRot * 0.017453292F)));
+                        ((LivingEntity)var1).knockback((float)var21 * 0.5F, (double)Mth.sin(this.yRot * 0.017453292F), (double)(-Mth.cos(this.yRot * 0.017453292F)));
                      } else {
                         var1.push((double)(-Mth.sin(this.yRot * 0.017453292F) * (float)var21 * 0.5F), 0.1D, (double)(Mth.cos(this.yRot * 0.017453292F) * (float)var21 * 0.5F));
                      }
 
                      this.setDeltaMovement(this.getDeltaMovement().multiply(0.6D, 1.0D, 0.6D));
@@ -1081,11 +1074,11 @@
                               } while(var20 == var1);
                            } while(this.isAlliedTo(var20));
                         } while(var20 instanceof ArmorStand && ((ArmorStand)var20).isMarker());
 
                         if (this.distanceToSqr(var20) < 9.0D) {
-                           var20.knockback(this, 0.4F, (double)Mth.sin(this.yRot * 0.017453292F), (double)(-Mth.cos(this.yRot * 0.017453292F)));
+                           var20.knockback(0.4F, (double)Mth.sin(this.yRot * 0.017453292F), (double)(-Mth.cos(this.yRot * 0.017453292F)));
                            var20.hurt(DamageSource.playerAttack(this), var17);
                         }
                      }
                   }
 
@@ -1206,75 +1199,15 @@
    public GameProfile getGameProfile() {
       return this.gameProfile;
    }
 
    public Either<Player.BedSleepingProblem, Unit> startSleepInBed(BlockPos var1) {
-      Direction var2 = (Direction)this.level.getBlockState(var1).getValue(HorizontalDirectionalBlock.FACING);
-      if (!this.level.isClientSide) {
-         if (this.isSleeping() || !this.isAlive()) {
-            return Either.left(Player.BedSleepingProblem.OTHER_PROBLEM);
-         }
-
-         if (!this.level.dimension.isNaturalDimension()) {
-            return Either.left(Player.BedSleepingProblem.NOT_POSSIBLE_HERE);
-         }
-
-         if (this.level.isDay()) {
-            this.setRespawnPosition(var1, false, true);
-            return Either.left(Player.BedSleepingProblem.NOT_POSSIBLE_NOW);
-         }
-
-         if (!this.bedInRange(var1, var2)) {
-            return Either.left(Player.BedSleepingProblem.TOO_FAR_AWAY);
-         }
-
-         if (this.bedBlocked(var1, var2)) {
-            return Either.left(Player.BedSleepingProblem.OBSTRUCTED);
-         }
-
-         if (!this.isCreative()) {
-            double var3 = 8.0D;
-            double var5 = 5.0D;
-            Vec3 var7 = new Vec3((double)var1.getX() + 0.5D, (double)var1.getY(), (double)var1.getZ() + 0.5D);
-            List var8 = this.level.getEntitiesOfClass(Monster.class, new AABB(var7.x() - 8.0D, var7.y() - 5.0D, var7.z() - 8.0D, var7.x() + 8.0D, var7.y() + 5.0D, var7.z() + 8.0D), (var1x) -> {
-               return var1x.isPreventingPlayerRest(this);
-            });
-            if (!var8.isEmpty()) {
-               return Either.left(Player.BedSleepingProblem.NOT_SAFE);
-            }
-         }
-      }
-
       this.startSleeping(var1);
       this.sleepCounter = 0;
-      if (this.level instanceof ServerLevel) {
-         ((ServerLevel)this.level).updateSleepingPlayerList();
-      }
-
       return Either.right(Unit.INSTANCE);
    }
 
-   public void startSleeping(BlockPos var1) {
-      this.resetStat(Stats.CUSTOM.get(Stats.TIME_SINCE_REST));
-      this.setRespawnPosition(var1, false, true);
-      super.startSleeping(var1);
-   }
-
-   private boolean bedInRange(BlockPos var1, Direction var2) {
-      return this.isReachableBedBlock(var1) || this.isReachableBedBlock(var1.relative(var2.getOpposite()));
-   }
-
-   private boolean isReachableBedBlock(BlockPos var1) {
-      Vec3 var2 = new Vec3((double)var1.getX() + 0.5D, (double)var1.getY(), (double)var1.getZ() + 0.5D);
-      return Math.abs(this.getX() - var2.x()) <= 3.0D && Math.abs(this.getY() - var2.y()) <= 2.0D && Math.abs(this.getZ() - var2.z()) <= 3.0D;
-   }
-
-   private boolean bedBlocked(BlockPos var1, Direction var2) {
-      BlockPos var3 = var1.above();
-      return !this.freeAt(var3) || !this.freeAt(var3.relative(var2.getOpposite()));
-   }
-
    public void stopSleepInBed(boolean var1, boolean var2) {
       super.stopSleeping();
       if (this.level instanceof ServerLevel && var2) {
          ((ServerLevel)this.level).updateSleepingPlayerList();
       }
@@ -1284,22 +1217,28 @@
 
    public void stopSleeping() {
       this.stopSleepInBed(true, true);
    }
 
-   public static Optional<Vec3> checkBedValidRespawnPosition(LevelReader var0, BlockPos var1, boolean var2) {
-      Block var3 = var0.getBlockState(var1).getBlock();
-      if (!(var3 instanceof BedBlock)) {
-         if (!var2) {
-            return Optional.empty();
-         } else {
-            boolean var4 = var3.isPossibleToRespawnInThis();
-            boolean var5 = var0.getBlockState(var1.above()).getBlock().isPossibleToRespawnInThis();
-            return var4 && var5 ? Optional.of(new Vec3((double)var1.getX() + 0.5D, (double)var1.getY() + 0.1D, (double)var1.getZ() + 0.5D)) : Optional.empty();
+   public static Optional<Vec3> findRespawnPositionAndUseSpawnBlock(ServerLevel var0, BlockPos var1, boolean var2, boolean var3) {
+      BlockState var4 = var0.getBlockState(var1);
+      Block var5 = var4.getBlock();
+      if (var5 instanceof RespawnAnchorBlock && (Integer)var4.getValue(RespawnAnchorBlock.CHARGE) > 0 && RespawnAnchorBlock.canSetSpawn(var0)) {
+         Optional var8 = RespawnAnchorBlock.findStandUpPosition(EntityType.PLAYER, var0, var1);
+         if (!var3 && var8.isPresent()) {
+            var0.setBlock(var1, (BlockState)var4.setValue(RespawnAnchorBlock.CHARGE, (Integer)var4.getValue(RespawnAnchorBlock.CHARGE) - 1), 3);
          }
-      } else {
+
+         return var8;
+      } else if (var5 instanceof BedBlock && BedBlock.canSetSpawn(var0)) {
          return BedBlock.findStandUpPosition(EntityType.PLAYER, var0, var1, 0);
+      } else if (!var2) {
+         return Optional.empty();
+      } else {
+         boolean var6 = var5.isPossibleToRespawnInThis();
+         boolean var7 = var0.getBlockState(var1.above()).getBlock().isPossibleToRespawnInThis();
+         return var6 && var7 ? Optional.of(new Vec3((double)var1.getX() + 0.5D, (double)var1.getY() + 0.1D, (double)var1.getZ() + 0.5D)) : Optional.empty();
       }
    }
 
    public boolean isSleepingLongEnough() {
       return this.isSleeping() && this.sleepCounter >= 100;
@@ -1310,33 +1249,10 @@
    }
 
    public void displayClientMessage(Component var1, boolean var2) {
    }
 
-   public BlockPos getRespawnPosition() {
-      return this.respawnPosition;
-   }
-
-   public boolean isRespawnForced() {
-      return this.respawnForced;
-   }
-
-   public void setRespawnPosition(BlockPos var1, boolean var2, boolean var3) {
-      if (var1 != null) {
-         if (var3 && !var1.equals(this.respawnPosition)) {
-            this.sendMessage(new TranslatableComponent("block.minecraft.bed.set_spawn", new Object[0]));
-         }
-
-         this.respawnPosition = var1;
-         this.respawnForced = var2;
-      } else {
-         this.respawnPosition = null;
-         this.respawnForced = false;
-      }
-
-   }
-
    public void awardStat(ResourceLocation var1) {
       this.awardStat(Stats.CUSTOM.get(var1));
    }
 
    public void awardStat(ResourceLocation var1, int var2) {
@@ -1418,11 +1334,11 @@
    protected boolean freeAt(BlockPos var1) {
       return !this.level.getBlockState(var1).isSuffocating(this.level, var1);
    }
 
    public float getSpeed() {
-      return (float)this.getAttribute(SharedMonsterAttributes.MOVEMENT_SPEED).getValue();
+      return (float)this.getAttributeValue(Attributes.MOVEMENT_SPEED);
    }
 
    public void checkMovementStatistics(double var1, double var3, double var5) {
       if (!this.isPassenger()) {
          int var7;
@@ -1430,11 +1346,11 @@
             var7 = Math.round(Mth.sqrt(var1 * var1 + var3 * var3 + var5 * var5) * 100.0F);
             if (var7 > 0) {
                this.awardStat(Stats.SWIM_ONE_CM, var7);
                this.causeFoodExhaustion(0.01F * (float)var7 * 0.01F);
             }
-         } else if (this.isUnderLiquid(FluidTags.WATER, true)) {
+         } else if (this.isEyeInFluid(FluidTags.WATER)) {
             var7 = Math.round(Mth.sqrt(var1 * var1 + var3 * var3 + var5 * var5) * 100.0F);
             if (var7 > 0) {
                this.awardStat(Stats.WALK_UNDER_WATER_ONE_CM, var7);
                this.causeFoodExhaustion(0.01F * (float)var7 * 0.01F);
             }
@@ -1442,11 +1358,11 @@
             var7 = Math.round(Mth.sqrt(var1 * var1 + var5 * var5) * 100.0F);
             if (var7 > 0) {
                this.awardStat(Stats.WALK_ON_WATER_ONE_CM, var7);
                this.causeFoodExhaustion(0.01F * (float)var7 * 0.01F);
             }
-         } else if (this.onLadder()) {
+         } else if (this.onClimbable()) {
             if (var3 > 0.0D) {
                this.awardStat(Stats.CLIMB_ONE_CM, (int)Math.round(var3 * 100.0D));
             }
          } else if (this.onGround) {
             var7 = Math.round(Mth.sqrt(var1 * var1 + var5 * var5) * 100.0F);
@@ -1473,22 +1389,25 @@
          }
 
       }
    }
 
-   private void checkRidingStatistiscs(double var1, double var3, double var5) {
+   private void checkRidingStatistics(double var1, double var3, double var5) {
       if (this.isPassenger()) {
          int var7 = Math.round(Mth.sqrt(var1 * var1 + var3 * var3 + var5 * var5) * 100.0F);
          if (var7 > 0) {
-            if (this.getVehicle() instanceof AbstractMinecart) {
+            Entity var8 = this.getVehicle();
+            if (var8 instanceof AbstractMinecart) {
                this.awardStat(Stats.MINECART_ONE_CM, var7);
-            } else if (this.getVehicle() instanceof Boat) {
+            } else if (var8 instanceof Boat) {
                this.awardStat(Stats.BOAT_ONE_CM, var7);
-            } else if (this.getVehicle() instanceof Pig) {
+            } else if (var8 instanceof Pig) {
                this.awardStat(Stats.PIG_ONE_CM, var7);
-            } else if (this.getVehicle() instanceof AbstractHorse) {
+            } else if (var8 instanceof AbstractHorse) {
                this.awardStat(Stats.HORSE_ONE_CM, var7);
+            } else if (var8 instanceof Strider) {
+               this.awardStat(Stats.STRIDER_ONE_CM, var7);
             }
          }
       }
 
    }
@@ -1504,11 +1423,11 @@
          return super.causeFallDamage(var1, var2);
       }
    }
 
    public boolean tryToStartFallFlying() {
-      if (!this.onGround && !this.isFallFlying() && !this.isInWater()) {
+      if (!this.onGround && !this.isFallFlying() && !this.isInWater() && !this.hasEffect(MobEffects.LEVITATION)) {
          ItemStack var1 = this.getItemBySlot(EquipmentSlot.CHEST);
          if (var1.getItem() == Items.ELYTRA && ElytraItem.isFlyEnabled(var1)) {
             this.startFallFlying();
             return true;
          }
@@ -1762,31 +1681,31 @@
       return !this.abilities.flying && !this.isSpectator() && super.isSwimming();
    }
 
    public abstract boolean isCreative();
 
-   public boolean isPushedByWater() {
+   public boolean isPushedByFluid() {
       return !this.abilities.flying;
    }
 
    public Scoreboard getScoreboard() {
       return this.level.getScoreboard();
    }
 
    public Component getDisplayName() {
-      Component var1 = PlayerTeam.formatNameForTeam(this.getTeam(), this.getName());
+      MutableComponent var1 = PlayerTeam.formatNameForTeam(this.getTeam(), this.getName());
       return this.decorateDisplayNameComponent(var1);
    }
 
    public Component getDisplayNameWithUuid() {
       return (new TextComponent("")).append(this.getName()).append(" (").append(this.gameProfile.getId().toString()).append(")");
    }
 
-   private Component decorateDisplayNameComponent(Component var1) {
+   private MutableComponent decorateDisplayNameComponent(MutableComponent var1) {
       String var2 = this.getGameProfile().getName();
       return var1.withStyle((var2x) -> {
-         var2x.setClickEvent(new ClickEvent(ClickEvent.Action.SUGGEST_COMMAND, "/tell " + var2 + " ")).setHoverEvent(this.createHoverEvent()).setInsertion(var2);
+         return var2x.withClickEvent(new ClickEvent(ClickEvent.Action.SUGGEST_COMMAND, "/tell " + var2 + " ")).withHoverEvent(this.createHoverEvent()).withInsertion(var2);
       });
    }
 
    public String getScoreboardName() {
       return this.getGameProfile().getName();
@@ -1902,11 +1821,11 @@
    protected void setShoulderEntityRight(CompoundTag var1) {
       this.entityData.set(DATA_SHOULDER_RIGHT, var1);
    }
 
    public float getCurrentItemAttackStrengthDelay() {
-      return (float)(1.0D / this.getAttribute(SharedMonsterAttributes.ATTACK_SPEED).getValue() * 20.0D);
+      return (float)(1.0D / this.getAttributeValue(Attributes.ATTACK_SPEED) * 20.0D);
    }
 
    public float getAttackStrengthScale(float var1) {
       return Mth.clamp(((float)this.attackStrengthTicker + var1) / this.getCurrentItemAttackStrengthDelay(), 0.0F, 1.0F);
    }
@@ -1922,11 +1841,11 @@
    protected float getBlockSpeedFactor() {
       return !this.abilities.flying && !this.isFallFlying() ? super.getBlockSpeedFactor() : 1.0F;
    }
 
    public float getLuck() {
-      return (float)this.getAttribute(SharedMonsterAttributes.LUCK).getValue();
+      return (float)this.getAttributeValue(Attributes.LUCK);
    }
 
    public boolean canUseGameMasterBlocks() {
       return this.abilities.instabuild && this.getPermissionLevel() >= 2;
    }
@@ -1938,10 +1857,14 @@
 
    public EntityDimensions getDimensions(Pose var1) {
       return (EntityDimensions)POSES.getOrDefault(var1, STANDING_DIMENSIONS);
    }
 
+   public ImmutableList<Pose> getDismountPoses() {
+      return ImmutableList.of(Pose.STANDING, Pose.CROUCHING, Pose.SWIMMING);
+   }
+
    public ItemStack getProjectile(ItemStack var1) {
       if (!(var1.getItem() instanceof ProjectileWeaponItem)) {
          return ItemStack.EMPTY;
       } else {
          Predicate var2 = ((ProjectileWeaponItem)var1.getItem()).getSupportedHeldProjectiles();
@@ -1972,10 +1895,14 @@
       }
 
       return super.eat(var1, var2);
    }
 
+   protected boolean shouldRemoveSoulSpeed(BlockState var1) {
+      return this.abilities.flying || super.shouldRemoveSoulSpeed(var1);
+   }
+
    static {
       POSES = ImmutableMap.builder().put(Pose.STANDING, STANDING_DIMENSIONS).put(Pose.SLEEPING, SLEEPING_DIMENSIONS).put(Pose.FALL_FLYING, EntityDimensions.scalable(0.6F, 0.6F)).put(Pose.SWIMMING, EntityDimensions.scalable(0.6F, 0.6F)).put(Pose.SPIN_ATTACK, EntityDimensions.scalable(0.6F, 0.6F)).put(Pose.CROUCHING, EntityDimensions.scalable(0.6F, 1.5F)).put(Pose.DYING, EntityDimensions.fixed(0.2F, 0.2F)).build();
       DATA_PLAYER_ABSORPTION_ID = SynchedEntityData.defineId(Player.class, EntityDataSerializers.FLOAT);
       DATA_SCORE_ID = SynchedEntityData.defineId(Player.class, EntityDataSerializers.INT);
       DATA_PLAYER_MODE_CUSTOMISATION = SynchedEntityData.defineId(Player.class, EntityDataSerializers.BYTE);
@@ -1984,15 +1911,15 @@
       DATA_SHOULDER_RIGHT = SynchedEntityData.defineId(Player.class, EntityDataSerializers.COMPOUND_TAG);
    }
 
    public static enum BedSleepingProblem {
       NOT_POSSIBLE_HERE,
-      NOT_POSSIBLE_NOW(new TranslatableComponent("block.minecraft.bed.no_sleep", new Object[0])),
-      TOO_FAR_AWAY(new TranslatableComponent("block.minecraft.bed.too_far_away", new Object[0])),
-      OBSTRUCTED(new TranslatableComponent("block.minecraft.bed.obstructed", new Object[0])),
+      NOT_POSSIBLE_NOW(new TranslatableComponent("block.minecraft.bed.no_sleep")),
+      TOO_FAR_AWAY(new TranslatableComponent("block.minecraft.bed.too_far_away")),
+      OBSTRUCTED(new TranslatableComponent("block.minecraft.bed.obstructed")),
       OTHER_PROBLEM,
-      NOT_SAFE(new TranslatableComponent("block.minecraft.bed.not_safe", new Object[0]));
+      NOT_SAFE(new TranslatableComponent("block.minecraft.bed.not_safe"));
 
       @Nullable
       private final Component message;
 
       private BedSleepingProblem() {
