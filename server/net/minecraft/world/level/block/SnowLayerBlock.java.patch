--- net/minecraft/world/level/block/SnowLayerBlock.java
+++ net/minecraft/world/level/block/SnowLayerBlock.java
@@ -8,10 +8,11 @@
 import net.minecraft.world.item.BlockPlaceContext;
 import net.minecraft.world.level.BlockGetter;
 import net.minecraft.world.level.LevelAccessor;
 import net.minecraft.world.level.LevelReader;
 import net.minecraft.world.level.LightLayer;
+import net.minecraft.world.level.block.state.BlockBehaviour;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.block.state.StateDefinition;
 import net.minecraft.world.level.block.state.properties.BlockStateProperties;
 import net.minecraft.world.level.block.state.properties.IntegerProperty;
 import net.minecraft.world.level.pathfinder.PathComputationType;
@@ -21,11 +22,11 @@
 
 public class SnowLayerBlock extends Block {
    public static final IntegerProperty LAYERS;
    protected static final VoxelShape[] SHAPE_BY_LAYER;
 
-   protected SnowLayerBlock(Block.Properties var1) {
+   protected SnowLayerBlock(BlockBehaviour.Properties var1) {
       super(var1);
       this.registerDefaultState((BlockState)((BlockState)this.stateDefinition.any()).setValue(LAYERS, 1));
    }
 
    public boolean isPathfindable(BlockState var1, BlockGetter var2, BlockPos var3, PathComputationType var4) {
@@ -47,20 +48,27 @@
 
    public VoxelShape getCollisionShape(BlockState var1, BlockGetter var2, BlockPos var3, CollisionContext var4) {
       return SHAPE_BY_LAYER[(Integer)var1.getValue(LAYERS) - 1];
    }
 
+   public VoxelShape getBlockSupportShape(BlockState var1, BlockGetter var2, BlockPos var3) {
+      return SHAPE_BY_LAYER[(Integer)var1.getValue(LAYERS)];
+   }
+
+   public VoxelShape getVisualShape(BlockState var1, BlockGetter var2, BlockPos var3, CollisionContext var4) {
+      return SHAPE_BY_LAYER[(Integer)var1.getValue(LAYERS)];
+   }
+
    public boolean useShapeForLightOcclusion(BlockState var1) {
       return true;
    }
 
    public boolean canSurvive(BlockState var1, LevelReader var2, BlockPos var3) {
       BlockState var4 = var2.getBlockState(var3.below());
-      Block var5 = var4.getBlock();
-      if (var5 != Blocks.ICE && var5 != Blocks.PACKED_ICE && var5 != Blocks.BARRIER) {
-         if (var5 != Blocks.HONEY_BLOCK && var5 != Blocks.SOUL_SAND) {
-            return Block.isFaceFull(var4.getCollisionShape(var2, var3.below()), Direction.UP) || var5 == this && (Integer)var4.getValue(LAYERS) == 8;
+      if (!var4.is(Blocks.ICE) && !var4.is(Blocks.PACKED_ICE) && !var4.is(Blocks.BARRIER)) {
+         if (!var4.is(Blocks.HONEY_BLOCK) && !var4.is(Blocks.SOUL_SAND)) {
+            return Block.isFaceFull(var4.getCollisionShape(var2, var3.below()), Direction.UP) || var4.getBlock() == this && (Integer)var4.getValue(LAYERS) == 8;
          } else {
             return true;
          }
       } else {
          return false;
@@ -69,11 +77,11 @@
 
    public BlockState updateShape(BlockState var1, Direction var2, BlockState var3, LevelAccessor var4, BlockPos var5, BlockPos var6) {
       return !var1.canSurvive(var4, var5) ? Blocks.AIR.defaultBlockState() : super.updateShape(var1, var2, var3, var4, var5, var6);
    }
 
-   public void tick(BlockState var1, ServerLevel var2, BlockPos var3, Random var4) {
+   public void randomTick(BlockState var1, ServerLevel var2, BlockPos var3, Random var4) {
       if (var2.getBrightness(LightLayer.BLOCK, var3) > 11) {
          dropResources(var1, var2, var3);
          var2.removeBlock(var3, false);
       }
 
@@ -93,11 +101,11 @@
    }
 
    @Nullable
    public BlockState getStateForPlacement(BlockPlaceContext var1) {
       BlockState var2 = var1.getLevel().getBlockState(var1.getClickedPos());
-      if (var2.getBlock() == this) {
+      if (var2.is(this)) {
          int var3 = (Integer)var2.getValue(LAYERS);
          return (BlockState)var2.setValue(LAYERS, Math.min(8, var3 + 1));
       } else {
          return super.getStateForPlacement(var1);
       }
