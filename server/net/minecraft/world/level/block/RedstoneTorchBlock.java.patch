--- net/minecraft/world/level/block/RedstoneTorchBlock.java
+++ net/minecraft/world/level/block/RedstoneTorchBlock.java
@@ -5,32 +5,29 @@
 import java.util.Map;
 import java.util.Random;
 import java.util.WeakHashMap;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
+import net.minecraft.core.particles.DustParticleOptions;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.world.level.BlockGetter;
 import net.minecraft.world.level.Level;
-import net.minecraft.world.level.LevelReader;
+import net.minecraft.world.level.block.state.BlockBehaviour;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.block.state.StateDefinition;
 import net.minecraft.world.level.block.state.properties.BlockStateProperties;
 import net.minecraft.world.level.block.state.properties.BooleanProperty;
 
 public class RedstoneTorchBlock extends TorchBlock {
    public static final BooleanProperty LIT;
    private static final Map<BlockGetter, List<RedstoneTorchBlock.Toggle>> RECENT_TOGGLES;
 
-   protected RedstoneTorchBlock(Block.Properties var1) {
-      super(var1);
+   protected RedstoneTorchBlock(BlockBehaviour.Properties var1) {
+      super(var1, DustParticleOptions.REDSTONE);
       this.registerDefaultState((BlockState)((BlockState)this.stateDefinition.any()).setValue(LIT, true));
    }
 
-   public int getTickDelay(LevelReader var1) {
-      return 2;
-   }
-
    public void onPlace(BlockState var1, Level var2, BlockPos var3, BlockState var4, boolean var5) {
       Direction[] var6 = Direction.values();
       int var7 = var6.length;
 
       for(int var8 = 0; var8 < var7; ++var8) {
@@ -60,37 +57,34 @@
    protected boolean hasNeighborSignal(Level var1, BlockPos var2, BlockState var3) {
       return var1.hasSignal(var2.below(), Direction.DOWN);
    }
 
    public void tick(BlockState var1, ServerLevel var2, BlockPos var3, Random var4) {
-      handleTick(var1, var2, var3, var4, this.hasNeighborSignal(var2, var3, var1));
-   }
+      boolean var5 = this.hasNeighborSignal(var2, var3, var1);
+      List var6 = (List)RECENT_TOGGLES.get(var2);
 
-   public static void handleTick(BlockState var0, Level var1, BlockPos var2, Random var3, boolean var4) {
-      List var5 = (List)RECENT_TOGGLES.get(var1);
-
-      while(var5 != null && !var5.isEmpty() && var1.getGameTime() - ((RedstoneTorchBlock.Toggle)var5.get(0)).when > 60L) {
-         var5.remove(0);
+      while(var6 != null && !var6.isEmpty() && var2.getGameTime() - ((RedstoneTorchBlock.Toggle)var6.get(0)).when > 60L) {
+         var6.remove(0);
       }
 
-      if ((Boolean)var0.getValue(LIT)) {
-         if (var4) {
-            var1.setBlock(var2, (BlockState)var0.setValue(LIT, false), 3);
-            if (isToggledTooFrequently(var1, var2, true)) {
-               var1.levelEvent(1502, var2, 0);
-               var1.getBlockTicks().scheduleTick(var2, var1.getBlockState(var2).getBlock(), 160);
+      if ((Boolean)var1.getValue(LIT)) {
+         if (var5) {
+            var2.setBlock(var3, (BlockState)var1.setValue(LIT, false), 3);
+            if (isToggledTooFrequently(var2, var3, true)) {
+               var2.levelEvent(1502, var3, 0);
+               var2.getBlockTicks().scheduleTick(var3, var2.getBlockState(var3).getBlock(), 160);
             }
          }
-      } else if (!var4 && !isToggledTooFrequently(var1, var2, false)) {
-         var1.setBlock(var2, (BlockState)var0.setValue(LIT, true), 3);
+      } else if (!var5 && !isToggledTooFrequently(var2, var3, false)) {
+         var2.setBlock(var3, (BlockState)var1.setValue(LIT, true), 3);
       }
 
    }
 
    public void neighborChanged(BlockState var1, Level var2, BlockPos var3, Block var4, BlockPos var5, boolean var6) {
       if ((Boolean)var1.getValue(LIT) == this.hasNeighborSignal(var2, var3, var1) && !var2.getBlockTicks().willTickThisTick(var3, this)) {
-         var2.getBlockTicks().scheduleTick(var3, this, this.getTickDelay(var2));
+         var2.getBlockTicks().scheduleTick(var3, this, 2);
       }
 
    }
 
    public int getDirectSignal(BlockState var1, BlockGetter var2, BlockPos var3, Direction var4) {
@@ -99,14 +93,10 @@
 
    public boolean isSignalSource(BlockState var1) {
       return true;
    }
 
-   public int getLightEmission(BlockState var1) {
-      return (Boolean)var1.getValue(LIT) ? super.getLightEmission(var1) : 0;
-   }
-
    protected void createBlockStateDefinition(StateDefinition.Builder<Block, BlockState> var1) {
       var1.add(LIT);
    }
 
    private static boolean isToggledTooFrequently(Level var0, BlockPos var1, boolean var2) {
