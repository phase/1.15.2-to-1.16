--- net/minecraft/world/level/block/CactusBlock.java
+++ net/minecraft/world/level/block/CactusBlock.java
@@ -10,10 +10,11 @@
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.level.BlockGetter;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.LevelAccessor;
 import net.minecraft.world.level.LevelReader;
+import net.minecraft.world.level.block.state.BlockBehaviour;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.block.state.StateDefinition;
 import net.minecraft.world.level.block.state.properties.BlockStateProperties;
 import net.minecraft.world.level.block.state.properties.IntegerProperty;
 import net.minecraft.world.level.material.Material;
@@ -24,37 +25,40 @@
 public class CactusBlock extends Block {
    public static final IntegerProperty AGE;
    protected static final VoxelShape COLLISION_SHAPE;
    protected static final VoxelShape OUTLINE_SHAPE;
 
-   protected CactusBlock(Block.Properties var1) {
+   protected CactusBlock(BlockBehaviour.Properties var1) {
       super(var1);
       this.registerDefaultState((BlockState)((BlockState)this.stateDefinition.any()).setValue(AGE, 0));
    }
 
    public void tick(BlockState var1, ServerLevel var2, BlockPos var3, Random var4) {
       if (!var1.canSurvive(var2, var3)) {
          var2.destroyBlock(var3, true);
-      } else {
-         BlockPos var5 = var3.above();
-         if (var2.isEmptyBlock(var5)) {
-            int var6;
-            for(var6 = 1; var2.getBlockState(var3.below(var6)).getBlock() == this; ++var6) {
-            }
+      }
 
-            if (var6 < 3) {
-               int var7 = (Integer)var1.getValue(AGE);
-               if (var7 == 15) {
-                  var2.setBlockAndUpdate(var5, this.defaultBlockState());
-                  BlockState var8 = (BlockState)var1.setValue(AGE, 0);
-                  var2.setBlock(var3, var8, 4);
-                  var8.neighborChanged(var2, var5, this, var3, false);
-               } else {
-                  var2.setBlock(var3, (BlockState)var1.setValue(AGE, var7 + 1), 4);
-               }
+   }
 
+   public void randomTick(BlockState var1, ServerLevel var2, BlockPos var3, Random var4) {
+      BlockPos var5 = var3.above();
+      if (var2.isEmptyBlock(var5)) {
+         int var6;
+         for(var6 = 1; var2.getBlockState(var3.below(var6)).is(this); ++var6) {
+         }
+
+         if (var6 < 3) {
+            int var7 = (Integer)var1.getValue(AGE);
+            if (var7 == 15) {
+               var2.setBlockAndUpdate(var5, this.defaultBlockState());
+               BlockState var8 = (BlockState)var1.setValue(AGE, 0);
+               var2.setBlock(var3, var8, 4);
+               var8.neighborChanged(var2, var5, this, var3, false);
+            } else {
+               var2.setBlock(var3, (BlockState)var1.setValue(AGE, var7 + 1), 4);
             }
+
          }
       }
    }
 
    public VoxelShape getCollisionShape(BlockState var1, BlockGetter var2, BlockPos var3, CollisionContext var4) {
@@ -78,12 +82,12 @@
 
       Direction var5;
       Material var7;
       do {
          if (!var4.hasNext()) {
-            Block var8 = var2.getBlockState(var3.below()).getBlock();
-            return (var8 == Blocks.CACTUS || var8 == Blocks.SAND || var8 == Blocks.RED_SAND) && !var2.getBlockState(var3.above()).getMaterial().isLiquid();
+            BlockState var8 = var2.getBlockState(var3.below());
+            return (var8.is(Blocks.CACTUS) || var8.is(Blocks.SAND) || var8.is(Blocks.RED_SAND)) && !var2.getBlockState(var3.above()).getMaterial().isLiquid();
          }
 
          var5 = (Direction)var4.next();
          BlockState var6 = var2.getBlockState(var3.relative(var5));
          var7 = var6.getMaterial();
