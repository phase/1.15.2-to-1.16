--- net/minecraft/world/level/block/CampfireBlock.java
+++ net/minecraft/world/level/block/CampfireBlock.java
@@ -8,29 +8,30 @@
 import net.minecraft.core.particles.ParticleTypes;
 import net.minecraft.core.particles.SimpleParticleType;
 import net.minecraft.sounds.SoundEvents;
 import net.minecraft.sounds.SoundSource;
 import net.minecraft.stats.Stats;
+import net.minecraft.tags.BlockTags;
 import net.minecraft.world.Containers;
 import net.minecraft.world.InteractionHand;
 import net.minecraft.world.InteractionResult;
 import net.minecraft.world.damagesource.DamageSource;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.player.Player;
-import net.minecraft.world.entity.projectile.AbstractArrow;
-import net.minecraft.world.entity.projectile.Fireball;
+import net.minecraft.world.entity.projectile.Projectile;
 import net.minecraft.world.item.BlockPlaceContext;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.crafting.CampfireCookingRecipe;
 import net.minecraft.world.item.enchantment.EnchantmentHelper;
 import net.minecraft.world.level.BlockGetter;
 import net.minecraft.world.level.GameRules;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.LevelAccessor;
 import net.minecraft.world.level.block.entity.BlockEntity;
 import net.minecraft.world.level.block.entity.CampfireBlockEntity;
+import net.minecraft.world.level.block.state.BlockBehaviour;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.block.state.StateDefinition;
 import net.minecraft.world.level.block.state.properties.BlockStateProperties;
 import net.minecraft.world.level.block.state.properties.BooleanProperty;
 import net.minecraft.world.level.block.state.properties.DirectionProperty;
@@ -48,13 +49,17 @@
    public static final BooleanProperty LIT;
    public static final BooleanProperty SIGNAL_FIRE;
    public static final BooleanProperty WATERLOGGED;
    public static final DirectionProperty FACING;
    private static final VoxelShape VIRTUAL_FENCE_POST;
+   private final boolean spawnParticles;
+   private final int fireDamage;
 
-   public CampfireBlock(Block.Properties var1) {
-      super(var1);
+   public CampfireBlock(boolean var1, int var2, BlockBehaviour.Properties var3) {
+      super(var3);
+      this.spawnParticles = var1;
+      this.fireDamage = var2;
       this.registerDefaultState((BlockState)((BlockState)((BlockState)((BlockState)((BlockState)this.stateDefinition.any()).setValue(LIT, true)).setValue(SIGNAL_FIRE, false)).setValue(WATERLOGGED, false)).setValue(FACING, Direction.NORTH));
    }
 
    public InteractionResult use(BlockState var1, Level var2, BlockPos var3, Player var4, InteractionHand var5, BlockHitResult var6) {
       if ((Boolean)var1.getValue(LIT)) {
@@ -77,18 +82,18 @@
       return InteractionResult.PASS;
    }
 
    public void entityInside(BlockState var1, Level var2, BlockPos var3, Entity var4) {
       if (!var4.fireImmune() && (Boolean)var1.getValue(LIT) && var4 instanceof LivingEntity && !EnchantmentHelper.hasFrostWalker((LivingEntity)var4)) {
-         var4.hurt(DamageSource.IN_FIRE, 1.0F);
+         var4.hurt(DamageSource.IN_FIRE, (float)this.fireDamage);
       }
 
       super.entityInside(var1, var2, var3, var4);
    }
 
    public void onRemove(BlockState var1, Level var2, BlockPos var3, BlockState var4, boolean var5) {
-      if (var1.getBlock() != var4.getBlock()) {
+      if (!var1.is(var4.getBlock())) {
          BlockEntity var6 = var2.getBlockEntity(var3);
          if (var6 instanceof CampfireBlockEntity) {
             Containers.dropContents(var2, var3, ((CampfireBlockEntity)var6).getItems());
          }
 
@@ -111,70 +116,61 @@
 
       return var2 == Direction.DOWN ? (BlockState)var1.setValue(SIGNAL_FIRE, this.isSmokeSource(var3)) : super.updateShape(var1, var2, var3, var4, var5, var6);
    }
 
    private boolean isSmokeSource(BlockState var1) {
-      return var1.getBlock() == Blocks.HAY_BLOCK;
+      return var1.is(Blocks.HAY_BLOCK);
    }
 
-   public int getLightEmission(BlockState var1) {
-      return (Boolean)var1.getValue(LIT) ? super.getLightEmission(var1) : 0;
-   }
-
    public VoxelShape getShape(BlockState var1, BlockGetter var2, BlockPos var3, CollisionContext var4) {
       return SHAPE;
    }
 
    public RenderShape getRenderShape(BlockState var1) {
       return RenderShape.MODEL;
    }
 
+   public static void dowse(LevelAccessor var0, BlockPos var1, BlockState var2) {
+      if (var0.isClientSide()) {
+         for(int var3 = 0; var3 < 20; ++var3) {
+            makeParticles(var0.getLevel(), var1, (Boolean)var2.getValue(SIGNAL_FIRE), true);
+         }
+      }
+
+      BlockEntity var4 = var0.getBlockEntity(var1);
+      if (var4 instanceof CampfireBlockEntity) {
+         ((CampfireBlockEntity)var4).dowse();
+      }
+
+   }
+
    public boolean placeLiquid(LevelAccessor var1, BlockPos var2, BlockState var3, FluidState var4) {
       if (!(Boolean)var3.getValue(BlockStateProperties.WATERLOGGED) && var4.getType() == Fluids.WATER) {
          boolean var5 = (Boolean)var3.getValue(LIT);
          if (var5) {
-            if (var1.isClientSide()) {
-               for(int var6 = 0; var6 < 20; ++var6) {
-                  makeParticles(var1.getLevel(), var2, (Boolean)var3.getValue(SIGNAL_FIRE), true);
-               }
-            } else {
+            if (!var1.isClientSide()) {
                var1.playSound((Player)null, var2, SoundEvents.GENERIC_EXTINGUISH_FIRE, SoundSource.BLOCKS, 1.0F, 1.0F);
             }
 
-            BlockEntity var7 = var1.getBlockEntity(var2);
-            if (var7 instanceof CampfireBlockEntity) {
-               ((CampfireBlockEntity)var7).dowse();
-            }
+            dowse(var1, var2, var3);
          }
 
          var1.setBlock(var2, (BlockState)((BlockState)var3.setValue(WATERLOGGED, true)).setValue(LIT, false), 3);
          var1.getLiquidTicks().scheduleTick(var2, var4.getType(), var4.getType().getTickDelay(var1));
          return true;
       } else {
          return false;
       }
    }
 
-   @Nullable
-   private Entity getShooter(Entity var1) {
-      if (var1 instanceof Fireball) {
-         return ((Fireball)var1).owner;
-      } else {
-         return var1 instanceof AbstractArrow ? ((AbstractArrow)var1).getOwner() : null;
-      }
-   }
-
-   public void onProjectileHit(Level var1, BlockState var2, BlockHitResult var3, Entity var4) {
-      if (!var1.isClientSide) {
-         boolean var5 = var4 instanceof Fireball || var4 instanceof AbstractArrow && var4.isOnFire();
-         if (var5) {
-            Entity var6 = this.getShooter(var4);
-            boolean var7 = var6 == null || var6 instanceof Player || var1.getGameRules().getBoolean(GameRules.RULE_MOBGRIEFING);
-            if (var7 && !(Boolean)var2.getValue(LIT) && !(Boolean)var2.getValue(WATERLOGGED)) {
-               BlockPos var8 = var3.getBlockPos();
-               var1.setBlock(var8, (BlockState)var2.setValue(BlockStateProperties.LIT, true), 11);
-            }
+   public void onProjectileHit(Level var1, BlockState var2, BlockHitResult var3, Projectile var4) {
+      if (!var1.isClientSide && var4.isOnFire()) {
+         Entity var5 = var4.getOwner();
+         boolean var6 = var5 == null || var5 instanceof Player || var1.getGameRules().getBoolean(GameRules.RULE_MOBGRIEFING);
+         if (var6 && !(Boolean)var2.getValue(LIT) && !(Boolean)var2.getValue(WATERLOGGED)) {
+            BlockPos var7 = var3.getBlockPos();
+            var1.setBlock(var7, (BlockState)var2.setValue(BlockStateProperties.LIT, true), 11);
          }
       }
 
    }
 
@@ -186,30 +182,30 @@
          var0.addParticle(ParticleTypes.SMOKE, (double)var1.getX() + 0.25D + var4.nextDouble() / 2.0D * (double)(var4.nextBoolean() ? 1 : -1), (double)var1.getY() + 0.4D, (double)var1.getZ() + 0.25D + var4.nextDouble() / 2.0D * (double)(var4.nextBoolean() ? 1 : -1), 0.0D, 0.005D, 0.0D);
       }
 
    }
 
-   public static boolean isSmokeyPos(Level var0, BlockPos var1, int var2) {
-      for(int var3 = 1; var3 <= var2; ++var3) {
-         BlockPos var4 = var1.below(var3);
-         BlockState var5 = var0.getBlockState(var4);
-         if (isLitCampfire(var5)) {
+   public static boolean isSmokeyPos(Level var0, BlockPos var1) {
+      for(int var2 = 1; var2 <= 5; ++var2) {
+         BlockPos var3 = var1.below(var2);
+         BlockState var4 = var0.getBlockState(var3);
+         if (isLitCampfire(var4)) {
             return true;
          }
 
-         boolean var6 = Shapes.joinIsNotEmpty(VIRTUAL_FENCE_POST, var5.getCollisionShape(var0, var1, CollisionContext.empty()), BooleanOp.AND);
-         if (var6) {
-            BlockState var7 = var0.getBlockState(var4.below());
-            return isLitCampfire(var7);
+         boolean var5 = Shapes.joinIsNotEmpty(VIRTUAL_FENCE_POST, var4.getCollisionShape(var0, var1, CollisionContext.empty()), BooleanOp.AND);
+         if (var5) {
+            BlockState var6 = var0.getBlockState(var3.below());
+            return isLitCampfire(var6);
          }
       }
 
       return false;
    }
 
-   private static boolean isLitCampfire(BlockState var0) {
-      return var0.getBlock() == Blocks.CAMPFIRE && (Boolean)var0.getValue(LIT);
+   public static boolean isLitCampfire(BlockState var0) {
+      return var0.hasProperty(LIT) && var0.is(BlockTags.CAMPFIRES) && (Boolean)var0.getValue(LIT);
    }
 
    public FluidState getFluidState(BlockState var1) {
       return (Boolean)var1.getValue(WATERLOGGED) ? Fluids.WATER.getSource(false) : super.getFluidState(var1);
    }
