--- net/minecraft/world/level/block/entity/AbstractFurnaceBlockEntity.java
+++ net/minecraft/world/level/block/entity/AbstractFurnaceBlockEntity.java
@@ -1,15 +1,20 @@
 package net.minecraft.world.level.block.entity;
 
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
+import it.unimi.dsi.fastutil.objects.Object2IntMap;
+import it.unimi.dsi.fastutil.objects.Object2IntOpenHashMap;
+import it.unimi.dsi.fastutil.objects.ObjectIterator;
 import java.util.ArrayList;
 import java.util.Iterator;
 import java.util.LinkedHashMap;
+import java.util.List;
 import java.util.Map;
-import java.util.Map.Entry;
 import javax.annotation.Nullable;
+import net.minecraft.SharedConstants;
+import net.minecraft.Util;
 import net.minecraft.core.Direction;
 import net.minecraft.core.NonNullList;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.tags.ItemTags;
@@ -28,13 +33,15 @@
 import net.minecraft.world.item.Items;
 import net.minecraft.world.item.crafting.AbstractCookingRecipe;
 import net.minecraft.world.item.crafting.Recipe;
 import net.minecraft.world.item.crafting.RecipeType;
 import net.minecraft.world.level.ItemLike;
+import net.minecraft.world.level.Level;
 import net.minecraft.world.level.block.AbstractFurnaceBlock;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.phys.Vec3;
 
 public abstract class AbstractFurnaceBlockEntity extends BaseContainerBlockEntity implements WorldlyContainer, RecipeHolder, StackedContentsCompatible, TickableBlockEntity {
    private static final int[] SLOTS_FOR_UP = new int[]{0};
    private static final int[] SLOTS_FOR_DOWN = new int[]{2, 1};
    private static final int[] SLOTS_FOR_SIDES = new int[]{1};
@@ -42,11 +49,11 @@
    private int litTime;
    private int litDuration;
    private int cookingProgress;
    private int cookingTotalTime;
    protected final ContainerData dataAccess;
-   private final Map<ResourceLocation, Integer> recipesUsed;
+   private final Object2IntOpenHashMap<ResourceLocation> recipesUsed;
    protected final RecipeType<? extends AbstractCookingRecipe> recipeType;
 
    protected AbstractFurnaceBlockEntity(BlockEntityType<?> var1, RecipeType<? extends AbstractCookingRecipe> var2) {
       super(var1);
       this.items = NonNullList.withSize(3, ItemStack.EMPTY);
@@ -85,11 +92,11 @@
 
          public int getCount() {
             return 4;
          }
       };
-      this.recipesUsed = Maps.newHashMap();
+      this.recipesUsed = new Object2IntOpenHashMap();
       this.recipeType = var2;
    }
 
    public static Map<Item, Integer> getFuel() {
       LinkedHashMap var0 = Maps.newLinkedHashMap();
@@ -154,61 +161,70 @@
       add(var0, (ItemLike)Blocks.SMITHING_TABLE, 300);
       add(var0, (ItemLike)Blocks.COMPOSTER, 300);
       return var0;
    }
 
+   private static boolean isNeverAFurnaceFuel(Item var0) {
+      return ItemTags.NON_FLAMMABLE_WOOD.contains(var0);
+   }
+
    private static void add(Map<Item, Integer> var0, Tag<Item> var1, int var2) {
       Iterator var3 = var1.getValues().iterator();
 
       while(var3.hasNext()) {
          Item var4 = (Item)var3.next();
-         var0.put(var4, var2);
+         if (!isNeverAFurnaceFuel(var4)) {
+            var0.put(var4, var2);
+         }
       }
 
    }
 
    private static void add(Map<Item, Integer> var0, ItemLike var1, int var2) {
-      var0.put(var1.asItem(), var2);
+      Item var3 = var1.asItem();
+      if (isNeverAFurnaceFuel(var3)) {
+         if (SharedConstants.IS_RUNNING_IN_IDE) {
+            throw (IllegalStateException)Util.pauseInIde(new IllegalStateException("A developer tried to explicitly make fire resistant item " + var3.getName((ItemStack)null).getString() + " a furnace fuel. That will not work!"));
+         }
+      } else {
+         var0.put(var3, var2);
+      }
    }
 
    private boolean isLit() {
       return this.litTime > 0;
    }
 
-   public void load(CompoundTag var1) {
-      super.load(var1);
+   public void load(BlockState var1, CompoundTag var2) {
+      super.load(var1, var2);
       this.items = NonNullList.withSize(this.getContainerSize(), ItemStack.EMPTY);
-      ContainerHelper.loadAllItems(var1, this.items);
-      this.litTime = var1.getShort("BurnTime");
-      this.cookingProgress = var1.getShort("CookTime");
-      this.cookingTotalTime = var1.getShort("CookTimeTotal");
+      ContainerHelper.loadAllItems(var2, this.items);
+      this.litTime = var2.getShort("BurnTime");
+      this.cookingProgress = var2.getShort("CookTime");
+      this.cookingTotalTime = var2.getShort("CookTimeTotal");
       this.litDuration = this.getBurnDuration((ItemStack)this.items.get(1));
-      short var2 = var1.getShort("RecipesUsedSize");
+      CompoundTag var3 = var2.getCompound("RecipesUsed");
+      Iterator var4 = var3.getAllKeys().iterator();
 
-      for(int var3 = 0; var3 < var2; ++var3) {
-         ResourceLocation var4 = new ResourceLocation(var1.getString("RecipeLocation" + var3));
-         int var5 = var1.getInt("RecipeAmount" + var3);
-         this.recipesUsed.put(var4, var5);
+      while(var4.hasNext()) {
+         String var5 = (String)var4.next();
+         this.recipesUsed.put(new ResourceLocation(var5), var3.getInt(var5));
       }
 
    }
 
    public CompoundTag save(CompoundTag var1) {
       super.save(var1);
       var1.putShort("BurnTime", (short)this.litTime);
       var1.putShort("CookTime", (short)this.cookingProgress);
       var1.putShort("CookTimeTotal", (short)this.cookingTotalTime);
       ContainerHelper.saveAllItems(var1, this.items);
-      var1.putShort("RecipesUsedSize", (short)this.recipesUsed.size());
-      int var2 = 0;
-
-      for(Iterator var3 = this.recipesUsed.entrySet().iterator(); var3.hasNext(); ++var2) {
-         Entry var4 = (Entry)var3.next();
-         var1.putString("RecipeLocation" + var2, ((ResourceLocation)var4.getKey()).toString());
-         var1.putInt("RecipeAmount" + var2, (Integer)var4.getValue());
-      }
-
+      CompoundTag var2 = new CompoundTag();
+      this.recipesUsed.forEach((var1x, var2x) -> {
+         var2.putInt(var1x.toString(), var2x);
+      });
+      var1.put("RecipesUsed", var2);
       return var1;
    }
 
    public void tick() {
       boolean var1 = this.isLit();
@@ -421,58 +437,56 @@
       this.items.clear();
    }
 
    public void setRecipeUsed(@Nullable Recipe<?> var1) {
       if (var1 != null) {
-         this.recipesUsed.compute(var1.getId(), (var0, var1x) -> {
-            return 1 + (var1x == null ? 0 : var1x);
-         });
+         ResourceLocation var2 = var1.getId();
+         this.recipesUsed.addTo(var2, 1);
       }
 
    }
 
    @Nullable
    public Recipe<?> getRecipeUsed() {
       return null;
    }
 
-   public void awardAndReset(Player var1) {
+   public void awardUsedRecipes(Player var1) {
    }
 
-   public void awardResetAndExperience(Player var1) {
-      ArrayList var2 = Lists.newArrayList();
-      Iterator var3 = this.recipesUsed.entrySet().iterator();
+   public void awardUsedRecipesAndPopExperience(Player var1) {
+      List var2 = this.getRecipesToAwardAndPopExperience(var1.level, var1.position());
+      var1.awardRecipes(var2);
+      this.recipesUsed.clear();
+   }
 
-      while(var3.hasNext()) {
-         Entry var4 = (Entry)var3.next();
-         var1.level.getRecipeManager().byKey((ResourceLocation)var4.getKey()).ifPresent((var3x) -> {
-            var2.add(var3x);
-            createExperience(var1, (Integer)var4.getValue(), ((AbstractCookingRecipe)var3x).getExperience());
+   public List<Recipe<?>> getRecipesToAwardAndPopExperience(Level var1, Vec3 var2) {
+      ArrayList var3 = Lists.newArrayList();
+      ObjectIterator var4 = this.recipesUsed.object2IntEntrySet().iterator();
+
+      while(var4.hasNext()) {
+         Object2IntMap.Entry var5 = (Object2IntMap.Entry)var4.next();
+         var1.getRecipeManager().byKey((ResourceLocation)var5.getKey()).ifPresent((var4x) -> {
+            var3.add(var4x);
+            createExperience(var1, var2, var5.getIntValue(), ((AbstractCookingRecipe)var4x).getExperience());
          });
       }
 
-      var1.awardRecipes(var2);
-      this.recipesUsed.clear();
+      return var3;
    }
 
-   private static void createExperience(Player var0, int var1, float var2) {
-      int var3;
-      if (var2 == 0.0F) {
-         var1 = 0;
-      } else if (var2 < 1.0F) {
-         var3 = Mth.floor((float)var1 * var2);
-         if (var3 < Mth.ceil((float)var1 * var2) && Math.random() < (double)((float)var1 * var2 - (float)var3)) {
-            ++var3;
-         }
-
-         var1 = var3;
+   private static void createExperience(Level var0, Vec3 var1, int var2, float var3) {
+      int var4 = Mth.floor((float)var2 * var3);
+      float var5 = Mth.frac((float)var2 * var3);
+      if (var5 != 0.0F && Math.random() < (double)var5) {
+         ++var4;
       }
 
-      while(var1 > 0) {
-         var3 = ExperienceOrb.getExperienceValue(var1);
-         var1 -= var3;
-         var0.level.addFreshEntity(new ExperienceOrb(var0.level, var0.getX(), var0.getY() + 0.5D, var0.getZ() + 0.5D, var3));
+      while(var4 > 0) {
+         int var6 = ExperienceOrb.getExperienceValue(var4);
+         var4 -= var6;
+         var0.addFreshEntity(new ExperienceOrb(var0, var1.x, var1.y, var1.z, var6));
       }
 
    }
 
    public void fillStackedContents(StackedContents var1) {
