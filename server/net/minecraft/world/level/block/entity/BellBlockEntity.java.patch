--- net/minecraft/world/level/block/entity/BellBlockEntity.java
+++ net/minecraft/world/level/block/entity/BellBlockEntity.java
@@ -1,24 +1,25 @@
 package net.minecraft.world.level.block.entity;
 
 import java.util.Iterator;
 import java.util.List;
-import java.util.concurrent.atomic.AtomicInteger;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.core.particles.ParticleTypes;
 import net.minecraft.sounds.SoundEvents;
 import net.minecraft.sounds.SoundSource;
 import net.minecraft.tags.EntityTypeTags;
+import net.minecraft.util.FastColor;
 import net.minecraft.util.Mth;
 import net.minecraft.world.effect.MobEffectInstance;
 import net.minecraft.world.effect.MobEffects;
 import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.ai.memory.MemoryModuleType;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.phys.AABB;
+import org.apache.commons.lang3.mutable.MutableInt;
 
 public class BellBlockEntity extends BlockEntity implements TickableBlockEntity {
    private long lastRingTimestamp;
    public int ticks;
    public boolean shaking;
@@ -131,11 +132,11 @@
    }
 
    private void showBellParticles(Level var1) {
       if (var1.isClientSide) {
          BlockPos var2 = this.getBlockPos();
-         AtomicInteger var3 = new AtomicInteger(16700985);
+         MutableInt var3 = new MutableInt(16700985);
          int var4 = (int)this.nearbyEntities.stream().filter((var1x) -> {
             return var2.closerThan(var1x.position(), 48.0D);
          }).count();
          this.nearbyEntities.stream().filter(this::isRaiderWithinRange).forEach((var4x) -> {
             float var5 = 1.0F;
@@ -143,15 +144,15 @@
             double var7 = (double)((float)var2.getX() + 0.5F) + (double)(1.0F / var6) * (var4x.getX() - (double)var2.getX());
             double var9 = (double)((float)var2.getZ() + 0.5F) + (double)(1.0F / var6) * (var4x.getZ() - (double)var2.getZ());
             int var11 = Mth.clamp((var4 - 21) / -2, 3, 15);
 
             for(int var12 = 0; var12 < var11; ++var12) {
-               var3.addAndGet(5);
-               double var13 = (double)(var3.get() >> 16 & 255) / 255.0D;
-               double var15 = (double)(var3.get() >> 8 & 255) / 255.0D;
-               double var17 = (double)(var3.get() & 255) / 255.0D;
-               var1.addParticle(ParticleTypes.ENTITY_EFFECT, var7, (double)((float)var2.getY() + 0.5F), var9, var13, var15, var17);
+               int var13 = var3.addAndGet(5);
+               double var14 = (double)FastColor.ARGB32.red(var13) / 255.0D;
+               double var16 = (double)FastColor.ARGB32.green(var13) / 255.0D;
+               double var18 = (double)FastColor.ARGB32.blue(var13) / 255.0D;
+               var1.addParticle(ParticleTypes.ENTITY_EFFECT, var7, (double)((float)var2.getY() + 0.5F), var9, var14, var16, var18);
             }
 
          });
       }
    }
