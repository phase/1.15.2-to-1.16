--- net/minecraft/world/level/block/entity/StructureBlockEntity.java
+++ net/minecraft/world/level/block/entity/StructureBlockEntity.java
@@ -81,61 +81,61 @@
       var1.putFloat("integrity", this.integrity);
       var1.putLong("seed", this.seed);
       return var1;
    }
 
-   public void load(CompoundTag var1) {
-      super.load(var1);
-      this.setStructureName(var1.getString("name"));
-      this.author = var1.getString("author");
-      this.metaData = var1.getString("metadata");
-      int var2 = Mth.clamp(var1.getInt("posX"), -32, 32);
-      int var3 = Mth.clamp(var1.getInt("posY"), -32, 32);
-      int var4 = Mth.clamp(var1.getInt("posZ"), -32, 32);
-      this.structurePos = new BlockPos(var2, var3, var4);
-      int var5 = Mth.clamp(var1.getInt("sizeX"), 0, 32);
-      int var6 = Mth.clamp(var1.getInt("sizeY"), 0, 32);
-      int var7 = Mth.clamp(var1.getInt("sizeZ"), 0, 32);
-      this.structureSize = new BlockPos(var5, var6, var7);
+   public void load(BlockState var1, CompoundTag var2) {
+      super.load(var1, var2);
+      this.setStructureName(var2.getString("name"));
+      this.author = var2.getString("author");
+      this.metaData = var2.getString("metadata");
+      int var3 = Mth.clamp(var2.getInt("posX"), -48, 48);
+      int var4 = Mth.clamp(var2.getInt("posY"), -48, 48);
+      int var5 = Mth.clamp(var2.getInt("posZ"), -48, 48);
+      this.structurePos = new BlockPos(var3, var4, var5);
+      int var6 = Mth.clamp(var2.getInt("sizeX"), 0, 48);
+      int var7 = Mth.clamp(var2.getInt("sizeY"), 0, 48);
+      int var8 = Mth.clamp(var2.getInt("sizeZ"), 0, 48);
+      this.structureSize = new BlockPos(var6, var7, var8);
 
       try {
-         this.rotation = Rotation.valueOf(var1.getString("rotation"));
-      } catch (IllegalArgumentException var11) {
+         this.rotation = Rotation.valueOf(var2.getString("rotation"));
+      } catch (IllegalArgumentException var12) {
          this.rotation = Rotation.NONE;
       }
 
       try {
-         this.mirror = Mirror.valueOf(var1.getString("mirror"));
-      } catch (IllegalArgumentException var10) {
+         this.mirror = Mirror.valueOf(var2.getString("mirror"));
+      } catch (IllegalArgumentException var11) {
          this.mirror = Mirror.NONE;
       }
 
       try {
-         this.mode = StructureMode.valueOf(var1.getString("mode"));
-      } catch (IllegalArgumentException var9) {
+         this.mode = StructureMode.valueOf(var2.getString("mode"));
+      } catch (IllegalArgumentException var10) {
          this.mode = StructureMode.DATA;
       }
 
-      this.ignoreEntities = var1.getBoolean("ignoreEntities");
-      this.powered = var1.getBoolean("powered");
-      this.showAir = var1.getBoolean("showair");
-      this.showBoundingBox = var1.getBoolean("showboundingbox");
-      if (var1.contains("integrity")) {
-         this.integrity = var1.getFloat("integrity");
+      this.ignoreEntities = var2.getBoolean("ignoreEntities");
+      this.powered = var2.getBoolean("powered");
+      this.showAir = var2.getBoolean("showair");
+      this.showBoundingBox = var2.getBoolean("showboundingbox");
+      if (var2.contains("integrity")) {
+         this.integrity = var2.getFloat("integrity");
       } else {
          this.integrity = 1.0F;
       }
 
-      this.seed = var1.getLong("seed");
+      this.seed = var2.getLong("seed");
       this.updateBlockState();
    }
 
    private void updateBlockState() {
       if (this.level != null) {
          BlockPos var1 = this.getBlockPos();
          BlockState var2 = this.level.getBlockState(var1);
-         if (var2.getBlock() == Blocks.STRUCTURE_BLOCK) {
+         if (var2.is(Blocks.STRUCTURE_BLOCK)) {
             this.level.setBlock(var1, (BlockState)var2.setValue(StructureBlock.MODE, this.mode), 2);
          }
 
       }
    }
@@ -183,14 +183,10 @@
 
    public void createdBy(LivingEntity var1) {
       this.author = var1.getName().getString();
    }
 
-   public BlockPos getStructurePos() {
-      return this.structurePos;
-   }
-
    public void setStructurePos(BlockPos var1) {
       this.structurePos = var1;
    }
 
    public BlockPos getStructureSize() {
@@ -203,10 +199,14 @@
 
    public void setMirror(Mirror var1) {
       this.mirror = var1;
    }
 
+   public Rotation getRotation() {
+      return this.rotation;
+   }
+
    public void setRotation(Rotation var1) {
       this.rotation = var1;
    }
 
    public void setMetaData(String var1) {
@@ -218,11 +218,11 @@
    }
 
    public void setMode(StructureMode var1) {
       this.mode = var1;
       BlockState var2 = this.level.getBlockState(this.getBlockPos());
-      if (var2.getBlock() == Blocks.STRUCTURE_BLOCK) {
+      if (var2.is(Blocks.STRUCTURE_BLOCK)) {
          this.level.setBlock(this.getBlockPos(), (BlockState)var2.setValue(StructureBlock.MODE, var1), 2);
       }
 
    }
 
@@ -278,11 +278,11 @@
       Iterator var4 = BlockPos.betweenClosed(var1, var2).iterator();
 
       while(var4.hasNext()) {
          BlockPos var5 = (BlockPos)var4.next();
          BlockState var6 = this.level.getBlockState(var5);
-         if (var6.getBlock() == Blocks.STRUCTURE_BLOCK) {
+         if (var6.is(Blocks.STRUCTURE_BLOCK)) {
             BlockEntity var7 = this.level.getBlockEntity(var5);
             if (var7 != null && var7 instanceof StructureBlockEntity) {
                var3.add((StructureBlockEntity)var7);
             }
          }
@@ -358,61 +358,60 @@
       } else {
          return false;
       }
    }
 
-   public boolean loadStructure() {
-      return this.loadStructure(true);
+   public boolean loadStructure(ServerLevel var1) {
+      return this.loadStructure(var1, true);
    }
 
    private static Random createRandom(long var0) {
       return var0 == 0L ? new Random(Util.getMillis()) : new Random(var0);
    }
 
-   public boolean loadStructure(boolean var1) {
-      if (this.mode == StructureMode.LOAD && !this.level.isClientSide && this.structureName != null) {
-         ServerLevel var2 = (ServerLevel)this.level;
-         StructureManager var3 = var2.getStructureManager();
+   public boolean loadStructure(ServerLevel var1, boolean var2) {
+      if (this.mode == StructureMode.LOAD && this.structureName != null) {
+         StructureManager var3 = var1.getStructureManager();
 
          StructureTemplate var4;
          try {
             var4 = var3.get(this.structureName);
          } catch (ResourceLocationException var6) {
             return false;
          }
 
-         return var4 == null ? false : this.loadStructure(var1, var4);
+         return var4 == null ? false : this.loadStructure(var1, var2, var4);
       } else {
          return false;
       }
    }
 
-   public boolean loadStructure(boolean var1, StructureTemplate var2) {
-      BlockPos var3 = this.getBlockPos();
-      if (!StringUtil.isNullOrEmpty(var2.getAuthor())) {
-         this.author = var2.getAuthor();
+   public boolean loadStructure(ServerLevel var1, boolean var2, StructureTemplate var3) {
+      BlockPos var4 = this.getBlockPos();
+      if (!StringUtil.isNullOrEmpty(var3.getAuthor())) {
+         this.author = var3.getAuthor();
       }
 
-      BlockPos var4 = var2.getSize();
-      boolean var5 = this.structureSize.equals(var4);
-      if (!var5) {
-         this.structureSize = var4;
+      BlockPos var5 = var3.getSize();
+      boolean var6 = this.structureSize.equals(var5);
+      if (!var6) {
+         this.structureSize = var5;
          this.setChanged();
-         BlockState var6 = this.level.getBlockState(var3);
-         this.level.sendBlockUpdated(var3, var6, var6, 3);
+         BlockState var7 = var1.getBlockState(var4);
+         var1.sendBlockUpdated(var4, var7, var7, 3);
       }
 
-      if (var1 && !var5) {
+      if (var2 && !var6) {
          return false;
       } else {
-         StructurePlaceSettings var8 = (new StructurePlaceSettings()).setMirror(this.mirror).setRotation(this.rotation).setIgnoreEntities(this.ignoreEntities).setChunkPos((ChunkPos)null);
+         StructurePlaceSettings var9 = (new StructurePlaceSettings()).setMirror(this.mirror).setRotation(this.rotation).setIgnoreEntities(this.ignoreEntities).setChunkPos((ChunkPos)null);
          if (this.integrity < 1.0F) {
-            var8.clearProcessors().addProcessor(new BlockRotProcessor(Mth.clamp(this.integrity, 0.0F, 1.0F))).setRandom(createRandom(this.seed));
+            var9.clearProcessors().addProcessor(new BlockRotProcessor(Mth.clamp(this.integrity, 0.0F, 1.0F))).setRandom(createRandom(this.seed));
          }
 
-         BlockPos var7 = var3.offset(this.structurePos);
-         var2.placeInWorldChunk(this.level, var7, var8);
+         BlockPos var8 = var4.offset(this.structurePos);
+         var3.placeInWorldChunk(var1, var8, var9, createRandom(this.seed));
          return true;
       }
    }
 
    public void unloadStructure() {
