--- net/minecraft/world/level/block/state/properties/Property.java
+++ net/minecraft/world/level/block/state/properties/Property.java
@@ -1,16 +1,74 @@
 package net.minecraft.world.level.block.state.properties;
 
+import com.google.common.base.MoreObjects;
+import com.mojang.serialization.Codec;
+import com.mojang.serialization.DataResult;
+import com.mojang.serialization.DynamicOps;
 import java.util.Collection;
 import java.util.Optional;
+import net.minecraft.world.level.block.state.StateHolder;
 
-public interface Property<T extends Comparable<T>> {
-   String getName();
+public abstract class Property<T extends Comparable<T>> {
+   private final Class<T> clazz;
+   private final String name;
+   private Integer hashCode;
+   private final Codec<T> codec;
 
-   Collection<T> getPossibleValues();
+   protected Property(String var1, Class<T> var2) {
+      this.codec = Codec.STRING.comapFlatMap((var1x) -> {
+         return (DataResult)this.getValue(var1x).map(DataResult::success).orElseGet(() -> {
+            return DataResult.error("Unable to read property: " + this + " with value: " + var1x);
+         });
+      }, this::getName);
+      this.clazz = var2;
+      this.name = var1;
+   }
 
-   Class<T> getValueClass();
+   public String getName() {
+      return this.name;
+   }
 
-   Optional<T> getValue(String var1);
+   public Class<T> getValueClass() {
+      return this.clazz;
+   }
 
-   String getName(T var1);
+   public abstract Collection<T> getPossibleValues();
+
+   public abstract String getName(T var1);
+
+   public abstract Optional<T> getValue(String var1);
+
+   public String toString() {
+      return MoreObjects.toStringHelper((Object)this).add("name", this.name).add("clazz", this.clazz).add("values", this.getPossibleValues()).toString();
+   }
+
+   public boolean equals(Object var1) {
+      if (this == var1) {
+         return true;
+      } else if (!(var1 instanceof Property)) {
+         return false;
+      } else {
+         Property var2 = (Property)var1;
+         return this.clazz.equals(var2.clazz) && this.name.equals(var2.name);
+      }
+   }
+
+   public final int hashCode() {
+      if (this.hashCode == null) {
+         this.hashCode = this.generateHashCode();
+      }
+
+      return this.hashCode;
+   }
+
+   public int generateHashCode() {
+      return 31 * this.clazz.hashCode() + this.name.hashCode();
+   }
+
+   public <U, S extends StateHolder<?, S>> DataResult<S> parseValue(DynamicOps<U> var1, S var2, U var3) {
+      DataResult var4 = this.codec.parse(var1, var3);
+      return var4.map((var2x) -> {
+         return (StateHolder)var2.setValue(this, var2x);
+      }).setPartial((Object)var2);
+   }
 }
