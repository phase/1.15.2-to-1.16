--- net/minecraft/world/level/block/BaseRailBlock.java
+++ net/minecraft/world/level/block/BaseRailBlock.java
@@ -5,10 +5,11 @@
 import net.minecraft.tags.BlockTags;
 import net.minecraft.world.item.BlockPlaceContext;
 import net.minecraft.world.level.BlockGetter;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.LevelReader;
+import net.minecraft.world.level.block.state.BlockBehaviour;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.block.state.properties.Property;
 import net.minecraft.world.level.block.state.properties.RailShape;
 import net.minecraft.world.level.material.PushReaction;
 import net.minecraft.world.phys.shapes.CollisionContext;
@@ -22,71 +23,50 @@
    public static boolean isRail(Level var0, BlockPos var1) {
       return isRail(var0.getBlockState(var1));
    }
 
    public static boolean isRail(BlockState var0) {
-      return var0.is(BlockTags.RAILS);
+      return var0.is(BlockTags.RAILS) && var0.getBlock() instanceof BaseRailBlock;
    }
 
-   protected BaseRailBlock(boolean var1, Block.Properties var2) {
+   protected BaseRailBlock(boolean var1, BlockBehaviour.Properties var2) {
       super(var2);
       this.isStraight = var1;
    }
 
    public boolean isStraight() {
       return this.isStraight;
    }
 
    public VoxelShape getShape(BlockState var1, BlockGetter var2, BlockPos var3, CollisionContext var4) {
-      RailShape var5 = var1.getBlock() == this ? (RailShape)var1.getValue(this.getShapeProperty()) : null;
+      RailShape var5 = var1.is(this) ? (RailShape)var1.getValue(this.getShapeProperty()) : null;
       return var5 != null && var5.isAscending() ? HALF_BLOCK_AABB : FLAT_AABB;
    }
 
    public boolean canSurvive(BlockState var1, LevelReader var2, BlockPos var3) {
       return canSupportRigidBlock(var2, var3.below());
    }
 
    public void onPlace(BlockState var1, Level var2, BlockPos var3, BlockState var4, boolean var5) {
-      if (var4.getBlock() != var1.getBlock()) {
-         var1 = this.updateDir(var2, var3, var1, true);
-         if (this.isStraight) {
-            var1.neighborChanged(var2, var3, this, var3, var5);
-         }
+      if (!var4.is(var1.getBlock())) {
+         this.updateState(var1, var2, var3, var5);
+      }
+   }
 
+   protected BlockState updateState(BlockState var1, Level var2, BlockPos var3, boolean var4) {
+      var1 = this.updateDir(var2, var3, var1, true);
+      if (this.isStraight) {
+         var1.neighborChanged(var2, var3, this, var3, var4);
       }
+
+      return var1;
    }
 
    public void neighborChanged(BlockState var1, Level var2, BlockPos var3, Block var4, BlockPos var5, boolean var6) {
       if (!var2.isClientSide) {
          RailShape var7 = (RailShape)var1.getValue(this.getShapeProperty());
-         boolean var8 = false;
-         BlockPos var9 = var3.below();
-         if (!canSupportRigidBlock(var2, var9)) {
-            var8 = true;
-         }
-
-         BlockPos var10 = var3.east();
-         if (var7 == RailShape.ASCENDING_EAST && !canSupportRigidBlock(var2, var10)) {
-            var8 = true;
-         } else {
-            BlockPos var11 = var3.west();
-            if (var7 == RailShape.ASCENDING_WEST && !canSupportRigidBlock(var2, var11)) {
-               var8 = true;
-            } else {
-               BlockPos var12 = var3.north();
-               if (var7 == RailShape.ASCENDING_NORTH && !canSupportRigidBlock(var2, var12)) {
-                  var8 = true;
-               } else {
-                  BlockPos var13 = var3.south();
-                  if (var7 == RailShape.ASCENDING_SOUTH && !canSupportRigidBlock(var2, var13)) {
-                     var8 = true;
-                  }
-               }
-            }
-         }
-
-         if (var8 && !var2.isEmptyBlock(var3)) {
+         if (shouldBeRemoved(var3, var2, var7) && !var2.isEmptyBlock(var3)) {
             if (!var6) {
                dropResources(var1, var2, var3);
             }
 
             var2.removeBlock(var3, var6);
@@ -95,10 +75,29 @@
          }
 
       }
    }
 
+   private static boolean shouldBeRemoved(BlockPos var0, Level var1, RailShape var2) {
+      if (!canSupportRigidBlock(var1, var0.below())) {
+         return true;
+      } else {
+         switch(var2) {
+         case ASCENDING_EAST:
+            return !canSupportRigidBlock(var1, var0.east());
+         case ASCENDING_WEST:
+            return !canSupportRigidBlock(var1, var0.west());
+         case ASCENDING_NORTH:
+            return !canSupportRigidBlock(var1, var0.north());
+         case ASCENDING_SOUTH:
+            return !canSupportRigidBlock(var1, var0.south());
+         default:
+            return false;
+         }
+      }
+   }
+
    protected void updateState(BlockState var1, Level var2, BlockPos var3, Block var4) {
    }
 
    protected BlockState updateDir(Level var1, BlockPos var2, BlockState var3, boolean var4) {
       if (var1.isClientSide) {
