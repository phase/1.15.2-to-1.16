--- net/minecraft/world/level/block/HugeMushroomBlock.java
+++ net/minecraft/world/level/block/HugeMushroomBlock.java
@@ -1,13 +1,14 @@
 package net.minecraft.world.level.block;
 
 import java.util.Map;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
-import net.minecraft.world.item.BlockPlaceContext;
+import net.minecraft.world.item.context.BlockPlaceContext;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.LevelAccessor;
+import net.minecraft.world.level.block.state.BlockBehaviour;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.block.state.StateDefinition;
 import net.minecraft.world.level.block.state.properties.BooleanProperty;
 import net.minecraft.world.level.block.state.properties.Property;
 
@@ -18,11 +19,11 @@
    public static final BooleanProperty WEST;
    public static final BooleanProperty UP;
    public static final BooleanProperty DOWN;
    private static final Map<Direction, BooleanProperty> PROPERTY_BY_DIRECTION;
 
-   public HugeMushroomBlock(Block.Properties var1) {
+   public HugeMushroomBlock(BlockBehaviour.Properties var1) {
       super(var1);
       this.registerDefaultState((BlockState)((BlockState)((BlockState)((BlockState)((BlockState)((BlockState)((BlockState)this.stateDefinition.any()).setValue(NORTH, true)).setValue(EAST, true)).setValue(SOUTH, true)).setValue(WEST, true)).setValue(UP, true)).setValue(DOWN, true));
    }
 
    public BlockState getStateForPlacement(BlockPlaceContext var1) {
@@ -30,11 +31,11 @@
       BlockPos var3 = var1.getClickedPos();
       return (BlockState)((BlockState)((BlockState)((BlockState)((BlockState)((BlockState)this.defaultBlockState().setValue(DOWN, this != var2.getBlockState(var3.below()).getBlock())).setValue(UP, this != var2.getBlockState(var3.above()).getBlock())).setValue(NORTH, this != var2.getBlockState(var3.north()).getBlock())).setValue(EAST, this != var2.getBlockState(var3.east()).getBlock())).setValue(SOUTH, this != var2.getBlockState(var3.south()).getBlock())).setValue(WEST, this != var2.getBlockState(var3.west()).getBlock());
    }
 
    public BlockState updateShape(BlockState var1, Direction var2, BlockState var3, LevelAccessor var4, BlockPos var5, BlockPos var6) {
-      return var3.getBlock() == this ? (BlockState)var1.setValue((Property)PROPERTY_BY_DIRECTION.get(var2), false) : super.updateShape(var1, var2, var3, var4, var5, var6);
+      return var3.is(this) ? (BlockState)var1.setValue((Property)PROPERTY_BY_DIRECTION.get(var2), false) : super.updateShape(var1, var2, var3, var4, var5, var6);
    }
 
    public BlockState rotate(BlockState var1, Rotation var2) {
       return (BlockState)((BlockState)((BlockState)((BlockState)((BlockState)((BlockState)var1.setValue((Property)PROPERTY_BY_DIRECTION.get(var2.rotate(Direction.NORTH)), var1.getValue(NORTH))).setValue((Property)PROPERTY_BY_DIRECTION.get(var2.rotate(Direction.SOUTH)), var1.getValue(SOUTH))).setValue((Property)PROPERTY_BY_DIRECTION.get(var2.rotate(Direction.EAST)), var1.getValue(EAST))).setValue((Property)PROPERTY_BY_DIRECTION.get(var2.rotate(Direction.WEST)), var1.getValue(WEST))).setValue((Property)PROPERTY_BY_DIRECTION.get(var2.rotate(Direction.UP)), var1.getValue(UP))).setValue((Property)PROPERTY_BY_DIRECTION.get(var2.rotate(Direction.DOWN)), var1.getValue(DOWN));
    }
