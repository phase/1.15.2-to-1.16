--- net/minecraft/world/level/block/piston/PistonHeadBlock.java
+++ net/minecraft/world/level/block/piston/PistonHeadBlock.java
@@ -10,10 +10,11 @@
 import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.DirectionalBlock;
 import net.minecraft.world.level.block.Mirror;
 import net.minecraft.world.level.block.Rotation;
+import net.minecraft.world.level.block.state.BlockBehaviour;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.block.state.StateDefinition;
 import net.minecraft.world.level.block.state.properties.BlockStateProperties;
 import net.minecraft.world.level.block.state.properties.BooleanProperty;
 import net.minecraft.world.level.block.state.properties.EnumProperty;
@@ -43,11 +44,11 @@
    protected static final VoxelShape SHORT_SOUTH_ARM_AABB;
    protected static final VoxelShape SHORT_NORTH_ARM_AABB;
    protected static final VoxelShape SHORT_EAST_ARM_AABB;
    protected static final VoxelShape SHORT_WEST_ARM_AABB;
 
-   public PistonHeadBlock(Block.Properties var1) {
+   public PistonHeadBlock(BlockBehaviour.Properties var1) {
       super(var1);
       this.registerDefaultState((BlockState)((BlockState)((BlockState)((BlockState)this.stateDefinition.any()).setValue(FACING, Direction.NORTH)).setValue(TYPE, PistonType.DEFAULT)).setValue(SHORT, false));
    }
 
    private VoxelShape getBaseShape(BlockState var1) {
@@ -93,43 +94,44 @@
       case EAST:
          return var2 ? SHORT_EAST_ARM_AABB : EAST_ARM_AABB;
       }
    }
 
+   private boolean isFittingBase(BlockState var1, BlockState var2) {
+      Block var3 = var1.getValue(TYPE) == PistonType.DEFAULT ? Blocks.PISTON : Blocks.STICKY_PISTON;
+      return var2.is(var3) && (Boolean)var2.getValue(PistonBaseBlock.EXTENDED) && var2.getValue(FACING) == var1.getValue(FACING);
+   }
+
    public void playerWillDestroy(Level var1, BlockPos var2, BlockState var3, Player var4) {
       if (!var1.isClientSide && var4.abilities.instabuild) {
          BlockPos var5 = var2.relative(((Direction)var3.getValue(FACING)).getOpposite());
-         Block var6 = var1.getBlockState(var5).getBlock();
-         if (var6 == Blocks.PISTON || var6 == Blocks.STICKY_PISTON) {
-            var1.removeBlock(var5, false);
+         if (this.isFittingBase(var3, var1.getBlockState(var5))) {
+            var1.destroyBlock(var5, false);
          }
       }
 
       super.playerWillDestroy(var1, var2, var3, var4);
    }
 
    public void onRemove(BlockState var1, Level var2, BlockPos var3, BlockState var4, boolean var5) {
-      if (var1.getBlock() != var4.getBlock()) {
+      if (!var1.is(var4.getBlock())) {
          super.onRemove(var1, var2, var3, var4, var5);
-         Direction var6 = ((Direction)var1.getValue(FACING)).getOpposite();
-         var3 = var3.relative(var6);
-         BlockState var7 = var2.getBlockState(var3);
-         if ((var7.getBlock() == Blocks.PISTON || var7.getBlock() == Blocks.STICKY_PISTON) && (Boolean)var7.getValue(PistonBaseBlock.EXTENDED)) {
-            dropResources(var7, var2, var3);
-            var2.removeBlock(var3, false);
+         BlockPos var6 = var3.relative(((Direction)var1.getValue(FACING)).getOpposite());
+         if (this.isFittingBase(var1, var2.getBlockState(var6))) {
+            var2.destroyBlock(var6, true);
          }
 
       }
    }
 
    public BlockState updateShape(BlockState var1, Direction var2, BlockState var3, LevelAccessor var4, BlockPos var5, BlockPos var6) {
       return var2.getOpposite() == var1.getValue(FACING) && !var1.canSurvive(var4, var5) ? Blocks.AIR.defaultBlockState() : super.updateShape(var1, var2, var3, var4, var5, var6);
    }
 
    public boolean canSurvive(BlockState var1, LevelReader var2, BlockPos var3) {
-      Block var4 = var2.getBlockState(var3.relative(((Direction)var1.getValue(FACING)).getOpposite())).getBlock();
-      return var4 == Blocks.PISTON || var4 == Blocks.STICKY_PISTON || var4 == Blocks.MOVING_PISTON;
+      BlockState var4 = var2.getBlockState(var3.relative(((Direction)var1.getValue(FACING)).getOpposite()));
+      return this.isFittingBase(var1, var4) || var4.is(Blocks.MOVING_PISTON) && var4.getValue(FACING) == var1.getValue(FACING);
    }
 
    public void neighborChanged(BlockState var1, Level var2, BlockPos var3, Block var4, BlockPos var5, boolean var6) {
       if (var1.canSurvive(var2, var3)) {
          BlockPos var7 = var3.relative(((Direction)var1.getValue(FACING)).getOpposite());
