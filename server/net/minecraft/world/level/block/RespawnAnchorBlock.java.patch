--- net/minecraft/world/level/block/RespawnAnchorBlock.java
+++ net/minecraft/world/level/block/RespawnAnchorBlock.java
@@ -1,0 +1,133 @@
+package net.minecraft.world.level.block;
+
+import java.util.Iterator;
+import java.util.Optional;
+import net.minecraft.core.BlockPos;
+import net.minecraft.server.level.ServerPlayer;
+import net.minecraft.sounds.SoundEvents;
+import net.minecraft.sounds.SoundSource;
+import net.minecraft.util.Mth;
+import net.minecraft.world.InteractionHand;
+import net.minecraft.world.InteractionResult;
+import net.minecraft.world.damagesource.DamageSource;
+import net.minecraft.world.entity.Entity;
+import net.minecraft.world.entity.EntityType;
+import net.minecraft.world.entity.player.Player;
+import net.minecraft.world.item.ItemStack;
+import net.minecraft.world.item.Items;
+import net.minecraft.world.level.BlockGetter;
+import net.minecraft.world.level.Explosion;
+import net.minecraft.world.level.Level;
+import net.minecraft.world.level.LevelReader;
+import net.minecraft.world.level.block.state.BlockBehaviour;
+import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.block.state.StateDefinition;
+import net.minecraft.world.level.block.state.properties.BlockStateProperties;
+import net.minecraft.world.level.block.state.properties.IntegerProperty;
+import net.minecraft.world.level.pathfinder.PathComputationType;
+import net.minecraft.world.phys.BlockHitResult;
+import net.minecraft.world.phys.Vec3;
+
+public class RespawnAnchorBlock extends Block {
+   public static final IntegerProperty CHARGE;
+
+   public RespawnAnchorBlock(BlockBehaviour.Properties var1) {
+      super(var1);
+      this.registerDefaultState((BlockState)((BlockState)this.stateDefinition.any()).setValue(CHARGE, 0));
+   }
+
+   public InteractionResult use(BlockState var1, Level var2, BlockPos var3, Player var4, InteractionHand var5, BlockHitResult var6) {
+      ItemStack var7 = var4.getItemInHand(var5);
+      if (var5 == InteractionHand.MAIN_HAND && !isRespawnFuel(var7) && isRespawnFuel(var4.getItemInHand(InteractionHand.OFF_HAND))) {
+         return InteractionResult.PASS;
+      } else if (isRespawnFuel(var7) && canBeCharged(var1)) {
+         charge(var2, var3, var1);
+         if (!var4.abilities.instabuild) {
+            var7.shrink(1);
+         }
+
+         return InteractionResult.sidedSuccess(var2.isClientSide);
+      } else if ((Integer)var1.getValue(CHARGE) == 0) {
+         return InteractionResult.PASS;
+      } else if (!canSetSpawn(var2)) {
+         if (!var2.isClientSide) {
+            var2.removeBlock(var3, false);
+            var2.explode((Entity)null, DamageSource.badRespawnPointExplosion(), (double)var3.getX() + 0.5D, (double)var3.getY() + 0.5D, (double)var3.getZ() + 0.5D, 5.0F, true, Explosion.BlockInteraction.DESTROY);
+         }
+
+         return InteractionResult.sidedSuccess(var2.isClientSide);
+      } else {
+         if (!var2.isClientSide) {
+            ServerPlayer var8 = (ServerPlayer)var4;
+            if (var8.getRespawnDimension() != var2.dimension() || !var8.getRespawnPosition().equals(var3)) {
+               var8.setRespawnPosition(var2.dimension(), var3, false, true);
+               var2.playSound((Player)null, (double)var3.getX() + 0.5D, (double)var3.getY() + 0.5D, (double)var3.getZ() + 0.5D, SoundEvents.RESPAWN_ANCHOR_SET_SPAWN, SoundSource.BLOCKS, 1.0F, 1.0F);
+               return InteractionResult.SUCCESS;
+            }
+         }
+
+         return canBeCharged(var1) ? InteractionResult.PASS : InteractionResult.CONSUME;
+      }
+   }
+
+   private static boolean isRespawnFuel(ItemStack var0) {
+      return var0.getItem() == Items.GLOWSTONE;
+   }
+
+   private static boolean canBeCharged(BlockState var0) {
+      return (Integer)var0.getValue(CHARGE) < 4;
+   }
+
+   public static boolean canSetSpawn(Level var0) {
+      return var0.dimensionType().isNether();
+   }
+
+   public static void charge(Level var0, BlockPos var1, BlockState var2) {
+      var0.setBlock(var1, (BlockState)var2.setValue(CHARGE, (Integer)var2.getValue(CHARGE) + 1), 3);
+      var0.playSound((Player)null, (double)var1.getX() + 0.5D, (double)var1.getY() + 0.5D, (double)var1.getZ() + 0.5D, SoundEvents.RESPAWN_ANCHOR_CHARGE, SoundSource.BLOCKS, 1.0F, 1.0F);
+   }
+
+   protected void createBlockStateDefinition(StateDefinition.Builder<Block, BlockState> var1) {
+      var1.add(CHARGE);
+   }
+
+   public boolean hasAnalogOutputSignal(BlockState var1) {
+      return true;
+   }
+
+   public static int getScaledChargeLevel(BlockState var0, int var1) {
+      return Mth.floor((float)((Integer)var0.getValue(CHARGE) - 0) / 4.0F * (float)var1);
+   }
+
+   public int getAnalogOutputSignal(BlockState var1, Level var2, BlockPos var3) {
+      return getScaledChargeLevel(var1, 15);
+   }
+
+   public static Optional<Vec3> findStandUpPosition(EntityType<?> var0, LevelReader var1, BlockPos var2) {
+      Iterator var3 = BlockPos.betweenClosed(var2.offset(-1, -1, -1), var2.offset(1, 1, 1)).iterator();
+
+      Optional var5;
+      do {
+         if (!var3.hasNext()) {
+            return Optional.empty();
+         }
+
+         BlockPos var4 = (BlockPos)var3.next();
+         var5 = BedBlock.getStandingLocationAtOrBelow(var0, var1, var4);
+      } while(!var5.isPresent());
+
+      return var5;
+   }
+
+   public boolean useShapeForLightOcclusion(BlockState var1) {
+      return true;
+   }
+
+   public boolean isPathfindable(BlockState var1, BlockGetter var2, BlockPos var3, PathComputationType var4) {
+      return false;
+   }
+
+   static {
+      CHARGE = BlockStateProperties.RESPAWN_ANCHOR_CHARGES;
+   }
+}
