--- net/minecraft/world/level/block/EndRodBlock.java
+++ net/minecraft/world/level/block/EndRodBlock.java
@@ -2,22 +2,24 @@
 
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.world.item.BlockPlaceContext;
 import net.minecraft.world.level.BlockGetter;
+import net.minecraft.world.level.block.state.BlockBehaviour;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.block.state.StateDefinition;
 import net.minecraft.world.level.material.PushReaction;
+import net.minecraft.world.level.pathfinder.PathComputationType;
 import net.minecraft.world.phys.shapes.CollisionContext;
 import net.minecraft.world.phys.shapes.VoxelShape;
 
 public class EndRodBlock extends DirectionalBlock {
    protected static final VoxelShape Y_AXIS_AABB = Block.box(6.0D, 0.0D, 6.0D, 10.0D, 16.0D, 10.0D);
    protected static final VoxelShape Z_AXIS_AABB = Block.box(6.0D, 6.0D, 0.0D, 10.0D, 10.0D, 16.0D);
    protected static final VoxelShape X_AXIS_AABB = Block.box(0.0D, 6.0D, 6.0D, 16.0D, 10.0D, 10.0D);
 
-   protected EndRodBlock(Block.Properties var1) {
+   protected EndRodBlock(BlockBehaviour.Properties var1) {
       super(var1);
       this.registerDefaultState((BlockState)((BlockState)this.stateDefinition.any()).setValue(FACING, Direction.UP));
    }
 
    public BlockState rotate(BlockState var1, Rotation var2) {
@@ -41,16 +43,20 @@
    }
 
    public BlockState getStateForPlacement(BlockPlaceContext var1) {
       Direction var2 = var1.getClickedFace();
       BlockState var3 = var1.getLevel().getBlockState(var1.getClickedPos().relative(var2.getOpposite()));
-      return var3.getBlock() == this && var3.getValue(FACING) == var2 ? (BlockState)this.defaultBlockState().setValue(FACING, var2.getOpposite()) : (BlockState)this.defaultBlockState().setValue(FACING, var2);
+      return var3.is(this) && var3.getValue(FACING) == var2 ? (BlockState)this.defaultBlockState().setValue(FACING, var2.getOpposite()) : (BlockState)this.defaultBlockState().setValue(FACING, var2);
    }
 
    protected void createBlockStateDefinition(StateDefinition.Builder<Block, BlockState> var1) {
       var1.add(FACING);
    }
 
    public PushReaction getPistonPushReaction(BlockState var1) {
       return PushReaction.NORMAL;
    }
+
+   public boolean isPathfindable(BlockState var1, BlockGetter var2, BlockPos var3, PathComputationType var4) {
+      return false;
+   }
 }
