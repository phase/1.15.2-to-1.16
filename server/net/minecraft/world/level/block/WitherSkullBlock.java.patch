--- net/minecraft/world/level/block/WitherSkullBlock.java
+++ net/minecraft/world/level/block/WitherSkullBlock.java
@@ -4,19 +4,21 @@
 import javax.annotation.Nullable;
 import net.minecraft.advancements.CriteriaTriggers;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.server.level.ServerPlayer;
+import net.minecraft.tags.BlockTags;
 import net.minecraft.world.Difficulty;
 import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.boss.wither.WitherBoss;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.Items;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.block.entity.BlockEntity;
 import net.minecraft.world.level.block.entity.SkullBlockEntity;
+import net.minecraft.world.level.block.state.BlockBehaviour;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.block.state.pattern.BlockInWorld;
 import net.minecraft.world.level.block.state.pattern.BlockPattern;
 import net.minecraft.world.level.block.state.pattern.BlockPatternBuilder;
 import net.minecraft.world.level.block.state.predicate.BlockMaterialPredicate;
@@ -27,11 +29,11 @@
    @Nullable
    private static BlockPattern witherPatternFull;
    @Nullable
    private static BlockPattern witherPatternBase;
 
-   protected WitherSkullBlock(Block.Properties var1) {
+   protected WitherSkullBlock(BlockBehaviour.Properties var1) {
       super(SkullBlock.Types.WITHER_SKELETON, var1);
    }
 
    public void setPlacedBy(Level var1, BlockPos var2, BlockState var3, @Nullable LivingEntity var4, ItemStack var5) {
       super.setPlacedBy(var1, var2, var3, var4, var5);
@@ -42,13 +44,13 @@
 
    }
 
    public static void checkSpawn(Level var0, BlockPos var1, SkullBlockEntity var2) {
       if (!var0.isClientSide) {
-         Block var3 = var2.getBlockState().getBlock();
-         boolean var4 = var3 == Blocks.WITHER_SKELETON_SKULL || var3 == Blocks.WITHER_SKELETON_WALL_SKULL;
-         if (var4 && var1.getY() >= 2 && var0.getDifficulty() != Difficulty.PEACEFUL) {
+         BlockState var3 = var2.getBlockState();
+         boolean var4 = var3.is(Blocks.WITHER_SKELETON_SKULL) || var3.is(Blocks.WITHER_SKELETON_WALL_SKULL);
+         if (var4 && var1.getY() >= 0 && var0.getDifficulty() != Difficulty.PEACEFUL) {
             BlockPattern var5 = getOrCreateWitherFull();
             BlockPattern.BlockPatternMatch var6 = var5.find(var0, var1);
             if (var6 != null) {
                for(int var7 = 0; var7 < var5.getWidth(); ++var7) {
                   for(int var8 = 0; var8 < var5.getHeight(); ++var8) {
@@ -91,19 +93,23 @@
       }
    }
 
    private static BlockPattern getOrCreateWitherFull() {
       if (witherPatternFull == null) {
-         witherPatternFull = BlockPatternBuilder.start().aisle("^^^", "###", "~#~").where('#', BlockInWorld.hasState(BlockStatePredicate.forBlock(Blocks.SOUL_SAND))).where('^', BlockInWorld.hasState(BlockStatePredicate.forBlock(Blocks.WITHER_SKELETON_SKULL).or(BlockStatePredicate.forBlock(Blocks.WITHER_SKELETON_WALL_SKULL)))).where('~', BlockInWorld.hasState(BlockMaterialPredicate.forMaterial(Material.AIR))).build();
+         witherPatternFull = BlockPatternBuilder.start().aisle("^^^", "###", "~#~").where('#', (var0) -> {
+            return var0.getState().is(BlockTags.WITHER_SUMMON_BASE_BLOCKS);
+         }).where('^', BlockInWorld.hasState(BlockStatePredicate.forBlock(Blocks.WITHER_SKELETON_SKULL).or(BlockStatePredicate.forBlock(Blocks.WITHER_SKELETON_WALL_SKULL)))).where('~', BlockInWorld.hasState(BlockMaterialPredicate.forMaterial(Material.AIR))).build();
       }
 
       return witherPatternFull;
    }
 
    private static BlockPattern getOrCreateWitherBase() {
       if (witherPatternBase == null) {
-         witherPatternBase = BlockPatternBuilder.start().aisle("   ", "###", "~#~").where('#', BlockInWorld.hasState(BlockStatePredicate.forBlock(Blocks.SOUL_SAND))).where('~', BlockInWorld.hasState(BlockMaterialPredicate.forMaterial(Material.AIR))).build();
+         witherPatternBase = BlockPatternBuilder.start().aisle("   ", "###", "~#~").where('#', (var0) -> {
+            return var0.getState().is(BlockTags.WITHER_SUMMON_BASE_BLOCKS);
+         }).where('~', BlockInWorld.hasState(BlockMaterialPredicate.forMaterial(Material.AIR))).build();
       }
 
       return witherPatternBase;
    }
 }
