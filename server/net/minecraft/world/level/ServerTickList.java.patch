--- net/minecraft/world/level/ServerTickList.java
+++ net/minecraft/world/level/ServerTickList.java
@@ -11,11 +11,10 @@
 import java.util.Set;
 import java.util.TreeSet;
 import java.util.function.Consumer;
 import java.util.function.Function;
 import java.util.function.Predicate;
-import java.util.stream.Stream;
 import javax.annotation.Nullable;
 import net.minecraft.CrashReport;
 import net.minecraft.CrashReportCategory;
 import net.minecraft.ReportedException;
 import net.minecraft.core.BlockPos;
@@ -28,24 +27,22 @@
 import net.minecraft.world.level.levelgen.structure.BoundingBox;
 
 public class ServerTickList<T> implements TickList<T> {
    protected final Predicate<T> ignore;
    private final Function<T, ResourceLocation> toId;
-   private final Function<ResourceLocation, T> fromId;
    private final Set<TickNextTickData<T>> tickNextTickSet = Sets.newHashSet();
    private final TreeSet<TickNextTickData<T>> tickNextTickList = Sets.newTreeSet(TickNextTickData.createTimeComparator());
    private final ServerLevel level;
    private final Queue<TickNextTickData<T>> currentlyTicking = Queues.newArrayDeque();
    private final List<TickNextTickData<T>> alreadyTicked = Lists.newArrayList();
    private final Consumer<TickNextTickData<T>> ticker;
 
-   public ServerTickList(ServerLevel var1, Predicate<T> var2, Function<T, ResourceLocation> var3, Function<ResourceLocation, T> var4, Consumer<TickNextTickData<T>> var5) {
+   public ServerTickList(ServerLevel var1, Predicate<T> var2, Function<T, ResourceLocation> var3, Consumer<TickNextTickData<T>> var4) {
       this.ignore = var2;
       this.toId = var3;
-      this.fromId = var4;
       this.level = var1;
-      this.ticker = var5;
+      this.ticker = var4;
    }
 
    public void tick() {
       int var1 = this.tickNextTickList.size();
       if (var1 != this.tickNextTickSet.size()) {
@@ -60,11 +57,11 @@
          this.level.getProfiler().push("cleaning");
 
          TickNextTickData var4;
          while(var1 > 0 && var3.hasNext()) {
             var4 = (TickNextTickData)var3.next();
-            if (var4.delay > this.level.getGameTime()) {
+            if (var4.triggerTick > this.level.getGameTime()) {
                break;
             }
 
             if (var2.isTickingChunk(var4.pos)) {
                var3.remove();
@@ -100,14 +97,10 @@
 
    public boolean willTickThisTick(BlockPos var1, T var2) {
       return this.currentlyTicking.contains(new TickNextTickData(var1, var2));
    }
 
-   public void addAll(Stream<TickNextTickData<T>> var1) {
-      var1.forEach(this::addTickData);
-   }
-
    public List<TickNextTickData<T>> fetchTicksInChunk(ChunkPos var1, boolean var2, boolean var3) {
       int var4 = (var1.x << 4) - 2;
       int var5 = var4 + 16 + 2;
       int var6 = (var1.z << 4) - 2;
       int var7 = var6 + 16 + 2;
@@ -158,33 +151,33 @@
       while(var4.hasNext()) {
          TickNextTickData var5 = (TickNextTickData)var4.next();
          if (var1.isInside(var5.pos)) {
             BlockPos var6 = var5.pos.offset(var2);
             Object var7 = var5.getType();
-            this.addTickData(new TickNextTickData(var6, var7, var5.delay, var5.priority));
+            this.addTickData(new TickNextTickData(var6, var7, var5.triggerTick, var5.priority));
          }
       }
 
    }
 
    public ListTag save(ChunkPos var1) {
       List var2 = this.fetchTicksInChunk(var1, false, true);
       return saveTickList(this.toId, var2, this.level.getGameTime());
    }
 
-   public static <T> ListTag saveTickList(Function<T, ResourceLocation> var0, Iterable<TickNextTickData<T>> var1, long var2) {
+   private static <T> ListTag saveTickList(Function<T, ResourceLocation> var0, Iterable<TickNextTickData<T>> var1, long var2) {
       ListTag var4 = new ListTag();
       Iterator var5 = var1.iterator();
 
       while(var5.hasNext()) {
          TickNextTickData var6 = (TickNextTickData)var5.next();
          CompoundTag var7 = new CompoundTag();
          var7.putString("i", ((ResourceLocation)var0.apply(var6.getType())).toString());
          var7.putInt("x", var6.pos.getX());
          var7.putInt("y", var6.pos.getY());
          var7.putInt("z", var6.pos.getZ());
-         var7.putInt("t", (int)(var6.delay - var2));
+         var7.putInt("t", (int)(var6.triggerTick - var2));
          var7.putInt("p", var6.priority.getValue());
          var4.add(var7);
       }
 
       return var4;
