--- net/minecraft/world/level/levelgen/feature/SpikeFeature.java
+++ net/minecraft/world/level/levelgen/feature/SpikeFeature.java
@@ -1,61 +1,61 @@
 package net.minecraft.world.level.levelgen.feature;
 
 import com.google.common.cache.CacheBuilder;
 import com.google.common.cache.CacheLoader;
 import com.google.common.cache.LoadingCache;
-import com.google.common.collect.ImmutableMap;
 import com.google.common.collect.Lists;
-import com.mojang.datafixers.Dynamic;
-import com.mojang.datafixers.types.DynamicOps;
+import com.mojang.datafixers.util.Function5;
+import com.mojang.serialization.Codec;
+import com.mojang.serialization.codecs.RecordCodecBuilder;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Random;
 import java.util.concurrent.TimeUnit;
-import java.util.function.Function;
 import java.util.stream.Collectors;
 import java.util.stream.IntStream;
 import net.minecraft.core.BlockPos;
 import net.minecraft.util.Mth;
 import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.entity.boss.enderdragon.EndCrystal;
 import net.minecraft.world.level.LevelAccessor;
+import net.minecraft.world.level.StructureFeatureManager;
+import net.minecraft.world.level.WorldGenLevel;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.IronBarsBlock;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.chunk.ChunkGenerator;
-import net.minecraft.world.level.levelgen.ChunkGeneratorSettings;
 import net.minecraft.world.level.levelgen.feature.configurations.SpikeConfiguration;
 import net.minecraft.world.phys.AABB;
 
 public class SpikeFeature extends Feature<SpikeConfiguration> {
    private static final LoadingCache<Long, List<SpikeFeature.EndSpike>> SPIKE_CACHE;
 
-   public SpikeFeature(Function<Dynamic<?>, ? extends SpikeConfiguration> var1) {
+   public SpikeFeature(Codec<SpikeConfiguration> var1) {
       super(var1);
    }
 
-   public static List<SpikeFeature.EndSpike> getSpikesForLevel(LevelAccessor var0) {
+   public static List<SpikeFeature.EndSpike> getSpikesForLevel(WorldGenLevel var0) {
       Random var1 = new Random(var0.getSeed());
       long var2 = var1.nextLong() & 65535L;
       return (List)SPIKE_CACHE.getUnchecked(var2);
    }
 
-   public boolean place(LevelAccessor var1, ChunkGenerator<? extends ChunkGeneratorSettings> var2, Random var3, BlockPos var4, SpikeConfiguration var5) {
-      List var6 = var5.getSpikes();
-      if (var6.isEmpty()) {
-         var6 = getSpikesForLevel(var1);
+   public boolean place(WorldGenLevel var1, StructureFeatureManager var2, ChunkGenerator var3, Random var4, BlockPos var5, SpikeConfiguration var6) {
+      List var7 = var6.getSpikes();
+      if (var7.isEmpty()) {
+         var7 = getSpikesForLevel(var1);
       }
 
-      Iterator var7 = var6.iterator();
+      Iterator var8 = var7.iterator();
 
-      while(var7.hasNext()) {
-         SpikeFeature.EndSpike var8 = (SpikeFeature.EndSpike)var7.next();
-         if (var8.isCenterWithinChunk(var4)) {
-            this.placeSpike(var1, var3, var5, var8);
+      while(var8.hasNext()) {
+         SpikeFeature.EndSpike var9 = (SpikeFeature.EndSpike)var8.next();
+         if (var9.isCenterWithinChunk(var5)) {
+            this.placeSpike(var1, var4, var6, var9);
          }
       }
 
       return true;
    }
@@ -133,10 +133,23 @@
          return var3;
       }
    }
 
    public static class EndSpike {
+      public static final Codec<SpikeFeature.EndSpike> CODEC = RecordCodecBuilder.create((var0) -> {
+         return var0.group(Codec.INT.fieldOf("centerX").withDefault((int)0).forGetter((var0x) -> {
+            return var0x.centerX;
+         }), Codec.INT.fieldOf("centerZ").withDefault((int)0).forGetter((var0x) -> {
+            return var0x.centerZ;
+         }), Codec.INT.fieldOf("radius").withDefault((int)0).forGetter((var0x) -> {
+            return var0x.radius;
+         }), Codec.INT.fieldOf("height").withDefault((int)0).forGetter((var0x) -> {
+            return var0x.height;
+         }), Codec.BOOL.fieldOf("guarded").withDefault((Object)false).forGetter((var0x) -> {
+            return var0x.guarded;
+         })).apply(var0, (Function5)(SpikeFeature.EndSpike::new));
+      });
       private final int centerX;
       private final int centerZ;
       private final int radius;
       private final int height;
       private final boolean guarded;
@@ -176,21 +189,7 @@
       }
 
       public AABB getTopBoundingBox() {
          return this.topBoundingBox;
       }
-
-      public <T> Dynamic<T> serialize(DynamicOps<T> var1) {
-         ImmutableMap.Builder var2 = ImmutableMap.builder();
-         var2.put(var1.createString("centerX"), var1.createInt(this.centerX));
-         var2.put(var1.createString("centerZ"), var1.createInt(this.centerZ));
-         var2.put(var1.createString("radius"), var1.createInt(this.radius));
-         var2.put(var1.createString("height"), var1.createInt(this.height));
-         var2.put(var1.createString("guarded"), var1.createBoolean(this.guarded));
-         return new Dynamic(var1, var1.createMap(var2.build()));
-      }
-
-      public static <T> SpikeFeature.EndSpike deserialize(Dynamic<T> var0) {
-         return new SpikeFeature.EndSpike(var0.get("centerX").asInt(0), var0.get("centerZ").asInt(0), var0.get("radius").asInt(0), var0.get("height").asInt(0), var0.get("guarded").asBoolean(false));
-      }
    }
 }
