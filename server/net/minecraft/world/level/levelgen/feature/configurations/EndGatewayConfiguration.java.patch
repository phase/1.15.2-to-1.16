--- net/minecraft/world/level/levelgen/feature/configurations/EndGatewayConfiguration.java
+++ net/minecraft/world/level/levelgen/feature/configurations/EndGatewayConfiguration.java
@@ -1,14 +1,21 @@
 package net.minecraft.world.level.levelgen.feature.configurations;
 
-import com.google.common.collect.ImmutableMap;
-import com.mojang.datafixers.Dynamic;
-import com.mojang.datafixers.types.DynamicOps;
+import com.mojang.serialization.Codec;
+import com.mojang.serialization.codecs.RecordCodecBuilder;
 import java.util.Optional;
+import java.util.function.BiFunction;
 import net.minecraft.core.BlockPos;
 
 public class EndGatewayConfiguration implements FeatureConfiguration {
+   public static final Codec<EndGatewayConfiguration> CODEC = RecordCodecBuilder.create((var0) -> {
+      return var0.group(BlockPos.CODEC.optionalFieldOf("exit").forGetter((var0x) -> {
+         return var0x.exit;
+      }), Codec.BOOL.fieldOf("exact").forGetter((var0x) -> {
+         return var0x.exact;
+      })).apply(var0, (BiFunction)(EndGatewayConfiguration::new));
+   });
    private final Optional<BlockPos> exit;
    private final boolean exact;
 
    private EndGatewayConfiguration(Optional<BlockPos> var1, boolean var2) {
       this.exit = var1;
@@ -28,24 +35,6 @@
    }
 
    public boolean isExitExact() {
       return this.exact;
    }
-
-   public <T> Dynamic<T> serialize(DynamicOps<T> var1) {
-      return new Dynamic(var1, this.exit.map((var2) -> {
-         return var1.createMap(ImmutableMap.of(var1.createString("exit_x"), var1.createInt(var2.getX()), var1.createString("exit_y"), var1.createInt(var2.getY()), var1.createString("exit_z"), var1.createInt(var2.getZ()), var1.createString("exact"), var1.createBoolean(this.exact)));
-      }).orElse(var1.emptyMap()));
-   }
-
-   public static <T> EndGatewayConfiguration deserialize(Dynamic<T> var0) {
-      Optional var1 = var0.get("exit_x").asNumber().flatMap((var1x) -> {
-         return var0.get("exit_y").asNumber().flatMap((var2) -> {
-            return var0.get("exit_z").asNumber().map((var2x) -> {
-               return new BlockPos(var1x.intValue(), var2.intValue(), var2x.intValue());
-            });
-         });
-      });
-      boolean var2 = var0.get("exact").asBoolean(false);
-      return new EndGatewayConfiguration(var1, var2);
-   }
 }
