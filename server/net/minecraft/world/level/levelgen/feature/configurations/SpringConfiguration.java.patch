--- net/minecraft/world/level/levelgen/feature/configurations/SpringConfiguration.java
+++ net/minecraft/world/level/levelgen/feature/configurations/SpringConfiguration.java
@@ -1,22 +1,31 @@
 package net.minecraft.world.level.levelgen.feature.configurations;
 
-import com.google.common.collect.ImmutableMap;
+import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableSet;
-import com.mojang.datafixers.Dynamic;
-import com.mojang.datafixers.types.DynamicOps;
-import java.util.Collection;
+import com.mojang.datafixers.util.Function5;
+import com.mojang.serialization.Codec;
+import com.mojang.serialization.codecs.RecordCodecBuilder;
 import java.util.Set;
-import java.util.stream.Stream;
-import net.minecraft.core.DefaultedRegistry;
 import net.minecraft.core.Registry;
-import net.minecraft.resources.ResourceLocation;
 import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.material.FluidState;
-import net.minecraft.world.level.material.Fluids;
 
 public class SpringConfiguration implements FeatureConfiguration {
+   public static final Codec<SpringConfiguration> CODEC = RecordCodecBuilder.create((var0) -> {
+      return var0.group(FluidState.CODEC.fieldOf("state").forGetter((var0x) -> {
+         return var0x.state;
+      }), Codec.BOOL.fieldOf("requires_block_below").orElse(true).forGetter((var0x) -> {
+         return var0x.requiresBlockBelow;
+      }), Codec.INT.fieldOf("rock_count").orElse(4).forGetter((var0x) -> {
+         return var0x.rockCount;
+      }), Codec.INT.fieldOf("hole_count").orElse(1).forGetter((var0x) -> {
+         return var0x.holeCount;
+      }), Registry.BLOCK.listOf().fieldOf("valid_blocks").xmap(ImmutableSet::copyOf, ImmutableList::copyOf).forGetter((var0x) -> {
+         return var0x.validBlocks;
+      })).apply(var0, (Function5)(SpringConfiguration::new));
+   });
    public final FluidState state;
    public final boolean requiresBlockBelow;
    public final int rockCount;
    public final int holeCount;
    public final Set<Block> validBlocks;
@@ -26,30 +35,6 @@
       this.requiresBlockBelow = var2;
       this.rockCount = var3;
       this.holeCount = var4;
       this.validBlocks = var5;
    }
-
-   public <T> Dynamic<T> serialize(DynamicOps<T> var1) {
-      Object var10004 = var1.createString("state");
-      Object var10005 = FluidState.serialize(var1, this.state).getValue();
-      Object var10006 = var1.createString("requires_block_below");
-      Object var10007 = var1.createBoolean(this.requiresBlockBelow);
-      Object var10008 = var1.createString("rock_count");
-      Object var10009 = var1.createInt(this.rockCount);
-      Object var10010 = var1.createString("hole_count");
-      Object var10011 = var1.createInt(this.holeCount);
-      Object var10012 = var1.createString("valid_blocks");
-      Stream var10014 = this.validBlocks.stream();
-      DefaultedRegistry var10015 = Registry.BLOCK;
-      var10015.getClass();
-      var10014 = var10014.map(var10015::getKey).map(ResourceLocation::toString);
-      var1.getClass();
-      return new Dynamic(var1, var1.createMap(ImmutableMap.of(var10004, var10005, var10006, var10007, var10008, var10009, var10010, var10011, var10012, var1.createList(var10014.map(var1::createString)))));
-   }
-
-   public static <T> SpringConfiguration deserialize(Dynamic<T> var0) {
-      return new SpringConfiguration((FluidState)var0.get("state").map(FluidState::deserialize).orElse(Fluids.EMPTY.defaultFluidState()), var0.get("requires_block_below").asBoolean(true), var0.get("rock_count").asInt(4), var0.get("hole_count").asInt(1), ImmutableSet.copyOf((Collection)var0.get("valid_blocks").asList((var0x) -> {
-         return (Block)Registry.BLOCK.get(new ResourceLocation(var0x.asString("minecraft:air")));
-      })));
-   }
 }
