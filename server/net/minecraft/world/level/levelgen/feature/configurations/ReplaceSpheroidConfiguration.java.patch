--- net/minecraft/world/level/levelgen/feature/configurations/ReplaceSpheroidConfiguration.java
+++ net/minecraft/world/level/levelgen/feature/configurations/ReplaceSpheroidConfiguration.java
@@ -1,0 +1,79 @@
+package net.minecraft.world.level.levelgen.feature.configurations;
+
+import com.mojang.datafixers.util.Function4;
+import com.mojang.serialization.Codec;
+import com.mojang.serialization.codecs.RecordCodecBuilder;
+import net.minecraft.core.Vec3i;
+import net.minecraft.world.level.block.Blocks;
+import net.minecraft.world.level.block.state.BlockState;
+
+public class ReplaceSpheroidConfiguration implements FeatureConfiguration {
+   public static final Codec<ReplaceSpheroidConfiguration> CODEC = RecordCodecBuilder.create((var0) -> {
+      return var0.group(BlockState.CODEC.fieldOf("target").forGetter((var0x) -> {
+         return var0x.targetState;
+      }), BlockState.CODEC.fieldOf("state").forGetter((var0x) -> {
+         return var0x.replaceState;
+      }), Vec3i.CODEC.fieldOf("minimum_reach").forGetter((var0x) -> {
+         return var0x.minimumReach;
+      }), Vec3i.CODEC.fieldOf("maximum_reach").forGetter((var0x) -> {
+         return var0x.maximumReach;
+      })).apply(var0, (Function4)(ReplaceSpheroidConfiguration::new));
+   });
+   public final BlockState targetState;
+   public final BlockState replaceState;
+   public final Vec3i minimumReach;
+   public final Vec3i maximumReach;
+
+   public ReplaceSpheroidConfiguration(BlockState var1, BlockState var2, Vec3i var3, Vec3i var4) {
+      this.targetState = var1;
+      this.replaceState = var2;
+      this.minimumReach = var3;
+      this.maximumReach = var4;
+   }
+
+   public static class Builder {
+      private BlockState target;
+      private BlockState state;
+      private Vec3i minimumReach;
+      private Vec3i maximumReach;
+
+      public Builder() {
+         this.target = Blocks.AIR.defaultBlockState();
+         this.state = Blocks.AIR.defaultBlockState();
+         this.minimumReach = Vec3i.ZERO;
+         this.maximumReach = Vec3i.ZERO;
+      }
+
+      public ReplaceSpheroidConfiguration.Builder targetBlockState(BlockState var1) {
+         this.target = var1;
+         return this;
+      }
+
+      public ReplaceSpheroidConfiguration.Builder replaceWithBlockState(BlockState var1) {
+         this.state = var1;
+         return this;
+      }
+
+      public ReplaceSpheroidConfiguration.Builder minimumReach(Vec3i var1) {
+         this.minimumReach = var1;
+         return this;
+      }
+
+      public ReplaceSpheroidConfiguration.Builder maximumReach(Vec3i var1) {
+         this.maximumReach = var1;
+         return this;
+      }
+
+      public ReplaceSpheroidConfiguration build() {
+         if (this.minimumReach.getX() >= 0 && this.minimumReach.getY() >= 0 && this.minimumReach.getZ() >= 0) {
+            if (this.minimumReach.getX() <= this.maximumReach.getX() && this.minimumReach.getY() <= this.maximumReach.getY() && this.minimumReach.getZ() <= this.maximumReach.getZ()) {
+               return new ReplaceSpheroidConfiguration(this.target, this.state, this.minimumReach, this.maximumReach);
+            } else {
+               throw new IllegalArgumentException("Maximum reach must be greater than minimum reach for each axis");
+            }
+         } else {
+            throw new IllegalArgumentException("Minimum reach cannot be less than zero");
+         }
+      }
+   }
+}
