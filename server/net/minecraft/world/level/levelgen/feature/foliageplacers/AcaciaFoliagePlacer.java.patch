--- net/minecraft/world/level/levelgen/feature/foliageplacers/AcaciaFoliagePlacer.java
+++ net/minecraft/world/level/levelgen/feature/foliageplacers/AcaciaFoliagePlacer.java
@@ -1,51 +1,46 @@
 package net.minecraft.world.level.levelgen.feature.foliageplacers;
 
-import com.mojang.datafixers.Dynamic;
+import com.mojang.serialization.Codec;
+import com.mojang.serialization.codecs.RecordCodecBuilder;
 import java.util.Random;
 import java.util.Set;
+import java.util.function.BiFunction;
 import net.minecraft.core.BlockPos;
+import net.minecraft.util.UniformInt;
 import net.minecraft.world.level.LevelSimulatedRW;
-import net.minecraft.world.level.levelgen.feature.configurations.SmallTreeConfiguration;
+import net.minecraft.world.level.levelgen.feature.configurations.TreeConfiguration;
+import net.minecraft.world.level.levelgen.structure.BoundingBox;
 
 public class AcaciaFoliagePlacer extends FoliagePlacer {
-   public AcaciaFoliagePlacer(int var1, int var2) {
-      super(var1, var2, FoliagePlacerType.ACACIA_FOLIAGE_PLACER);
-   }
+   public static final Codec<AcaciaFoliagePlacer> CODEC = RecordCodecBuilder.create((var0) -> {
+      return foliagePlacerParts(var0).apply(var0, (BiFunction)(AcaciaFoliagePlacer::new));
+   });
 
-   public <T> AcaciaFoliagePlacer(Dynamic<T> var1) {
-      this(var1.get("radius").asInt(0), var1.get("radius_random").asInt(0));
+   public AcaciaFoliagePlacer(UniformInt var1, UniformInt var2) {
+      super(var1, var2);
    }
 
-   public void createFoliage(LevelSimulatedRW var1, Random var2, SmallTreeConfiguration var3, int var4, int var5, int var6, BlockPos var7, Set<BlockPos> var8) {
-      var3.foliagePlacer.placeLeavesRow(var1, var2, var3, var4, var7, 0, var6, var8);
-      var3.foliagePlacer.placeLeavesRow(var1, var2, var3, var4, var7, 1, 1, var8);
-      BlockPos var9 = var7.above();
-
-      int var10;
-      for(var10 = -1; var10 <= 1; ++var10) {
-         for(int var11 = -1; var11 <= 1; ++var11) {
-            this.placeLeaf(var1, var2, var9.offset(var10, 0, var11), var3, var8);
-         }
-      }
-
-      for(var10 = 2; var10 <= var6 - 1; ++var10) {
-         this.placeLeaf(var1, var2, var9.east(var10), var3, var8);
-         this.placeLeaf(var1, var2, var9.west(var10), var3, var8);
-         this.placeLeaf(var1, var2, var9.south(var10), var3, var8);
-         this.placeLeaf(var1, var2, var9.north(var10), var3, var8);
-      }
-
+   protected FoliagePlacerType<?> type() {
+      return FoliagePlacerType.ACACIA_FOLIAGE_PLACER;
    }
 
-   public int foliageRadius(Random var1, int var2, int var3, SmallTreeConfiguration var4) {
-      return this.radius + var1.nextInt(this.radiusRandom + 1);
+   protected void createFoliage(LevelSimulatedRW var1, Random var2, TreeConfiguration var3, int var4, FoliagePlacer.FoliageAttachment var5, int var6, int var7, Set<BlockPos> var8, int var9, BoundingBox var10) {
+      boolean var11 = var5.doubleTrunk();
+      BlockPos var12 = var5.foliagePos().above(var9);
+      this.placeLeavesRow(var1, var2, var3, var12, var7 + var5.radiusOffset(), var8, -1 - var6, var11, var10);
+      this.placeLeavesRow(var1, var2, var3, var12, var7 - 1, var8, -var6, var11, var10);
+      this.placeLeavesRow(var1, var2, var3, var12, var7 + var5.radiusOffset() - 1, var8, 0, var11, var10);
    }
 
-   protected boolean shouldSkipLocation(Random var1, int var2, int var3, int var4, int var5, int var6) {
-      return Math.abs(var3) == var6 && Math.abs(var5) == var6 && var6 > 0;
+   public int foliageHeight(Random var1, int var2, TreeConfiguration var3) {
+      return 0;
    }
 
-   public int getTreeRadiusForHeight(int var1, int var2, int var3, int var4) {
-      return var4 == 0 ? 0 : 2;
+   protected boolean shouldSkipLocation(Random var1, int var2, int var3, int var4, int var5, boolean var6) {
+      if (var3 == 0) {
+         return (var2 > 1 || var4 > 1) && var2 != 0 && var4 != 0;
+      } else {
+         return var2 == var5 && var4 == var5 && var5 > 0;
+      }
    }
 }
