--- net/minecraft/world/level/levelgen/feature/foliageplacers/PineFoliagePlacer.java
+++ net/minecraft/world/level/levelgen/feature/foliageplacers/PineFoliagePlacer.java
@@ -1,44 +1,59 @@
 package net.minecraft.world.level.levelgen.feature.foliageplacers;
 
-import com.mojang.datafixers.Dynamic;
+import com.mojang.datafixers.util.Function6;
+import com.mojang.serialization.Codec;
+import com.mojang.serialization.codecs.RecordCodecBuilder;
 import java.util.Random;
 import java.util.Set;
 import net.minecraft.core.BlockPos;
 import net.minecraft.world.level.LevelSimulatedRW;
-import net.minecraft.world.level.levelgen.feature.configurations.SmallTreeConfiguration;
+import net.minecraft.world.level.levelgen.feature.configurations.TreeConfiguration;
+import net.minecraft.world.level.levelgen.structure.BoundingBox;
 
 public class PineFoliagePlacer extends FoliagePlacer {
-   public PineFoliagePlacer(int var1, int var2) {
-      super(var1, var2, FoliagePlacerType.PINE_FOLIAGE_PLACER);
+   public static final Codec<PineFoliagePlacer> CODEC = RecordCodecBuilder.create((var0) -> {
+      return foliagePlacerParts(var0).and(var0.group(Codec.INT.fieldOf("height").forGetter((var0x) -> {
+         return var0x.height;
+      }), Codec.INT.fieldOf("height_random").forGetter((var0x) -> {
+         return var0x.heightRandom;
+      }))).apply(var0, (Function6)(PineFoliagePlacer::new));
+   });
+   private final int height;
+   private final int heightRandom;
+
+   public PineFoliagePlacer(int var1, int var2, int var3, int var4, int var5, int var6) {
+      super(var1, var2, var3, var4);
+      this.height = var5;
+      this.heightRandom = var6;
    }
 
-   public <T> PineFoliagePlacer(Dynamic<T> var1) {
-      this(var1.get("radius").asInt(0), var1.get("radius_random").asInt(0));
+   protected FoliagePlacerType<?> type() {
+      return FoliagePlacerType.PINE_FOLIAGE_PLACER;
    }
 
-   public void createFoliage(LevelSimulatedRW var1, Random var2, SmallTreeConfiguration var3, int var4, int var5, int var6, BlockPos var7, Set<BlockPos> var8) {
-      int var9 = 0;
+   protected void createFoliage(LevelSimulatedRW var1, Random var2, TreeConfiguration var3, int var4, FoliagePlacer.FoliageAttachment var5, int var6, int var7, Set<BlockPos> var8, int var9, BoundingBox var10) {
+      int var11 = 0;
 
-      for(int var10 = var4; var10 >= var5; --var10) {
-         this.placeLeavesRow(var1, var2, var3, var4, var7, var10, var9, var8);
-         if (var9 >= 1 && var10 == var5 + 1) {
-            --var9;
-         } else if (var9 < var6) {
-            ++var9;
+      for(int var12 = var9; var12 >= var9 - var6; --var12) {
+         this.placeLeavesRow(var1, var2, var3, var5.foliagePos(), var11, var8, var12, var5.doubleTrunk(), var10);
+         if (var11 >= 1 && var12 == var9 - var6 + 1) {
+            --var11;
+         } else if (var11 < var7 + var5.radiusOffset()) {
+            ++var11;
          }
       }
 
    }
 
-   public int foliageRadius(Random var1, int var2, int var3, SmallTreeConfiguration var4) {
-      return this.radius + var1.nextInt(this.radiusRandom + 1) + var1.nextInt(var3 - var2 + 1);
+   public int foliageRadius(Random var1, int var2) {
+      return super.foliageRadius(var1, var2) + var1.nextInt(var2 + 1);
    }
 
-   protected boolean shouldSkipLocation(Random var1, int var2, int var3, int var4, int var5, int var6) {
-      return Math.abs(var3) == var6 && Math.abs(var5) == var6 && var6 > 0;
+   public int foliageHeight(Random var1, int var2, TreeConfiguration var3) {
+      return this.height + var1.nextInt(this.heightRandom + 1);
    }
 
-   public int getTreeRadiusForHeight(int var1, int var2, int var3, int var4) {
-      return var4 <= 1 ? 0 : 2;
+   protected boolean shouldSkipLocation(Random var1, int var2, int var3, int var4, int var5, boolean var6) {
+      return var2 == var5 && var4 == var5 && var5 > 0;
    }
 }
