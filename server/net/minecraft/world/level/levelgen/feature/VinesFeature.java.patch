--- net/minecraft/world/level/levelgen/feature/VinesFeature.java
+++ net/minecraft/world/level/levelgen/feature/VinesFeature.java
@@ -1,43 +1,41 @@
 package net.minecraft.world.level.levelgen.feature;
 
-import com.mojang.datafixers.Dynamic;
+import com.mojang.serialization.Codec;
 import java.util.Random;
-import java.util.function.Function;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
-import net.minecraft.core.Vec3i;
-import net.minecraft.world.level.LevelAccessor;
+import net.minecraft.world.level.StructureFeatureManager;
+import net.minecraft.world.level.WorldGenLevel;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.VineBlock;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.chunk.ChunkGenerator;
-import net.minecraft.world.level.levelgen.ChunkGeneratorSettings;
 import net.minecraft.world.level.levelgen.feature.configurations.NoneFeatureConfiguration;
 
 public class VinesFeature extends Feature<NoneFeatureConfiguration> {
    private static final Direction[] DIRECTIONS = Direction.values();
 
-   public VinesFeature(Function<Dynamic<?>, ? extends NoneFeatureConfiguration> var1) {
+   public VinesFeature(Codec<NoneFeatureConfiguration> var1) {
       super(var1);
    }
 
-   public boolean place(LevelAccessor var1, ChunkGenerator<? extends ChunkGeneratorSettings> var2, Random var3, BlockPos var4, NoneFeatureConfiguration var5) {
-      BlockPos.MutableBlockPos var6 = new BlockPos.MutableBlockPos(var4);
+   public boolean place(WorldGenLevel var1, StructureFeatureManager var2, ChunkGenerator var3, Random var4, BlockPos var5, NoneFeatureConfiguration var6) {
+      BlockPos.MutableBlockPos var7 = var5.mutable();
 
-      for(int var7 = var4.getY(); var7 < 256; ++var7) {
-         var6.set((Vec3i)var4);
-         var6.move(var3.nextInt(4) - var3.nextInt(4), 0, var3.nextInt(4) - var3.nextInt(4));
-         var6.setY(var7);
-         if (var1.isEmptyBlock(var6)) {
-            Direction[] var8 = DIRECTIONS;
-            int var9 = var8.length;
+      for(int var8 = var5.getY(); var8 < 256; ++var8) {
+         var7.set(var5);
+         var7.move(var4.nextInt(4) - var4.nextInt(4), 0, var4.nextInt(4) - var4.nextInt(4));
+         var7.setY(var8);
+         if (var1.isEmptyBlock(var7)) {
+            Direction[] var9 = DIRECTIONS;
+            int var10 = var9.length;
 
-            for(int var10 = 0; var10 < var9; ++var10) {
-               Direction var11 = var8[var10];
-               if (var11 != Direction.DOWN && VineBlock.isAcceptableNeighbour(var1, var6, var11)) {
-                  var1.setBlock(var6, (BlockState)Blocks.VINE.defaultBlockState().setValue(VineBlock.getPropertyForFace(var11), true), 2);
+            for(int var11 = 0; var11 < var10; ++var11) {
+               Direction var12 = var9[var11];
+               if (var12 != Direction.DOWN && VineBlock.isAcceptableNeighbour(var1, var7, var12)) {
+                  var1.setBlock(var7, (BlockState)Blocks.VINE.defaultBlockState().setValue(VineBlock.getPropertyForFace(var12), true), 2);
                   break;
                }
             }
          }
       }
