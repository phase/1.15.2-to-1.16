--- net/minecraft/world/level/levelgen/feature/IcebergFeature.java
+++ net/minecraft/world/level/levelgen/feature/IcebergFeature.java
@@ -1,29 +1,28 @@
 package net.minecraft.world.level.levelgen.feature;
 
-import com.mojang.datafixers.Dynamic;
+import com.mojang.serialization.Codec;
 import java.util.Random;
-import java.util.function.Function;
 import net.minecraft.core.BlockPos;
 import net.minecraft.util.Mth;
 import net.minecraft.world.level.BlockGetter;
 import net.minecraft.world.level.LevelAccessor;
+import net.minecraft.world.level.WorldGenLevel;
 import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.chunk.ChunkGenerator;
-import net.minecraft.world.level.levelgen.ChunkGeneratorSettings;
 import net.minecraft.world.level.levelgen.feature.configurations.BlockStateConfiguration;
 import net.minecraft.world.level.material.Material;
 
 public class IcebergFeature extends Feature<BlockStateConfiguration> {
-   public IcebergFeature(Function<Dynamic<?>, ? extends BlockStateConfiguration> var1) {
+   public IcebergFeature(Codec<BlockStateConfiguration> var1) {
       super(var1);
    }
 
-   public boolean place(LevelAccessor var1, ChunkGenerator<? extends ChunkGeneratorSettings> var2, Random var3, BlockPos var4, BlockStateConfiguration var5) {
-      var4 = new BlockPos(var4.getX(), var1.getSeaLevel(), var4.getZ());
+   public boolean place(WorldGenLevel var1, ChunkGenerator var2, Random var3, BlockPos var4, BlockStateConfiguration var5) {
+      var4 = new BlockPos(var4.getX(), var2.getSeaLevel(), var4.getZ());
       boolean var6 = var3.nextDouble() > 0.7D;
       BlockState var7 = var5.state;
       double var8 = var3.nextDouble() * 2.0D * 3.141592653589793D;
       int var10 = 11 - var3.nextInt(5);
       int var11 = 3 + var3.nextInt(3);
@@ -132,11 +131,11 @@
       }
 
    }
 
    private void removeFloatingSnowLayer(LevelAccessor var1, BlockPos var2) {
-      if (var1.getBlockState(var2.above()).getBlock() == Blocks.SNOW) {
+      if (var1.getBlockState(var2.above()).is(Blocks.SNOW)) {
          this.setBlock(var1, var2.above(), Blocks.AIR.defaultBlockState());
       }
 
    }
 
@@ -154,15 +153,14 @@
 
    }
 
    private void setIcebergBlock(BlockPos var1, LevelAccessor var2, Random var3, int var4, int var5, boolean var6, boolean var7, BlockState var8) {
       BlockState var9 = var2.getBlockState(var1);
-      Block var10 = var9.getBlock();
-      if (var9.getMaterial() == Material.AIR || var10 == Blocks.SNOW_BLOCK || var10 == Blocks.ICE || var10 == Blocks.WATER) {
-         boolean var11 = !var6 || var3.nextDouble() > 0.05D;
-         int var12 = var6 ? 3 : 2;
-         if (var7 && var10 != Blocks.WATER && (double)var4 <= (double)var3.nextInt(Math.max(1, var5 / var12)) + (double)var5 * 0.6D && var11) {
+      if (var9.getMaterial() == Material.AIR || var9.is(Blocks.SNOW_BLOCK) || var9.is(Blocks.ICE) || var9.is(Blocks.WATER)) {
+         boolean var10 = !var6 || var3.nextDouble() > 0.05D;
+         int var11 = var6 ? 3 : 2;
+         if (var7 && !var9.is(Blocks.WATER) && (double)var4 <= (double)var3.nextInt(Math.max(1, var5 / var11)) + (double)var5 * 0.6D && var10) {
             this.setBlock(var2, var1, Blocks.SNOW_BLOCK.defaultBlockState());
          } else {
             this.setBlock(var2, var1, var8);
          }
       }
