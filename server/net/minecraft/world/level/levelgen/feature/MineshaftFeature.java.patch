--- net/minecraft/world/level/levelgen/feature/MineshaftFeature.java
+++ net/minecraft/world/level/levelgen/feature/MineshaftFeature.java
@@ -1,60 +1,46 @@
 package net.minecraft.world.level.levelgen.feature;
 
-import com.mojang.datafixers.Dynamic;
+import com.mojang.serialization.Codec;
 import java.util.Arrays;
 import java.util.Iterator;
 import java.util.Map;
-import java.util.Random;
-import java.util.function.Function;
 import java.util.stream.Collectors;
+import net.minecraft.util.StringRepresentable;
+import net.minecraft.world.level.ChunkPos;
 import net.minecraft.world.level.biome.Biome;
-import net.minecraft.world.level.biome.BiomeManager;
+import net.minecraft.world.level.biome.BiomeSource;
 import net.minecraft.world.level.chunk.ChunkGenerator;
 import net.minecraft.world.level.levelgen.WorldgenRandom;
 import net.minecraft.world.level.levelgen.feature.configurations.MineshaftConfiguration;
 import net.minecraft.world.level.levelgen.structure.BoundingBox;
 import net.minecraft.world.level.levelgen.structure.MineShaftPieces;
 import net.minecraft.world.level.levelgen.structure.StructurePiece;
 import net.minecraft.world.level.levelgen.structure.StructureStart;
 import net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager;
 
 public class MineshaftFeature extends StructureFeature<MineshaftConfiguration> {
-   public MineshaftFeature(Function<Dynamic<?>, ? extends MineshaftConfiguration> var1) {
+   public MineshaftFeature(Codec<MineshaftConfiguration> var1) {
       super(var1);
    }
 
-   public boolean isFeatureChunk(BiomeManager var1, ChunkGenerator<?> var2, Random var3, int var4, int var5, Biome var6) {
-      ((WorldgenRandom)var3).setLargeFeatureSeed(var2.getSeed(), var4, var5);
-      if (var2.isBiomeValidStartForStructure(var6, this)) {
-         MineshaftConfiguration var7 = (MineshaftConfiguration)var2.getStructureConfiguration(var6, this);
-         double var8 = var7.probability;
-         return var3.nextDouble() < var8;
-      } else {
-         return false;
-      }
+   protected boolean isFeatureChunk(ChunkGenerator var1, BiomeSource var2, long var3, WorldgenRandom var5, int var6, int var7, Biome var8, ChunkPos var9, MineshaftConfiguration var10) {
+      var5.setLargeFeatureSeed(var3, var6, var7);
+      double var11 = var10.probability;
+      return var5.nextDouble() < var11;
    }
 
-   public StructureFeature.StructureStartFactory getStartFactory() {
+   public StructureFeature.StructureStartFactory<MineshaftConfiguration> getStartFactory() {
       return MineshaftFeature.MineShaftStart::new;
    }
 
-   public String getFeatureName() {
-      return "Mineshaft";
-   }
-
-   public int getLookupRange() {
-      return 8;
-   }
-
-   public static class MineShaftStart extends StructureStart {
-      public MineShaftStart(StructureFeature<?> var1, int var2, int var3, BoundingBox var4, int var5, long var6) {
+   public static class MineShaftStart extends StructureStart<MineshaftConfiguration> {
+      public MineShaftStart(StructureFeature<MineshaftConfiguration> var1, int var2, int var3, BoundingBox var4, int var5, long var6) {
          super(var1, var2, var3, var4, var5, var6);
       }
 
-      public void generatePieces(ChunkGenerator<?> var1, StructureManager var2, int var3, int var4, Biome var5) {
-         MineshaftConfiguration var6 = (MineshaftConfiguration)var1.getStructureConfiguration(var5, Feature.MINESHAFT);
+      public void generatePieces(ChunkGenerator var1, StructureManager var2, int var3, int var4, Biome var5, MineshaftConfiguration var6) {
          MineShaftPieces.MineShaftRoom var7 = new MineShaftPieces.MineShaftRoom(0, this.random, (var3 << 4) + 2, (var4 << 4) + 2, var6.type);
          this.pieces.add(var7);
          var7.addChildren(var7, this.pieces, this.random);
          this.calculateBoundingBox();
          if (var6.type == MineshaftFeature.Type.MESA) {
@@ -72,14 +58,15 @@
          }
 
       }
    }
 
-   public static enum Type {
+   public static enum Type implements StringRepresentable {
       NORMAL("normal"),
       MESA("mesa");
 
+      public static final Codec<MineshaftFeature.Type> CODEC = StringRepresentable.fromEnum(MineshaftFeature.Type::values, MineshaftFeature.Type::byName);
       private static final Map<String, MineshaftFeature.Type> BY_NAME = (Map)Arrays.stream(values()).collect(Collectors.toMap(MineshaftFeature.Type::getName, (var0) -> {
          return var0;
       }));
       private final String name;
 
@@ -89,14 +76,18 @@
 
       public String getName() {
          return this.name;
       }
 
-      public static MineshaftFeature.Type byName(String var0) {
+      private static MineshaftFeature.Type byName(String var0) {
          return (MineshaftFeature.Type)BY_NAME.get(var0);
       }
 
       public static MineshaftFeature.Type byId(int var0) {
          return var0 >= 0 && var0 < values().length ? values()[var0] : NORMAL;
       }
+
+      public String getSerializedName() {
+         return this.name;
+      }
    }
 }
