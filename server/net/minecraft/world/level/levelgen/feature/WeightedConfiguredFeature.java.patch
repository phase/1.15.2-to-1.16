--- net/minecraft/world/level/levelgen/feature/WeightedConfiguredFeature.java
+++ net/minecraft/world/level/levelgen/feature/WeightedConfiguredFeature.java
@@ -1,34 +1,32 @@
 package net.minecraft.world.level.levelgen.feature;
 
-import com.google.common.collect.ImmutableMap;
-import com.mojang.datafixers.Dynamic;
-import com.mojang.datafixers.types.DynamicOps;
+import com.mojang.serialization.Codec;
+import com.mojang.serialization.codecs.RecordCodecBuilder;
 import java.util.Random;
+import java.util.function.BiFunction;
 import net.minecraft.core.BlockPos;
-import net.minecraft.core.Registry;
-import net.minecraft.world.level.LevelAccessor;
+import net.minecraft.world.level.StructureFeatureManager;
+import net.minecraft.world.level.WorldGenLevel;
 import net.minecraft.world.level.chunk.ChunkGenerator;
-import net.minecraft.world.level.levelgen.ChunkGeneratorSettings;
 import net.minecraft.world.level.levelgen.feature.configurations.FeatureConfiguration;
 
 public class WeightedConfiguredFeature<FC extends FeatureConfiguration> {
+   public static final Codec<WeightedConfiguredFeature<?>> CODEC = RecordCodecBuilder.create((var0) -> {
+      return var0.group(ConfiguredFeature.CODEC.fieldOf("feature").forGetter((var0x) -> {
+         return var0x.feature;
+      }), Codec.FLOAT.fieldOf("chance").forGetter((var0x) -> {
+         return var0x.chance;
+      })).apply(var0, (BiFunction)(WeightedConfiguredFeature::new));
+   });
    public final ConfiguredFeature<FC, ?> feature;
    public final float chance;
 
    public WeightedConfiguredFeature(ConfiguredFeature<FC, ?> var1, float var2) {
       this.feature = var1;
       this.chance = var2;
    }
 
-   public <T> Dynamic<T> serialize(DynamicOps<T> var1) {
-      return new Dynamic(var1, var1.createMap(ImmutableMap.of(var1.createString("name"), var1.createString(Registry.FEATURE.getKey(this.feature.feature).toString()), var1.createString("config"), this.feature.config.serialize(var1).getValue(), var1.createString("chance"), var1.createFloat(this.chance))));
+   public boolean place(WorldGenLevel var1, StructureFeatureManager var2, ChunkGenerator var3, Random var4, BlockPos var5) {
+      return this.feature.place(var1, var2, var3, var4, var5);
    }
-
-   public boolean place(LevelAccessor var1, ChunkGenerator<? extends ChunkGeneratorSettings> var2, Random var3, BlockPos var4) {
-      return this.feature.place(var1, var2, var3, var4);
-   }
-
-   public static <T> WeightedConfiguredFeature<?> deserialize(Dynamic<T> var0) {
-      return ConfiguredFeature.deserialize(var0).weighted(var0.get("chance").asFloat(0.0F));
-   }
 }
