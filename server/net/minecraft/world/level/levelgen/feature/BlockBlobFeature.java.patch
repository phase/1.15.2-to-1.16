--- net/minecraft/world/level/levelgen/feature/BlockBlobFeature.java
+++ net/minecraft/world/level/levelgen/feature/BlockBlobFeature.java
@@ -1,62 +1,50 @@
 package net.minecraft.world.level.levelgen.feature;
 
-import com.mojang.datafixers.Dynamic;
+import com.mojang.serialization.Codec;
 import java.util.Iterator;
 import java.util.Random;
-import java.util.function.Function;
 import net.minecraft.core.BlockPos;
-import net.minecraft.world.level.LevelAccessor;
+import net.minecraft.world.level.WorldGenLevel;
 import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.chunk.ChunkGenerator;
-import net.minecraft.world.level.levelgen.ChunkGeneratorSettings;
-import net.minecraft.world.level.levelgen.feature.configurations.BlockBlobConfiguration;
+import net.minecraft.world.level.levelgen.feature.configurations.BlockStateConfiguration;
 
-public class BlockBlobFeature extends Feature<BlockBlobConfiguration> {
-   public BlockBlobFeature(Function<Dynamic<?>, ? extends BlockBlobConfiguration> var1) {
+public class BlockBlobFeature extends Feature<BlockStateConfiguration> {
+   public BlockBlobFeature(Codec<BlockStateConfiguration> var1) {
       super(var1);
    }
 
-   public boolean place(LevelAccessor var1, ChunkGenerator<? extends ChunkGeneratorSettings> var2, Random var3, BlockPos var4, BlockBlobConfiguration var5) {
-      while(true) {
-         label48: {
-            if (var4.getY() > 3) {
-               if (var1.isEmptyBlock(var4.below())) {
-                  break label48;
-               }
-
-               Block var6 = var1.getBlockState(var4.below()).getBlock();
-               if (!isDirt(var6) && !isStone(var6)) {
-                  break label48;
-               }
+   public boolean place(WorldGenLevel var1, ChunkGenerator var2, Random var3, BlockPos var4, BlockStateConfiguration var5) {
+      for(; var4.getY() > 3; var4 = var4.below()) {
+         if (!var1.isEmptyBlock(var4.below())) {
+            Block var6 = var1.getBlockState(var4.below()).getBlock();
+            if (isDirt(var6) || isStone(var6)) {
+               break;
             }
+         }
+      }
 
-            if (var4.getY() <= 3) {
-               return false;
-            }
+      if (var4.getY() <= 3) {
+         return false;
+      } else {
+         for(int var13 = 0; var13 < 3; ++var13) {
+            int var7 = var3.nextInt(2);
+            int var8 = var3.nextInt(2);
+            int var9 = var3.nextInt(2);
+            float var10 = (float)(var7 + var8 + var9) * 0.333F + 0.5F;
+            Iterator var11 = BlockPos.betweenClosed(var4.offset(-var7, -var8, -var9), var4.offset(var7, var8, var9)).iterator();
 
-            int var14 = var5.startRadius;
-
-            for(int var7 = 0; var14 >= 0 && var7 < 3; ++var7) {
-               int var8 = var14 + var3.nextInt(2);
-               int var9 = var14 + var3.nextInt(2);
-               int var10 = var14 + var3.nextInt(2);
-               float var11 = (float)(var8 + var9 + var10) * 0.333F + 0.5F;
-               Iterator var12 = BlockPos.betweenClosed(var4.offset(-var8, -var9, -var10), var4.offset(var8, var9, var10)).iterator();
-
-               while(var12.hasNext()) {
-                  BlockPos var13 = (BlockPos)var12.next();
-                  if (var13.distSqr(var4) <= (double)(var11 * var11)) {
-                     var1.setBlock(var13, var5.state, 4);
-                  }
+            while(var11.hasNext()) {
+               BlockPos var12 = (BlockPos)var11.next();
+               if (var12.distSqr(var4) <= (double)(var10 * var10)) {
+                  var1.setBlock(var12, var5.state, 4);
                }
-
-               var4 = var4.offset(-(var14 + 1) + var3.nextInt(2 + var14 * 2), 0 - var3.nextInt(2), -(var14 + 1) + var3.nextInt(2 + var14 * 2));
             }
 
-            return true;
+            var4 = var4.offset(-1 + var3.nextInt(2), -var3.nextInt(2), -1 + var3.nextInt(2));
          }
 
-         var4 = var4.below();
+         return true;
       }
    }
 }
