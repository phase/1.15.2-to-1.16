--- net/minecraft/world/level/levelgen/feature/BlockBlobFeature.java
+++ net/minecraft/world/level/levelgen/feature/BlockBlobFeature.java
@@ -1,62 +1,61 @@
 package net.minecraft.world.level.levelgen.feature;
 
-import com.mojang.datafixers.Dynamic;
+import com.mojang.serialization.Codec;
 import java.util.Iterator;
 import java.util.Random;
-import java.util.function.Function;
 import net.minecraft.core.BlockPos;
-import net.minecraft.world.level.LevelAccessor;
+import net.minecraft.world.level.StructureFeatureManager;
+import net.minecraft.world.level.WorldGenLevel;
 import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.chunk.ChunkGenerator;
-import net.minecraft.world.level.levelgen.ChunkGeneratorSettings;
 import net.minecraft.world.level.levelgen.feature.configurations.BlockBlobConfiguration;
 
 public class BlockBlobFeature extends Feature<BlockBlobConfiguration> {
-   public BlockBlobFeature(Function<Dynamic<?>, ? extends BlockBlobConfiguration> var1) {
+   public BlockBlobFeature(Codec<BlockBlobConfiguration> var1) {
       super(var1);
    }
 
-   public boolean place(LevelAccessor var1, ChunkGenerator<? extends ChunkGeneratorSettings> var2, Random var3, BlockPos var4, BlockBlobConfiguration var5) {
+   public boolean place(WorldGenLevel var1, StructureFeatureManager var2, ChunkGenerator var3, Random var4, BlockPos var5, BlockBlobConfiguration var6) {
       while(true) {
          label48: {
-            if (var4.getY() > 3) {
-               if (var1.isEmptyBlock(var4.below())) {
+            if (var5.getY() > 3) {
+               if (var1.isEmptyBlock(var5.below())) {
                   break label48;
                }
 
-               Block var6 = var1.getBlockState(var4.below()).getBlock();
-               if (!isDirt(var6) && !isStone(var6)) {
+               Block var7 = var1.getBlockState(var5.below()).getBlock();
+               if (!isDirt(var7) && !isStone(var7)) {
                   break label48;
                }
             }
 
-            if (var4.getY() <= 3) {
+            if (var5.getY() <= 3) {
                return false;
             }
 
-            int var14 = var5.startRadius;
+            int var15 = var6.startRadius;
 
-            for(int var7 = 0; var14 >= 0 && var7 < 3; ++var7) {
-               int var8 = var14 + var3.nextInt(2);
-               int var9 = var14 + var3.nextInt(2);
-               int var10 = var14 + var3.nextInt(2);
-               float var11 = (float)(var8 + var9 + var10) * 0.333F + 0.5F;
-               Iterator var12 = BlockPos.betweenClosed(var4.offset(-var8, -var9, -var10), var4.offset(var8, var9, var10)).iterator();
+            for(int var8 = 0; var15 >= 0 && var8 < 3; ++var8) {
+               int var9 = var15 + var4.nextInt(2);
+               int var10 = var15 + var4.nextInt(2);
+               int var11 = var15 + var4.nextInt(2);
+               float var12 = (float)(var9 + var10 + var11) * 0.333F + 0.5F;
+               Iterator var13 = BlockPos.betweenClosed(var5.offset(-var9, -var10, -var11), var5.offset(var9, var10, var11)).iterator();
 
-               while(var12.hasNext()) {
-                  BlockPos var13 = (BlockPos)var12.next();
-                  if (var13.distSqr(var4) <= (double)(var11 * var11)) {
-                     var1.setBlock(var13, var5.state, 4);
+               while(var13.hasNext()) {
+                  BlockPos var14 = (BlockPos)var13.next();
+                  if (var14.distSqr(var5) <= (double)(var12 * var12)) {
+                     var1.setBlock(var14, var6.state, 4);
                   }
                }
 
-               var4 = var4.offset(-(var14 + 1) + var3.nextInt(2 + var14 * 2), 0 - var3.nextInt(2), -(var14 + 1) + var3.nextInt(2 + var14 * 2));
+               var5 = var5.offset(-(var15 + 1) + var4.nextInt(2 + var15 * 2), 0 - var4.nextInt(2), -(var15 + 1) + var4.nextInt(2 + var15 * 2));
             }
 
             return true;
          }
 
-         var4 = var4.below();
+         var5 = var5.below();
       }
    }
 }
