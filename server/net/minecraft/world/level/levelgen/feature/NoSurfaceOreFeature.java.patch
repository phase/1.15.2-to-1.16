--- net/minecraft/world/level/levelgen/feature/NoSurfaceOreFeature.java
+++ net/minecraft/world/level/levelgen/feature/NoSurfaceOreFeature.java
@@ -1,0 +1,58 @@
+package net.minecraft.world.level.levelgen.feature;
+
+import com.mojang.serialization.Codec;
+import java.util.Random;
+import net.minecraft.core.BlockPos;
+import net.minecraft.core.Direction;
+import net.minecraft.world.level.LevelAccessor;
+import net.minecraft.world.level.StructureFeatureManager;
+import net.minecraft.world.level.WorldGenLevel;
+import net.minecraft.world.level.chunk.ChunkGenerator;
+import net.minecraft.world.level.levelgen.feature.configurations.OreConfiguration;
+
+public class NoSurfaceOreFeature extends Feature<OreConfiguration> {
+   NoSurfaceOreFeature(Codec<OreConfiguration> var1) {
+      super(var1);
+   }
+
+   public boolean place(WorldGenLevel var1, StructureFeatureManager var2, ChunkGenerator var3, Random var4, BlockPos var5, OreConfiguration var6) {
+      int var7 = var4.nextInt(var6.size + 1);
+      BlockPos.MutableBlockPos var8 = new BlockPos.MutableBlockPos();
+
+      for(int var9 = 0; var9 < var7; ++var9) {
+         this.offsetTargetPos(var8, var4, var5, Math.min(var9, 7));
+         if (var6.target.getPredicate().test(var1.getBlockState(var8)) && !this.isFacingAir(var1, var8)) {
+            var1.setBlock(var8, var6.state, 2);
+         }
+      }
+
+      return true;
+   }
+
+   private void offsetTargetPos(BlockPos.MutableBlockPos var1, Random var2, BlockPos var3, int var4) {
+      int var5 = this.getRandomPlacementInOneAxisRelativeToOrigin(var2, var4);
+      int var6 = this.getRandomPlacementInOneAxisRelativeToOrigin(var2, var4);
+      int var7 = this.getRandomPlacementInOneAxisRelativeToOrigin(var2, var4);
+      var1.setWithOffset(var3, var5, var6, var7);
+   }
+
+   private int getRandomPlacementInOneAxisRelativeToOrigin(Random var1, int var2) {
+      return Math.round((var1.nextFloat() - var1.nextFloat()) * (float)var2);
+   }
+
+   private boolean isFacingAir(LevelAccessor var1, BlockPos var2) {
+      BlockPos.MutableBlockPos var3 = new BlockPos.MutableBlockPos();
+      Direction[] var4 = Direction.values();
+      int var5 = var4.length;
+
+      for(int var6 = 0; var6 < var5; ++var6) {
+         Direction var7 = var4[var6];
+         var3.setWithOffset(var2, var7);
+         if (var1.getBlockState(var3).isAir()) {
+            return true;
+         }
+      }
+
+      return false;
+   }
+}
