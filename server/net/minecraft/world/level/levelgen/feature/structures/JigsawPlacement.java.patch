--- net/minecraft/world/level/levelgen/feature/structures/JigsawPlacement.java
+++ net/minecraft/world/level/levelgen/feature/structures/JigsawPlacement.java
@@ -4,260 +4,287 @@
 import com.google.common.collect.Queues;
 import java.util.ArrayList;
 import java.util.Deque;
 import java.util.Iterator;
 import java.util.List;
+import java.util.Optional;
 import java.util.Random;
-import java.util.concurrent.atomic.AtomicReference;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
+import net.minecraft.core.Registry;
+import net.minecraft.core.RegistryAccess;
+import net.minecraft.core.WritableRegistry;
+import net.minecraft.data.worldgen.Pools;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.world.level.block.JigsawBlock;
 import net.minecraft.world.level.block.Rotation;
 import net.minecraft.world.level.chunk.ChunkGenerator;
 import net.minecraft.world.level.levelgen.Heightmap;
+import net.minecraft.world.level.levelgen.feature.StructureFeature;
+import net.minecraft.world.level.levelgen.feature.configurations.JigsawConfiguration;
 import net.minecraft.world.level.levelgen.structure.BoundingBox;
 import net.minecraft.world.level.levelgen.structure.PoolElementStructurePiece;
-import net.minecraft.world.level.levelgen.structure.StructureFeatureIO;
-import net.minecraft.world.level.levelgen.structure.StructurePiece;
 import net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager;
 import net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplate;
 import net.minecraft.world.phys.AABB;
 import net.minecraft.world.phys.shapes.BooleanOp;
 import net.minecraft.world.phys.shapes.Shapes;
 import net.minecraft.world.phys.shapes.VoxelShape;
+import org.apache.commons.lang3.mutable.MutableObject;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
 public class JigsawPlacement {
    private static final Logger LOGGER = LogManager.getLogger();
-   public static final StructureTemplatePools POOLS = new StructureTemplatePools();
 
-   public static void addPieces(ResourceLocation var0, int var1, JigsawPlacement.PieceFactory var2, ChunkGenerator<?> var3, StructureManager var4, BlockPos var5, List<StructurePiece> var6, Random var7) {
-      StructureFeatureIO.bootstrap();
-      new JigsawPlacement.Placer(var0, var1, var2, var3, var4, var5, var6, var7);
+   public static void addPieces(RegistryAccess var0, JigsawConfiguration var1, JigsawPlacement.PieceFactory var2, ChunkGenerator var3, StructureManager var4, BlockPos var5, List<? super PoolElementStructurePiece> var6, Random var7, boolean var8, boolean var9) {
+      StructureFeature.bootstrap();
+      WritableRegistry var10 = var0.registryOrThrow(Registry.TEMPLATE_POOL_REGISTRY);
+      Rotation var11 = Rotation.getRandom(var7);
+      StructureTemplatePool var12 = (StructureTemplatePool)var1.startPool().get();
+      StructurePoolElement var13 = var12.getRandomTemplate(var7);
+      PoolElementStructurePiece var14 = var2.create(var4, var13, var5, var13.getGroundLevelDelta(), var11, var13.getBoundingBox(var4, var5, var11));
+      BoundingBox var15 = var14.getBoundingBox();
+      int var16 = (var15.x1 + var15.x0) / 2;
+      int var17 = (var15.z1 + var15.z0) / 2;
+      int var18;
+      if (var9) {
+         var18 = var5.getY() + var3.getFirstFreeHeight(var16, var17, Heightmap.Types.WORLD_SURFACE_WG);
+      } else {
+         var18 = var5.getY();
+      }
+
+      int var19 = var15.y0 + var14.getGroundLevelDelta();
+      var14.move(0, var18 - var19, 0);
+      var6.add(var14);
+      if (var1.maxDepth() > 0) {
+         boolean var20 = true;
+         AABB var21 = new AABB((double)(var16 - 80), (double)(var18 - 80), (double)(var17 - 80), (double)(var16 + 80 + 1), (double)(var18 + 80 + 1), (double)(var17 + 80 + 1));
+         JigsawPlacement.Placer var22 = new JigsawPlacement.Placer(var10, var1.maxDepth(), var2, var3, var4, var6, var7);
+         var22.placing.addLast(new JigsawPlacement.PieceState(var14, new MutableObject(Shapes.join(Shapes.create(var21), Shapes.create(AABB.of(var15)), BooleanOp.ONLY_FIRST)), var18 + 80, 0));
+
+         while(!var22.placing.isEmpty()) {
+            JigsawPlacement.PieceState var23 = (JigsawPlacement.PieceState)var22.placing.removeFirst();
+            var22.tryPlacingChildren(var23.piece, var23.free, var23.boundsTop, var23.depth, var8);
+         }
+
+      }
    }
 
-   static {
-      POOLS.register(StructureTemplatePool.EMPTY);
+   public static void addPieces(RegistryAccess var0, PoolElementStructurePiece var1, int var2, JigsawPlacement.PieceFactory var3, ChunkGenerator var4, StructureManager var5, List<? super PoolElementStructurePiece> var6, Random var7) {
+      WritableRegistry var8 = var0.registryOrThrow(Registry.TEMPLATE_POOL_REGISTRY);
+      JigsawPlacement.Placer var9 = new JigsawPlacement.Placer(var8, var2, var3, var4, var5, var6, var7);
+      var9.placing.addLast(new JigsawPlacement.PieceState(var1, new MutableObject(Shapes.INFINITY), 0, 0));
+
+      while(!var9.placing.isEmpty()) {
+         JigsawPlacement.PieceState var10 = (JigsawPlacement.PieceState)var9.placing.removeFirst();
+         var9.tryPlacingChildren(var10.piece, var10.free, var10.boundsTop, var10.depth, false);
+      }
+
    }
 
    public interface PieceFactory {
       PoolElementStructurePiece create(StructureManager var1, StructurePoolElement var2, BlockPos var3, int var4, Rotation var5, BoundingBox var6);
    }
 
    static final class Placer {
+      private final Registry<StructureTemplatePool> pools;
       private final int maxDepth;
       private final JigsawPlacement.PieceFactory factory;
-      private final ChunkGenerator<?> chunkGenerator;
+      private final ChunkGenerator chunkGenerator;
       private final StructureManager structureManager;
-      private final List<StructurePiece> pieces;
+      private final List<? super PoolElementStructurePiece> pieces;
       private final Random random;
-      private final Deque<JigsawPlacement.PieceState> placing = Queues.newArrayDeque();
+      private final Deque<JigsawPlacement.PieceState> placing;
 
-      public Placer(ResourceLocation var1, int var2, JigsawPlacement.PieceFactory var3, ChunkGenerator<?> var4, StructureManager var5, BlockPos var6, List<StructurePiece> var7, Random var8) {
+      private Placer(Registry<StructureTemplatePool> var1, int var2, JigsawPlacement.PieceFactory var3, ChunkGenerator var4, StructureManager var5, List<? super PoolElementStructurePiece> var6, Random var7) {
+         this.placing = Queues.newArrayDeque();
+         this.pools = var1;
          this.maxDepth = var2;
          this.factory = var3;
          this.chunkGenerator = var4;
          this.structureManager = var5;
-         this.pieces = var7;
-         this.random = var8;
-         Rotation var9 = Rotation.getRandom(var8);
-         StructureTemplatePool var10 = JigsawPlacement.POOLS.getPool(var1);
-         StructurePoolElement var11 = var10.getRandomTemplate(var8);
-         PoolElementStructurePiece var12 = var3.create(var5, var11, var6, var11.getGroundLevelDelta(), var9, var11.getBoundingBox(var5, var6, var9));
-         BoundingBox var13 = var12.getBoundingBox();
-         int var14 = (var13.x1 + var13.x0) / 2;
-         int var15 = (var13.z1 + var13.z0) / 2;
-         int var16 = var4.getFirstFreeHeight(var14, var15, Heightmap.Types.WORLD_SURFACE_WG);
-         var12.move(0, var16 - (var13.y0 + var12.getGroundLevelDelta()), 0);
-         var7.add(var12);
-         if (var2 > 0) {
-            boolean var17 = true;
-            AABB var18 = new AABB((double)(var14 - 80), (double)(var16 - 80), (double)(var15 - 80), (double)(var14 + 80 + 1), (double)(var16 + 80 + 1), (double)(var15 + 80 + 1));
-            this.placing.addLast(new JigsawPlacement.PieceState(var12, new AtomicReference(Shapes.join(Shapes.create(var18), Shapes.create(AABB.of(var13)), BooleanOp.ONLY_FIRST)), var16 + 80, 0));
-
-            while(!this.placing.isEmpty()) {
-               JigsawPlacement.PieceState var19 = (JigsawPlacement.PieceState)this.placing.removeFirst();
-               this.tryPlacingChildren(var19.piece, var19.free, var19.boundsTop, var19.depth);
-            }
-
-         }
+         this.pieces = var6;
+         this.random = var7;
       }
 
-      private void tryPlacingChildren(PoolElementStructurePiece var1, AtomicReference<VoxelShape> var2, int var3, int var4) {
-         StructurePoolElement var5 = var1.getElement();
-         BlockPos var6 = var1.getPosition();
-         Rotation var7 = var1.getRotation();
-         StructureTemplatePool.Projection var8 = var5.getProjection();
-         boolean var9 = var8 == StructureTemplatePool.Projection.RIGID;
-         AtomicReference var10 = new AtomicReference();
-         BoundingBox var11 = var1.getBoundingBox();
-         int var12 = var11.y0;
-         Iterator var13 = var5.getShuffledJigsawBlocks(this.structureManager, var6, var7, this.random).iterator();
+      private void tryPlacingChildren(PoolElementStructurePiece var1, MutableObject<VoxelShape> var2, int var3, int var4, boolean var5) {
+         StructurePoolElement var6 = var1.getElement();
+         BlockPos var7 = var1.getPosition();
+         Rotation var8 = var1.getRotation();
+         StructureTemplatePool.Projection var9 = var6.getProjection();
+         boolean var10 = var9 == StructureTemplatePool.Projection.RIGID;
+         MutableObject var11 = new MutableObject();
+         BoundingBox var12 = var1.getBoundingBox();
+         int var13 = var12.y0;
+         Iterator var14 = var6.getShuffledJigsawBlocks(this.structureManager, var7, var8, this.random).iterator();
 
          while(true) {
             while(true) {
-               label90:
-               while(var13.hasNext()) {
-                  StructureTemplate.StructureBlockInfo var14 = (StructureTemplate.StructureBlockInfo)var13.next();
-                  Direction var15 = (Direction)var14.state.getValue(JigsawBlock.FACING);
-                  BlockPos var16 = var14.pos;
-                  BlockPos var17 = var16.relative(var15);
-                  int var18 = var16.getY() - var12;
-                  int var19 = -1;
-                  StructureTemplatePool var20 = JigsawPlacement.POOLS.getPool(new ResourceLocation(var14.nbt.getString("target_pool")));
-                  StructureTemplatePool var21 = JigsawPlacement.POOLS.getPool(var20.getFallback());
-                  if (var20 != StructureTemplatePool.INVALID && (var20.size() != 0 || var20 == StructureTemplatePool.EMPTY)) {
-                     boolean var24 = var11.isInside(var17);
-                     AtomicReference var22;
-                     int var23;
-                     if (var24) {
-                        var22 = var10;
-                        var23 = var12;
-                        if (var10.get() == null) {
-                           var10.set(Shapes.create(AABB.of(var11)));
+               label89:
+               while(var14.hasNext()) {
+                  StructureTemplate.StructureBlockInfo var15 = (StructureTemplate.StructureBlockInfo)var14.next();
+                  Direction var16 = JigsawBlock.getFrontFacing(var15.state);
+                  BlockPos var17 = var15.pos;
+                  BlockPos var18 = var17.relative(var16);
+                  int var19 = var17.getY() - var13;
+                  int var20 = -1;
+                  StructureTemplatePool var21 = getPool(this.pools, new ResourceLocation(var15.nbt.getString("pool")));
+                  StructureTemplatePool var22 = getPool(this.pools, var21.getFallback());
+                  if (var21 != Pools.INVALID && (var21.size() != 0 || var21 == Pools.EMPTY)) {
+                     boolean var25 = var12.isInside(var18);
+                     MutableObject var23;
+                     int var24;
+                     if (var25) {
+                        var23 = var11;
+                        var24 = var13;
+                        if (var11.getValue() == null) {
+                           var11.setValue(Shapes.create(AABB.of(var12)));
                         }
                      } else {
-                        var22 = var2;
-                        var23 = var3;
+                        var23 = var2;
+                        var24 = var3;
                      }
 
-                     ArrayList var25 = Lists.newArrayList();
+                     ArrayList var26 = Lists.newArrayList();
                      if (var4 != this.maxDepth) {
-                        var25.addAll(var20.getShuffledTemplates(this.random));
+                        var26.addAll(var21.getShuffledTemplates(this.random));
                      }
 
-                     var25.addAll(var21.getShuffledTemplates(this.random));
-                     Iterator var26 = var25.iterator();
+                     var26.addAll(var22.getShuffledTemplates(this.random));
+                     Iterator var27 = var26.iterator();
 
-                     while(var26.hasNext()) {
-                        StructurePoolElement var27 = (StructurePoolElement)var26.next();
-                        if (var27 == EmptyPoolElement.INSTANCE) {
+                     while(var27.hasNext()) {
+                        StructurePoolElement var28 = (StructurePoolElement)var27.next();
+                        if (var28 == EmptyPoolElement.INSTANCE) {
                            break;
                         }
 
-                        Iterator var28 = Rotation.getShuffled(this.random).iterator();
+                        Iterator var29 = Rotation.getShuffled(this.random).iterator();
 
-                        label117:
-                        while(var28.hasNext()) {
-                           Rotation var29 = (Rotation)var28.next();
-                           List var30 = var27.getShuffledJigsawBlocks(this.structureManager, BlockPos.ZERO, var29, this.random);
-                           BoundingBox var31 = var27.getBoundingBox(this.structureManager, BlockPos.ZERO, var29);
-                           int var32;
-                           if (var31.getYSpan() > 16) {
-                              var32 = 0;
-                           } else {
-                              var32 = var30.stream().mapToInt((var2x) -> {
-                                 if (!var31.isInside(var2x.pos.relative((Direction)var2x.state.getValue(JigsawBlock.FACING)))) {
+                        label121:
+                        while(var29.hasNext()) {
+                           Rotation var30 = (Rotation)var29.next();
+                           List var31 = var28.getShuffledJigsawBlocks(this.structureManager, BlockPos.ZERO, var30, this.random);
+                           BoundingBox var32 = var28.getBoundingBox(this.structureManager, BlockPos.ZERO, var30);
+                           int var33;
+                           if (var5 && var32.getYSpan() <= 16) {
+                              var33 = var31.stream().mapToInt((var2x) -> {
+                                 if (!var32.isInside(var2x.pos.relative(JigsawBlock.getFrontFacing(var2x.state)))) {
                                     return 0;
                                  } else {
-                                    ResourceLocation var3 = new ResourceLocation(var2x.nbt.getString("target_pool"));
-                                    StructureTemplatePool var4 = JigsawPlacement.POOLS.getPool(var3);
-                                    StructureTemplatePool var5 = JigsawPlacement.POOLS.getPool(var4.getFallback());
+                                    ResourceLocation var3 = new ResourceLocation(var2x.nbt.getString("pool"));
+                                    StructureTemplatePool var4 = getPool(this.pools, var3);
+                                    StructureTemplatePool var5 = getPool(this.pools, var4.getFallback());
                                     return Math.max(var4.getMaxSize(this.structureManager), var5.getMaxSize(this.structureManager));
                                  }
                               }).max().orElse(0);
+                           } else {
+                              var33 = 0;
                            }
 
-                           Iterator var33 = var30.iterator();
+                           Iterator var34 = var31.iterator();
 
-                           StructureTemplatePool.Projection var39;
-                           boolean var40;
-                           int var41;
+                           StructureTemplatePool.Projection var40;
+                           boolean var41;
                            int var42;
                            int var43;
-                           BoundingBox var45;
-                           BlockPos var46;
-                           int var47;
+                           int var44;
+                           BoundingBox var46;
+                           BlockPos var47;
+                           int var48;
                            do {
-                              StructureTemplate.StructureBlockInfo var34;
+                              StructureTemplate.StructureBlockInfo var35;
                               do {
-                                 if (!var33.hasNext()) {
-                                    continue label117;
+                                 if (!var34.hasNext()) {
+                                    continue label121;
                                  }
 
-                                 var34 = (StructureTemplate.StructureBlockInfo)var33.next();
-                              } while(!JigsawBlock.canAttach(var14, var34));
+                                 var35 = (StructureTemplate.StructureBlockInfo)var34.next();
+                              } while(!JigsawBlock.canAttach(var15, var35));
 
-                              BlockPos var35 = var34.pos;
-                              BlockPos var36 = new BlockPos(var17.getX() - var35.getX(), var17.getY() - var35.getY(), var17.getZ() - var35.getZ());
-                              BoundingBox var37 = var27.getBoundingBox(this.structureManager, var36, var29);
-                              int var38 = var37.y0;
-                              var39 = var27.getProjection();
-                              var40 = var39 == StructureTemplatePool.Projection.RIGID;
-                              var41 = var35.getY();
-                              var42 = var18 - var41 + ((Direction)var14.state.getValue(JigsawBlock.FACING)).getStepY();
-                              if (var9 && var40) {
-                                 var43 = var12 + var42;
+                              BlockPos var36 = var35.pos;
+                              BlockPos var37 = new BlockPos(var18.getX() - var36.getX(), var18.getY() - var36.getY(), var18.getZ() - var36.getZ());
+                              BoundingBox var38 = var28.getBoundingBox(this.structureManager, var37, var30);
+                              int var39 = var38.y0;
+                              var40 = var28.getProjection();
+                              var41 = var40 == StructureTemplatePool.Projection.RIGID;
+                              var42 = var36.getY();
+                              var43 = var19 - var42 + JigsawBlock.getFrontFacing(var15.state).getStepY();
+                              if (var10 && var41) {
+                                 var44 = var13 + var43;
                               } else {
-                                 if (var19 == -1) {
-                                    var19 = this.chunkGenerator.getFirstFreeHeight(var16.getX(), var16.getZ(), Heightmap.Types.WORLD_SURFACE_WG);
+                                 if (var20 == -1) {
+                                    var20 = this.chunkGenerator.getFirstFreeHeight(var17.getX(), var17.getZ(), Heightmap.Types.WORLD_SURFACE_WG);
                                  }
 
-                                 var43 = var19 - var41;
+                                 var44 = var20 - var42;
                               }
 
-                              int var44 = var43 - var38;
-                              var45 = var37.moved(0, var44, 0);
-                              var46 = var36.offset(0, var44, 0);
-                              if (var32 > 0) {
-                                 var47 = Math.max(var32 + 1, var45.y1 - var45.y0);
-                                 var45.y1 = var45.y0 + var47;
+                              int var45 = var44 - var39;
+                              var46 = var38.moved(0, var45, 0);
+                              var47 = var37.offset(0, var45, 0);
+                              if (var33 > 0) {
+                                 var48 = Math.max(var33 + 1, var46.y1 - var46.y0);
+                                 var46.y1 = var46.y0 + var48;
                               }
-                           } while(Shapes.joinIsNotEmpty((VoxelShape)var22.get(), Shapes.create(AABB.of(var45).deflate(0.25D)), BooleanOp.ONLY_SECOND));
+                           } while(Shapes.joinIsNotEmpty((VoxelShape)var23.getValue(), Shapes.create(AABB.of(var46).deflate(0.25D)), BooleanOp.ONLY_SECOND));
 
-                           var22.set(Shapes.joinUnoptimized((VoxelShape)var22.get(), Shapes.create(AABB.of(var45)), BooleanOp.ONLY_FIRST));
-                           var47 = var1.getGroundLevelDelta();
-                           int var48;
-                           if (var40) {
-                              var48 = var47 - var42;
+                           var23.setValue(Shapes.joinUnoptimized((VoxelShape)var23.getValue(), Shapes.create(AABB.of(var46)), BooleanOp.ONLY_FIRST));
+                           var48 = var1.getGroundLevelDelta();
+                           int var49;
+                           if (var41) {
+                              var49 = var48 - var43;
                            } else {
-                              var48 = var27.getGroundLevelDelta();
+                              var49 = var28.getGroundLevelDelta();
                            }
 
-                           PoolElementStructurePiece var49 = this.factory.create(this.structureManager, var27, var46, var48, var29, var45);
-                           int var50;
-                           if (var9) {
-                              var50 = var12 + var18;
-                           } else if (var40) {
-                              var50 = var43 + var41;
+                           PoolElementStructurePiece var50 = this.factory.create(this.structureManager, var28, var47, var49, var30, var46);
+                           int var51;
+                           if (var10) {
+                              var51 = var13 + var19;
+                           } else if (var41) {
+                              var51 = var44 + var42;
                            } else {
-                              if (var19 == -1) {
-                                 var19 = this.chunkGenerator.getFirstFreeHeight(var16.getX(), var16.getZ(), Heightmap.Types.WORLD_SURFACE_WG);
+                              if (var20 == -1) {
+                                 var20 = this.chunkGenerator.getFirstFreeHeight(var17.getX(), var17.getZ(), Heightmap.Types.WORLD_SURFACE_WG);
                               }
 
-                              var50 = var19 + var42 / 2;
+                              var51 = var20 + var43 / 2;
                            }
 
-                           var1.addJunction(new JigsawJunction(var17.getX(), var50 - var18 + var47, var17.getZ(), var42, var39));
-                           var49.addJunction(new JigsawJunction(var16.getX(), var50 - var41 + var48, var16.getZ(), -var42, var8));
-                           this.pieces.add(var49);
+                           var1.addJunction(new JigsawJunction(var18.getX(), var51 - var19 + var48, var18.getZ(), var43, var40));
+                           var50.addJunction(new JigsawJunction(var17.getX(), var51 - var42 + var49, var17.getZ(), -var43, var9));
+                           this.pieces.add(var50);
                            if (var4 + 1 <= this.maxDepth) {
-                              this.placing.addLast(new JigsawPlacement.PieceState(var49, var22, var23, var4 + 1));
+                              this.placing.addLast(new JigsawPlacement.PieceState(var50, var23, var24, var4 + 1));
                            }
-                           continue label90;
+                           continue label89;
                         }
                      }
                   } else {
-                     JigsawPlacement.LOGGER.warn((String)"Empty or none existent pool: {}", (Object)var14.nbt.getString("target_pool"));
+                     JigsawPlacement.LOGGER.warn((String)"Empty or none existent pool: {}", (Object)var15.nbt.getString("pool"));
                   }
                }
 
                return;
             }
          }
       }
+
+      private static StructureTemplatePool getPool(Registry<StructureTemplatePool> var0, ResourceLocation var1) {
+         return (StructureTemplatePool)Optional.ofNullable(var0.get(var1)).orElse(Pools.INVALID);
+      }
    }
 
    static final class PieceState {
       private final PoolElementStructurePiece piece;
-      private final AtomicReference<VoxelShape> free;
+      private final MutableObject<VoxelShape> free;
       private final int boundsTop;
       private final int depth;
 
-      private PieceState(PoolElementStructurePiece var1, AtomicReference<VoxelShape> var2, int var3, int var4) {
+      private PieceState(PoolElementStructurePiece var1, MutableObject<VoxelShape> var2, int var3, int var4) {
          this.piece = var1;
          this.free = var2;
          this.boundsTop = var3;
          this.depth = var4;
       }
