--- net/minecraft/world/level/levelgen/feature/structures/StructureTemplatePool.java
+++ net/minecraft/world/level/levelgen/feature/structures/StructureTemplatePool.java
@@ -1,27 +1,47 @@
 package net.minecraft.world.level.levelgen.feature.structures;
 
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.Lists;
+import com.mojang.datafixers.util.Function4;
 import com.mojang.datafixers.util.Pair;
+import com.mojang.serialization.Codec;
+import com.mojang.serialization.codecs.RecordCodecBuilder;
 import it.unimi.dsi.fastutil.objects.ObjectArrays;
 import java.util.Arrays;
 import java.util.Collection;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
 import java.util.Random;
 import java.util.stream.Collectors;
+import net.minecraft.Util;
 import net.minecraft.core.BlockPos;
 import net.minecraft.resources.ResourceLocation;
+import net.minecraft.util.StringRepresentable;
 import net.minecraft.world.level.block.Rotation;
 import net.minecraft.world.level.levelgen.Heightmap;
 import net.minecraft.world.level.levelgen.structure.templatesystem.GravityProcessor;
 import net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager;
 import net.minecraft.world.level.levelgen.structure.templatesystem.StructureProcessor;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
 
 public class StructureTemplatePool {
+   private static final Logger LOGGER = LogManager.getLogger();
+   public static final Codec<StructureTemplatePool> CODEC = RecordCodecBuilder.create((var0) -> {
+      RecordCodecBuilder var10001 = ResourceLocation.CODEC.fieldOf("name").forGetter(StructureTemplatePool::getName);
+      RecordCodecBuilder var10002 = ResourceLocation.CODEC.fieldOf("fallback").forGetter(StructureTemplatePool::getFallback);
+      Codec var10003 = Codec.mapPair(StructurePoolElement.CODEC.fieldOf("element"), Codec.INT.fieldOf("weight")).codec().listOf();
+      Logger var10005 = LOGGER;
+      var10005.getClass();
+      return var0.group(var10001, var10002, var10003.promotePartial(Util.prefix("Pool element: ", var10005::error)).fieldOf("elements").forGetter((var0x) -> {
+         return var0x.rawTemplates;
+      }), StructureTemplatePool.Projection.CODEC.fieldOf("projection").forGetter((var0x) -> {
+         return var0x.projection;
+      })).apply(var0, (Function4)(StructureTemplatePool::new));
+   });
    public static final StructureTemplatePool EMPTY;
    public static final StructureTemplatePool INVALID;
    private final ResourceLocation name;
    private final ImmutableList<Pair<StructurePoolElement, Integer>> rawTemplates;
    private final List<StructurePoolElement> templates;
@@ -36,11 +56,11 @@
       Iterator var5 = var3.iterator();
 
       while(var5.hasNext()) {
          Pair var6 = (Pair)var5.next();
 
-         for(Integer var7 = 0; var7 < (Integer)var6.getSecond(); var7 = var7 + 1) {
+         for(int var7 = 0; var7 < (Integer)var6.getSecond(); ++var7) {
             this.templates.add(((StructurePoolElement)var6.getFirst()).setProjection(var4));
          }
       }
 
       this.fallback = var2;
@@ -80,14 +100,15 @@
    static {
       EMPTY = new StructureTemplatePool(new ResourceLocation("empty"), new ResourceLocation("empty"), ImmutableList.of(), StructureTemplatePool.Projection.RIGID);
       INVALID = new StructureTemplatePool(new ResourceLocation("invalid"), new ResourceLocation("invalid"), ImmutableList.of(), StructureTemplatePool.Projection.RIGID);
    }
 
-   public static enum Projection {
+   public static enum Projection implements StringRepresentable {
       TERRAIN_MATCHING("terrain_matching", ImmutableList.of(new GravityProcessor(Heightmap.Types.WORLD_SURFACE_WG, -1))),
       RIGID("rigid", ImmutableList.of());
 
+      public static final Codec<StructureTemplatePool.Projection> CODEC = StringRepresentable.fromEnum(StructureTemplatePool.Projection::values, StructureTemplatePool.Projection::byName);
       private static final Map<String, StructureTemplatePool.Projection> BY_NAME = (Map)Arrays.stream(values()).collect(Collectors.toMap(StructureTemplatePool.Projection::getName, (var0) -> {
          return var0;
       }));
       private final String name;
       private final ImmutableList<StructureProcessor> processors;
@@ -106,7 +127,11 @@
       }
 
       public ImmutableList<StructureProcessor> getProcessors() {
          return this.processors;
       }
+
+      public String getSerializedName() {
+         return this.name;
+      }
    }
 }
