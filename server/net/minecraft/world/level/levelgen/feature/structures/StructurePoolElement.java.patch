--- net/minecraft/world/level/levelgen/feature/structures/StructurePoolElement.java
+++ net/minecraft/world/level/levelgen/feature/structures/StructurePoolElement.java
@@ -1,40 +1,50 @@
 package net.minecraft.world.level.levelgen.feature.structures;
 
-import com.mojang.datafixers.Dynamic;
-import com.mojang.datafixers.types.DynamicOps;
+import com.google.common.collect.ImmutableList;
+import com.mojang.datafixers.util.Either;
+import com.mojang.serialization.Codec;
+import com.mojang.serialization.codecs.RecordCodecBuilder;
 import java.util.List;
 import java.util.Random;
+import java.util.function.Function;
+import java.util.stream.Collectors;
 import javax.annotation.Nullable;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Registry;
+import net.minecraft.resources.ResourceLocation;
 import net.minecraft.world.level.LevelAccessor;
+import net.minecraft.world.level.StructureFeatureManager;
+import net.minecraft.world.level.WorldGenLevel;
 import net.minecraft.world.level.block.Rotation;
 import net.minecraft.world.level.chunk.ChunkGenerator;
+import net.minecraft.world.level.levelgen.feature.ConfiguredFeature;
 import net.minecraft.world.level.levelgen.structure.BoundingBox;
 import net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager;
+import net.minecraft.world.level.levelgen.structure.templatesystem.StructureProcessor;
 import net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplate;
 
 public abstract class StructurePoolElement {
+   public static final Codec<StructurePoolElement> CODEC;
    @Nullable
    private volatile StructureTemplatePool.Projection projection;
 
+   protected static <E extends StructurePoolElement> RecordCodecBuilder<E, StructureTemplatePool.Projection> projectionCodec() {
+      return StructureTemplatePool.Projection.CODEC.fieldOf("projection").forGetter(StructurePoolElement::getProjection);
+   }
+
    protected StructurePoolElement(StructureTemplatePool.Projection var1) {
       this.projection = var1;
    }
 
-   protected StructurePoolElement(Dynamic<?> var1) {
-      this.projection = StructureTemplatePool.Projection.byName(var1.get("projection").asString(StructureTemplatePool.Projection.RIGID.getName()));
-   }
-
    public abstract List<StructureTemplate.StructureBlockInfo> getShuffledJigsawBlocks(StructureManager var1, BlockPos var2, Rotation var3, Random var4);
 
    public abstract BoundingBox getBoundingBox(StructureManager var1, BlockPos var2, Rotation var3);
 
-   public abstract boolean place(StructureManager var1, LevelAccessor var2, ChunkGenerator<?> var3, BlockPos var4, Rotation var5, BoundingBox var6, Random var7);
+   public abstract boolean place(StructureManager var1, WorldGenLevel var2, StructureFeatureManager var3, ChunkGenerator var4, BlockPos var5, BlockPos var6, Rotation var7, BoundingBox var8, Random var9, boolean var10);
 
-   public abstract StructurePoolElementType getType();
+   public abstract StructurePoolElementType<?> getType();
 
    public void handleDataMarker(LevelAccessor var1, StructureTemplate.StructureBlockInfo var2, BlockPos var3, Rotation var4, Random var5, BoundingBox var6) {
    }
 
    public StructurePoolElement setProjection(StructureTemplatePool.Projection var1) {
@@ -49,17 +59,63 @@
       } else {
          return var1;
       }
    }
 
-   protected abstract <T> Dynamic<T> getDynamic(DynamicOps<T> var1);
+   public int getGroundLevelDelta() {
+      return 1;
+   }
 
-   public <T> Dynamic<T> serialize(DynamicOps<T> var1) {
-      Object var2 = this.getDynamic(var1).getValue();
-      Object var3 = var1.mergeInto(var2, var1.createString("element_type"), var1.createString(Registry.STRUCTURE_POOL_ELEMENT.getKey(this.getType()).toString()));
-      return new Dynamic(var1, var1.mergeInto(var3, var1.createString("projection"), var1.createString(this.projection.getName())));
+   public static Function<StructureTemplatePool.Projection, EmptyPoolElement> empty() {
+      return (var0) -> {
+         return EmptyPoolElement.INSTANCE;
+      };
    }
 
-   public int getGroundLevelDelta() {
-      return 1;
+   public static Function<StructureTemplatePool.Projection, LegacySinglePoolElement> legacy(String var0) {
+      return (var1) -> {
+         return new LegacySinglePoolElement(Either.left(new ResourceLocation(var0)), ImmutableList::of, var1);
+      };
    }
+
+   public static Function<StructureTemplatePool.Projection, LegacySinglePoolElement> legacy(String var0, ImmutableList<StructureProcessor> var1) {
+      return (var2) -> {
+         return new LegacySinglePoolElement(Either.left(new ResourceLocation(var0)), () -> {
+            return var1;
+         }, var2);
+      };
+   }
+
+   public static Function<StructureTemplatePool.Projection, SinglePoolElement> single(String var0) {
+      return (var1) -> {
+         return new SinglePoolElement(Either.left(new ResourceLocation(var0)), ImmutableList::of, var1);
+      };
+   }
+
+   public static Function<StructureTemplatePool.Projection, SinglePoolElement> single(String var0, ImmutableList<StructureProcessor> var1) {
+      return (var2) -> {
+         return new SinglePoolElement(Either.left(new ResourceLocation(var0)), () -> {
+            return var1;
+         }, var2);
+      };
+   }
+
+   public static Function<StructureTemplatePool.Projection, FeaturePoolElement> feature(ConfiguredFeature<?, ?> var0) {
+      return (var1) -> {
+         return new FeaturePoolElement(() -> {
+            return var0;
+         }, var1);
+      };
+   }
+
+   public static Function<StructureTemplatePool.Projection, ListPoolElement> list(List<Function<StructureTemplatePool.Projection, ? extends StructurePoolElement>> var0) {
+      return (var1) -> {
+         return new ListPoolElement((List)var0.stream().map((var1x) -> {
+            return (StructurePoolElement)var1x.apply(var1);
+         }).collect(Collectors.toList()), var1);
+      };
+   }
+
+   static {
+      CODEC = Registry.STRUCTURE_POOL_ELEMENT.dispatch("element_type", StructurePoolElement::getType, StructurePoolElementType::codec);
+   }
 }
