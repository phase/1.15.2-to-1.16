--- net/minecraft/world/level/levelgen/feature/StructureFeature.java
+++ net/minecraft/world/level/levelgen/feature/StructureFeature.java
@@ -1,182 +1,279 @@
 package net.minecraft.world.level.levelgen.feature;
 
-import com.google.common.collect.Lists;
-import com.mojang.datafixers.Dynamic;
-import it.unimi.dsi.fastutil.longs.LongIterator;
-import java.util.ArrayList;
-import java.util.Iterator;
+import com.google.common.collect.BiMap;
+import com.google.common.collect.HashBiMap;
+import com.google.common.collect.ImmutableList;
+import com.google.common.collect.ImmutableMap;
+import com.google.common.collect.Maps;
+import com.mojang.serialization.Codec;
+import java.util.Collections;
 import java.util.List;
-import java.util.Random;
-import java.util.function.Function;
+import java.util.Locale;
+import java.util.Map;
 import javax.annotation.Nullable;
 import net.minecraft.core.BlockPos;
+import net.minecraft.core.Registry;
+import net.minecraft.core.RegistryAccess;
+import net.minecraft.core.SectionPos;
+import net.minecraft.nbt.CompoundTag;
+import net.minecraft.nbt.ListTag;
+import net.minecraft.resources.ResourceLocation;
 import net.minecraft.world.level.ChunkPos;
-import net.minecraft.world.level.Level;
-import net.minecraft.world.level.LevelAccessor;
+import net.minecraft.world.level.LevelReader;
+import net.minecraft.world.level.StructureFeatureManager;
 import net.minecraft.world.level.biome.Biome;
-import net.minecraft.world.level.biome.BiomeManager;
+import net.minecraft.world.level.biome.BiomeSource;
 import net.minecraft.world.level.chunk.ChunkAccess;
 import net.minecraft.world.level.chunk.ChunkGenerator;
 import net.minecraft.world.level.chunk.ChunkStatus;
-import net.minecraft.world.level.levelgen.ChunkGeneratorSettings;
+import net.minecraft.world.level.levelgen.GenerationStep;
 import net.minecraft.world.level.levelgen.WorldgenRandom;
 import net.minecraft.world.level.levelgen.feature.configurations.FeatureConfiguration;
+import net.minecraft.world.level.levelgen.feature.configurations.JigsawConfiguration;
+import net.minecraft.world.level.levelgen.feature.configurations.MineshaftConfiguration;
+import net.minecraft.world.level.levelgen.feature.configurations.NoneFeatureConfiguration;
+import net.minecraft.world.level.levelgen.feature.configurations.OceanRuinConfiguration;
+import net.minecraft.world.level.levelgen.feature.configurations.ProbabilityFeatureConfiguration;
+import net.minecraft.world.level.levelgen.feature.configurations.RuinedPortalConfiguration;
+import net.minecraft.world.level.levelgen.feature.configurations.ShipwreckConfiguration;
+import net.minecraft.world.level.levelgen.feature.configurations.StructureFeatureConfiguration;
 import net.minecraft.world.level.levelgen.structure.BoundingBox;
+import net.minecraft.world.level.levelgen.structure.NetherFossilFeature;
+import net.minecraft.world.level.levelgen.structure.OceanRuinFeature;
 import net.minecraft.world.level.levelgen.structure.StructurePiece;
 import net.minecraft.world.level.levelgen.structure.StructureStart;
+import net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
-public abstract class StructureFeature<C extends FeatureConfiguration> extends Feature<C> {
+public abstract class StructureFeature<C extends FeatureConfiguration> {
+   public static final BiMap<String, StructureFeature<?>> STRUCTURES_REGISTRY = HashBiMap.create();
+   private static final Map<StructureFeature<?>, GenerationStep.Decoration> STEP = Maps.newHashMap();
    private static final Logger LOGGER = LogManager.getLogger();
+   public static final StructureFeature<JigsawConfiguration> PILLAGER_OUTPOST;
+   public static final StructureFeature<MineshaftConfiguration> MINESHAFT;
+   public static final StructureFeature<NoneFeatureConfiguration> WOODLAND_MANSION;
+   public static final StructureFeature<NoneFeatureConfiguration> JUNGLE_TEMPLE;
+   public static final StructureFeature<NoneFeatureConfiguration> DESERT_PYRAMID;
+   public static final StructureFeature<NoneFeatureConfiguration> IGLOO;
+   public static final StructureFeature<RuinedPortalConfiguration> RUINED_PORTAL;
+   public static final StructureFeature<ShipwreckConfiguration> SHIPWRECK;
+   public static final SwamplandHutFeature SWAMP_HUT;
+   public static final StructureFeature<NoneFeatureConfiguration> STRONGHOLD;
+   public static final StructureFeature<NoneFeatureConfiguration> OCEAN_MONUMENT;
+   public static final StructureFeature<OceanRuinConfiguration> OCEAN_RUIN;
+   public static final StructureFeature<NoneFeatureConfiguration> NETHER_BRIDGE;
+   public static final StructureFeature<NoneFeatureConfiguration> END_CITY;
+   public static final StructureFeature<ProbabilityFeatureConfiguration> BURIED_TREASURE;
+   public static final StructureFeature<JigsawConfiguration> VILLAGE;
+   public static final StructureFeature<NoneFeatureConfiguration> NETHER_FOSSIL;
+   public static final StructureFeature<JigsawConfiguration> BASTION_REMNANT;
+   public static final List<StructureFeature<?>> NOISE_AFFECTING_FEATURES;
+   private static final Map<String, String> RENAMES;
+   private final Codec<ConfiguredStructureFeature<C, StructureFeature<C>>> configuredStructureCodec;
 
-   public StructureFeature(Function<Dynamic<?>, ? extends C> var1) {
-      super(var1);
+   private static <F extends StructureFeature<?>> F register(String var0, F var1, GenerationStep.Decoration var2) {
+      STRUCTURES_REGISTRY.put(var0.toLowerCase(Locale.ROOT), var1);
+      STEP.put(var1, var2);
+      return (StructureFeature)Registry.register(Registry.STRUCTURE_FEATURE, (String)var0.toLowerCase(Locale.ROOT), var1);
    }
 
-   public ConfiguredFeature<C, ? extends StructureFeature<C>> configured(C var1) {
-      return new ConfiguredFeature(this, var1);
+   public StructureFeature(Codec<C> var1) {
+      this.configuredStructureCodec = var1.fieldOf("config").xmap((var1x) -> {
+         return new ConfiguredStructureFeature(this, var1x);
+      }, (var0) -> {
+         return var0.config;
+      }).codec();
    }
 
-   public boolean place(LevelAccessor var1, ChunkGenerator<? extends ChunkGeneratorSettings> var2, Random var3, BlockPos var4, C var5) {
-      if (!var1.getLevelData().isGenerateMapFeatures()) {
-         return false;
-      } else {
-         int var6 = var4.getX() >> 4;
-         int var7 = var4.getZ() >> 4;
-         int var8 = var6 << 4;
-         int var9 = var7 << 4;
-         boolean var10 = false;
-         LongIterator var11 = var1.getChunk(var6, var7).getReferencesForFeature(this.getFeatureName()).iterator();
+   public GenerationStep.Decoration step() {
+      return (GenerationStep.Decoration)STEP.get(this);
+   }
 
-         while(var11.hasNext()) {
-            Long var12 = (Long)var11.next();
-            ChunkPos var13 = new ChunkPos(var12);
-            StructureStart var14 = var1.getChunk(var13.x, var13.z).getStartForFeature(this.getFeatureName());
-            if (var14 != null && var14 != StructureStart.INVALID_START) {
-               var14.postProcess(var1, var2, var3, new BoundingBox(var8, var9, var8 + 15, var9 + 15), new ChunkPos(var6, var7));
-               var10 = true;
-            }
-         }
-
-         return var10;
-      }
+   public static void bootstrap() {
    }
 
-   protected StructureStart getStructureAt(LevelAccessor var1, BlockPos var2, boolean var3) {
-      List var4 = this.dereferenceStructureStarts(var1, var2.getX() >> 4, var2.getZ() >> 4);
-      Iterator var5 = var4.iterator();
+   @Nullable
+   public static StructureStart<?> loadStaticStart(StructureManager var0, CompoundTag var1, long var2) {
+      String var4 = var1.getString("id");
+      if ("INVALID".equals(var4)) {
+         return StructureStart.INVALID_START;
+      } else {
+         StructureFeature var5 = (StructureFeature)Registry.STRUCTURE_FEATURE.get(new ResourceLocation(var4.toLowerCase(Locale.ROOT)));
+         if (var5 == null) {
+            LOGGER.error((String)"Unknown feature id: {}", (Object)var4);
+            return null;
+         } else {
+            int var6 = var1.getInt("ChunkX");
+            int var7 = var1.getInt("ChunkZ");
+            int var8 = var1.getInt("references");
+            BoundingBox var9 = var1.contains("BB") ? new BoundingBox(var1.getIntArray("BB")) : BoundingBox.getUnknownBox();
+            ListTag var10 = var1.getList("Children", 10);
 
-      while(true) {
-         StructureStart var6;
-         do {
-            do {
-               if (!var5.hasNext()) {
-                  return StructureStart.INVALID_START;
+            try {
+               StructureStart var11 = var5.createStart(var6, var7, var9, var8, var2);
+
+               for(int var12 = 0; var12 < var10.size(); ++var12) {
+                  CompoundTag var13 = var10.getCompound(var12);
+                  String var14 = var13.getString("id").toLowerCase(Locale.ROOT);
+                  String var15 = (String)RENAMES.getOrDefault(var14, var14);
+                  StructurePieceType var16 = (StructurePieceType)Registry.STRUCTURE_PIECE.get(new ResourceLocation(var15));
+                  if (var16 == null) {
+                     LOGGER.error((String)"Unknown structure piece id: {}", (Object)var15);
+                  } else {
+                     try {
+                        StructurePiece var17 = var16.load(var0, var13);
+                        var11.getPieces().add(var17);
+                     } catch (Exception var18) {
+                        LOGGER.error((String)"Exception loading structure piece with id {}", (Object)var15, (Object)var18);
+                     }
+                  }
                }
 
-               var6 = (StructureStart)var5.next();
-            } while(!var6.isValid());
-         } while(!var6.getBoundingBox().isInside(var2));
-
-         if (!var3) {
-            return var6;
-         }
-
-         Iterator var7 = var6.getPieces().iterator();
-
-         while(var7.hasNext()) {
-            StructurePiece var8 = (StructurePiece)var7.next();
-            if (var8.getBoundingBox().isInside(var2)) {
-               return var6;
+               return var11;
+            } catch (Exception var19) {
+               LOGGER.error((String)"Failed Start with id {}", (Object)var4, (Object)var19);
+               return null;
             }
          }
       }
    }
 
-   public boolean isInsideBoundingFeature(LevelAccessor var1, BlockPos var2) {
-      return this.getStructureAt(var1, var2, false).isValid();
+   public Codec<ConfiguredStructureFeature<C, StructureFeature<C>>> configuredStructureCodec() {
+      return this.configuredStructureCodec;
    }
 
-   public boolean isInsideFeature(LevelAccessor var1, BlockPos var2) {
-      return this.getStructureAt(var1, var2, true).isValid();
+   public ConfiguredStructureFeature<C, ? extends StructureFeature<C>> configured(C var1) {
+      return new ConfiguredStructureFeature(this, var1);
    }
 
    @Nullable
-   public BlockPos getNearestGeneratedFeature(Level var1, ChunkGenerator<? extends ChunkGeneratorSettings> var2, BlockPos var3, int var4, boolean var5) {
-      if (!var2.getBiomeSource().canGenerateStructure(this)) {
-         return null;
-      } else {
-         int var6 = var3.getX() >> 4;
-         int var7 = var3.getZ() >> 4;
-         int var8 = 0;
+   public BlockPos getNearestGeneratedFeature(LevelReader var1, StructureFeatureManager var2, BlockPos var3, int var4, boolean var5, long var6, StructureFeatureConfiguration var8) {
+      int var9 = var8.spacing();
+      int var10 = var3.getX() >> 4;
+      int var11 = var3.getZ() >> 4;
+      int var12 = 0;
 
-         for(WorldgenRandom var9 = new WorldgenRandom(); var8 <= var4; ++var8) {
-            for(int var10 = -var8; var10 <= var8; ++var10) {
-               boolean var11 = var10 == -var8 || var10 == var8;
+      for(WorldgenRandom var13 = new WorldgenRandom(); var12 <= var4; ++var12) {
+         for(int var14 = -var12; var14 <= var12; ++var14) {
+            boolean var15 = var14 == -var12 || var14 == var12;
 
-               for(int var12 = -var8; var12 <= var8; ++var12) {
-                  boolean var13 = var12 == -var8 || var12 == var8;
-                  if (var11 || var13) {
-                     ChunkPos var14 = this.getPotentialFeatureChunkFromLocationWithOffset(var2, var9, var6, var7, var10, var12);
-                     StructureStart var15 = var1.getChunk(var14.x, var14.z, ChunkStatus.STRUCTURE_STARTS).getStartForFeature(this.getFeatureName());
-                     if (var15 != null && var15.isValid()) {
-                        if (var5 && var15.canBeReferenced()) {
-                           var15.addReference();
-                           return var15.getLocatePos();
-                        }
-
-                        if (!var5) {
-                           return var15.getLocatePos();
-                        }
+            for(int var16 = -var12; var16 <= var12; ++var16) {
+               boolean var17 = var16 == -var12 || var16 == var12;
+               if (var15 || var17) {
+                  int var18 = var10 + var9 * var14;
+                  int var19 = var11 + var9 * var16;
+                  ChunkPos var20 = this.getPotentialFeatureChunk(var8, var6, var13, var18, var19);
+                  ChunkAccess var21 = var1.getChunk(var20.x, var20.z, ChunkStatus.STRUCTURE_STARTS);
+                  StructureStart var22 = var2.getStartForFeature(SectionPos.of(var21.getPos(), 0), this, var21);
+                  if (var22 != null && var22.isValid()) {
+                     if (var5 && var22.canBeReferenced()) {
+                        var22.addReference();
+                        return var22.getLocatePos();
                      }
 
-                     if (var8 == 0) {
-                        break;
+                     if (!var5) {
+                        return var22.getLocatePos();
                      }
                   }
-               }
 
-               if (var8 == 0) {
-                  break;
+                  if (var12 == 0) {
+                     break;
+                  }
                }
             }
+
+            if (var12 == 0) {
+               break;
+            }
          }
+      }
 
-         return null;
+      return null;
+   }
+
+   protected boolean linearSeparation() {
+      return true;
+   }
+
+   public final ChunkPos getPotentialFeatureChunk(StructureFeatureConfiguration var1, long var2, WorldgenRandom var4, int var5, int var6) {
+      int var7 = var1.spacing();
+      int var8 = var1.separation();
+      int var9 = Math.floorDiv(var5, var7);
+      int var10 = Math.floorDiv(var6, var7);
+      var4.setLargeFeatureWithSalt(var2, var9, var10, var1.salt());
+      int var11;
+      int var12;
+      if (this.linearSeparation()) {
+         var11 = var4.nextInt(var7 - var8);
+         var12 = var4.nextInt(var7 - var8);
+      } else {
+         var11 = (var4.nextInt(var7 - var8) + var4.nextInt(var7 - var8)) / 2;
+         var12 = (var4.nextInt(var7 - var8) + var4.nextInt(var7 - var8)) / 2;
       }
+
+      return new ChunkPos(var9 * var7 + var11, var10 * var7 + var12);
    }
 
-   private List<StructureStart> dereferenceStructureStarts(LevelAccessor var1, int var2, int var3) {
-      ArrayList var4 = Lists.newArrayList();
-      ChunkAccess var5 = var1.getChunk(var2, var3, ChunkStatus.STRUCTURE_REFERENCES);
-      LongIterator var6 = var5.getReferencesForFeature(this.getFeatureName()).iterator();
+   protected boolean isFeatureChunk(ChunkGenerator var1, BiomeSource var2, long var3, WorldgenRandom var5, int var6, int var7, Biome var8, ChunkPos var9, C var10) {
+      return true;
+   }
 
-      while(var6.hasNext()) {
-         long var7 = var6.nextLong();
-         ChunkAccess var9 = var1.getChunk(ChunkPos.getX(var7), ChunkPos.getZ(var7), ChunkStatus.STRUCTURE_STARTS);
-         StructureStart var10 = var9.getStartForFeature(this.getFeatureName());
-         if (var10 != null) {
-            var4.add(var10);
+   private StructureStart<C> createStart(int var1, int var2, BoundingBox var3, int var4, long var5) {
+      return this.getStartFactory().create(this, var1, var2, var3, var4, var5);
+   }
+
+   public StructureStart<?> generate(RegistryAccess var1, ChunkGenerator var2, BiomeSource var3, StructureManager var4, long var5, ChunkPos var7, Biome var8, int var9, WorldgenRandom var10, StructureFeatureConfiguration var11, C var12) {
+      ChunkPos var13 = this.getPotentialFeatureChunk(var11, var5, var10, var7.x, var7.z);
+      if (var7.x == var13.x && var7.z == var13.z && this.isFeatureChunk(var2, var3, var5, var10, var7.x, var7.z, var8, var13, var12)) {
+         StructureStart var14 = this.createStart(var7.x, var7.z, BoundingBox.getUnknownBox(), var9, var5);
+         var14.generatePieces(var1, var2, var4, var7.x, var7.z, var8, var12);
+         if (var14.isValid()) {
+            return var14;
          }
       }
 
-      return var4;
+      return StructureStart.INVALID_START;
    }
 
-   protected ChunkPos getPotentialFeatureChunkFromLocationWithOffset(ChunkGenerator<?> var1, Random var2, int var3, int var4, int var5, int var6) {
-      return new ChunkPos(var3 + var5, var4 + var6);
+   public abstract StructureFeature.StructureStartFactory<C> getStartFactory();
+
+   public String getFeatureName() {
+      return (String)STRUCTURES_REGISTRY.inverse().get(this);
    }
 
-   public abstract boolean isFeatureChunk(BiomeManager var1, ChunkGenerator<?> var2, Random var3, int var4, int var5, Biome var6);
+   public List<Biome.SpawnerData> getSpecialEnemies() {
+      return Collections.emptyList();
+   }
 
-   public abstract StructureFeature.StructureStartFactory getStartFactory();
+   public List<Biome.SpawnerData> getSpecialAnimals() {
+      return Collections.emptyList();
+   }
 
-   public abstract String getFeatureName();
+   static {
+      PILLAGER_OUTPOST = register("Pillager_Outpost", new PillagerOutpostFeature(JigsawConfiguration.CODEC), GenerationStep.Decoration.SURFACE_STRUCTURES);
+      MINESHAFT = register("Mineshaft", new MineshaftFeature(MineshaftConfiguration.CODEC), GenerationStep.Decoration.UNDERGROUND_STRUCTURES);
+      WOODLAND_MANSION = register("Mansion", new WoodlandMansionFeature(NoneFeatureConfiguration.CODEC), GenerationStep.Decoration.SURFACE_STRUCTURES);
+      JUNGLE_TEMPLE = register("Jungle_Pyramid", new JunglePyramidFeature(NoneFeatureConfiguration.CODEC), GenerationStep.Decoration.SURFACE_STRUCTURES);
+      DESERT_PYRAMID = register("Desert_Pyramid", new DesertPyramidFeature(NoneFeatureConfiguration.CODEC), GenerationStep.Decoration.SURFACE_STRUCTURES);
+      IGLOO = register("Igloo", new IglooFeature(NoneFeatureConfiguration.CODEC), GenerationStep.Decoration.SURFACE_STRUCTURES);
+      RUINED_PORTAL = register("Ruined_Portal", new RuinedPortalFeature(RuinedPortalConfiguration.CODEC), GenerationStep.Decoration.SURFACE_STRUCTURES);
+      SHIPWRECK = register("Shipwreck", new ShipwreckFeature(ShipwreckConfiguration.CODEC), GenerationStep.Decoration.SURFACE_STRUCTURES);
+      SWAMP_HUT = (SwamplandHutFeature)register("Swamp_Hut", new SwamplandHutFeature(NoneFeatureConfiguration.CODEC), GenerationStep.Decoration.SURFACE_STRUCTURES);
+      STRONGHOLD = register("Stronghold", new StrongholdFeature(NoneFeatureConfiguration.CODEC), GenerationStep.Decoration.STRONGHOLDS);
+      OCEAN_MONUMENT = register("Monument", new OceanMonumentFeature(NoneFeatureConfiguration.CODEC), GenerationStep.Decoration.SURFACE_STRUCTURES);
+      OCEAN_RUIN = register("Ocean_Ruin", new OceanRuinFeature(OceanRuinConfiguration.CODEC), GenerationStep.Decoration.SURFACE_STRUCTURES);
+      NETHER_BRIDGE = register("Fortress", new NetherFortressFeature(NoneFeatureConfiguration.CODEC), GenerationStep.Decoration.UNDERGROUND_DECORATION);
+      END_CITY = register("EndCity", new EndCityFeature(NoneFeatureConfiguration.CODEC), GenerationStep.Decoration.SURFACE_STRUCTURES);
+      BURIED_TREASURE = register("Buried_Treasure", new BuriedTreasureFeature(ProbabilityFeatureConfiguration.CODEC), GenerationStep.Decoration.UNDERGROUND_STRUCTURES);
+      VILLAGE = register("Village", new VillageFeature(JigsawConfiguration.CODEC), GenerationStep.Decoration.SURFACE_STRUCTURES);
+      NETHER_FOSSIL = register("Nether_Fossil", new NetherFossilFeature(NoneFeatureConfiguration.CODEC), GenerationStep.Decoration.UNDERGROUND_DECORATION);
+      BASTION_REMNANT = register("Bastion_Remnant", new BastionFeature(JigsawConfiguration.CODEC), GenerationStep.Decoration.SURFACE_STRUCTURES);
+      NOISE_AFFECTING_FEATURES = ImmutableList.of(PILLAGER_OUTPOST, VILLAGE, NETHER_FOSSIL);
+      RENAMES = ImmutableMap.builder().put("nvi", "jigsaw").put("pcp", "jigsaw").put("bastionremnant", "jigsaw").put("runtime", "jigsaw").build();
+   }
 
-   public abstract int getLookupRange();
-
-   public interface StructureStartFactory {
-      StructureStart create(StructureFeature<?> var1, int var2, int var3, BoundingBox var4, int var5, long var6);
+   public interface StructureStartFactory<C extends FeatureConfiguration> {
+      StructureStart<C> create(StructureFeature<C> var1, int var2, int var3, BoundingBox var4, int var5, long var6);
    }
 }
