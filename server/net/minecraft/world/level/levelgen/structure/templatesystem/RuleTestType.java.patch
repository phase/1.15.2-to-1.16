--- net/minecraft/world/level/levelgen/structure/templatesystem/RuleTestType.java
+++ net/minecraft/world/level/levelgen/structure/templatesystem/RuleTestType.java
@@ -1,19 +1,21 @@
 package net.minecraft.world.level.levelgen.structure.templatesystem;
 
+import com.mojang.serialization.Codec;
 import net.minecraft.core.Registry;
-import net.minecraft.util.Deserializer;
 
-public interface RuleTestType extends Deserializer<RuleTest> {
-   RuleTestType ALWAYS_TRUE_TEST = register("always_true", (var0) -> {
-      return AlwaysTrueTest.INSTANCE;
-   });
-   RuleTestType BLOCK_TEST = register("block_match", BlockMatchTest::new);
-   RuleTestType BLOCKSTATE_TEST = register("blockstate_match", BlockStateMatchTest::new);
-   RuleTestType TAG_TEST = register("tag_match", TagMatchTest::new);
-   RuleTestType RANDOM_BLOCK_TEST = register("random_block_match", RandomBlockMatchTest::new);
-   RuleTestType RANDOM_BLOCKSTATE_TEST = register("random_blockstate_match", RandomBlockStateMatchTest::new);
+public interface RuleTestType<P extends RuleTest> {
+   RuleTestType<AlwaysTrueTest> ALWAYS_TRUE_TEST = register("always_true", AlwaysTrueTest.CODEC);
+   RuleTestType<BlockMatchTest> BLOCK_TEST = register("block_match", BlockMatchTest.CODEC);
+   RuleTestType<BlockStateMatchTest> BLOCKSTATE_TEST = register("blockstate_match", BlockStateMatchTest.CODEC);
+   RuleTestType<TagMatchTest> TAG_TEST = register("tag_match", TagMatchTest.CODEC);
+   RuleTestType<RandomBlockMatchTest> RANDOM_BLOCK_TEST = register("random_block_match", RandomBlockMatchTest.CODEC);
+   RuleTestType<RandomBlockStateMatchTest> RANDOM_BLOCKSTATE_TEST = register("random_blockstate_match", RandomBlockStateMatchTest.CODEC);
 
-   static RuleTestType register(String var0, RuleTestType var1) {
-      return (RuleTestType)Registry.register(Registry.RULE_TEST, (String)var0, var1);
+   Codec<P> codec();
+
+   static <P extends RuleTest> RuleTestType<P> register(String var0, Codec<P> var1) {
+      return (RuleTestType)Registry.register(Registry.RULE_TEST, (String)var0, () -> {
+         return var1;
+      });
    }
 }
