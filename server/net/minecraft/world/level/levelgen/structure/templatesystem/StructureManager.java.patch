--- net/minecraft/world/level/levelgen/structure/templatesystem/StructureManager.java
+++ net/minecraft/world/level/levelgen/structure/templatesystem/StructureManager.java
@@ -1,15 +1,15 @@
 package net.minecraft.world.level.levelgen.structure.templatesystem;
 
 import com.google.common.collect.Maps;
 import com.mojang.datafixers.DataFixer;
-import java.io.File;
 import java.io.FileInputStream;
 import java.io.FileNotFoundException;
 import java.io.FileOutputStream;
 import java.io.IOException;
 import java.io.InputStream;
+import java.io.OutputStream;
 import java.nio.file.Files;
 import java.nio.file.InvalidPathException;
 import java.nio.file.LinkOption;
 import java.nio.file.Path;
 import java.util.Map;
@@ -18,30 +18,29 @@
 import net.minecraft.ResourceLocationException;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.NbtIo;
 import net.minecraft.nbt.NbtUtils;
 import net.minecraft.resources.ResourceLocation;
-import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.packs.resources.Resource;
 import net.minecraft.server.packs.resources.ResourceManager;
-import net.minecraft.server.packs.resources.ResourceManagerReloadListener;
 import net.minecraft.util.datafix.DataFixTypes;
+import net.minecraft.world.level.storage.LevelResource;
+import net.minecraft.world.level.storage.LevelStorageSource;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
-public class StructureManager implements ResourceManagerReloadListener {
+public class StructureManager {
    private static final Logger LOGGER = LogManager.getLogger();
    private final Map<ResourceLocation, StructureTemplate> structureRepository = Maps.newHashMap();
    private final DataFixer fixerUpper;
-   private final MinecraftServer server;
+   private ResourceManager resourceManager;
    private final Path generatedDir;
 
-   public StructureManager(MinecraftServer var1, File var2, DataFixer var3) {
-      this.server = var1;
+   public StructureManager(ResourceManager var1, LevelStorageSource.LevelStorageAccess var2, DataFixer var3) {
+      this.resourceManager = var1;
       this.fixerUpper = var3;
-      this.generatedDir = var2.toPath().resolve("generated").normalize();
-      var1.getResources().registerReloadListener(this);
+      this.generatedDir = var2.getLevelPath(LevelResource.GENERATED_DIR).normalize();
    }
 
    public StructureTemplate getOrCreate(ResourceLocation var1) {
       StructureTemplate var2 = this.get(var1);
       if (var2 == null) {
@@ -59,19 +58,20 @@
          return var2 != null ? var2 : this.loadFromResource(var1x);
       });
    }
 
    public void onResourceManagerReload(ResourceManager var1) {
+      this.resourceManager = var1;
       this.structureRepository.clear();
    }
 
    @Nullable
    private StructureTemplate loadFromResource(ResourceLocation var1) {
       ResourceLocation var2 = new ResourceLocation(var1.getNamespace(), "structures/" + var1.getPath() + ".nbt");
 
       try {
-         Resource var3 = this.server.getResources().getResource(var2);
+         Resource var3 = this.resourceManager.getResource(var2);
          Throwable var4 = null;
 
          StructureTemplate var5;
          try {
             var5 = this.readStructure(var3.getInputStream());
@@ -181,11 +181,11 @@
             try {
                FileOutputStream var6 = new FileOutputStream(var3.toFile());
                Throwable var7 = null;
 
                try {
-                  NbtIo.writeCompressed(var5, var6);
+                  NbtIo.writeCompressed(var5, (OutputStream)var6);
                } catch (Throwable var18) {
                   var7 = var18;
                   throw var18;
                } finally {
                   if (var6 != null) {
