--- net/minecraft/world/level/levelgen/structure/OceanRuinPieces.java
+++ net/minecraft/world/level/levelgen/structure/OceanRuinPieces.java
@@ -3,23 +3,27 @@
 import com.google.common.collect.Lists;
 import java.util.ArrayList;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Random;
+import net.minecraft.Util;
 import net.minecraft.core.BlockPos;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.tags.BlockTags;
 import net.minecraft.tags.FluidTags;
+import net.minecraft.tags.Tag;
 import net.minecraft.util.Mth;
 import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.entity.MobSpawnType;
 import net.minecraft.world.entity.SpawnGroupData;
 import net.minecraft.world.entity.monster.Drowned;
 import net.minecraft.world.level.BlockGetter;
 import net.minecraft.world.level.ChunkPos;
 import net.minecraft.world.level.LevelAccessor;
+import net.minecraft.world.level.StructureFeatureManager;
+import net.minecraft.world.level.WorldGenLevel;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.ChestBlock;
 import net.minecraft.world.level.block.Mirror;
 import net.minecraft.world.level.block.Rotation;
 import net.minecraft.world.level.block.entity.BlockEntity;
@@ -46,15 +50,15 @@
    private static final ResourceLocation[] BIG_RUINS_MOSSY = new ResourceLocation[]{new ResourceLocation("underwater_ruin/big_mossy_1"), new ResourceLocation("underwater_ruin/big_mossy_2"), new ResourceLocation("underwater_ruin/big_mossy_3"), new ResourceLocation("underwater_ruin/big_mossy_8")};
    private static final ResourceLocation[] BIG_RUINS_CRACKED = new ResourceLocation[]{new ResourceLocation("underwater_ruin/big_cracked_1"), new ResourceLocation("underwater_ruin/big_cracked_2"), new ResourceLocation("underwater_ruin/big_cracked_3"), new ResourceLocation("underwater_ruin/big_cracked_8")};
    private static final ResourceLocation[] BIG_WARM_RUINS = new ResourceLocation[]{new ResourceLocation("underwater_ruin/big_warm_4"), new ResourceLocation("underwater_ruin/big_warm_5"), new ResourceLocation("underwater_ruin/big_warm_6"), new ResourceLocation("underwater_ruin/big_warm_7")};
 
    private static ResourceLocation getSmallWarmRuin(Random var0) {
-      return WARM_RUINS[var0.nextInt(WARM_RUINS.length)];
+      return (ResourceLocation)Util.getRandom((Object[])WARM_RUINS, var0);
    }
 
    private static ResourceLocation getBigWarmRuin(Random var0) {
-      return BIG_WARM_RUINS[var0.nextInt(BIG_WARM_RUINS.length)];
+      return (ResourceLocation)Util.getRandom((Object[])BIG_WARM_RUINS, var0);
    }
 
    public static void addPieces(StructureManager var0, BlockPos var1, Rotation var2, List<StructurePiece> var3, Random var4, OceanRuinConfiguration var5) {
       boolean var6 = var4.nextFloat() <= var5.largeProbability;
       float var7 = var6 ? 0.9F : 0.8F;
@@ -78,11 +82,11 @@
          if (!var11.isEmpty()) {
             int var14 = var1.nextInt(var11.size());
             BlockPos var15 = (BlockPos)var11.remove(var14);
             int var16 = var15.getX();
             int var17 = var15.getZ();
-            Rotation var18 = Rotation.values()[var1.nextInt(Rotation.values().length)];
+            Rotation var18 = Rotation.getRandom(var1);
             BlockPos var19 = StructureTemplate.transform(new BlockPos(5, 0, 6), Mirror.NONE, var18, BlockPos.ZERO).offset(var16, 0, var17);
             BoundingBox var20 = BoundingBox.createProper(var16, 0, var17, var19.getX(), 0, var19.getZ());
             if (!var20.intersects(var9)) {
                addPiece(var0, var15, var18, var5, var1, var4, false, 0.8F);
             }
@@ -183,17 +187,17 @@
             }
          }
 
       }
 
-      public boolean postProcess(LevelAccessor var1, ChunkGenerator<?> var2, Random var3, BoundingBox var4, ChunkPos var5) {
+      public boolean postProcess(WorldGenLevel var1, StructureFeatureManager var2, ChunkGenerator var3, Random var4, BoundingBox var5, ChunkPos var6, BlockPos var7) {
          this.placeSettings.clearProcessors().addProcessor(new BlockRotProcessor(this.integrity)).addProcessor(BlockIgnoreProcessor.STRUCTURE_AND_AIR);
-         int var6 = var1.getHeight(Heightmap.Types.OCEAN_FLOOR_WG, this.templatePosition.getX(), this.templatePosition.getZ());
-         this.templatePosition = new BlockPos(this.templatePosition.getX(), var6, this.templatePosition.getZ());
-         BlockPos var7 = StructureTemplate.transform(new BlockPos(this.template.getSize().getX() - 1, 0, this.template.getSize().getZ() - 1), Mirror.NONE, this.rotation, BlockPos.ZERO).offset(this.templatePosition);
-         this.templatePosition = new BlockPos(this.templatePosition.getX(), this.getHeight(this.templatePosition, var1, var7), this.templatePosition.getZ());
-         return super.postProcess(var1, var2, var3, var4, var5);
+         int var8 = var1.getHeight(Heightmap.Types.OCEAN_FLOOR_WG, this.templatePosition.getX(), this.templatePosition.getZ());
+         this.templatePosition = new BlockPos(this.templatePosition.getX(), var8, this.templatePosition.getZ());
+         BlockPos var9 = StructureTemplate.transform(new BlockPos(this.template.getSize().getX() - 1, 0, this.template.getSize().getZ() - 1), Mirror.NONE, this.rotation, BlockPos.ZERO).offset(this.templatePosition);
+         this.templatePosition = new BlockPos(this.templatePosition.getX(), this.getHeight(this.templatePosition, var1, var9), this.templatePosition.getZ());
+         return super.postProcess(var1, var2, var3, var4, var5, var6, var7);
       }
 
       private int getHeight(BlockPos var1, BlockGetter var2, BlockPos var3) {
          int var4 = var1.getY();
          int var5 = 512;
@@ -207,11 +211,11 @@
             int var11 = var9.getZ();
             int var12 = var1.getY() - 1;
             BlockPos.MutableBlockPos var13 = new BlockPos.MutableBlockPos(var10, var12, var11);
             BlockState var14 = var2.getBlockState(var13);
 
-            for(FluidState var15 = var2.getFluidState(var13); (var14.isAir() || var15.is(FluidTags.WATER) || var14.getBlock().is(BlockTags.ICE)) && var12 > 1; var15 = var2.getFluidState(var13)) {
+            for(FluidState var15 = var2.getFluidState(var13); (var14.isAir() || var15.is(FluidTags.WATER) || var14.getBlock().is((Tag)BlockTags.ICE)) && var12 > 1; var15 = var2.getFluidState(var13)) {
                --var12;
                var13.set(var10, var12, var11);
                var14 = var2.getBlockState(var13);
             }
 
