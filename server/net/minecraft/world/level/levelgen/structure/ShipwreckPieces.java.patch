--- net/minecraft/world/level/levelgen/structure/ShipwreckPieces.java
+++ net/minecraft/world/level/levelgen/structure/ShipwreckPieces.java
@@ -1,15 +1,18 @@
 package net.minecraft.world.level.levelgen.structure;
 
 import java.util.Iterator;
 import java.util.List;
 import java.util.Random;
+import net.minecraft.Util;
 import net.minecraft.core.BlockPos;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.world.level.ChunkPos;
-import net.minecraft.world.level.LevelAccessor;
+import net.minecraft.world.level.ServerLevelAccessor;
+import net.minecraft.world.level.StructureFeatureManager;
+import net.minecraft.world.level.WorldGenLevel;
 import net.minecraft.world.level.block.Mirror;
 import net.minecraft.world.level.block.Rotation;
 import net.minecraft.world.level.block.entity.RandomizableContainerBlockEntity;
 import net.minecraft.world.level.chunk.ChunkGenerator;
 import net.minecraft.world.level.levelgen.Heightmap;
@@ -25,11 +28,11 @@
    private static final BlockPos PIVOT = new BlockPos(4, 0, 15);
    private static final ResourceLocation[] STRUCTURE_LOCATION_BEACHED = new ResourceLocation[]{new ResourceLocation("shipwreck/with_mast"), new ResourceLocation("shipwreck/sideways_full"), new ResourceLocation("shipwreck/sideways_fronthalf"), new ResourceLocation("shipwreck/sideways_backhalf"), new ResourceLocation("shipwreck/rightsideup_full"), new ResourceLocation("shipwreck/rightsideup_fronthalf"), new ResourceLocation("shipwreck/rightsideup_backhalf"), new ResourceLocation("shipwreck/with_mast_degraded"), new ResourceLocation("shipwreck/rightsideup_full_degraded"), new ResourceLocation("shipwreck/rightsideup_fronthalf_degraded"), new ResourceLocation("shipwreck/rightsideup_backhalf_degraded")};
    private static final ResourceLocation[] STRUCTURE_LOCATION_OCEAN = new ResourceLocation[]{new ResourceLocation("shipwreck/with_mast"), new ResourceLocation("shipwreck/upsidedown_full"), new ResourceLocation("shipwreck/upsidedown_fronthalf"), new ResourceLocation("shipwreck/upsidedown_backhalf"), new ResourceLocation("shipwreck/sideways_full"), new ResourceLocation("shipwreck/sideways_fronthalf"), new ResourceLocation("shipwreck/sideways_backhalf"), new ResourceLocation("shipwreck/rightsideup_full"), new ResourceLocation("shipwreck/rightsideup_fronthalf"), new ResourceLocation("shipwreck/rightsideup_backhalf"), new ResourceLocation("shipwreck/with_mast_degraded"), new ResourceLocation("shipwreck/upsidedown_full_degraded"), new ResourceLocation("shipwreck/upsidedown_fronthalf_degraded"), new ResourceLocation("shipwreck/upsidedown_backhalf_degraded"), new ResourceLocation("shipwreck/sideways_full_degraded"), new ResourceLocation("shipwreck/sideways_fronthalf_degraded"), new ResourceLocation("shipwreck/sideways_backhalf_degraded"), new ResourceLocation("shipwreck/rightsideup_full_degraded"), new ResourceLocation("shipwreck/rightsideup_fronthalf_degraded"), new ResourceLocation("shipwreck/rightsideup_backhalf_degraded")};
 
    public static void addPieces(StructureManager var0, BlockPos var1, Rotation var2, List<StructurePiece> var3, Random var4, ShipwreckConfiguration var5) {
-      ResourceLocation var6 = var5.isBeached ? STRUCTURE_LOCATION_BEACHED[var4.nextInt(STRUCTURE_LOCATION_BEACHED.length)] : STRUCTURE_LOCATION_OCEAN[var4.nextInt(STRUCTURE_LOCATION_OCEAN.length)];
+      ResourceLocation var6 = (ResourceLocation)Util.getRandom((Object[])(var5.isBeached ? STRUCTURE_LOCATION_BEACHED : STRUCTURE_LOCATION_OCEAN), var4);
       var3.add(new ShipwreckPieces.ShipwreckPiece(var0, var6, var1, var2, var5.isBeached));
    }
 
    public static class ShipwreckPiece extends TemplateStructurePiece {
       private final Rotation rotation;
@@ -64,43 +67,43 @@
          StructureTemplate var2 = var1.getOrCreate(this.templateLocation);
          StructurePlaceSettings var3 = (new StructurePlaceSettings()).setRotation(this.rotation).setMirror(Mirror.NONE).setRotationPivot(ShipwreckPieces.PIVOT).addProcessor(BlockIgnoreProcessor.STRUCTURE_AND_AIR);
          this.setup(var2, this.templatePosition, var3);
       }
 
-      protected void handleDataMarker(String var1, BlockPos var2, LevelAccessor var3, Random var4, BoundingBox var5) {
+      protected void handleDataMarker(String var1, BlockPos var2, ServerLevelAccessor var3, Random var4, BoundingBox var5) {
          if ("map_chest".equals(var1)) {
             RandomizableContainerBlockEntity.setLootTable(var3, var4, var2.below(), BuiltInLootTables.SHIPWRECK_MAP);
          } else if ("treasure_chest".equals(var1)) {
             RandomizableContainerBlockEntity.setLootTable(var3, var4, var2.below(), BuiltInLootTables.SHIPWRECK_TREASURE);
          } else if ("supply_chest".equals(var1)) {
             RandomizableContainerBlockEntity.setLootTable(var3, var4, var2.below(), BuiltInLootTables.SHIPWRECK_SUPPLY);
          }
 
       }
 
-      public boolean postProcess(LevelAccessor var1, ChunkGenerator<?> var2, Random var3, BoundingBox var4, ChunkPos var5) {
-         int var6 = 256;
-         int var7 = 0;
-         BlockPos var8 = this.template.getSize();
-         Heightmap.Types var9 = this.isBeached ? Heightmap.Types.WORLD_SURFACE_WG : Heightmap.Types.OCEAN_FLOOR_WG;
-         int var10 = var8.getX() * var8.getZ();
-         if (var10 == 0) {
-            var7 = var1.getHeight(var9, this.templatePosition.getX(), this.templatePosition.getZ());
+      public boolean postProcess(WorldGenLevel var1, StructureFeatureManager var2, ChunkGenerator var3, Random var4, BoundingBox var5, ChunkPos var6, BlockPos var7) {
+         int var8 = 256;
+         int var9 = 0;
+         BlockPos var10 = this.template.getSize();
+         Heightmap.Types var11 = this.isBeached ? Heightmap.Types.WORLD_SURFACE_WG : Heightmap.Types.OCEAN_FLOOR_WG;
+         int var12 = var10.getX() * var10.getZ();
+         if (var12 == 0) {
+            var9 = var1.getHeight(var11, this.templatePosition.getX(), this.templatePosition.getZ());
          } else {
-            BlockPos var11 = this.templatePosition.offset(var8.getX() - 1, 0, var8.getZ() - 1);
+            BlockPos var13 = this.templatePosition.offset(var10.getX() - 1, 0, var10.getZ() - 1);
 
-            int var14;
-            for(Iterator var12 = BlockPos.betweenClosed(this.templatePosition, var11).iterator(); var12.hasNext(); var6 = Math.min(var6, var14)) {
-               BlockPos var13 = (BlockPos)var12.next();
-               var14 = var1.getHeight(var9, var13.getX(), var13.getZ());
-               var7 += var14;
+            int var16;
+            for(Iterator var14 = BlockPos.betweenClosed(this.templatePosition, var13).iterator(); var14.hasNext(); var8 = Math.min(var8, var16)) {
+               BlockPos var15 = (BlockPos)var14.next();
+               var16 = var1.getHeight(var11, var15.getX(), var15.getZ());
+               var9 += var16;
             }
 
-            var7 /= var10;
+            var9 /= var12;
          }
 
-         int var15 = this.isBeached ? var6 - var8.getY() / 2 - var3.nextInt(3) : var7;
-         this.templatePosition = new BlockPos(this.templatePosition.getX(), var15, this.templatePosition.getZ());
-         return super.postProcess(var1, var2, var3, var4, var5);
+         int var17 = this.isBeached ? var8 - var10.getY() / 2 - var4.nextInt(3) : var9;
+         this.templatePosition = new BlockPos(this.templatePosition.getX(), var17, this.templatePosition.getZ());
+         return super.postProcess(var1, var2, var3, var4, var5, var6, var7);
       }
    }
 }
