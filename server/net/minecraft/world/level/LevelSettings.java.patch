--- net/minecraft/world/level/LevelSettings.java
+++ net/minecraft/world/level/LevelSettings.java
@@ -1,71 +1,72 @@
 package net.minecraft.world.level;
 
-import com.google.gson.JsonElement;
-import com.google.gson.JsonObject;
-import net.minecraft.world.level.storage.LevelData;
+import com.mojang.serialization.Dynamic;
+import net.minecraft.world.Difficulty;
+import net.minecraft.world.level.levelgen.WorldGenSettings;
 
 public final class LevelSettings {
-   private final long seed;
+   private final String levelName;
    private final GameType gameType;
-   private final boolean generateMapFeatures;
    private final boolean hardcore;
-   private final LevelType levelType;
-   private boolean allowCommands;
-   private boolean startingBonusItems;
-   private JsonElement levelTypeOptions;
+   private final Difficulty difficulty;
+   private final boolean allowCommands;
+   private final GameRules gameRules;
+   private final WorldGenSettings worldGenSettings;
 
-   public LevelSettings(long var1, GameType var3, boolean var4, boolean var5, LevelType var6) {
-      this.levelTypeOptions = new JsonObject();
-      this.seed = var1;
-      this.gameType = var3;
-      this.generateMapFeatures = var4;
-      this.hardcore = var5;
-      this.levelType = var6;
+   public LevelSettings(String var1, GameType var2, boolean var3, Difficulty var4, boolean var5, GameRules var6, WorldGenSettings var7) {
+      this.levelName = var1;
+      this.gameType = var2;
+      this.hardcore = var3;
+      this.difficulty = var4;
+      this.allowCommands = var5;
+      this.gameRules = var6;
+      this.worldGenSettings = var7;
    }
 
-   public LevelSettings(LevelData var1) {
-      this(var1.getSeed(), var1.getGameType(), var1.isGenerateMapFeatures(), var1.isHardcore(), var1.getGeneratorType());
+   public static LevelSettings parse(Dynamic<?> var0, WorldGenSettings var1) {
+      GameType var2 = GameType.byId(var0.get("GameType").asInt(0));
+      return new LevelSettings(var0.get("LevelName").asString(""), var2, var0.get("hardcore").asBoolean(false), (Difficulty)var0.get("Difficulty").asNumber().map((var0x) -> {
+         return Difficulty.byId(var0x.byteValue());
+      }).result().orElse(Difficulty.NORMAL), var0.get("allowCommands").asBoolean(var2 == GameType.CREATIVE), new GameRules(var0.get("GameRules")), var1);
    }
 
-   public LevelSettings enableStartingBonusItems() {
-      this.startingBonusItems = true;
-      return this;
+   public String levelName() {
+      return this.levelName;
    }
 
-   public LevelSettings setLevelTypeOptions(JsonElement var1) {
-      this.levelTypeOptions = var1;
-      return this;
+   public GameType gameType() {
+      return this.gameType;
    }
 
-   public boolean hasStartingBonusItems() {
-      return this.startingBonusItems;
+   public boolean hardcore() {
+      return this.hardcore;
    }
 
-   public long getSeed() {
-      return this.seed;
+   public Difficulty difficulty() {
+      return this.difficulty;
    }
 
-   public GameType getGameType() {
-      return this.gameType;
+   public boolean allowCommands() {
+      return this.allowCommands;
    }
 
-   public boolean isHardcore() {
-      return this.hardcore;
+   public GameRules gameRules() {
+      return this.gameRules;
    }
 
-   public boolean isGenerateMapFeatures() {
-      return this.generateMapFeatures;
+   public WorldGenSettings worldGenSettings() {
+      return this.worldGenSettings;
    }
 
-   public LevelType getLevelType() {
-      return this.levelType;
+   public LevelSettings withGameType(GameType var1) {
+      return new LevelSettings(this.levelName, var1, this.hardcore, this.difficulty, this.allowCommands, this.gameRules, this.worldGenSettings);
    }
 
-   public boolean getAllowCommands() {
-      return this.allowCommands;
+   public LevelSettings withDifficulty(Difficulty var1) {
+      return new LevelSettings(this.levelName, this.gameType, this.hardcore, var1, this.allowCommands, this.gameRules, this.worldGenSettings);
    }
 
-   public JsonElement getLevelTypeOptions() {
-      return this.levelTypeOptions;
+   public LevelSettings copy() {
+      return new LevelSettings(this.levelName, this.gameType, this.hardcore, this.difficulty, this.allowCommands, this.gameRules.copy(), this.worldGenSettings);
    }
 }
