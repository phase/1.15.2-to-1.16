--- net/minecraft/world/level/storage/loot/predicates/DamageSourceCondition.java
+++ net/minecraft/world/level/storage/loot/predicates/DamageSourceCondition.java
@@ -5,11 +5,10 @@
 import com.google.gson.JsonObject;
 import com.google.gson.JsonSerializationContext;
 import java.util.Set;
 import net.minecraft.advancements.critereon.DamageSourcePredicate;
 import net.minecraft.core.BlockPos;
-import net.minecraft.resources.ResourceLocation;
 import net.minecraft.world.damagesource.DamageSource;
 import net.minecraft.world.level.storage.loot.LootContext;
 import net.minecraft.world.level.storage.loot.parameters.LootContextParam;
 import net.minecraft.world.level.storage.loot.parameters.LootContextParams;
 import net.minecraft.world.phys.Vec3;
@@ -19,29 +18,32 @@
 
    private DamageSourceCondition(DamageSourcePredicate var1) {
       this.predicate = var1;
    }
 
+   public LootItemConditionType getType() {
+      return LootItemConditions.DAMAGE_SOURCE_PROPERTIES;
+   }
+
    public Set<LootContextParam<?>> getReferencedContextParams() {
       return ImmutableSet.of(LootContextParams.BLOCK_POS, LootContextParams.DAMAGE_SOURCE);
    }
 
    public boolean test(LootContext var1) {
       DamageSource var2 = (DamageSource)var1.getParamOrNull(LootContextParams.DAMAGE_SOURCE);
       BlockPos var3 = (BlockPos)var1.getParamOrNull(LootContextParams.BLOCK_POS);
-      return var3 != null && var2 != null && this.predicate.matches(var1.getLevel(), new Vec3(var3), var2);
+      return var3 != null && var2 != null && this.predicate.matches(var1.getLevel(), Vec3.atLowerCornerOf(var3), var2);
    }
 
    public static LootItemCondition.Builder hasDamageSource(DamageSourcePredicate.Builder var0) {
       return () -> {
          return new DamageSourceCondition(var0.build());
       };
    }
 
-   public static class Serializer extends LootItemCondition.Serializer<DamageSourceCondition> {
-      protected Serializer() {
-         super(new ResourceLocation("damage_source_properties"), DamageSourceCondition.class);
+   public static class Serializer implements net.minecraft.world.level.storage.loot.Serializer<DamageSourceCondition> {
+      public Serializer() {
       }
 
       public void serialize(JsonObject var1, DamageSourceCondition var2, JsonSerializationContext var3) {
          var1.add("predicate", var2.predicate.serializeToJson());
       }
