--- net/minecraft/world/level/storage/loot/entries/LootPoolEntryContainer.java
+++ net/minecraft/world/level/storage/loot/entries/LootPoolEntryContainer.java
@@ -4,16 +4,17 @@
 import com.google.gson.JsonDeserializationContext;
 import com.google.gson.JsonObject;
 import com.google.gson.JsonSerializationContext;
 import java.util.List;
 import java.util.function.Predicate;
-import net.minecraft.resources.ResourceLocation;
+import net.minecraft.util.GsonHelper;
 import net.minecraft.world.level.storage.loot.LootContext;
 import net.minecraft.world.level.storage.loot.ValidationContext;
 import net.minecraft.world.level.storage.loot.predicates.ConditionUserBuilder;
 import net.minecraft.world.level.storage.loot.predicates.LootItemCondition;
 import net.minecraft.world.level.storage.loot.predicates.LootItemConditions;
+import org.apache.commons.lang3.ArrayUtils;
 
 public abstract class LootPoolEntryContainer implements ComposableEntryContainer {
    protected final LootItemCondition[] conditions;
    private final Predicate<LootContext> compositeCondition;
 
@@ -31,30 +32,32 @@
 
    protected final boolean canRun(LootContext var1) {
       return this.compositeCondition.test(var1);
    }
 
-   public abstract static class Serializer<T extends LootPoolEntryContainer> {
-      private final ResourceLocation name;
-      private final Class<T> clazz;
+   public abstract LootPoolEntryType getType();
 
-      protected Serializer(ResourceLocation var1, Class<T> var2) {
-         this.name = var1;
-         this.clazz = var2;
+   public abstract static class Serializer<T extends LootPoolEntryContainer> implements net.minecraft.world.level.storage.loot.Serializer<T> {
+      public Serializer() {
       }
 
-      public ResourceLocation getName() {
-         return this.name;
+      public final void serialize(JsonObject var1, T var2, JsonSerializationContext var3) {
+         if (!ArrayUtils.isEmpty((Object[])var2.conditions)) {
+            var1.add("conditions", var3.serialize(var2.conditions));
+         }
+
+         this.serializeCustom(var1, var2, var3);
       }
 
-      public Class<T> getContainerClass() {
-         return this.clazz;
+      public final T deserialize(JsonObject var1, JsonDeserializationContext var2) {
+         LootItemCondition[] var3 = (LootItemCondition[])GsonHelper.getAsObject(var1, "conditions", new LootItemCondition[0], var2, LootItemCondition[].class);
+         return this.deserializeCustom(var1, var2, var3);
       }
 
-      public abstract void serialize(JsonObject var1, T var2, JsonSerializationContext var3);
+      public abstract void serializeCustom(JsonObject var1, T var2, JsonSerializationContext var3);
 
-      public abstract T deserialize(JsonObject var1, JsonDeserializationContext var2, LootItemCondition[] var3);
+      public abstract T deserializeCustom(JsonObject var1, JsonDeserializationContext var2, LootItemCondition[] var3);
    }
 
    public abstract static class Builder<T extends LootPoolEntryContainer.Builder<T>> implements ConditionUserBuilder<T> {
       private final List<LootItemCondition> conditions = Lists.newArrayList();
 
