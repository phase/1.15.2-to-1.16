--- net/minecraft/world/level/storage/McRegionUpgrader.java
+++ net/minecraft/world/level/storage/McRegionUpgrader.java
@@ -1,236 +1,227 @@
 package net.minecraft.world.level.storage;
 
 import com.google.common.collect.Lists;
-import com.mojang.datafixers.DataFixer;
 import java.io.DataInputStream;
 import java.io.DataOutputStream;
 import java.io.File;
 import java.io.IOException;
-import java.nio.file.Path;
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Collections;
 import java.util.Iterator;
+import net.minecraft.core.RegistryAccess;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.NbtIo;
-import net.minecraft.server.MinecraftServer;
+import net.minecraft.nbt.NbtOps;
+import net.minecraft.resources.RegistryReadOps;
+import net.minecraft.server.packs.resources.ResourceManager;
 import net.minecraft.util.ProgressListener;
 import net.minecraft.world.level.ChunkPos;
-import net.minecraft.world.level.LevelType;
+import net.minecraft.world.level.DataPackConfig;
+import net.minecraft.world.level.Level;
 import net.minecraft.world.level.biome.BiomeSource;
-import net.minecraft.world.level.biome.BiomeSourceType;
 import net.minecraft.world.level.biome.Biomes;
-import net.minecraft.world.level.biome.FixedBiomeSourceSettings;
+import net.minecraft.world.level.biome.FixedBiomeSource;
+import net.minecraft.world.level.biome.OverworldBiomeSource;
 import net.minecraft.world.level.chunk.storage.OldChunkStorage;
 import net.minecraft.world.level.chunk.storage.RegionFile;
-import net.minecraft.world.level.dimension.DimensionType;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
 public class McRegionUpgrader {
    private static final Logger LOGGER = LogManager.getLogger();
 
-   static boolean convertLevel(Path var0, DataFixer var1, String var2, ProgressListener var3) {
-      var3.progressStagePercentage(0);
+   static boolean convertLevel(LevelStorageSource.LevelStorageAccess var0, ProgressListener var1) {
+      var1.progressStagePercentage(0);
+      ArrayList var2 = Lists.newArrayList();
+      ArrayList var3 = Lists.newArrayList();
       ArrayList var4 = Lists.newArrayList();
-      ArrayList var5 = Lists.newArrayList();
-      ArrayList var6 = Lists.newArrayList();
-      File var7 = new File(var0.toFile(), var2);
-      File var8 = DimensionType.NETHER.getStorageFolder(var7);
-      File var9 = DimensionType.THE_END.getStorageFolder(var7);
+      File var5 = var0.getDimensionPath(Level.OVERWORLD);
+      File var6 = var0.getDimensionPath(Level.NETHER);
+      File var7 = var0.getDimensionPath(Level.END);
       LOGGER.info("Scanning folders...");
-      addRegionFiles(var7, var4);
-      if (var8.exists()) {
-         addRegionFiles(var8, var5);
+      addRegionFiles(var5, var2);
+      if (var6.exists()) {
+         addRegionFiles(var6, var3);
       }
 
-      if (var9.exists()) {
-         addRegionFiles(var9, var6);
+      if (var7.exists()) {
+         addRegionFiles(var7, var4);
       }
 
-      int var10 = var4.size() + var5.size() + var6.size();
-      LOGGER.info((String)"Total conversion count is {}", (Object)var10);
-      LevelData var11 = LevelStorageSource.getDataTagFor(var0, var1, var2);
-      BiomeSourceType var13 = BiomeSourceType.FIXED;
-      BiomeSourceType var14 = BiomeSourceType.VANILLA_LAYERED;
-      BiomeSource var12;
-      if (var11 != null && var11.getGeneratorType() == LevelType.FLAT) {
-         var12 = var13.create(((FixedBiomeSourceSettings)var13.createSettings(var11)).setBiome(Biomes.PLAINS));
+      int var8 = var2.size() + var3.size() + var4.size();
+      LOGGER.info((String)"Total conversion count is {}", (Object)var8);
+      RegistryAccess.RegistryHolder var9 = RegistryAccess.builtin();
+      RegistryReadOps var10 = RegistryReadOps.create(NbtOps.INSTANCE, ResourceManager.Empty.INSTANCE, var9);
+      WorldData var11 = var0.getDataTag(var10, DataPackConfig.DEFAULT);
+      long var12 = var11 != null ? var11.worldGenSettings().seed() : 0L;
+      Object var14;
+      if (var11 != null && var11.worldGenSettings().isFlatWorld()) {
+         var14 = new FixedBiomeSource(Biomes.PLAINS);
       } else {
-         var12 = var14.create(var14.createSettings(var11));
+         var14 = new OverworldBiomeSource(var12, false, false);
       }
 
-      convertRegions(new File(var7, "region"), var4, var12, 0, var10, var3);
-      convertRegions(new File(var8, "region"), var5, var13.create(((FixedBiomeSourceSettings)var13.createSettings(var11)).setBiome(Biomes.NETHER)), var4.size(), var10, var3);
-      convertRegions(new File(var9, "region"), var6, var13.create(((FixedBiomeSourceSettings)var13.createSettings(var11)).setBiome(Biomes.THE_END)), var4.size() + var5.size(), var10, var3);
-      var11.setVersion(19133);
-      if (var11.getGeneratorType() == LevelType.NORMAL_1_1) {
-         var11.setGenerator(LevelType.NORMAL);
-      }
-
-      makeMcrLevelDatBackup(var0, var2);
-      LevelStorage var15 = LevelStorageSource.selectLevel(var0, var1, var2, (MinecraftServer)null);
-      var15.saveLevelData(var11);
+      convertRegions(var9, new File(var5, "region"), var2, (BiomeSource)var14, 0, var8, var1);
+      convertRegions(var9, new File(var6, "region"), var3, new FixedBiomeSource(Biomes.NETHER_WASTES), var2.size(), var8, var1);
+      convertRegions(var9, new File(var7, "region"), var4, new FixedBiomeSource(Biomes.THE_END), var2.size() + var3.size(), var8, var1);
+      makeMcrLevelDatBackup(var0);
+      var0.saveDataTag(var9, var11);
       return true;
    }
 
-   private static void makeMcrLevelDatBackup(Path var0, String var1) {
-      File var2 = new File(var0.toFile(), var1);
-      if (!var2.exists()) {
+   private static void makeMcrLevelDatBackup(LevelStorageSource.LevelStorageAccess var0) {
+      File var1 = var0.getLevelPath(LevelResource.LEVEL_DATA_FILE).toFile();
+      if (!var1.exists()) {
          LOGGER.warn("Unable to create level.dat_mcr backup");
       } else {
-         File var3 = new File(var2, "level.dat");
-         if (!var3.exists()) {
+         File var2 = new File(var1.getParent(), "level.dat_mcr");
+         if (!var1.renameTo(var2)) {
             LOGGER.warn("Unable to create level.dat_mcr backup");
-         } else {
-            File var4 = new File(var2, "level.dat_mcr");
-            if (!var3.renameTo(var4)) {
-               LOGGER.warn("Unable to create level.dat_mcr backup");
-            }
-
          }
+
       }
    }
 
-   private static void convertRegions(File var0, Iterable<File> var1, BiomeSource var2, int var3, int var4, ProgressListener var5) {
-      Iterator var6 = var1.iterator();
+   private static void convertRegions(RegistryAccess.RegistryHolder var0, File var1, Iterable<File> var2, BiomeSource var3, int var4, int var5, ProgressListener var6) {
+      Iterator var7 = var2.iterator();
 
-      while(var6.hasNext()) {
-         File var7 = (File)var6.next();
-         convertRegion(var0, var7, var2, var3, var4, var5);
-         ++var3;
-         int var8 = (int)Math.round(100.0D * (double)var3 / (double)var4);
-         var5.progressStagePercentage(var8);
+      while(var7.hasNext()) {
+         File var8 = (File)var7.next();
+         convertRegion(var0, var1, var8, var3, var4, var5, var6);
+         ++var4;
+         int var9 = (int)Math.round(100.0D * (double)var4 / (double)var5);
+         var6.progressStagePercentage(var9);
       }
 
    }
 
-   private static void convertRegion(File var0, File var1, BiomeSource var2, int var3, int var4, ProgressListener var5) {
-      String var6 = var1.getName();
+   private static void convertRegion(RegistryAccess.RegistryHolder var0, File var1, File var2, BiomeSource var3, int var4, int var5, ProgressListener var6) {
+      String var7 = var2.getName();
 
       try {
-         RegionFile var7 = new RegionFile(var1, var0);
-         Throwable var8 = null;
+         RegionFile var8 = new RegionFile(var2, var1, true);
+         Throwable var9 = null;
 
          try {
-            RegionFile var9 = new RegionFile(new File(var0, var6.substring(0, var6.length() - ".mcr".length()) + ".mca"), var0);
-            Throwable var10 = null;
+            RegionFile var10 = new RegionFile(new File(var1, var7.substring(0, var7.length() - ".mcr".length()) + ".mca"), var1, true);
+            Throwable var11 = null;
 
             try {
-               for(int var11 = 0; var11 < 32; ++var11) {
-                  int var12;
-                  for(var12 = 0; var12 < 32; ++var12) {
-                     ChunkPos var13 = new ChunkPos(var11, var12);
-                     if (var7.hasChunk(var13) && !var9.hasChunk(var13)) {
-                        CompoundTag var14;
+               for(int var12 = 0; var12 < 32; ++var12) {
+                  int var13;
+                  for(var13 = 0; var13 < 32; ++var13) {
+                     ChunkPos var14 = new ChunkPos(var12, var13);
+                     if (var8.hasChunk(var14) && !var10.hasChunk(var14)) {
+                        CompoundTag var15;
                         try {
-                           DataInputStream var15 = var7.getChunkDataInputStream(var13);
-                           Throwable var16 = null;
+                           DataInputStream var16 = var8.getChunkDataInputStream(var14);
+                           Throwable var17 = null;
 
                            try {
-                              if (var15 == null) {
-                                 LOGGER.warn((String)"Failed to fetch input stream for chunk {}", (Object)var13);
+                              if (var16 == null) {
+                                 LOGGER.warn((String)"Failed to fetch input stream for chunk {}", (Object)var14);
                                  continue;
                               }
 
-                              var14 = NbtIo.read(var15);
-                           } catch (Throwable var104) {
-                              var16 = var104;
-                              throw var104;
+                              var15 = NbtIo.read(var16);
+                           } catch (Throwable var105) {
+                              var17 = var105;
+                              throw var105;
                            } finally {
-                              if (var15 != null) {
-                                 if (var16 != null) {
+                              if (var16 != null) {
+                                 if (var17 != null) {
                                     try {
-                                       var15.close();
-                                    } catch (Throwable var101) {
-                                       var16.addSuppressed(var101);
+                                       var16.close();
+                                    } catch (Throwable var102) {
+                                       var17.addSuppressed(var102);
                                     }
                                  } else {
-                                    var15.close();
+                                    var16.close();
                                  }
                               }
 
                            }
-                        } catch (IOException var106) {
-                           LOGGER.warn((String)"Failed to read data for chunk {}", (Object)var13, (Object)var106);
+                        } catch (IOException var107) {
+                           LOGGER.warn((String)"Failed to read data for chunk {}", (Object)var14, (Object)var107);
                            continue;
                         }
 
-                        CompoundTag var113 = var14.getCompound("Level");
-                        OldChunkStorage.OldLevelChunk var114 = OldChunkStorage.load(var113);
-                        CompoundTag var17 = new CompoundTag();
+                        CompoundTag var114 = var15.getCompound("Level");
+                        OldChunkStorage.OldLevelChunk var115 = OldChunkStorage.load(var114);
                         CompoundTag var18 = new CompoundTag();
-                        var17.put("Level", var18);
-                        OldChunkStorage.convertToAnvilFormat(var114, var18, var2);
-                        DataOutputStream var19 = var9.getChunkDataOutputStream(var13);
-                        Throwable var20 = null;
+                        CompoundTag var19 = new CompoundTag();
+                        var18.put("Level", var19);
+                        OldChunkStorage.convertToAnvilFormat(var0, var115, var19, var3);
+                        DataOutputStream var20 = var10.getChunkDataOutputStream(var14);
+                        Throwable var21 = null;
 
                         try {
-                           NbtIo.write(var17, var19);
-                        } catch (Throwable var102) {
-                           var20 = var102;
-                           throw var102;
+                           NbtIo.write(var18, var20);
+                        } catch (Throwable var103) {
+                           var21 = var103;
+                           throw var103;
                         } finally {
-                           if (var19 != null) {
-                              if (var20 != null) {
+                           if (var20 != null) {
+                              if (var21 != null) {
                                  try {
-                                    var19.close();
-                                 } catch (Throwable var100) {
-                                    var20.addSuppressed(var100);
+                                    var20.close();
+                                 } catch (Throwable var101) {
+                                    var21.addSuppressed(var101);
                                  }
                               } else {
-                                 var19.close();
+                                 var20.close();
                               }
                            }
 
                         }
                      }
                   }
 
-                  var12 = (int)Math.round(100.0D * (double)(var3 * 1024) / (double)(var4 * 1024));
-                  int var112 = (int)Math.round(100.0D * (double)((var11 + 1) * 32 + var3 * 1024) / (double)(var4 * 1024));
-                  if (var112 > var12) {
-                     var5.progressStagePercentage(var112);
+                  var13 = (int)Math.round(100.0D * (double)(var4 * 1024) / (double)(var5 * 1024));
+                  int var113 = (int)Math.round(100.0D * (double)((var12 + 1) * 32 + var4 * 1024) / (double)(var5 * 1024));
+                  if (var113 > var13) {
+                     var6.progressStagePercentage(var113);
                   }
                }
-            } catch (Throwable var107) {
-               var10 = var107;
-               throw var107;
+            } catch (Throwable var108) {
+               var11 = var108;
+               throw var108;
             } finally {
-               if (var9 != null) {
-                  if (var10 != null) {
+               if (var10 != null) {
+                  if (var11 != null) {
                      try {
-                        var9.close();
-                     } catch (Throwable var99) {
-                        var10.addSuppressed(var99);
+                        var10.close();
+                     } catch (Throwable var100) {
+                        var11.addSuppressed(var100);
                      }
                   } else {
-                     var9.close();
+                     var10.close();
                   }
                }
 
             }
-         } catch (Throwable var109) {
-            var8 = var109;
-            throw var109;
+         } catch (Throwable var110) {
+            var9 = var110;
+            throw var110;
          } finally {
-            if (var7 != null) {
-               if (var8 != null) {
+            if (var8 != null) {
+               if (var9 != null) {
                   try {
-                     var7.close();
-                  } catch (Throwable var98) {
-                     var8.addSuppressed(var98);
+                     var8.close();
+                  } catch (Throwable var99) {
+                     var9.addSuppressed(var99);
                   }
                } else {
-                  var7.close();
+                  var8.close();
                }
             }
 
          }
-      } catch (IOException var111) {
-         LOGGER.error((String)"Failed to upgrade region file {}", (Object)var1, (Object)var111);
+      } catch (IOException var112) {
+         LOGGER.error((String)"Failed to upgrade region file {}", (Object)var2, (Object)var112);
       }
 
    }
 
    private static void addRegionFiles(File var0, Collection<File> var1) {
