--- net/minecraft/world/level/storage/McRegionUpgrader.java
+++ net/minecraft/world/level/storage/McRegionUpgrader.java
@@ -1,96 +1,87 @@
 package net.minecraft.world.level.storage;
 
 import com.google.common.collect.Lists;
-import com.mojang.datafixers.DataFixer;
 import java.io.DataInputStream;
 import java.io.DataOutputStream;
 import java.io.File;
 import java.io.IOException;
-import java.nio.file.Path;
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Collections;
 import java.util.Iterator;
+import net.minecraft.core.RegistryAccess;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.NbtIo;
-import net.minecraft.server.MinecraftServer;
+import net.minecraft.nbt.NbtOps;
+import net.minecraft.resources.RegistryReadOps;
+import net.minecraft.server.packs.resources.ResourceManager;
 import net.minecraft.util.ProgressListener;
 import net.minecraft.world.level.ChunkPos;
-import net.minecraft.world.level.LevelType;
+import net.minecraft.world.level.DataPackConfig;
+import net.minecraft.world.level.Level;
 import net.minecraft.world.level.biome.BiomeSource;
-import net.minecraft.world.level.biome.BiomeSourceType;
 import net.minecraft.world.level.biome.Biomes;
-import net.minecraft.world.level.biome.FixedBiomeSourceSettings;
+import net.minecraft.world.level.biome.FixedBiomeSource;
+import net.minecraft.world.level.biome.OverworldBiomeSource;
 import net.minecraft.world.level.chunk.storage.OldChunkStorage;
 import net.minecraft.world.level.chunk.storage.RegionFile;
-import net.minecraft.world.level.dimension.DimensionType;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
 public class McRegionUpgrader {
    private static final Logger LOGGER = LogManager.getLogger();
 
-   static boolean convertLevel(Path var0, DataFixer var1, String var2, ProgressListener var3) {
-      var3.progressStagePercentage(0);
+   static boolean convertLevel(LevelStorageSource.LevelStorageAccess var0, ProgressListener var1) {
+      var1.progressStagePercentage(0);
+      ArrayList var2 = Lists.newArrayList();
+      ArrayList var3 = Lists.newArrayList();
       ArrayList var4 = Lists.newArrayList();
-      ArrayList var5 = Lists.newArrayList();
-      ArrayList var6 = Lists.newArrayList();
-      File var7 = new File(var0.toFile(), var2);
-      File var8 = DimensionType.NETHER.getStorageFolder(var7);
-      File var9 = DimensionType.THE_END.getStorageFolder(var7);
+      File var5 = var0.getDimensionPath(Level.OVERWORLD);
+      File var6 = var0.getDimensionPath(Level.NETHER);
+      File var7 = var0.getDimensionPath(Level.END);
       LOGGER.info("Scanning folders...");
-      addRegionFiles(var7, var4);
-      if (var8.exists()) {
-         addRegionFiles(var8, var5);
+      addRegionFiles(var5, var2);
+      if (var6.exists()) {
+         addRegionFiles(var6, var3);
       }
 
-      if (var9.exists()) {
-         addRegionFiles(var9, var6);
+      if (var7.exists()) {
+         addRegionFiles(var7, var4);
       }
 
-      int var10 = var4.size() + var5.size() + var6.size();
-      LOGGER.info((String)"Total conversion count is {}", (Object)var10);
-      LevelData var11 = LevelStorageSource.getDataTagFor(var0, var1, var2);
-      BiomeSourceType var13 = BiomeSourceType.FIXED;
-      BiomeSourceType var14 = BiomeSourceType.VANILLA_LAYERED;
-      BiomeSource var12;
-      if (var11 != null && var11.getGeneratorType() == LevelType.FLAT) {
-         var12 = var13.create(((FixedBiomeSourceSettings)var13.createSettings(var11)).setBiome(Biomes.PLAINS));
+      int var8 = var2.size() + var3.size() + var4.size();
+      LOGGER.info((String)"Total conversion count is {}", (Object)var8);
+      RegistryAccess.RegistryHolder var9 = RegistryAccess.builtin();
+      RegistryReadOps var10 = RegistryReadOps.create(NbtOps.INSTANCE, ResourceManager.Empty.INSTANCE, var9);
+      WorldData var11 = var0.getDataTag(var10, DataPackConfig.DEFAULT);
+      long var12 = var11 != null ? var11.worldGenSettings().seed() : 0L;
+      Object var14;
+      if (var11 != null && var11.worldGenSettings().isFlatWorld()) {
+         var14 = new FixedBiomeSource(Biomes.PLAINS);
       } else {
-         var12 = var14.create(var14.createSettings(var11));
+         var14 = new OverworldBiomeSource(var12, false, false);
       }
 
-      convertRegions(new File(var7, "region"), var4, var12, 0, var10, var3);
-      convertRegions(new File(var8, "region"), var5, var13.create(((FixedBiomeSourceSettings)var13.createSettings(var11)).setBiome(Biomes.NETHER)), var4.size(), var10, var3);
-      convertRegions(new File(var9, "region"), var6, var13.create(((FixedBiomeSourceSettings)var13.createSettings(var11)).setBiome(Biomes.THE_END)), var4.size() + var5.size(), var10, var3);
-      var11.setVersion(19133);
-      if (var11.getGeneratorType() == LevelType.NORMAL_1_1) {
-         var11.setGenerator(LevelType.NORMAL);
-      }
-
-      makeMcrLevelDatBackup(var0, var2);
-      LevelStorage var15 = LevelStorageSource.selectLevel(var0, var1, var2, (MinecraftServer)null);
-      var15.saveLevelData(var11);
+      convertRegions(new File(var5, "region"), var2, (BiomeSource)var14, 0, var8, var1);
+      convertRegions(new File(var6, "region"), var3, new FixedBiomeSource(Biomes.NETHER_WASTES), var2.size(), var8, var1);
+      convertRegions(new File(var7, "region"), var4, new FixedBiomeSource(Biomes.THE_END), var2.size() + var3.size(), var8, var1);
+      makeMcrLevelDatBackup(var0);
+      var0.saveDataTag(var9, var11);
       return true;
    }
 
-   private static void makeMcrLevelDatBackup(Path var0, String var1) {
-      File var2 = new File(var0.toFile(), var1);
-      if (!var2.exists()) {
+   private static void makeMcrLevelDatBackup(LevelStorageSource.LevelStorageAccess var0) {
+      File var1 = var0.getLevelPath(LevelResource.LEVEL_DATA_FILE).toFile();
+      if (!var1.exists()) {
          LOGGER.warn("Unable to create level.dat_mcr backup");
       } else {
-         File var3 = new File(var2, "level.dat");
-         if (!var3.exists()) {
+         File var2 = new File(var1.getParent(), "level.dat_mcr");
+         if (!var1.renameTo(var2)) {
             LOGGER.warn("Unable to create level.dat_mcr backup");
-         } else {
-            File var4 = new File(var2, "level.dat_mcr");
-            if (!var3.renameTo(var4)) {
-               LOGGER.warn("Unable to create level.dat_mcr backup");
-            }
-
          }
+
       }
    }
 
    private static void convertRegions(File var0, Iterable<File> var1, BiomeSource var2, int var3, int var4, ProgressListener var5) {
       Iterator var6 = var1.iterator();
@@ -107,15 +98,15 @@
 
    private static void convertRegion(File var0, File var1, BiomeSource var2, int var3, int var4, ProgressListener var5) {
       String var6 = var1.getName();
 
       try {
-         RegionFile var7 = new RegionFile(var1, var0);
+         RegionFile var7 = new RegionFile(var1, var0, true);
          Throwable var8 = null;
 
          try {
-            RegionFile var9 = new RegionFile(new File(var0, var6.substring(0, var6.length() - ".mcr".length()) + ".mca"), var0);
+            RegionFile var9 = new RegionFile(new File(var0, var6.substring(0, var6.length() - ".mcr".length()) + ".mca"), var0, true);
             Throwable var10 = null;
 
             try {
                for(int var11 = 0; var11 < 32; ++var11) {
                   int var12;
