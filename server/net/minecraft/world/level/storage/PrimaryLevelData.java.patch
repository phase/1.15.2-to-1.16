--- net/minecraft/world/level/storage/PrimaryLevelData.java
+++ net/minecraft/world/level/storage/PrimaryLevelData.java
@@ -1,0 +1,452 @@
+package net.minecraft.world.level.storage;
+
+import com.google.common.collect.ImmutableSet;
+import com.google.common.collect.Sets;
+import com.mojang.datafixers.DataFixer;
+import com.mojang.serialization.DataResult;
+import com.mojang.serialization.Dynamic;
+import com.mojang.serialization.OptionalDynamic;
+import java.util.Collection;
+import java.util.Iterator;
+import java.util.LinkedHashSet;
+import java.util.Set;
+import java.util.UUID;
+import java.util.stream.Collectors;
+import javax.annotation.Nullable;
+import net.minecraft.CrashReportCategory;
+import net.minecraft.SharedConstants;
+import net.minecraft.Util;
+import net.minecraft.core.BlockPos;
+import net.minecraft.core.SerializableUUID;
+import net.minecraft.nbt.CompoundTag;
+import net.minecraft.nbt.ListTag;
+import net.minecraft.nbt.NbtOps;
+import net.minecraft.nbt.NbtUtils;
+import net.minecraft.nbt.StringTag;
+import net.minecraft.nbt.Tag;
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.util.datafix.DataFixTypes;
+import net.minecraft.world.Difficulty;
+import net.minecraft.world.level.GameRules;
+import net.minecraft.world.level.GameType;
+import net.minecraft.world.level.LevelSettings;
+import net.minecraft.world.level.border.WorldBorder;
+import net.minecraft.world.level.levelgen.WorldGenSettings;
+import net.minecraft.world.level.timers.TimerCallbacks;
+import net.minecraft.world.level.timers.TimerQueue;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+
+public class PrimaryLevelData implements ServerLevelData, WorldData {
+   private static final Logger LOGGER = LogManager.getLogger();
+   private LevelSettings settings;
+   private int xSpawn;
+   private int ySpawn;
+   private int zSpawn;
+   private long gameTime;
+   private long dayTime;
+   @Nullable
+   private final DataFixer fixerUpper;
+   private final int playerDataVersion;
+   private boolean upgradedPlayerTag;
+   @Nullable
+   private CompoundTag loadedPlayerTag;
+   private final int version;
+   private int clearWeatherTime;
+   private boolean raining;
+   private int rainTime;
+   private boolean thundering;
+   private int thunderTime;
+   private boolean initialized;
+   private boolean difficultyLocked;
+   private WorldBorder.Settings worldBorder;
+   private final Set<String> disabledDataPacks;
+   private final Set<String> enabledDataPacks;
+   private CompoundTag endDragonFightData;
+   @Nullable
+   private CompoundTag customBossEvents;
+   private int wanderingTraderSpawnDelay;
+   private int wanderingTraderSpawnChance;
+   @Nullable
+   private UUID wanderingTraderId;
+   private final Set<String> knownServerBrands;
+   private boolean wasModded;
+   private final TimerQueue<MinecraftServer> scheduledEvents;
+
+   private PrimaryLevelData(@Nullable DataFixer var1, int var2, @Nullable CompoundTag var3, boolean var4, int var5, int var6, int var7, long var8, long var10, int var12, int var13, int var14, boolean var15, int var16, boolean var17, boolean var18, boolean var19, WorldBorder.Settings var20, int var21, int var22, @Nullable UUID var23, LinkedHashSet<String> var24, LinkedHashSet<String> var25, Set<String> var26, TimerQueue<MinecraftServer> var27, @Nullable CompoundTag var28, CompoundTag var29, LevelSettings var30) {
+      this.fixerUpper = var1;
+      this.wasModded = var4;
+      this.settings = var30;
+      this.xSpawn = var5;
+      this.ySpawn = var6;
+      this.zSpawn = var7;
+      this.gameTime = var8;
+      this.dayTime = var10;
+      this.version = var12;
+      this.clearWeatherTime = var13;
+      this.rainTime = var14;
+      this.raining = var15;
+      this.thunderTime = var16;
+      this.thundering = var17;
+      this.initialized = var18;
+      this.difficultyLocked = var19;
+      this.worldBorder = var20;
+      this.wanderingTraderSpawnDelay = var21;
+      this.wanderingTraderSpawnChance = var22;
+      this.wanderingTraderId = var23;
+      this.knownServerBrands = var24;
+      this.loadedPlayerTag = var3;
+      this.playerDataVersion = var2;
+      this.scheduledEvents = var27;
+      this.enabledDataPacks = var25;
+      this.disabledDataPacks = var26;
+      this.customBossEvents = var28;
+      this.endDragonFightData = var29;
+   }
+
+   public PrimaryLevelData(LevelSettings var1) {
+      this((DataFixer)null, SharedConstants.getCurrentVersion().getWorldVersion(), (CompoundTag)null, false, 0, 0, 0, 0L, 0L, 19133, 0, 0, false, 0, false, false, false, WorldBorder.DEFAULT_SETTINGS, 0, 0, (UUID)null, Sets.newLinkedHashSet(), Sets.newLinkedHashSet(), Sets.newHashSet(), new TimerQueue(TimerCallbacks.SERVER_CALLBACKS), (CompoundTag)null, new CompoundTag(), var1.copy());
+   }
+
+   public static PrimaryLevelData parse(Dynamic<Tag> var0, DataFixer var1, int var2, @Nullable CompoundTag var3, LevelSettings var4, LevelVersion var5) {
+      long var6 = var0.get("Time").asLong(0L);
+      OptionalDynamic var8 = var0.get("DataPacks");
+      CompoundTag var9 = (CompoundTag)var0.get("DragonFight").result().map(Dynamic::getValue).orElseGet(() -> {
+         return (Tag)var0.get("DimensionData").get("1").get("DragonFight").orElseEmptyMap().getValue();
+      });
+      return new PrimaryLevelData(var1, var2, var3, var0.get("WasModded").asBoolean(false), var0.get("SpawnX").asInt(0), var0.get("SpawnY").asInt(0), var0.get("SpawnZ").asInt(0), var6, var0.get("DayTime").asLong(var6), var5.levelDataVersion(), var0.get("clearWeatherTime").asInt(0), var0.get("rainTime").asInt(0), var0.get("raining").asBoolean(false), var0.get("thunderTime").asInt(0), var0.get("thundering").asBoolean(false), var0.get("initialized").asBoolean(true), var0.get("DifficultyLocked").asBoolean(false), WorldBorder.Settings.read(var0, WorldBorder.DEFAULT_SETTINGS), var0.get("WanderingTraderSpawnDelay").asInt(0), var0.get("WanderingTraderSpawnChance").asInt(0), (UUID)var0.get("WanderingTraderId").read(SerializableUUID.CODEC).result().map(SerializableUUID::value).orElse((Object)null), (LinkedHashSet)var0.get("ServerBrands").asStream().flatMap((var0x) -> {
+         return Util.toStream(var0x.asString().result());
+      }).collect(Collectors.toCollection(Sets::newLinkedHashSet)), (LinkedHashSet)var8.get("Enabled").asStream().flatMap((var0x) -> {
+         return Util.toStream(var0x.asString().result());
+      }).collect(Collectors.toCollection(Sets::newLinkedHashSet)), (Set)var8.get("Disabled").asStream().flatMap((var0x) -> {
+         return Util.toStream(var0x.asString().result());
+      }).collect(Collectors.toSet()), new TimerQueue(TimerCallbacks.SERVER_CALLBACKS, var0.get("ScheduledEvents").asStream()), (CompoundTag)var0.get("CustomBossEvents").orElseEmptyMap().getValue(), var9, var4);
+   }
+
+   public CompoundTag createTag(@Nullable CompoundTag var1) {
+      this.updatePlayerTag();
+      if (var1 == null) {
+         var1 = this.loadedPlayerTag;
+      }
+
+      CompoundTag var2 = new CompoundTag();
+      this.setTagData(var2, var1);
+      return var2;
+   }
+
+   private void setTagData(CompoundTag var1, CompoundTag var2) {
+      ListTag var3 = new ListTag();
+      this.knownServerBrands.stream().map(StringTag::valueOf).forEach(var3::add);
+      var1.put("ServerBrands", var3);
+      var1.putBoolean("WasModded", this.wasModded);
+      CompoundTag var4 = new CompoundTag();
+      var4.putString("Name", SharedConstants.getCurrentVersion().getName());
+      var4.putInt("Id", SharedConstants.getCurrentVersion().getWorldVersion());
+      var4.putBoolean("Snapshot", !SharedConstants.getCurrentVersion().isStable());
+      var1.put("Version", var4);
+      var1.putInt("DataVersion", SharedConstants.getCurrentVersion().getWorldVersion());
+      DataResult var10000 = WorldGenSettings.CODEC.encodeStart(NbtOps.INSTANCE, this.settings.worldGenSettings());
+      Logger var10002 = LOGGER;
+      var10002.getClass();
+      var10000.resultOrPartial(Util.prefix("WorldGenSettings: ", var10002::error)).ifPresent((var1x) -> {
+         var1.put("WorldGenSettings", var1x);
+      });
+      var1.putInt("GameType", this.settings.gameType().getId());
+      var1.putInt("SpawnX", this.xSpawn);
+      var1.putInt("SpawnY", this.ySpawn);
+      var1.putInt("SpawnZ", this.zSpawn);
+      var1.putLong("Time", this.gameTime);
+      var1.putLong("DayTime", this.dayTime);
+      var1.putLong("LastPlayed", Util.getEpochMillis());
+      var1.putString("LevelName", this.settings.levelName());
+      var1.putInt("version", 19133);
+      var1.putInt("clearWeatherTime", this.clearWeatherTime);
+      var1.putInt("rainTime", this.rainTime);
+      var1.putBoolean("raining", this.raining);
+      var1.putInt("thunderTime", this.thunderTime);
+      var1.putBoolean("thundering", this.thundering);
+      var1.putBoolean("hardcore", this.settings.hardcore());
+      var1.putBoolean("allowCommands", this.settings.allowCommands());
+      var1.putBoolean("initialized", this.initialized);
+      this.worldBorder.write(var1);
+      var1.putByte("Difficulty", (byte)this.settings.difficulty().getId());
+      var1.putBoolean("DifficultyLocked", this.difficultyLocked);
+      var1.put("GameRules", this.settings.gameRules().createTag());
+      var1.put("DragonFight", this.endDragonFightData);
+      if (var2 != null) {
+         var1.put("Player", var2);
+      }
+
+      CompoundTag var5 = new CompoundTag();
+      ListTag var6 = new ListTag();
+      Iterator var7 = this.enabledDataPacks.iterator();
+
+      while(var7.hasNext()) {
+         String var8 = (String)var7.next();
+         var6.add(StringTag.valueOf(var8));
+      }
+
+      var5.put("Enabled", var6);
+      ListTag var10 = new ListTag();
+      Iterator var11 = this.disabledDataPacks.iterator();
+
+      while(var11.hasNext()) {
+         String var9 = (String)var11.next();
+         var10.add(StringTag.valueOf(var9));
+      }
+
+      var5.put("Disabled", var10);
+      var1.put("DataPacks", var5);
+      if (this.customBossEvents != null) {
+         var1.put("CustomBossEvents", this.customBossEvents);
+      }
+
+      var1.put("ScheduledEvents", this.scheduledEvents.store());
+      var1.putInt("WanderingTraderSpawnDelay", this.wanderingTraderSpawnDelay);
+      var1.putInt("WanderingTraderSpawnChance", this.wanderingTraderSpawnChance);
+      if (this.wanderingTraderId != null) {
+         var1.putUUID("WanderingTraderId", this.wanderingTraderId);
+      }
+
+   }
+
+   public int getXSpawn() {
+      return this.xSpawn;
+   }
+
+   public int getYSpawn() {
+      return this.ySpawn;
+   }
+
+   public int getZSpawn() {
+      return this.zSpawn;
+   }
+
+   public long getGameTime() {
+      return this.gameTime;
+   }
+
+   public long getDayTime() {
+      return this.dayTime;
+   }
+
+   private void updatePlayerTag() {
+      if (!this.upgradedPlayerTag && this.loadedPlayerTag != null) {
+         if (this.playerDataVersion < SharedConstants.getCurrentVersion().getWorldVersion()) {
+            if (this.fixerUpper == null) {
+               throw (NullPointerException)Util.pauseInIde(new NullPointerException("Fixer Upper not set inside LevelData, and the player tag is not upgraded."));
+            }
+
+            this.loadedPlayerTag = NbtUtils.update(this.fixerUpper, DataFixTypes.PLAYER, this.loadedPlayerTag, this.playerDataVersion);
+         }
+
+         this.upgradedPlayerTag = true;
+      }
+   }
+
+   public CompoundTag getLoadedPlayerTag() {
+      this.updatePlayerTag();
+      return this.loadedPlayerTag;
+   }
+
+   public void setXSpawn(int var1) {
+      this.xSpawn = var1;
+   }
+
+   public void setYSpawn(int var1) {
+      this.ySpawn = var1;
+   }
+
+   public void setZSpawn(int var1) {
+      this.zSpawn = var1;
+   }
+
+   public void setGameTime(long var1) {
+      this.gameTime = var1;
+   }
+
+   public void setDayTime(long var1) {
+      this.dayTime = var1;
+   }
+
+   public void setSpawn(BlockPos var1) {
+      this.xSpawn = var1.getX();
+      this.ySpawn = var1.getY();
+      this.zSpawn = var1.getZ();
+   }
+
+   public String getLevelName() {
+      return this.settings.levelName();
+   }
+
+   public int getVersion() {
+      return this.version;
+   }
+
+   public int getClearWeatherTime() {
+      return this.clearWeatherTime;
+   }
+
+   public void setClearWeatherTime(int var1) {
+      this.clearWeatherTime = var1;
+   }
+
+   public boolean isThundering() {
+      return this.thundering;
+   }
+
+   public void setThundering(boolean var1) {
+      this.thundering = var1;
+   }
+
+   public int getThunderTime() {
+      return this.thunderTime;
+   }
+
+   public void setThunderTime(int var1) {
+      this.thunderTime = var1;
+   }
+
+   public boolean isRaining() {
+      return this.raining;
+   }
+
+   public void setRaining(boolean var1) {
+      this.raining = var1;
+   }
+
+   public int getRainTime() {
+      return this.rainTime;
+   }
+
+   public void setRainTime(int var1) {
+      this.rainTime = var1;
+   }
+
+   public GameType getGameType() {
+      return this.settings.gameType();
+   }
+
+   public void setGameType(GameType var1) {
+      this.settings = this.settings.withGameType(var1);
+   }
+
+   public boolean isHardcore() {
+      return this.settings.hardcore();
+   }
+
+   public boolean getAllowCommands() {
+      return this.settings.allowCommands();
+   }
+
+   public boolean isInitialized() {
+      return this.initialized;
+   }
+
+   public void setInitialized(boolean var1) {
+      this.initialized = var1;
+   }
+
+   public GameRules getGameRules() {
+      return this.settings.gameRules();
+   }
+
+   public WorldBorder.Settings getWorldBorder() {
+      return this.worldBorder;
+   }
+
+   public void setWorldBorder(WorldBorder.Settings var1) {
+      this.worldBorder = var1;
+   }
+
+   public Difficulty getDifficulty() {
+      return this.settings.difficulty();
+   }
+
+   public void setDifficulty(Difficulty var1) {
+      this.settings = this.settings.withDifficulty(var1);
+   }
+
+   public boolean isDifficultyLocked() {
+      return this.difficultyLocked;
+   }
+
+   public void setDifficultyLocked(boolean var1) {
+      this.difficultyLocked = var1;
+   }
+
+   public TimerQueue<MinecraftServer> getScheduledEvents() {
+      return this.scheduledEvents;
+   }
+
+   public void fillCrashReportCategory(CrashReportCategory var1) {
+      ServerLevelData.super.fillCrashReportCategory(var1);
+      WorldData.super.fillCrashReportCategory(var1);
+   }
+
+   public WorldGenSettings worldGenSettings() {
+      return this.settings.worldGenSettings();
+   }
+
+   public CompoundTag endDragonFightData() {
+      return this.endDragonFightData;
+   }
+
+   public void setEndDragonFightData(CompoundTag var1) {
+      this.endDragonFightData = var1;
+   }
+
+   public Set<String> getDisabledDataPacks() {
+      return this.disabledDataPacks;
+   }
+
+   public Set<String> getEnabledDataPacks() {
+      return this.enabledDataPacks;
+   }
+
+   @Nullable
+   public CompoundTag getCustomBossEvents() {
+      return this.customBossEvents;
+   }
+
+   public void setCustomBossEvents(@Nullable CompoundTag var1) {
+      this.customBossEvents = var1;
+   }
+
+   public int getWanderingTraderSpawnDelay() {
+      return this.wanderingTraderSpawnDelay;
+   }
+
+   public void setWanderingTraderSpawnDelay(int var1) {
+      this.wanderingTraderSpawnDelay = var1;
+   }
+
+   public int getWanderingTraderSpawnChance() {
+      return this.wanderingTraderSpawnChance;
+   }
+
+   public void setWanderingTraderSpawnChance(int var1) {
+      this.wanderingTraderSpawnChance = var1;
+   }
+
+   public void setWanderingTraderId(UUID var1) {
+      this.wanderingTraderId = var1;
+   }
+
+   public void setModdedInfo(String var1, boolean var2) {
+      this.knownServerBrands.add(var1);
+      this.wasModded |= var2;
+   }
+
+   public boolean wasModded() {
+      return this.wasModded;
+   }
+
+   public Set<String> getKnownServerBrands() {
+      return ImmutableSet.copyOf((Collection)this.knownServerBrands);
+   }
+
+   public ServerLevelData overworldData() {
+      return this;
+   }
+}
