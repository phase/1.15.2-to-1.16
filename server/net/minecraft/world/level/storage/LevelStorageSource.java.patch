--- net/minecraft/world/level/storage/LevelStorageSource.java
+++ net/minecraft/world/level/storage/LevelStorageSource.java
@@ -1,31 +1,55 @@
 package net.minecraft.world.level.storage;
 
+import com.google.common.collect.ImmutableList;
+import com.google.common.collect.Maps;
+import com.google.common.collect.UnmodifiableIterator;
+import com.google.gson.Gson;
+import com.google.gson.GsonBuilder;
 import com.mojang.datafixers.DataFixer;
+import com.mojang.datafixers.util.Pair;
+import com.mojang.serialization.DataResult;
+import com.mojang.serialization.Dynamic;
+import com.mojang.serialization.Lifecycle;
 import java.io.File;
 import java.io.FileInputStream;
+import java.io.FileOutputStream;
 import java.io.IOException;
 import java.nio.file.Files;
 import java.nio.file.LinkOption;
 import java.nio.file.Path;
 import java.time.format.DateTimeFormatter;
 import java.time.format.DateTimeFormatterBuilder;
 import java.time.format.SignStyle;
 import java.time.temporal.ChronoField;
+import java.util.Map;
+import java.util.Optional;
+import java.util.function.BiFunction;
 import javax.annotation.Nullable;
+import net.minecraft.SharedConstants;
+import net.minecraft.Util;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.NbtIo;
-import net.minecraft.nbt.NbtUtils;
-import net.minecraft.server.MinecraftServer;
+import net.minecraft.nbt.NbtOps;
+import net.minecraft.resources.ResourceKey;
+import net.minecraft.util.DirectoryLock;
 import net.minecraft.util.ProgressListener;
 import net.minecraft.util.datafix.DataFixTypes;
+import net.minecraft.util.datafix.DataFixers;
+import net.minecraft.util.datafix.fixes.References;
+import net.minecraft.world.level.Level;
+import net.minecraft.world.level.LevelSettings;
+import net.minecraft.world.level.dimension.DimensionType;
+import net.minecraft.world.level.levelgen.WorldGenSettings;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
 public class LevelStorageSource {
    private static final Logger LOGGER = LogManager.getLogger();
    private static final DateTimeFormatter FORMATTER;
+   private static final ImmutableList<String> OLD_SETTINGS_KEYS;
+   private static final Gson WORLD_GEN_SETTINGS_GSON;
    private final Path baseDir;
    private final Path backupDir;
    private final DataFixer fixerUpper;
 
    public LevelStorageSource(Path var1, Path var2, DataFixer var3) {
@@ -39,73 +63,166 @@
 
       this.baseDir = var1;
       this.backupDir = var2;
    }
 
-   private int getStorageVersion() {
-      return 19133;
+   public static LevelStorageSource createDefault(Path var0) {
+      return new LevelStorageSource(var0, var0.resolve("../backups"), DataFixers.getDataFixer());
    }
 
-   public LevelStorage selectLevel(String var1, @Nullable MinecraftServer var2) {
-      return selectLevel(this.baseDir, this.fixerUpper, var1, var2);
-   }
+   private static Pair<WorldGenSettings, Lifecycle> readWorldGenSettings(Dynamic<?> var0, DataFixer var1, int var2) {
+      Dynamic var3 = var0.get("WorldGenSettings").orElseEmptyMap();
+      UnmodifiableIterator var4 = OLD_SETTINGS_KEYS.iterator();
 
-   protected static LevelStorage selectLevel(Path var0, DataFixer var1, String var2, @Nullable MinecraftServer var3) {
-      return new LevelStorage(var0.toFile(), var2, var3, var1);
-   }
+      while(var4.hasNext()) {
+         String var5 = (String)var4.next();
+         Optional var6 = var0.get(var5).result();
+         if (var6.isPresent()) {
+            var3 = var3.set(var5, (Dynamic)var6.get());
+         }
+      }
 
-   public boolean requiresConversion(String var1) {
-      LevelData var2 = this.getDataTagFor(var1);
-      return var2 != null && var2.getVersion() != this.getStorageVersion();
+      Dynamic var8 = var1.update(References.WORLD_GEN_SETTINGS, var3, var2, SharedConstants.getCurrentVersion().getWorldVersion());
+      DataResult var7 = WorldGenSettings.CODEC.parse(var8);
+      Logger var10002 = LOGGER;
+      var10002.getClass();
+      return Pair.of(var7.resultOrPartial(Util.prefix("WorldGenSettings: ", var10002::error)).orElseGet(WorldGenSettings::makeDefault), var7.lifecycle());
    }
 
-   public boolean convertLevel(String var1, ProgressListener var2) {
-      return McRegionUpgrader.convertLevel(this.baseDir, this.fixerUpper, var1, var2);
+   private int getStorageVersion() {
+      return 19133;
    }
 
    @Nullable
-   public LevelData getDataTagFor(String var1) {
-      return getDataTagFor(this.baseDir, this.fixerUpper, var1);
-   }
-
-   @Nullable
-   protected static LevelData getDataTagFor(Path var0, DataFixer var1, String var2) {
-      File var3 = new File(var0.toFile(), var2);
-      if (!var3.exists()) {
+   private <T> T readLevelData(File var1, BiFunction<File, DataFixer, T> var2) {
+      if (!var1.exists()) {
          return null;
       } else {
-         File var4 = new File(var3, "level.dat");
-         if (var4.exists()) {
-            LevelData var5 = getLevelData(var4, var1);
-            if (var5 != null) {
-               return var5;
+         File var3 = new File(var1, "level.dat");
+         if (var3.exists()) {
+            Object var4 = var2.apply(var3, this.fixerUpper);
+            if (var4 != null) {
+               return var4;
             }
          }
 
-         var4 = new File(var3, "level.dat_old");
-         return var4.exists() ? getLevelData(var4, var1) : null;
+         var3 = new File(var1, "level.dat_old");
+         return var3.exists() ? var2.apply(var3, this.fixerUpper) : null;
       }
    }
 
    @Nullable
-   public static LevelData getLevelData(File var0, DataFixer var1) {
+   private static WorldData getLevelData(File var0, DataFixer var1) {
       try {
          CompoundTag var2 = NbtIo.readCompressed(new FileInputStream(var0));
          CompoundTag var3 = var2.getCompound("Data");
          CompoundTag var4 = var3.contains("Player", 10) ? var3.getCompound("Player") : null;
          var3.remove("Player");
          int var5 = var3.contains("DataVersion", 99) ? var3.getInt("DataVersion") : -1;
-         return new LevelData(NbtUtils.update(var1, DataFixTypes.LEVEL, var3, var5), var1, var5, var4);
-      } catch (Exception var6) {
-         LOGGER.error((String)"Exception reading {}", (Object)var0, (Object)var6);
+         Dynamic var6 = var1.update(DataFixTypes.LEVEL.getType(), new Dynamic(NbtOps.INSTANCE, var3), var5, SharedConstants.getCurrentVersion().getWorldVersion());
+         Pair var7 = readWorldGenSettings(var6, var1, var5);
+         LevelVersion var8 = LevelVersion.parse(var6);
+         LevelSettings var9 = LevelSettings.parse(var6, (WorldGenSettings)var7.getFirst());
+         return PrimaryLevelData.parse(var6, var1, var5, var4, var9, var8);
+      } catch (Exception var10) {
+         LOGGER.error((String)"Exception reading {}", (Object)var0, (Object)var10);
          return null;
       }
    }
 
-   public File getFile(String var1, String var2) {
-      return this.baseDir.resolve(var1).resolve(var2).toFile();
+   public LevelStorageSource.LevelStorageAccess createAccess(String var1) throws IOException {
+      return new LevelStorageSource.LevelStorageAccess(var1);
    }
 
    static {
       FORMATTER = (new DateTimeFormatterBuilder()).appendValue(ChronoField.YEAR, 4, 10, SignStyle.EXCEEDS_PAD).appendLiteral('-').appendValue(ChronoField.MONTH_OF_YEAR, 2).appendLiteral('-').appendValue(ChronoField.DAY_OF_MONTH, 2).appendLiteral('_').appendValue(ChronoField.HOUR_OF_DAY, 2).appendLiteral('-').appendValue(ChronoField.MINUTE_OF_HOUR, 2).appendLiteral('-').appendValue(ChronoField.SECOND_OF_MINUTE, 2).toFormatter();
+      OLD_SETTINGS_KEYS = ImmutableList.of("RandomSeed", "generatorName", "generatorOptions", "generatorVersion", "legacy_custom_options", "MapFeatures", "BonusChest");
+      WORLD_GEN_SETTINGS_GSON = (new GsonBuilder()).setPrettyPrinting().serializeNulls().disableHtmlEscaping().create();
    }
+
+   public class LevelStorageAccess implements AutoCloseable {
+      private final DirectoryLock lock;
+      private final Path levelPath;
+      private final String levelId;
+      private final Map<LevelResource, Path> resources = Maps.newHashMap();
+
+      public LevelStorageAccess(String var2) throws IOException {
+         this.levelId = var2;
+         this.levelPath = LevelStorageSource.this.baseDir.resolve(var2);
+         this.lock = DirectoryLock.create(this.levelPath);
+      }
+
+      public String getLevelId() {
+         return this.levelId;
+      }
+
+      public Path getLevelPath(LevelResource var1) {
+         return (Path)this.resources.computeIfAbsent(var1, (var1x) -> {
+            return this.levelPath.resolve(var1x.getId());
+         });
+      }
+
+      public File getDimensionPath(ResourceKey<Level> var1) {
+         return DimensionType.getStorageFolder(var1, this.levelPath.toFile());
+      }
+
+      private void checkLock() {
+         if (!this.lock.isValid()) {
+            throw new IllegalStateException("Lock is no longer valid");
+         }
+      }
+
+      public PlayerDataStorage createPlayerStorage() {
+         this.checkLock();
+         return new PlayerDataStorage(this, LevelStorageSource.this.fixerUpper);
+      }
+
+      public boolean requiresConversion() {
+         WorldData var1 = this.getDataTag();
+         return var1 != null && var1.getVersion() != LevelStorageSource.this.getStorageVersion();
+      }
+
+      public boolean convertLevel(ProgressListener var1) {
+         this.checkLock();
+         return McRegionUpgrader.convertLevel(this, var1);
+      }
+
+      @Nullable
+      public WorldData getDataTag() {
+         this.checkLock();
+         return (WorldData)LevelStorageSource.this.readLevelData(this.levelPath.toFile(), (var0, var1) -> {
+            return LevelStorageSource.getLevelData(var0, var1);
+         });
+      }
+
+      public void saveDataTag(WorldData var1) {
+         this.saveDataTag(var1, (CompoundTag)null);
+      }
+
+      public void saveDataTag(WorldData var1, @Nullable CompoundTag var2) {
+         File var3 = this.levelPath.toFile();
+         CompoundTag var4 = var1.createTag(var2);
+         CompoundTag var5 = new CompoundTag();
+         var5.put("Data", var4);
+
+         try {
+            File var6 = File.createTempFile("level", ".dat", var3);
+            NbtIo.writeCompressed(var5, new FileOutputStream(var6));
+            File var7 = new File(var3, "level.dat_old");
+            File var8 = new File(var3, "level.dat");
+            Util.safeReplaceFile(var8, var6, var7);
+         } catch (Exception var9) {
+            LevelStorageSource.LOGGER.error((String)"Failed to save level {}", (Object)var3, (Object)var9);
+         }
+
+      }
+
+      public File getIconFile() {
+         this.checkLock();
+         return this.levelPath.resolve("icon.png").toFile();
+      }
+
+      public void close() throws IOException {
+         this.lock.close();
+      }
+   }
 }
