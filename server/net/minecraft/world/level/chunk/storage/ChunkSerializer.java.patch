--- net/minecraft/world/level/chunk/storage/ChunkSerializer.java
+++ net/minecraft/world/level/chunk/storage/ChunkSerializer.java
@@ -8,10 +8,11 @@
 import java.util.Arrays;
 import java.util.BitSet;
 import java.util.EnumSet;
 import java.util.HashMap;
 import java.util.Iterator;
+import java.util.Locale;
 import java.util.Map;
 import java.util.Objects;
 import java.util.Map.Entry;
 import java.util.function.Function;
 import javax.annotation.Nullable;
@@ -48,11 +49,11 @@
 import net.minecraft.world.level.chunk.ProtoChunk;
 import net.minecraft.world.level.chunk.ProtoTickList;
 import net.minecraft.world.level.chunk.UpgradeData;
 import net.minecraft.world.level.levelgen.GenerationStep;
 import net.minecraft.world.level.levelgen.Heightmap;
-import net.minecraft.world.level.levelgen.structure.StructureFeatureIO;
+import net.minecraft.world.level.levelgen.feature.StructureFeature;
 import net.minecraft.world.level.levelgen.structure.StructureStart;
 import net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager;
 import net.minecraft.world.level.lighting.LevelLightEngine;
 import net.minecraft.world.level.material.Fluids;
 import org.apache.logging.log4j.LogManager;
@@ -68,11 +69,11 @@
       ChunkPos var8 = new ChunkPos(var7.getInt("xPos"), var7.getInt("zPos"));
       if (!Objects.equals(var3, var8)) {
          LOGGER.error((String)"Chunk file at {} is in the wrong location; relocating. (Expected {}, got {})", (Object)var3, var3, var8);
       }
 
-      ChunkBiomeContainer var9 = new ChunkBiomeContainer(var3, var6, var7.contains("Biomes", 11) ? var7.getIntArray("Biomes") : null);
+      ChunkBiomeContainer var9 = new ChunkBiomeContainer(var0.registryAccess().registryOrThrow(Registry.BIOME_REGISTRY), var3, var6, var7.contains("Biomes", 11) ? var7.getIntArray("Biomes") : null);
       UpgradeData var10 = var7.contains("UpgradeData", 10) ? new UpgradeData(var7.getCompound("UpgradeData")) : UpgradeData.EMPTY;
       ProtoTickList var11 = new ProtoTickList((var0x) -> {
          return var0x == null || var0x.defaultBlockState().isAir();
       }, var3, var7.getList("ToBeTicked", 9));
       ProtoTickList var12 = new ProtoTickList((var0x) -> {
@@ -80,11 +81,11 @@
       }, var3, var7.getList("LiquidsToBeTicked", 9));
       boolean var13 = var7.getBoolean("isLightOn");
       ListTag var14 = var7.getList("Sections", 10);
       boolean var15 = true;
       LevelChunkSection[] var16 = new LevelChunkSection[16];
-      boolean var17 = var0.getDimension().isHasSkyLight();
+      boolean var17 = var0.dimensionType().hasSkyLight();
       ServerChunkCache var18 = var0.getChunkSource();
       LevelLightEngine var19 = var18.getLightEngine();
       if (var13) {
          var19.retainData(var3, true);
       }
@@ -103,15 +104,15 @@
             var2.checkConsistencyWithBlocks(var3, var23);
          }
 
          if (var13) {
             if (var21.contains("BlockLight", 7)) {
-               var19.queueSectionData(LightLayer.BLOCK, SectionPos.of(var3, var22), new DataLayer(var21.getByteArray("BlockLight")));
+               var19.queueSectionData(LightLayer.BLOCK, SectionPos.of(var3, var22), new DataLayer(var21.getByteArray("BlockLight")), true);
             }
 
             if (var17 && var21.contains("SkyLight", 7)) {
-               var19.queueSectionData(LightLayer.SKY, SectionPos.of(var3, var22), new DataLayer(var21.getByteArray("SkyLight")));
+               var19.queueSectionData(LightLayer.SKY, SectionPos.of(var3, var22), new DataLayer(var21.getByteArray("SkyLight")), true);
             }
          }
       }
 
       long var36 = var7.getLong("InhabitedTime");
@@ -183,11 +184,11 @@
          }
       }
 
       Heightmap.primeHeightmaps((ChunkAccess)var38, var42);
       CompoundTag var44 = var7.getCompound("Structures");
-      ((ChunkAccess)var38).setAllStarts(unpackStructureStart(var5, var1, var44));
+      ((ChunkAccess)var38).setAllStarts(unpackStructureStart(var1, var44, var0.getSeed()));
       ((ChunkAccess)var38).setAllReferences(unpackStructureReferences(var3, var44));
       if (var7.getBoolean("shouldSave")) {
          ((ChunkAccess)var38).setUnsaved(true);
       }
 
@@ -294,88 +295,91 @@
       var4.put("Sections", var7);
       if (var9) {
          var4.putBoolean("isLightOn", true);
       }
 
-      ChunkBiomeContainer var19 = var1.getBiomes();
-      if (var19 != null) {
-         var4.putIntArray("Biomes", var19.writeBiomes());
+      ChunkBiomeContainer var20 = var1.getBiomes();
+      if (var20 != null) {
+         var4.putIntArray("Biomes", var20.writeBiomes());
       }
 
       ListTag var11 = new ListTag();
-      Iterator var20 = var1.getBlockEntitiesPos().iterator();
+      Iterator var21 = var1.getBlockEntitiesPos().iterator();
 
-      CompoundTag var25;
-      while(var20.hasNext()) {
-         BlockPos var22 = (BlockPos)var20.next();
-         var25 = var1.getBlockEntityNbtForSaving(var22);
-         if (var25 != null) {
-            var11.add(var25);
+      CompoundTag var26;
+      while(var21.hasNext()) {
+         BlockPos var23 = (BlockPos)var21.next();
+         var26 = var1.getBlockEntityNbtForSaving(var23);
+         if (var26 != null) {
+            var11.add(var26);
          }
       }
 
       var4.put("TileEntities", var11);
-      ListTag var21 = new ListTag();
+      ListTag var22 = new ListTag();
       if (var1.getStatus().getChunkType() == ChunkStatus.ChunkType.LEVELCHUNK) {
-         LevelChunk var23 = (LevelChunk)var1;
-         var23.setLastSaveHadEntities(false);
+         LevelChunk var24 = (LevelChunk)var1;
+         var24.setLastSaveHadEntities(false);
 
-         for(int var27 = 0; var27 < var23.getEntitySections().length; ++var27) {
-            Iterator var28 = var23.getEntitySections()[var27].iterator();
+         for(int var28 = 0; var28 < var24.getEntitySections().length; ++var28) {
+            Iterator var29 = var24.getEntitySections()[var28].iterator();
 
-            while(var28.hasNext()) {
-               Entity var16 = (Entity)var28.next();
+            while(var29.hasNext()) {
+               Entity var16 = (Entity)var29.next();
                CompoundTag var17 = new CompoundTag();
                if (var16.save(var17)) {
-                  var23.setLastSaveHadEntities(true);
-                  var21.add(var17);
+                  var24.setLastSaveHadEntities(true);
+                  var22.add(var17);
                }
             }
          }
       } else {
-         ProtoChunk var24 = (ProtoChunk)var1;
-         var21.addAll(var24.getEntities());
-         var4.put("Lights", packOffsets(var24.getPackedLights()));
-         var25 = new CompoundTag();
-         GenerationStep.Carving[] var29 = GenerationStep.Carving.values();
-         int var31 = var29.length;
+         ProtoChunk var25 = (ProtoChunk)var1;
+         var22.addAll(var25.getEntities());
+         var4.put("Lights", packOffsets(var25.getPackedLights()));
+         var26 = new CompoundTag();
+         GenerationStep.Carving[] var30 = GenerationStep.Carving.values();
+         int var32 = var30.length;
 
-         for(int var33 = 0; var33 < var31; ++var33) {
-            GenerationStep.Carving var18 = var29[var33];
-            var25.putByteArray(var18.toString(), var1.getCarvingMask(var18).toByteArray());
+         for(int var34 = 0; var34 < var32; ++var34) {
+            GenerationStep.Carving var18 = var30[var34];
+            BitSet var19 = var25.getCarvingMask(var18);
+            if (var19 != null) {
+               var26.putByteArray(var18.toString(), var19.toByteArray());
+            }
          }
 
-         var4.put("CarvingMasks", var25);
+         var4.put("CarvingMasks", var26);
       }
 
-      var4.put("Entities", var21);
-      TickList var26 = var1.getBlockTicks();
-      if (var26 instanceof ProtoTickList) {
-         var4.put("ToBeTicked", ((ProtoTickList)var26).save());
-      } else if (var26 instanceof ChunkTickList) {
-         var4.put("TileTicks", ((ChunkTickList)var26).save(var0.getGameTime()));
+      var4.put("Entities", var22);
+      TickList var27 = var1.getBlockTicks();
+      if (var27 instanceof ProtoTickList) {
+         var4.put("ToBeTicked", ((ProtoTickList)var27).save());
+      } else if (var27 instanceof ChunkTickList) {
+         var4.put("TileTicks", ((ChunkTickList)var27).save());
       } else {
          var4.put("TileTicks", var0.getBlockTicks().save(var2));
       }
 
-      TickList var30 = var1.getLiquidTicks();
-      if (var30 instanceof ProtoTickList) {
-         var4.put("LiquidsToBeTicked", ((ProtoTickList)var30).save());
-      } else if (var30 instanceof ChunkTickList) {
-         var4.put("LiquidTicks", ((ChunkTickList)var30).save(var0.getGameTime()));
+      TickList var31 = var1.getLiquidTicks();
+      if (var31 instanceof ProtoTickList) {
+         var4.put("LiquidsToBeTicked", ((ProtoTickList)var31).save());
+      } else if (var31 instanceof ChunkTickList) {
+         var4.put("LiquidTicks", ((ChunkTickList)var31).save());
       } else {
          var4.put("LiquidTicks", var0.getLiquidTicks().save(var2));
       }
 
       var4.put("PostProcessing", packOffsets(var1.getPostProcessing()));
       var15 = new CompoundTag();
-      Iterator var32 = var1.getHeightmaps().iterator();
+      Iterator var33 = var1.getHeightmaps().iterator();
 
-      while(var32.hasNext()) {
-         Entry var34 = (Entry)var32.next();
-         if (var1.getStatus().heightmapsAfter().contains(var34.getKey())) {
-            var15.put(((Heightmap.Types)var34.getKey()).getSerializationKey(), new LongArrayTag(((Heightmap)var34.getValue()).getRawData()));
+      while(var33.hasNext()) {
+         Entry var35 = (Entry)var33.next();
+         if (var1.getStatus().heightmapsAfter().contains(var35.getKey())) {
+            var15.put(((Heightmap.Types)var35.getKey()).getSerializationKey(), new LongArrayTag(((Heightmap)var35.getValue()).getRawData()));
          }
       }
 
       var4.put("Heightmaps", var15);
       var4.put("Structures", packStructureData(var2, var1.getAllStarts(), var1.getAllReferences()));
@@ -404,71 +408,81 @@
             return var1x;
          });
          var1.setLastSaveHadEntities(true);
       }
 
-      ListTag var9 = var0.getList("TileEntities", 10);
+      ListTag var10 = var0.getList("TileEntities", 10);
 
-      for(int var10 = 0; var10 < var9.size(); ++var10) {
-         CompoundTag var6 = var9.getCompound(var10);
+      for(int var11 = 0; var11 < var10.size(); ++var11) {
+         CompoundTag var6 = var10.getCompound(var11);
          boolean var7 = var6.getBoolean("keepPacked");
          if (var7) {
             var1.setBlockEntityNbt(var6);
          } else {
-            BlockEntity var8 = BlockEntity.loadStatic(var6);
-            if (var8 != null) {
-               var1.addBlockEntity(var8);
+            BlockPos var8 = new BlockPos(var6.getInt("x"), var6.getInt("y"), var6.getInt("z"));
+            BlockEntity var9 = BlockEntity.loadStatic(var1.getBlockState(var8), var6);
+            if (var9 != null) {
+               var1.addBlockEntity(var9);
             }
          }
       }
 
    }
 
-   private static CompoundTag packStructureData(ChunkPos var0, Map<String, StructureStart> var1, Map<String, LongSet> var2) {
+   private static CompoundTag packStructureData(ChunkPos var0, Map<StructureFeature<?>, StructureStart<?>> var1, Map<StructureFeature<?>, LongSet> var2) {
       CompoundTag var3 = new CompoundTag();
       CompoundTag var4 = new CompoundTag();
       Iterator var5 = var1.entrySet().iterator();
 
       while(var5.hasNext()) {
          Entry var6 = (Entry)var5.next();
-         var4.put((String)var6.getKey(), ((StructureStart)var6.getValue()).createTag(var0.x, var0.z));
+         var4.put(((StructureFeature)var6.getKey()).getFeatureName(), ((StructureStart)var6.getValue()).createTag(var0.x, var0.z));
       }
 
       var3.put("Starts", var4);
       CompoundTag var8 = new CompoundTag();
       Iterator var9 = var2.entrySet().iterator();
 
       while(var9.hasNext()) {
          Entry var7 = (Entry)var9.next();
-         var8.put((String)var7.getKey(), new LongArrayTag((LongSet)var7.getValue()));
+         var8.put(((StructureFeature)var7.getKey()).getFeatureName(), new LongArrayTag((LongSet)var7.getValue()));
       }
 
       var3.put("References", var8);
       return var3;
    }
 
-   private static Map<String, StructureStart> unpackStructureStart(ChunkGenerator<?> var0, StructureManager var1, CompoundTag var2) {
-      HashMap var3 = Maps.newHashMap();
-      CompoundTag var4 = var2.getCompound("Starts");
-      Iterator var5 = var4.getAllKeys().iterator();
+   private static Map<StructureFeature<?>, StructureStart<?>> unpackStructureStart(StructureManager var0, CompoundTag var1, long var2) {
+      HashMap var4 = Maps.newHashMap();
+      CompoundTag var5 = var1.getCompound("Starts");
+      Iterator var6 = var5.getAllKeys().iterator();
 
-      while(var5.hasNext()) {
-         String var6 = (String)var5.next();
-         var3.put(var6, StructureFeatureIO.loadStaticStart(var0, var1, var4.getCompound(var6)));
+      while(var6.hasNext()) {
+         String var7 = (String)var6.next();
+         String var8 = var7.toLowerCase(Locale.ROOT);
+         StructureFeature var9 = (StructureFeature)StructureFeature.STRUCTURES_REGISTRY.get(var8);
+         if (var9 == null) {
+            LOGGER.error((String)"Unknown structure start: {}", (Object)var8);
+         } else {
+            StructureStart var10 = StructureFeature.loadStaticStart(var0, var5.getCompound(var7), var2);
+            if (var10 != null) {
+               var4.put(var9, var10);
+            }
+         }
       }
 
-      return var3;
+      return var4;
    }
 
-   private static Map<String, LongSet> unpackStructureReferences(ChunkPos var0, CompoundTag var1) {
+   private static Map<StructureFeature<?>, LongSet> unpackStructureReferences(ChunkPos var0, CompoundTag var1) {
       HashMap var2 = Maps.newHashMap();
       CompoundTag var3 = var1.getCompound("References");
       Iterator var4 = var3.getAllKeys().iterator();
 
       while(var4.hasNext()) {
          String var5 = (String)var4.next();
-         var2.put(var5, new LongOpenHashSet(Arrays.stream(var3.getLongArray(var5)).filter((var2x) -> {
+         var2.put(StructureFeature.STRUCTURES_REGISTRY.get(var5.toLowerCase(Locale.ROOT)), new LongOpenHashSet(Arrays.stream(var3.getLongArray(var5)).filter((var2x) -> {
             ChunkPos var4 = new ChunkPos(var2x);
             if (var4.getChessboardDistance(var0) > 8) {
                LOGGER.warn((String)"Found invalid structure reference [ {} @ {} ] for chunk {}.", (Object)var5, var4, var0);
                return false;
             } else {
