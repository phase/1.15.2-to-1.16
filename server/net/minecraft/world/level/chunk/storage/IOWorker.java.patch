--- net/minecraft/world/level/chunk/storage/IOWorker.java
+++ net/minecraft/world/level/chunk/storage/IOWorker.java
@@ -1,79 +1,66 @@
 package net.minecraft.world.level.chunk.storage;
 
 import com.google.common.collect.Maps;
-import com.google.common.collect.Queues;
+import com.mojang.datafixers.util.Either;
+import java.io.File;
 import java.io.IOException;
 import java.util.Iterator;
 import java.util.Map;
-import java.util.Queue;
 import java.util.Map.Entry;
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.CompletionException;
 import java.util.concurrent.atomic.AtomicBoolean;
-import java.util.concurrent.locks.LockSupport;
 import java.util.function.Function;
+import java.util.function.Supplier;
 import javax.annotation.Nullable;
+import net.minecraft.Util;
 import net.minecraft.nbt.CompoundTag;
+import net.minecraft.util.Unit;
+import net.minecraft.util.thread.ProcessorMailbox;
+import net.minecraft.util.thread.StrictQueue;
 import net.minecraft.world.level.ChunkPos;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
 public class IOWorker implements AutoCloseable {
    private static final Logger LOGGER = LogManager.getLogger();
-   private final Thread thread;
    private final AtomicBoolean shutdownRequested = new AtomicBoolean();
-   private final Queue<Runnable> inbox = Queues.newConcurrentLinkedQueue();
+   private final ProcessorMailbox<StrictQueue.IntRunnable> mailbox;
    private final RegionFileStorage storage;
    private final Map<ChunkPos, IOWorker.PendingStore> pendingWrites = Maps.newLinkedHashMap();
-   private boolean running = true;
-   private CompletableFuture<Void> shutdownListener = new CompletableFuture();
 
-   IOWorker(RegionFileStorage var1, String var2) {
-      this.storage = var1;
-      this.thread = new Thread(this::loop);
-      this.thread.setName(var2 + " IO worker");
-      this.thread.start();
+   protected IOWorker(File var1, boolean var2, String var3) {
+      this.storage = new RegionFileStorage(var1, var2);
+      this.mailbox = new ProcessorMailbox(new StrictQueue.FixedPriorityQueue(IOWorker.Priority.values().length), Util.ioPool(), "IOWorker-" + var3);
    }
 
    public CompletableFuture<Void> store(ChunkPos var1, CompoundTag var2) {
-      return this.submitTask((var3) -> {
-         return () -> {
-            IOWorker.PendingStore var4 = (IOWorker.PendingStore)this.pendingWrites.computeIfAbsent(var1, (var0) -> {
-               return new IOWorker.PendingStore();
-            });
-            var4.data = var2;
-            var4.result.whenComplete((var1x, var2x) -> {
-               if (var2x != null) {
-                  var3.completeExceptionally(var2x);
-               } else {
-                  var3.complete((Object)null);
-               }
-
-            });
-         };
-      });
+      return this.submitTask(() -> {
+         IOWorker.PendingStore var3 = (IOWorker.PendingStore)this.pendingWrites.computeIfAbsent(var1, (var1x) -> {
+            return new IOWorker.PendingStore(var2);
+         });
+         var3.data = var2;
+         return Either.left(var3.result);
+      }).thenCompose(Function.identity());
    }
 
    @Nullable
    public CompoundTag load(ChunkPos var1) throws IOException {
-      CompletableFuture var2 = this.submitTask((var2x) -> {
-         return () -> {
-            IOWorker.PendingStore var3 = (IOWorker.PendingStore)this.pendingWrites.get(var1);
-            if (var3 != null) {
-               var2x.complete(var3.data);
-            } else {
-               try {
-                  CompoundTag var4 = this.storage.read(var1);
-                  var2x.complete(var4);
-               } catch (Exception var5) {
-                  LOGGER.warn((String)"Failed to read chunk {}", (Object)var1, (Object)var5);
-                  var2x.completeExceptionally(var5);
-               }
+      CompletableFuture var2 = this.submitTask(() -> {
+         IOWorker.PendingStore var2 = (IOWorker.PendingStore)this.pendingWrites.get(var1);
+         if (var2 != null) {
+            return Either.left(var2.data);
+         } else {
+            try {
+               CompoundTag var3 = this.storage.read(var1);
+               return Either.left(var3);
+            } catch (Exception var4) {
+               LOGGER.warn((String)"Failed to read chunk {}", (Object)var1, (Object)var4);
+               return Either.right(var4);
             }
-
-         };
+         }
       });
 
       try {
          return (CompoundTag)var2.join();
       } catch (CompletionException var4) {
@@ -83,78 +70,55 @@
             throw var4;
          }
       }
    }
 
-   private CompletableFuture<Void> shutdown() {
-      return this.submitTask((var1) -> {
-         return () -> {
-            this.running = false;
-            this.shutdownListener = var1;
-         };
-      });
-   }
-
    public CompletableFuture<Void> synchronize() {
-      return this.submitTask((var1) -> {
-         return () -> {
-            CompletableFuture var2 = CompletableFuture.allOf((CompletableFuture[])this.pendingWrites.values().stream().map((var0) -> {
-               return var0.result;
-            }).toArray((var0) -> {
-               return new CompletableFuture[var0];
-            }));
-            var2.whenComplete((var1x, var2x) -> {
-               var1.complete((Object)null);
-            });
-         };
+      CompletableFuture var1 = this.submitTask(() -> {
+         return Either.left(CompletableFuture.allOf((CompletableFuture[])this.pendingWrites.values().stream().map((var0) -> {
+            return var0.result;
+         }).toArray((var0) -> {
+            return new CompletableFuture[var0];
+         })));
+      }).thenCompose(Function.identity());
+      return var1.thenCompose((var1x) -> {
+         return this.submitTask(() -> {
+            try {
+               this.storage.flush();
+               return Either.left((Object)null);
+            } catch (Exception var2) {
+               LOGGER.warn((String)"Failed to synchronized chunks", (Throwable)var2);
+               return Either.right(var2);
+            }
+         });
       });
    }
 
-   private <T> CompletableFuture<T> submitTask(Function<CompletableFuture<T>, Runnable> var1) {
-      CompletableFuture var2 = new CompletableFuture();
-      this.inbox.add(var1.apply(var2));
-      LockSupport.unpark(this.thread);
-      return var2;
-   }
-
-   private void waitForQueueNonEmpty() {
-      LockSupport.park("waiting for tasks");
-   }
-
-   private void loop() {
-      try {
-         while(this.running) {
-            boolean var1 = this.processInbox();
-            boolean var2 = this.storePendingChunk();
-            if (!var1 && !var2) {
-               this.waitForQueueNonEmpty();
+   private <T> CompletableFuture<T> submitTask(Supplier<Either<T, Exception>> var1) {
+      return this.mailbox.askEither((var2) -> {
+         return new StrictQueue.IntRunnable(IOWorker.Priority.HIGH.ordinal(), () -> {
+            if (!this.shutdownRequested.get()) {
+               var2.tell(var1.get());
             }
-         }
 
-         this.processInbox();
-         this.storeRemainingPendingChunks();
-      } finally {
-         this.closeStorage();
-      }
-
+            this.tellStorePending();
+         });
+      });
    }
 
-   private boolean storePendingChunk() {
+   private void storePendingChunk() {
       Iterator var1 = this.pendingWrites.entrySet().iterator();
-      if (!var1.hasNext()) {
-         return false;
-      } else {
+      if (var1.hasNext()) {
          Entry var2 = (Entry)var1.next();
          var1.remove();
          this.runStore((ChunkPos)var2.getKey(), (IOWorker.PendingStore)var2.getValue());
-         return true;
+         this.tellStorePending();
       }
    }
 
-   private void storeRemainingPendingChunks() {
-      this.pendingWrites.forEach(this::runStore);
-      this.pendingWrites.clear();
+   private void tellStorePending() {
+      this.mailbox.tell(new StrictQueue.IntRunnable(IOWorker.Priority.LOW.ordinal(), this::storePendingChunk));
    }
 
    private void runStore(ChunkPos var1, IOWorker.PendingStore var2) {
       try {
          this.storage.write(var1, var2.data);
@@ -164,51 +128,53 @@
          var2.result.completeExceptionally(var4);
       }
 
    }
 
-   private void closeStorage() {
-      try {
-         this.storage.close();
-         this.shutdownListener.complete((Object)null);
-      } catch (Exception var2) {
-         LOGGER.error((String)"Failed to close storage", (Throwable)var2);
-         this.shutdownListener.completeExceptionally(var2);
-      }
+   public void close() throws IOException {
+      if (this.shutdownRequested.compareAndSet(false, true)) {
+         CompletableFuture var1 = this.mailbox.ask((var0) -> {
+            return new StrictQueue.IntRunnable(IOWorker.Priority.HIGH.ordinal(), () -> {
+               var0.tell(Unit.INSTANCE);
+            });
+         });
 
-   }
+         try {
+            var1.join();
+         } catch (CompletionException var4) {
+            if (var4.getCause() instanceof IOException) {
+               throw (IOException)var4.getCause();
+            }
 
-   private boolean processInbox() {
-      boolean var1 = false;
+            throw var4;
+         }
 
-      Runnable var2;
-      while((var2 = (Runnable)this.inbox.poll()) != null) {
-         var1 = true;
-         var2.run();
-      }
+         this.mailbox.close();
+         this.pendingWrites.forEach(this::runStore);
+         this.pendingWrites.clear();
 
-      return var1;
-   }
-
-   public void close() throws IOException {
-      if (this.shutdownRequested.compareAndSet(false, true)) {
          try {
-            this.shutdown().join();
-         } catch (CompletionException var2) {
-            if (var2.getCause() instanceof IOException) {
-               throw (IOException)var2.getCause();
-            } else {
-               throw var2;
-            }
+            this.storage.close();
+         } catch (Exception var3) {
+            LOGGER.error((String)"Failed to close storage", (Throwable)var3);
          }
+
       }
    }
 
    static class PendingStore {
       private CompoundTag data;
-      private final CompletableFuture<Void> result;
+      private final CompletableFuture<Void> result = new CompletableFuture();
 
-      private PendingStore() {
-         this.result = new CompletableFuture();
+      public PendingStore(CompoundTag var1) {
+         this.data = var1;
       }
    }
+
+   static enum Priority {
+      HIGH,
+      LOW;
+
+      private Priority() {
+      }
+   }
 }
