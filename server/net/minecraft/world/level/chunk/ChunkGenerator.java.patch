--- net/minecraft/world/level/chunk/ChunkGenerator.java
+++ net/minecraft/world/level/chunk/ChunkGenerator.java
@@ -1,222 +1,320 @@
 package net.minecraft.world.level.chunk;
 
+import com.google.common.collect.Lists;
+import com.mojang.serialization.Codec;
+import java.util.ArrayList;
 import java.util.BitSet;
 import java.util.Iterator;
 import java.util.List;
 import java.util.ListIterator;
-import java.util.Locale;
-import java.util.Map.Entry;
+import java.util.Random;
+import java.util.function.Function;
 import javax.annotation.Nullable;
 import net.minecraft.CrashReport;
+import net.minecraft.CrashReportCategory;
 import net.minecraft.ReportedException;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Registry;
+import net.minecraft.core.SectionPos;
 import net.minecraft.network.protocol.game.DebugPackets;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.server.level.WorldGenRegion;
 import net.minecraft.world.entity.MobCategory;
+import net.minecraft.world.level.BlockGetter;
 import net.minecraft.world.level.ChunkPos;
-import net.minecraft.world.level.Level;
 import net.minecraft.world.level.LevelAccessor;
+import net.minecraft.world.level.StructureFeatureManager;
 import net.minecraft.world.level.biome.Biome;
+import net.minecraft.world.level.biome.BiomeDefaultFeatures;
 import net.minecraft.world.level.biome.BiomeManager;
 import net.minecraft.world.level.biome.BiomeSource;
-import net.minecraft.world.level.levelgen.ChunkGeneratorSettings;
+import net.minecraft.world.level.levelgen.DebugLevelSource;
+import net.minecraft.world.level.levelgen.FlatLevelSource;
 import net.minecraft.world.level.levelgen.GenerationStep;
 import net.minecraft.world.level.levelgen.Heightmap;
+import net.minecraft.world.level.levelgen.NoiseBasedChunkGenerator;
+import net.minecraft.world.level.levelgen.StructureSettings;
 import net.minecraft.world.level.levelgen.WorldgenRandom;
 import net.minecraft.world.level.levelgen.carver.ConfiguredWorldCarver;
-import net.minecraft.world.level.levelgen.feature.Feature;
+import net.minecraft.world.level.levelgen.feature.ConfiguredStructureFeature;
 import net.minecraft.world.level.levelgen.feature.StructureFeature;
-import net.minecraft.world.level.levelgen.feature.configurations.FeatureConfiguration;
-import net.minecraft.world.level.levelgen.structure.BoundingBox;
+import net.minecraft.world.level.levelgen.feature.configurations.StrongholdConfiguration;
 import net.minecraft.world.level.levelgen.structure.StructureStart;
 import net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager;
 
-public abstract class ChunkGenerator<C extends ChunkGeneratorSettings> {
-   protected final LevelAccessor level;
-   protected final long seed;
+public abstract class ChunkGenerator {
+   public static final Codec<ChunkGenerator> CODEC;
    protected final BiomeSource biomeSource;
-   protected final C settings;
+   protected final BiomeSource runtimeBiomeSource;
+   private final StructureSettings settings;
+   private final long strongholdSeed;
+   private final List<ChunkPos> strongholdPositions;
 
-   public ChunkGenerator(LevelAccessor var1, BiomeSource var2, C var3) {
-      this.level = var1;
-      this.seed = var1.getSeed();
-      this.biomeSource = var2;
+   public ChunkGenerator(BiomeSource var1, StructureSettings var2) {
+      this(var1, var1, var2, 0L);
+   }
+
+   public ChunkGenerator(BiomeSource var1, BiomeSource var2, StructureSettings var3, long var4) {
+      this.strongholdPositions = Lists.newArrayList();
+      this.biomeSource = var1;
+      this.runtimeBiomeSource = var2;
       this.settings = var3;
+      this.strongholdSeed = var4;
    }
 
+   private void generateStrongholds() {
+      if (this.strongholdPositions.isEmpty()) {
+         StrongholdConfiguration var1 = this.settings.stronghold();
+         if (var1 != null && var1.count() != 0) {
+            ArrayList var2 = Lists.newArrayList();
+            Iterator var3 = this.biomeSource.possibleBiomes().iterator();
+
+            while(var3.hasNext()) {
+               Biome var4 = (Biome)var3.next();
+               if (var4.isValidStart(StructureFeature.STRONGHOLD)) {
+                  var2.add(var4);
+               }
+            }
+
+            int var17 = var1.distance();
+            int var18 = var1.count();
+            int var5 = var1.spread();
+            Random var6 = new Random();
+            var6.setSeed(this.strongholdSeed);
+            double var7 = var6.nextDouble() * 3.141592653589793D * 2.0D;
+            int var9 = 0;
+            int var10 = 0;
+
+            for(int var11 = 0; var11 < var18; ++var11) {
+               double var12 = (double)(4 * var17 + var17 * var10 * 6) + (var6.nextDouble() - 0.5D) * (double)var17 * 2.5D;
+               int var14 = (int)Math.round(Math.cos(var7) * var12);
+               int var15 = (int)Math.round(Math.sin(var7) * var12);
+               BlockPos var16 = this.biomeSource.findBiomeHorizontal((var14 << 4) + 8, 0, (var15 << 4) + 8, 112, var2, var6);
+               if (var16 != null) {
+                  var14 = var16.getX() >> 4;
+                  var15 = var16.getZ() >> 4;
+               }
+
+               this.strongholdPositions.add(new ChunkPos(var14, var15));
+               var7 += 6.283185307179586D / (double)var5;
+               ++var9;
+               if (var9 == var5) {
+                  ++var10;
+                  var9 = 0;
+                  var5 += 2 * var5 / (var10 + 1);
+                  var5 = Math.min(var5, var18 - var11);
+                  var7 += var6.nextDouble() * 3.141592653589793D * 2.0D;
+               }
+            }
+
+         }
+      }
+   }
+
+   protected abstract Codec<? extends ChunkGenerator> codec();
+
    public void createBiomes(ChunkAccess var1) {
       ChunkPos var2 = var1.getPos();
-      ((ProtoChunk)var1).setBiomes(new ChunkBiomeContainer(var2, this.biomeSource));
+      ((ProtoChunk)var1).setBiomes(new ChunkBiomeContainer(var2, this.runtimeBiomeSource));
    }
 
-   protected Biome getCarvingOrDecorationBiome(BiomeManager var1, BlockPos var2) {
-      return var1.getBiome(var2);
-   }
+   public void applyCarvers(long var1, BiomeManager var3, ChunkAccess var4, GenerationStep.Carving var5) {
+      BiomeManager var6 = var3.withDifferentSource(this.biomeSource);
+      WorldgenRandom var7 = new WorldgenRandom();
+      boolean var8 = true;
+      ChunkPos var9 = var4.getPos();
+      int var10 = var9.x;
+      int var11 = var9.z;
+      Biome var12 = this.biomeSource.getNoiseBiome(var9.x << 2, 0, var9.z << 2);
+      BitSet var13 = ((ProtoChunk)var4).getOrCreateCarvingMask(var5);
 
-   public void applyCarvers(BiomeManager var1, ChunkAccess var2, GenerationStep.Carving var3) {
-      WorldgenRandom var4 = new WorldgenRandom();
-      boolean var5 = true;
-      ChunkPos var6 = var2.getPos();
-      int var7 = var6.x;
-      int var8 = var6.z;
-      Biome var9 = this.getCarvingOrDecorationBiome(var1, var6.getWorldPosition());
-      BitSet var10 = var2.getCarvingMask(var3);
+      for(int var14 = var10 - 8; var14 <= var10 + 8; ++var14) {
+         for(int var15 = var11 - 8; var15 <= var11 + 8; ++var15) {
+            List var16 = var12.getCarvers(var5);
+            ListIterator var17 = var16.listIterator();
 
-      for(int var11 = var7 - 8; var11 <= var7 + 8; ++var11) {
-         for(int var12 = var8 - 8; var12 <= var8 + 8; ++var12) {
-            List var13 = var9.getCarvers(var3);
-            ListIterator var14 = var13.listIterator();
-
-            while(var14.hasNext()) {
-               int var15 = var14.nextIndex();
-               ConfiguredWorldCarver var16 = (ConfiguredWorldCarver)var14.next();
-               var4.setLargeFeatureSeed(this.seed + (long)var15, var11, var12);
-               if (var16.isStartChunk(var4, var11, var12)) {
-                  var16.carve(var2, (var2x) -> {
-                     return this.getCarvingOrDecorationBiome(var1, var2x);
-                  }, var4, this.getSeaLevel(), var11, var12, var7, var8, var10);
+            while(var17.hasNext()) {
+               int var18 = var17.nextIndex();
+               ConfiguredWorldCarver var19 = (ConfiguredWorldCarver)var17.next();
+               var7.setLargeFeatureSeed(var1 + (long)var18, var14, var15);
+               if (var19.isStartChunk(var7, var14, var15)) {
+                  var19.carve(var4, var6::getBiome, var7, this.getSeaLevel(), var14, var15, var10, var11, var13);
                }
             }
          }
       }
 
    }
 
    @Nullable
-   public BlockPos findNearestMapFeature(Level var1, String var2, BlockPos var3, int var4, boolean var5) {
-      StructureFeature var6 = (StructureFeature)Feature.STRUCTURES_REGISTRY.get(var2.toLowerCase(Locale.ROOT));
-      return var6 != null ? var6.getNearestGeneratedFeature(var1, this, var3, var4, var5) : null;
+   public BlockPos findNearestMapFeature(ServerLevel var1, StructureFeature<?> var2, BlockPos var3, int var4, boolean var5) {
+      if (!this.biomeSource.canGenerateStructure(var2)) {
+         return null;
+      } else if (var2 == StructureFeature.STRONGHOLD) {
+         this.generateStrongholds();
+         BlockPos var6 = null;
+         double var7 = Double.MAX_VALUE;
+         BlockPos.MutableBlockPos var9 = new BlockPos.MutableBlockPos();
+         Iterator var10 = this.strongholdPositions.iterator();
+
+         while(var10.hasNext()) {
+            ChunkPos var11 = (ChunkPos)var10.next();
+            var9.set((var11.x << 4) + 8, 32, (var11.z << 4) + 8);
+            double var12 = var9.distSqr(var3);
+            if (var6 == null) {
+               var6 = new BlockPos(var9);
+               var7 = var12;
+            } else if (var12 < var7) {
+               var6 = new BlockPos(var9);
+               var7 = var12;
+            }
+         }
+
+         return var6;
+      } else {
+         return var2.getNearestGeneratedFeature(var1, var1.structureFeatureManager(), var3, var4, var5, var1.getSeed(), this.settings.getConfig(var2));
+      }
    }
 
-   public void applyBiomeDecoration(WorldGenRegion var1) {
-      int var2 = var1.getCenterX();
-      int var3 = var1.getCenterZ();
-      int var4 = var2 * 16;
+   public void applyBiomeDecoration(WorldGenRegion var1, StructureFeatureManager var2) {
+      int var3 = var1.getCenterX();
+      int var4 = var1.getCenterZ();
       int var5 = var3 * 16;
-      BlockPos var6 = new BlockPos(var4, 0, var5);
-      Biome var7 = this.getCarvingOrDecorationBiome(var1.getBiomeManager(), var6.offset(8, 8, 8));
-      WorldgenRandom var8 = new WorldgenRandom();
-      long var9 = var8.setDecorationSeed(var1.getSeed(), var4, var5);
-      GenerationStep.Decoration[] var11 = GenerationStep.Decoration.values();
-      int var12 = var11.length;
+      int var6 = var4 * 16;
+      BlockPos var7 = new BlockPos(var5, 0, var6);
+      Biome var8 = this.biomeSource.getNoiseBiome((var3 << 2) + 2, 2, (var4 << 2) + 2);
+      WorldgenRandom var9 = new WorldgenRandom();
+      long var10 = var9.setDecorationSeed(var1.getSeed(), var5, var6);
+      GenerationStep.Decoration[] var12 = GenerationStep.Decoration.values();
+      int var13 = var12.length;
 
-      for(int var13 = 0; var13 < var12; ++var13) {
-         GenerationStep.Decoration var14 = var11[var13];
+      for(int var14 = 0; var14 < var13; ++var14) {
+         GenerationStep.Decoration var15 = var12[var14];
 
          try {
-            var7.generate(var14, this, var1, var9, var8, var6);
-         } catch (Exception var17) {
-            CrashReport var16 = CrashReport.forThrowable(var17, "Biome decoration");
-            var16.addCategory("Generation").setDetail("CenterX", (Object)var2).setDetail("CenterZ", (Object)var3).setDetail("Step", (Object)var14).setDetail("Seed", (Object)var9).setDetail("Biome", (Object)Registry.BIOME.getKey(var7));
-            throw new ReportedException(var16);
+            var8.generate(var15, var2, this, var1, var10, var9, var7);
+         } catch (Exception var18) {
+            CrashReport var17 = CrashReport.forThrowable(var18, "Biome decoration");
+            var17.addCategory("Generation").setDetail("CenterX", (Object)var3).setDetail("CenterZ", (Object)var4).setDetail("Step", (Object)var15).setDetail("Seed", (Object)var10).setDetail("Biome", (Object)Registry.BIOME.getKey(var8));
+            throw new ReportedException(var17);
          }
       }
 
    }
 
    public abstract void buildSurfaceAndBedrock(WorldGenRegion var1, ChunkAccess var2);
 
    public void spawnOriginalMobs(WorldGenRegion var1) {
    }
 
-   public C getSettings() {
+   public StructureSettings getSettings() {
       return this.settings;
    }
 
-   public abstract int getSpawnHeight();
-
-   public void tickCustomSpawners(ServerLevel var1, boolean var2, boolean var3) {
+   public int getSpawnHeight() {
+      return 64;
    }
 
-   public boolean isBiomeValidStartForStructure(Biome var1, StructureFeature<? extends FeatureConfiguration> var2) {
-      return var1.isValidStart(var2);
-   }
-
-   @Nullable
-   public <C extends FeatureConfiguration> C getStructureConfiguration(Biome var1, StructureFeature<C> var2) {
-      return var1.getStructureConfiguration(var2);
-   }
-
    public BiomeSource getBiomeSource() {
-      return this.biomeSource;
+      return this.runtimeBiomeSource;
    }
 
-   public long getSeed() {
-      return this.seed;
-   }
-
    public int getGenDepth() {
       return 256;
    }
 
-   public List<Biome.SpawnerData> getMobsAt(MobCategory var1, BlockPos var2) {
-      return this.level.getBiome(var2).getMobs(var1);
+   public List<Biome.SpawnerData> getMobsAt(Biome var1, StructureFeatureManager var2, MobCategory var3, BlockPos var4) {
+      return var1.getMobs(var3);
    }
 
-   public void createStructures(BiomeManager var1, ChunkAccess var2, ChunkGenerator<?> var3, StructureManager var4) {
-      Iterator var5 = Feature.STRUCTURES_REGISTRY.values().iterator();
+   public void createStructures(StructureFeatureManager var1, ChunkAccess var2, StructureManager var3, long var4) {
+      ChunkPos var6 = var2.getPos();
+      Biome var7 = this.biomeSource.getNoiseBiome((var6.x << 2) + 2, 0, (var6.z << 2) + 2);
+      this.createStructure(BiomeDefaultFeatures.STRONGHOLD, var1, var2, var3, var4, var6, var7);
+      Iterator var8 = var7.structures().iterator();
 
-      while(var5.hasNext()) {
-         StructureFeature var6 = (StructureFeature)var5.next();
-         if (var3.getBiomeSource().canGenerateStructure(var6)) {
-            StructureStart var7 = var2.getStartForFeature(var6.getFeatureName());
-            int var8 = var7 != null ? var7.getReferences() : 0;
-            WorldgenRandom var9 = new WorldgenRandom();
-            ChunkPos var10 = var2.getPos();
-            StructureStart var11 = StructureStart.INVALID_START;
-            Biome var12 = var1.getBiome(new BlockPos(var10.getMinBlockX() + 9, 0, var10.getMinBlockZ() + 9));
-            if (var6.isFeatureChunk(var1, var3, var9, var10.x, var10.z, var12)) {
-               StructureStart var13 = var6.getStartFactory().create(var6, var10.x, var10.z, BoundingBox.getUnknownBox(), var8, var3.getSeed());
-               var13.generatePieces(this, var4, var10.x, var10.z, var12);
-               var11 = var13.isValid() ? var13 : StructureStart.INVALID_START;
-            }
-
-            var2.setStartForFeature(var6.getFeatureName(), var11);
-         }
+      while(var8.hasNext()) {
+         ConfiguredStructureFeature var9 = (ConfiguredStructureFeature)var8.next();
+         this.createStructure(var9, var1, var2, var3, var4, var6, var7);
       }
 
    }
 
-   public void createReferences(LevelAccessor var1, ChunkAccess var2) {
-      boolean var3 = true;
-      int var4 = var2.getPos().x;
-      int var5 = var2.getPos().z;
-      int var6 = var4 << 4;
+   private void createStructure(ConfiguredStructureFeature<?, ?> var1, StructureFeatureManager var2, ChunkAccess var3, StructureManager var4, long var5, ChunkPos var7, Biome var8) {
+      StructureStart var9 = var2.getStartForFeature(SectionPos.of(var3.getPos(), 0), var1.feature, var3);
+      int var10 = var9 != null ? var9.getReferences() : 0;
+      StructureStart var11 = var1.generate(this, this.biomeSource, var4, var5, var7, var8, var10, this.settings.getConfig(var1.feature));
+      var2.setStartForFeature(SectionPos.of(var3.getPos(), 0), var1.feature, var11, var3);
+   }
+
+   public void createReferences(LevelAccessor var1, StructureFeatureManager var2, ChunkAccess var3) {
+      boolean var4 = true;
+      int var5 = var3.getPos().x;
+      int var6 = var3.getPos().z;
       int var7 = var5 << 4;
+      int var8 = var6 << 4;
+      SectionPos var9 = SectionPos.of(var3.getPos(), 0);
 
-      for(int var8 = var4 - 8; var8 <= var4 + 8; ++var8) {
-         for(int var9 = var5 - 8; var9 <= var5 + 8; ++var9) {
-            long var10 = ChunkPos.asLong(var8, var9);
-            Iterator var12 = var1.getChunk(var8, var9).getAllStarts().entrySet().iterator();
+      for(int var10 = var5 - 8; var10 <= var5 + 8; ++var10) {
+         for(int var11 = var6 - 8; var11 <= var6 + 8; ++var11) {
+            long var12 = ChunkPos.asLong(var10, var11);
+            Iterator var14 = var1.getChunk(var10, var11).getAllStarts().values().iterator();
 
-            while(var12.hasNext()) {
-               Entry var13 = (Entry)var12.next();
-               StructureStart var14 = (StructureStart)var13.getValue();
-               if (var14 != StructureStart.INVALID_START && var14.getBoundingBox().intersects(var6, var7, var6 + 15, var7 + 15)) {
-                  var2.addReferenceForFeature((String)var13.getKey(), var10);
-                  DebugPackets.sendStructurePacket(var1, var14);
+            while(var14.hasNext()) {
+               StructureStart var15 = (StructureStart)var14.next();
+
+               try {
+                  if (var15 != StructureStart.INVALID_START && var15.getBoundingBox().intersects(var7, var8, var7 + 15, var8 + 15)) {
+                     var2.addReferenceForFeature(var9, var15.getFeature(), var12, var3);
+                     DebugPackets.sendStructurePacket(var1, var15);
+                  }
+               } catch (Exception var19) {
+                  CrashReport var17 = CrashReport.forThrowable(var19, "Generating structure reference");
+                  CrashReportCategory var18 = var17.addCategory("Structure");
+                  var18.setDetail("Id", () -> {
+                     return Registry.STRUCTURE_FEATURE.getKey(var15.getFeature()).toString();
+                  });
+                  var18.setDetail("Name", () -> {
+                     return var15.getFeature().getFeatureName();
+                  });
+                  var18.setDetail("Class", () -> {
+                     return var15.getFeature().getClass().getCanonicalName();
+                  });
+                  throw new ReportedException(var17);
                }
             }
          }
       }
 
    }
 
-   public abstract void fillFromNoise(LevelAccessor var1, ChunkAccess var2);
+   public abstract void fillFromNoise(LevelAccessor var1, StructureFeatureManager var2, ChunkAccess var3);
 
    public int getSeaLevel() {
       return 63;
    }
 
    public abstract int getBaseHeight(int var1, int var2, Heightmap.Types var3);
 
+   public abstract BlockGetter getBaseColumn(int var1, int var2);
+
    public int getFirstFreeHeight(int var1, int var2, Heightmap.Types var3) {
       return this.getBaseHeight(var1, var2, var3);
    }
 
    public int getFirstOccupiedHeight(int var1, int var2, Heightmap.Types var3) {
       return this.getBaseHeight(var1, var2, var3) - 1;
    }
+
+   public boolean hasStronghold(ChunkPos var1) {
+      this.generateStrongholds();
+      return this.strongholdPositions.contains(var1);
+   }
+
+   static {
+      Registry.register(Registry.CHUNK_GENERATOR, (String)"noise", NoiseBasedChunkGenerator.CODEC);
+      Registry.register(Registry.CHUNK_GENERATOR, (String)"flat", FlatLevelSource.CODEC);
+      Registry.register(Registry.CHUNK_GENERATOR, (String)"debug", DebugLevelSource.CODEC);
+      CODEC = Registry.CHUNK_GENERATOR.dispatchStable(ChunkGenerator::codec, Function.identity());
+   }
 }
