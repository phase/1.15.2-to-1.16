--- net/minecraft/world/level/biome/BiomeDefaultFeatures.java
+++ net/minecraft/world/level/biome/BiomeDefaultFeatures.java
@@ -1,51 +1,70 @@
 package net.minecraft.world.level.biome;
 
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableSet;
 import com.google.common.collect.Lists;
+import java.util.OptionalInt;
+import net.minecraft.core.Vec3i;
+import net.minecraft.resources.ResourceLocation;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.HugeMushroomBlock;
 import net.minecraft.world.level.block.SweetBerryBushBlock;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.levelgen.GenerationStep;
 import net.minecraft.world.level.levelgen.Heightmap;
 import net.minecraft.world.level.levelgen.carver.WorldCarver;
+import net.minecraft.world.level.levelgen.feature.BastionPieces;
+import net.minecraft.world.level.levelgen.feature.ConfiguredStructureFeature;
 import net.minecraft.world.level.levelgen.feature.Feature;
+import net.minecraft.world.level.levelgen.feature.HugeFungusConfiguration;
 import net.minecraft.world.level.levelgen.feature.MineshaftFeature;
+import net.minecraft.world.level.levelgen.feature.RuinedPortalFeature;
+import net.minecraft.world.level.levelgen.feature.StructureFeature;
 import net.minecraft.world.level.levelgen.feature.blockplacers.ColumnPlacer;
 import net.minecraft.world.level.levelgen.feature.blockplacers.DoublePlantPlacer;
 import net.minecraft.world.level.levelgen.feature.blockplacers.SimpleBlockPlacer;
 import net.minecraft.world.level.levelgen.feature.configurations.BlockBlobConfiguration;
 import net.minecraft.world.level.levelgen.feature.configurations.BlockPileConfiguration;
 import net.minecraft.world.level.levelgen.feature.configurations.BlockStateConfiguration;
 import net.minecraft.world.level.levelgen.feature.configurations.BuriedTreasureConfiguration;
+import net.minecraft.world.level.levelgen.feature.configurations.ColumnFeatureConfiguration;
 import net.minecraft.world.level.levelgen.feature.configurations.CountRangeDecoratorConfiguration;
 import net.minecraft.world.level.levelgen.feature.configurations.DecoratorConfiguration;
+import net.minecraft.world.level.levelgen.feature.configurations.DeltaFeatureConfiguration;
 import net.minecraft.world.level.levelgen.feature.configurations.DiskConfiguration;
 import net.minecraft.world.level.levelgen.feature.configurations.FeatureConfiguration;
 import net.minecraft.world.level.levelgen.feature.configurations.HugeMushroomFeatureConfiguration;
-import net.minecraft.world.level.levelgen.feature.configurations.MegaTreeConfiguration;
+import net.minecraft.world.level.levelgen.feature.configurations.JigsawConfiguration;
 import net.minecraft.world.level.levelgen.feature.configurations.MineshaftConfiguration;
+import net.minecraft.world.level.levelgen.feature.configurations.MultiJigsawConfiguration;
 import net.minecraft.world.level.levelgen.feature.configurations.NoiseDependantDecoratorConfiguration;
+import net.minecraft.world.level.levelgen.feature.configurations.NoneFeatureConfiguration;
 import net.minecraft.world.level.levelgen.feature.configurations.OceanRuinConfiguration;
 import net.minecraft.world.level.levelgen.feature.configurations.OreConfiguration;
 import net.minecraft.world.level.levelgen.feature.configurations.ProbabilityFeatureConfiguration;
 import net.minecraft.world.level.levelgen.feature.configurations.RandomBooleanFeatureConfiguration;
 import net.minecraft.world.level.levelgen.feature.configurations.RandomFeatureConfiguration;
 import net.minecraft.world.level.levelgen.feature.configurations.RandomPatchConfiguration;
 import net.minecraft.world.level.levelgen.feature.configurations.RandomRandomFeatureConfiguration;
 import net.minecraft.world.level.levelgen.feature.configurations.ReplaceBlockConfiguration;
+import net.minecraft.world.level.levelgen.feature.configurations.ReplaceSpheroidConfiguration;
+import net.minecraft.world.level.levelgen.feature.configurations.RuinedPortalConfiguration;
 import net.minecraft.world.level.levelgen.feature.configurations.SeagrassFeatureConfiguration;
 import net.minecraft.world.level.levelgen.feature.configurations.ShipwreckConfiguration;
 import net.minecraft.world.level.levelgen.feature.configurations.SimpleBlockConfiguration;
-import net.minecraft.world.level.levelgen.feature.configurations.SmallTreeConfiguration;
 import net.minecraft.world.level.levelgen.feature.configurations.SpringConfiguration;
 import net.minecraft.world.level.levelgen.feature.configurations.TreeConfiguration;
-import net.minecraft.world.level.levelgen.feature.configurations.VillageConfiguration;
+import net.minecraft.world.level.levelgen.feature.featuresize.ThreeLayersFeatureSize;
+import net.minecraft.world.level.levelgen.feature.featuresize.TwoLayersFeatureSize;
 import net.minecraft.world.level.levelgen.feature.foliageplacers.AcaciaFoliagePlacer;
 import net.minecraft.world.level.levelgen.feature.foliageplacers.BlobFoliagePlacer;
+import net.minecraft.world.level.levelgen.feature.foliageplacers.BushFoliagePlacer;
+import net.minecraft.world.level.levelgen.feature.foliageplacers.DarkOakFoliagePlacer;
+import net.minecraft.world.level.levelgen.feature.foliageplacers.FancyFoliagePlacer;
+import net.minecraft.world.level.levelgen.feature.foliageplacers.MegaJungleFoliagePlacer;
+import net.minecraft.world.level.levelgen.feature.foliageplacers.MegaPineFoliagePlacer;
 import net.minecraft.world.level.levelgen.feature.foliageplacers.PineFoliagePlacer;
 import net.minecraft.world.level.levelgen.feature.foliageplacers.SpruceFoliagePlacer;
 import net.minecraft.world.level.levelgen.feature.stateproviders.ForestFlowerProvider;
 import net.minecraft.world.level.levelgen.feature.stateproviders.PlainFlowerProvider;
 import net.minecraft.world.level.levelgen.feature.stateproviders.RotatedBlockProvider;
@@ -54,19 +73,26 @@
 import net.minecraft.world.level.levelgen.feature.treedecorators.AlterGroundDecorator;
 import net.minecraft.world.level.levelgen.feature.treedecorators.BeehiveDecorator;
 import net.minecraft.world.level.levelgen.feature.treedecorators.CocoaDecorator;
 import net.minecraft.world.level.levelgen.feature.treedecorators.LeaveVineDecorator;
 import net.minecraft.world.level.levelgen.feature.treedecorators.TrunkVineDecorator;
+import net.minecraft.world.level.levelgen.feature.trunkplacers.DarkOakTrunkPlacer;
+import net.minecraft.world.level.levelgen.feature.trunkplacers.FancyTrunkPlacer;
+import net.minecraft.world.level.levelgen.feature.trunkplacers.ForkingTrunkPlacer;
+import net.minecraft.world.level.levelgen.feature.trunkplacers.GiantTrunkPlacer;
+import net.minecraft.world.level.levelgen.feature.trunkplacers.MegaJungleTrunkPlacer;
+import net.minecraft.world.level.levelgen.feature.trunkplacers.StraightTrunkPlacer;
 import net.minecraft.world.level.levelgen.placement.CarvingMaskDecoratorConfiguration;
 import net.minecraft.world.level.levelgen.placement.ChanceDecoratorConfiguration;
 import net.minecraft.world.level.levelgen.placement.DepthAverageConfigation;
 import net.minecraft.world.level.levelgen.placement.FeatureDecorator;
 import net.minecraft.world.level.levelgen.placement.FrequencyChanceDecoratorConfiguration;
 import net.minecraft.world.level.levelgen.placement.FrequencyDecoratorConfiguration;
 import net.minecraft.world.level.levelgen.placement.FrequencyWithExtraChanceDecoratorConfiguration;
 import net.minecraft.world.level.levelgen.placement.NoiseCountFactorDecoratorConfiguration;
 import net.minecraft.world.level.levelgen.structure.OceanRuinFeature;
+import net.minecraft.world.level.material.FluidState;
 import net.minecraft.world.level.material.Fluids;
 
 public class BiomeDefaultFeatures {
    private static final BlockState GRASS;
    private static final BlockState FERN;
@@ -120,44 +146,88 @@
    private static final BlockState DEAD_BUSH;
    private static final BlockState MELON;
    private static final BlockState PUMPKIN;
    private static final BlockState SWEET_BERRY_BUSH;
    private static final BlockState FIRE;
+   private static final BlockState SOUL_FIRE;
    private static final BlockState NETHERRACK;
+   private static final BlockState SOUL_SOIL;
+   private static final BlockState CRIMSON_ROOTS;
    private static final BlockState LILY_PAD;
    private static final BlockState SNOW;
    private static final BlockState JACK_O_LANTERN;
    private static final BlockState SUNFLOWER;
    private static final BlockState CACTUS;
    private static final BlockState SUGAR_CANE;
    private static final BlockState HUGE_RED_MUSHROOM;
    private static final BlockState HUGE_BROWN_MUSHROOM;
    private static final BlockState HUGE_MUSHROOM_STEM;
-   public static final SmallTreeConfiguration NORMAL_TREE_CONFIG;
-   public static final SmallTreeConfiguration JUNGLE_TREE_CONFIG;
-   public static final SmallTreeConfiguration JUNGLE_TREE_NOVINE_CONFIG;
-   public static final SmallTreeConfiguration PINE_TREE_CONFIG;
-   public static final SmallTreeConfiguration SPRUCE_TREE_CONFIG;
-   public static final SmallTreeConfiguration ACACIA_TREE_CONFIG;
-   public static final SmallTreeConfiguration BIRCH_TREE_CONFIG;
-   public static final SmallTreeConfiguration BIRCH_TREE_WITH_BEES_0002_CONFIG;
-   public static final SmallTreeConfiguration SUPER_BIRCH_TREE_WITH_BEES_0002_CONFIG;
-   public static final SmallTreeConfiguration SWAMP_TREE_CONFIG;
-   public static final SmallTreeConfiguration FANCY_TREE_CONFIG;
-   public static final SmallTreeConfiguration NORMAL_TREE_WITH_BEES_005_CONFIG;
-   public static final SmallTreeConfiguration FANCY_TREE_WITH_BEES_0002_CONFIG;
-   public static final SmallTreeConfiguration FANCY_TREE_WITH_BEES_005_CONFIG;
-   public static final SmallTreeConfiguration NORMAL_TREE_WITH_BEES_0002_CONFIG;
-   public static final SmallTreeConfiguration NORMAL_TREE_WITH_BEES_002_CONFIG;
-   public static final SmallTreeConfiguration FANCY_TREE_WITH_BEES_002_CONFIG;
-   public static final SmallTreeConfiguration BIRCH_TREE_WITH_BEES_002_CONFIG;
-   public static final SmallTreeConfiguration BIRCH_TREE_WITH_BEES_005_CONFIG;
+   private static final BlockState NETHER_GOLD_ORE;
+   private static final BlockState NETHER_QUARTZ_ORE;
+   private static final BlockState WARPED_STEM;
+   private static final BlockState WARPED_WART_BLOCK;
+   private static final BlockState NETHER_WART_BLOCK;
+   private static final BlockState CRIMSON_STEM;
+   private static final BlockState SHROOMLIGHT;
+   public static final ConfiguredStructureFeature<NoneFeatureConfiguration, ? extends StructureFeature<NoneFeatureConfiguration>> PILLAGER_OUTPOST;
+   public static final ConfiguredStructureFeature<MineshaftConfiguration, ? extends StructureFeature<MineshaftConfiguration>> MINESHAFT;
+   public static final ConfiguredStructureFeature<MineshaftConfiguration, ? extends StructureFeature<MineshaftConfiguration>> MINESHAFT_MESA;
+   public static final ConfiguredStructureFeature<NoneFeatureConfiguration, ? extends StructureFeature<NoneFeatureConfiguration>> WOODLAND_MANSION;
+   public static final ConfiguredStructureFeature<NoneFeatureConfiguration, ? extends StructureFeature<NoneFeatureConfiguration>> JUNGLE_TEMPLE;
+   public static final ConfiguredStructureFeature<NoneFeatureConfiguration, ? extends StructureFeature<NoneFeatureConfiguration>> DESERT_PYRAMID;
+   public static final ConfiguredStructureFeature<NoneFeatureConfiguration, ? extends StructureFeature<NoneFeatureConfiguration>> IGLOO;
+   public static final ConfiguredStructureFeature<ShipwreckConfiguration, ? extends StructureFeature<ShipwreckConfiguration>> SHIPWRECK;
+   public static final ConfiguredStructureFeature<ShipwreckConfiguration, ? extends StructureFeature<ShipwreckConfiguration>> SHIPWRECH_BEACHED;
+   public static final ConfiguredStructureFeature<NoneFeatureConfiguration, ? extends StructureFeature<NoneFeatureConfiguration>> SWAMP_HUT;
+   public static final ConfiguredStructureFeature<NoneFeatureConfiguration, ? extends StructureFeature<NoneFeatureConfiguration>> STRONGHOLD;
+   public static final ConfiguredStructureFeature<NoneFeatureConfiguration, ? extends StructureFeature<NoneFeatureConfiguration>> OCEAN_MONUMENT;
+   public static final ConfiguredStructureFeature<OceanRuinConfiguration, ? extends StructureFeature<OceanRuinConfiguration>> OCEAN_RUIN_COLD;
+   public static final ConfiguredStructureFeature<OceanRuinConfiguration, ? extends StructureFeature<OceanRuinConfiguration>> OCEAN_RUIN_WARM;
+   public static final ConfiguredStructureFeature<NoneFeatureConfiguration, ? extends StructureFeature<NoneFeatureConfiguration>> NETHER_BRIDGE;
+   public static final ConfiguredStructureFeature<NoneFeatureConfiguration, ? extends StructureFeature<NoneFeatureConfiguration>> NETHER_FOSSIL;
+   public static final ConfiguredStructureFeature<NoneFeatureConfiguration, ? extends StructureFeature<NoneFeatureConfiguration>> END_CITY;
+   public static final ConfiguredStructureFeature<BuriedTreasureConfiguration, ? extends StructureFeature<BuriedTreasureConfiguration>> BURIED_TREASURE;
+   public static final ConfiguredStructureFeature<MultiJigsawConfiguration, ? extends StructureFeature<MultiJigsawConfiguration>> BASTION_REMNANT;
+   public static final ConfiguredStructureFeature<JigsawConfiguration, ? extends StructureFeature<JigsawConfiguration>> VILLAGE_PLAINS;
+   public static final ConfiguredStructureFeature<JigsawConfiguration, ? extends StructureFeature<JigsawConfiguration>> VILLAGE_DESERT;
+   public static final ConfiguredStructureFeature<JigsawConfiguration, ? extends StructureFeature<JigsawConfiguration>> VILLAGE_SAVANNA;
+   public static final ConfiguredStructureFeature<JigsawConfiguration, ? extends StructureFeature<JigsawConfiguration>> VILLAGE_SNOVY;
+   public static final ConfiguredStructureFeature<JigsawConfiguration, ? extends StructureFeature<JigsawConfiguration>> VILLAGE_TAIGA;
+   public static final ConfiguredStructureFeature<RuinedPortalConfiguration, ? extends StructureFeature<RuinedPortalConfiguration>> RUINED_PORTAL_STANDARD;
+   public static final ConfiguredStructureFeature<RuinedPortalConfiguration, ? extends StructureFeature<RuinedPortalConfiguration>> RUINED_PORTAL_DESERT;
+   public static final ConfiguredStructureFeature<RuinedPortalConfiguration, ? extends StructureFeature<RuinedPortalConfiguration>> RUINED_PORTAL_JUNGLE;
+   public static final ConfiguredStructureFeature<RuinedPortalConfiguration, ? extends StructureFeature<RuinedPortalConfiguration>> RUINED_PORTAL_SWAMP;
+   public static final ConfiguredStructureFeature<RuinedPortalConfiguration, ? extends StructureFeature<RuinedPortalConfiguration>> RUINED_PORTAL_MOUNTAIN;
+   public static final ConfiguredStructureFeature<RuinedPortalConfiguration, ? extends StructureFeature<RuinedPortalConfiguration>> RUINED_PORTAL_OCEAN;
+   public static final ConfiguredStructureFeature<RuinedPortalConfiguration, ? extends StructureFeature<RuinedPortalConfiguration>> RUINED_PORTAL_NETHER;
+   public static final TreeConfiguration NORMAL_TREE_CONFIG;
+   private static final BeehiveDecorator BEEHIVE_0002;
+   private static final BeehiveDecorator BEEHIVE_002;
+   private static final BeehiveDecorator BEEHIVE_005;
+   public static final TreeConfiguration NORMAL_TREE_WITH_BEES_0002_CONFIG;
+   public static final TreeConfiguration NORMAL_TREE_WITH_BEES_002_CONFIG;
+   public static final TreeConfiguration NORMAL_TREE_WITH_BEES_005_CONFIG;
+   public static final TreeConfiguration JUNGLE_TREE_CONFIG;
+   public static final TreeConfiguration JUNGLE_TREE_NOVINE_CONFIG;
+   public static final TreeConfiguration PINE_TREE_CONFIG;
+   public static final TreeConfiguration SPRUCE_TREE_CONFIG;
+   public static final TreeConfiguration ACACIA_TREE_CONFIG;
+   public static final TreeConfiguration BIRCH_TREE_CONFIG;
+   public static final TreeConfiguration BIRCH_TREE_WITH_BEES_0002_CONFIG;
+   public static final TreeConfiguration BIRCH_TREE_WITH_BEES_002_CONFIG;
+   public static final TreeConfiguration BIRCH_TREE_WITH_BEES_005_CONFIG;
+   public static final TreeConfiguration SUPER_BIRCH_TREE_WITH_BEES_0002_CONFIG;
+   public static final TreeConfiguration SWAMP_TREE_CONFIG;
+   public static final TreeConfiguration FANCY_TREE_CONFIG;
+   public static final TreeConfiguration FANCY_TREE_WITH_BEES_0002_CONFIG;
+   public static final TreeConfiguration FANCY_TREE_WITH_BEES_002_CONFIG;
+   public static final TreeConfiguration FANCY_TREE_WITH_BEES_005_CONFIG;
    public static final TreeConfiguration JUNGLE_BUSH_CONFIG;
-   public static final MegaTreeConfiguration DARK_OAK_TREE_CONFIG;
-   public static final MegaTreeConfiguration MEGA_SPRUCE_TREE_CONFIG;
-   public static final MegaTreeConfiguration MEGA_PINE_TREE_CONFIG;
-   public static final MegaTreeConfiguration MEGA_JUNGLE_TREE_CONFIG;
+   public static final TreeConfiguration DARK_OAK_TREE_CONFIG;
+   public static final TreeConfiguration MEGA_SPRUCE_TREE_CONFIG;
+   public static final TreeConfiguration MEGA_PINE_TREE_CONFIG;
+   public static final TreeConfiguration MEGA_JUNGLE_TREE_CONFIG;
    public static final RandomPatchConfiguration DEFAULT_GRASS_CONFIG;
    public static final RandomPatchConfiguration TAIGA_GRASS_CONFIG;
    public static final RandomPatchConfiguration JUNGLE_GRASS_CONFIG;
    public static final RandomPatchConfiguration GENERAL_FOREST_FLOWER_CONFIG;
    public static final RandomPatchConfiguration SwAMP_FLOWER_CONFIG;
@@ -166,14 +236,16 @@
    public static final RandomPatchConfiguration FOREST_FLOWER_CONFIG;
    public static final RandomPatchConfiguration DEAD_BUSH_CONFIG;
    public static final RandomPatchConfiguration MELON_CONFIG;
    public static final RandomPatchConfiguration PUMPKIN_CONFIG;
    public static final RandomPatchConfiguration SWEET_BERRY_BUSH_CONFIG;
-   public static final RandomPatchConfiguration HELL_FIRE_CONFIG;
+   public static final RandomPatchConfiguration FIRE_CONFIG;
+   public static final RandomPatchConfiguration SOUL_FIRE_CONFIG;
    public static final RandomPatchConfiguration WATERLILLY_CONFIG;
    public static final RandomPatchConfiguration RED_MUSHROOM_CONFIG;
    public static final RandomPatchConfiguration BROWN_MUSHROOM_CONFIG;
+   public static final RandomPatchConfiguration CRIMSON_ROOTS_CONFIG;
    public static final RandomPatchConfiguration DOUBLE_LILAC_CONFIG;
    public static final RandomPatchConfiguration DOUBLE_ROSE_BUSH_CONFIG;
    public static final RandomPatchConfiguration DOUBLE_PEONY_CONFIG;
    public static final RandomPatchConfiguration SUNFLOWER_CONFIG;
    public static final RandomPatchConfiguration TALL_GRASS_CONFIG;
@@ -183,17 +255,45 @@
    public static final BlockPileConfiguration HAY_PILE_CONFIG;
    public static final BlockPileConfiguration SNOW_PILE_CONFIG;
    public static final BlockPileConfiguration MELON_PILE_CONFIG;
    public static final BlockPileConfiguration PUMPKIN_PILE_CONFIG;
    public static final BlockPileConfiguration ICE_PILE_CONFIG;
+   public static final FluidState WATER_STATE;
+   public static final FluidState LAVA_STATE;
    public static final SpringConfiguration WATER_SPRING_CONFIG;
    public static final SpringConfiguration LAVA_SPRING_CONFIG;
    public static final SpringConfiguration OPEN_NETHER_SPRING_CONFIG;
+   public static final SpringConfiguration BASALT_DELTA_SPRING_CONFIG;
    public static final SpringConfiguration CLOSED_NETHER_SPRING_CONFIG;
+   public static final SpringConfiguration OPEN_NETHER_SPRING_SOUL_SAND_CONFIG;
+   public static final SpringConfiguration CLOSED_NETHER_SPRING_SOUL_SAND_CONFIG;
+   public static final ColumnFeatureConfiguration SMALL_BASALT_COLUMN_FEATURE_CONFIG;
+   public static final ColumnFeatureConfiguration LARGE_BASALT_COLUMN_FEATURE_CONFIG;
+   public static final ReplaceSpheroidConfiguration BASALT_BLOBS_FEATURE_CONFIG;
+   public static final ReplaceSpheroidConfiguration BLACKSTONE_BLOBS_FEATURE_CONFIG;
+   public static final DeltaFeatureConfiguration BASALT_DELTA_FEATURE_CONFIG;
    public static final HugeMushroomFeatureConfiguration HUGE_RED_MUSHROOM_CONFIG;
    public static final HugeMushroomFeatureConfiguration HUGE_BROWN_MUSHROOM_CONFIG;
+   public static final BlockPileConfiguration CRIMSON_FOREST_CONFIG;
+   public static final BlockPileConfiguration WARPED_FOREST_CONFIG;
+   public static final BlockPileConfiguration NETHER_SPROUTS_CONFIG;
 
+   public static void addDefaultOverworldLandMesaStructures(Biome var0) {
+      var0.addStructureStart(MINESHAFT_MESA);
+      var0.addStructureStart(STRONGHOLD);
+   }
+
+   public static void addDefaultOverworldLandStructures(Biome var0) {
+      var0.addStructureStart(MINESHAFT);
+      var0.addStructureStart(STRONGHOLD);
+   }
+
+   public static void addDefaultOverworldOceanStructures(Biome var0) {
+      var0.addStructureStart(MINESHAFT);
+      var0.addStructureStart(SHIPWRECK);
+   }
+
    public static void addDefaultCarvers(Biome var0) {
       var0.addCarver(GenerationStep.Carving.AIR, Biome.makeCarver(WorldCarver.CAVE, new ProbabilityFeatureConfiguration(0.14285715F)));
       var0.addCarver(GenerationStep.Carving.AIR, Biome.makeCarver(WorldCarver.CANYON, new ProbabilityFeatureConfiguration(0.02F)));
    }
 
@@ -202,33 +302,17 @@
       var0.addCarver(GenerationStep.Carving.AIR, Biome.makeCarver(WorldCarver.CANYON, new ProbabilityFeatureConfiguration(0.02F)));
       var0.addCarver(GenerationStep.Carving.LIQUID, Biome.makeCarver(WorldCarver.UNDERWATER_CANYON, new ProbabilityFeatureConfiguration(0.02F)));
       var0.addCarver(GenerationStep.Carving.LIQUID, Biome.makeCarver(WorldCarver.UNDERWATER_CAVE, new ProbabilityFeatureConfiguration(0.06666667F)));
    }
 
-   public static void addStructureFeaturePlacement(Biome var0) {
-      var0.addFeature(GenerationStep.Decoration.UNDERGROUND_STRUCTURES, Feature.MINESHAFT.configured(new MineshaftConfiguration(0.004000000189989805D, MineshaftFeature.Type.NORMAL)).decorated(FeatureDecorator.NOPE.configured(DecoratorConfiguration.NONE)));
-      var0.addFeature(GenerationStep.Decoration.SURFACE_STRUCTURES, Feature.PILLAGER_OUTPOST.configured(FeatureConfiguration.NONE).decorated(FeatureDecorator.NOPE.configured(DecoratorConfiguration.NONE)));
-      var0.addFeature(GenerationStep.Decoration.UNDERGROUND_STRUCTURES, Feature.STRONGHOLD.configured(FeatureConfiguration.NONE).decorated(FeatureDecorator.NOPE.configured(DecoratorConfiguration.NONE)));
-      var0.addFeature(GenerationStep.Decoration.SURFACE_STRUCTURES, Feature.SWAMP_HUT.configured(FeatureConfiguration.NONE).decorated(FeatureDecorator.NOPE.configured(DecoratorConfiguration.NONE)));
-      var0.addFeature(GenerationStep.Decoration.SURFACE_STRUCTURES, Feature.DESERT_PYRAMID.configured(FeatureConfiguration.NONE).decorated(FeatureDecorator.NOPE.configured(DecoratorConfiguration.NONE)));
-      var0.addFeature(GenerationStep.Decoration.SURFACE_STRUCTURES, Feature.JUNGLE_TEMPLE.configured(FeatureConfiguration.NONE).decorated(FeatureDecorator.NOPE.configured(DecoratorConfiguration.NONE)));
-      var0.addFeature(GenerationStep.Decoration.SURFACE_STRUCTURES, Feature.IGLOO.configured(FeatureConfiguration.NONE).decorated(FeatureDecorator.NOPE.configured(DecoratorConfiguration.NONE)));
-      var0.addFeature(GenerationStep.Decoration.SURFACE_STRUCTURES, Feature.SHIPWRECK.configured(new ShipwreckConfiguration(false)).decorated(FeatureDecorator.NOPE.configured(DecoratorConfiguration.NONE)));
-      var0.addFeature(GenerationStep.Decoration.SURFACE_STRUCTURES, Feature.OCEAN_MONUMENT.configured(FeatureConfiguration.NONE).decorated(FeatureDecorator.NOPE.configured(DecoratorConfiguration.NONE)));
-      var0.addFeature(GenerationStep.Decoration.SURFACE_STRUCTURES, Feature.WOODLAND_MANSION.configured(FeatureConfiguration.NONE).decorated(FeatureDecorator.NOPE.configured(DecoratorConfiguration.NONE)));
-      var0.addFeature(GenerationStep.Decoration.SURFACE_STRUCTURES, Feature.OCEAN_RUIN.configured(new OceanRuinConfiguration(OceanRuinFeature.Type.COLD, 0.3F, 0.9F)).decorated(FeatureDecorator.NOPE.configured(DecoratorConfiguration.NONE)));
-      var0.addFeature(GenerationStep.Decoration.UNDERGROUND_STRUCTURES, Feature.BURIED_TREASURE.configured(new BuriedTreasureConfiguration(0.01F)).decorated(FeatureDecorator.NOPE.configured(DecoratorConfiguration.NONE)));
-      var0.addFeature(GenerationStep.Decoration.SURFACE_STRUCTURES, Feature.VILLAGE.configured(new VillageConfiguration("village/plains/town_centers", 6)).decorated(FeatureDecorator.NOPE.configured(DecoratorConfiguration.NONE)));
-   }
-
    public static void addDefaultLakes(Biome var0) {
-      var0.addFeature(GenerationStep.Decoration.LOCAL_MODIFICATIONS, Feature.LAKE.configured(new BlockStateConfiguration(WATER)).decorated(FeatureDecorator.WATER_LAKE.configured(new ChanceDecoratorConfiguration(4))));
-      var0.addFeature(GenerationStep.Decoration.LOCAL_MODIFICATIONS, Feature.LAKE.configured(new BlockStateConfiguration(LAVA)).decorated(FeatureDecorator.LAVA_LAKE.configured(new ChanceDecoratorConfiguration(80))));
+      var0.addFeature(GenerationStep.Decoration.LAKES, Feature.LAKE.configured(new BlockStateConfiguration(WATER)).decorated(FeatureDecorator.WATER_LAKE.configured(new ChanceDecoratorConfiguration(4))));
+      var0.addFeature(GenerationStep.Decoration.LAKES, Feature.LAKE.configured(new BlockStateConfiguration(LAVA)).decorated(FeatureDecorator.LAVA_LAKE.configured(new ChanceDecoratorConfiguration(80))));
    }
 
    public static void addDesertLakes(Biome var0) {
-      var0.addFeature(GenerationStep.Decoration.LOCAL_MODIFICATIONS, Feature.LAKE.configured(new BlockStateConfiguration(LAVA)).decorated(FeatureDecorator.LAVA_LAKE.configured(new ChanceDecoratorConfiguration(80))));
+      var0.addFeature(GenerationStep.Decoration.LAKES, Feature.LAKE.configured(new BlockStateConfiguration(LAVA)).decorated(FeatureDecorator.LAVA_LAKE.configured(new ChanceDecoratorConfiguration(80))));
    }
 
    public static void addDefaultMonsterRoom(Biome var0) {
       var0.addFeature(GenerationStep.Decoration.UNDERGROUND_STRUCTURES, Feature.MONSTER_ROOM.configured(FeatureConfiguration.NONE).decorated(FeatureDecorator.DUNGEONS.configured(new ChanceDecoratorConfiguration(8))));
    }
@@ -292,71 +376,71 @@
       var0.addFeature(GenerationStep.Decoration.VEGETAL_DECORATION, Feature.BAMBOO.configured(new ProbabilityFeatureConfiguration(0.0F)).decorated(FeatureDecorator.COUNT_HEIGHTMAP_DOUBLE.configured(new FrequencyDecoratorConfiguration(16))));
    }
 
    public static void addBambooVegetation(Biome var0) {
       var0.addFeature(GenerationStep.Decoration.VEGETAL_DECORATION, Feature.BAMBOO.configured(new ProbabilityFeatureConfiguration(0.2F)).decorated(FeatureDecorator.TOP_SOLID_HEIGHTMAP_NOISE_BIASED.configured(new NoiseCountFactorDecoratorConfiguration(160, 80.0D, 0.3D, Heightmap.Types.WORLD_SURFACE_WG))));
-      var0.addFeature(GenerationStep.Decoration.VEGETAL_DECORATION, Feature.RANDOM_SELECTOR.configured(new RandomFeatureConfiguration(ImmutableList.of(Feature.FANCY_TREE.configured(FANCY_TREE_CONFIG).weighted(0.05F), Feature.JUNGLE_GROUND_BUSH.configured(JUNGLE_BUSH_CONFIG).weighted(0.15F), Feature.MEGA_JUNGLE_TREE.configured(MEGA_JUNGLE_TREE_CONFIG).weighted(0.7F)), Feature.RANDOM_PATCH.configured(JUNGLE_GRASS_CONFIG))).decorated(FeatureDecorator.COUNT_EXTRA_HEIGHTMAP.configured(new FrequencyWithExtraChanceDecoratorConfiguration(30, 0.1F, 1))));
+      var0.addFeature(GenerationStep.Decoration.VEGETAL_DECORATION, Feature.RANDOM_SELECTOR.configured(new RandomFeatureConfiguration(ImmutableList.of(Feature.TREE.configured(FANCY_TREE_CONFIG).weighted(0.05F), Feature.TREE.configured(JUNGLE_BUSH_CONFIG).weighted(0.15F), Feature.TREE.configured(MEGA_JUNGLE_TREE_CONFIG).weighted(0.7F)), Feature.RANDOM_PATCH.configured(JUNGLE_GRASS_CONFIG))).decorated(FeatureDecorator.COUNT_EXTRA_HEIGHTMAP.configured(new FrequencyWithExtraChanceDecoratorConfiguration(30, 0.1F, 1))));
    }
 
    public static void addTaigaTrees(Biome var0) {
-      var0.addFeature(GenerationStep.Decoration.VEGETAL_DECORATION, Feature.RANDOM_SELECTOR.configured(new RandomFeatureConfiguration(ImmutableList.of(Feature.NORMAL_TREE.configured(PINE_TREE_CONFIG).weighted(0.33333334F)), Feature.NORMAL_TREE.configured(SPRUCE_TREE_CONFIG))).decorated(FeatureDecorator.COUNT_EXTRA_HEIGHTMAP.configured(new FrequencyWithExtraChanceDecoratorConfiguration(10, 0.1F, 1))));
+      var0.addFeature(GenerationStep.Decoration.VEGETAL_DECORATION, Feature.RANDOM_SELECTOR.configured(new RandomFeatureConfiguration(ImmutableList.of(Feature.TREE.configured(PINE_TREE_CONFIG).weighted(0.33333334F)), Feature.TREE.configured(SPRUCE_TREE_CONFIG))).decorated(FeatureDecorator.COUNT_EXTRA_HEIGHTMAP.configured(new FrequencyWithExtraChanceDecoratorConfiguration(10, 0.1F, 1))));
    }
 
    public static void addWaterTrees(Biome var0) {
-      var0.addFeature(GenerationStep.Decoration.VEGETAL_DECORATION, Feature.RANDOM_SELECTOR.configured(new RandomFeatureConfiguration(ImmutableList.of(Feature.FANCY_TREE.configured(FANCY_TREE_CONFIG).weighted(0.1F)), Feature.NORMAL_TREE.configured(NORMAL_TREE_CONFIG))).decorated(FeatureDecorator.COUNT_EXTRA_HEIGHTMAP.configured(new FrequencyWithExtraChanceDecoratorConfiguration(0, 0.1F, 1))));
+      var0.addFeature(GenerationStep.Decoration.VEGETAL_DECORATION, Feature.RANDOM_SELECTOR.configured(new RandomFeatureConfiguration(ImmutableList.of(Feature.TREE.configured(FANCY_TREE_CONFIG).weighted(0.1F)), Feature.TREE.configured(NORMAL_TREE_CONFIG))).decorated(FeatureDecorator.COUNT_EXTRA_HEIGHTMAP.configured(new FrequencyWithExtraChanceDecoratorConfiguration(0, 0.1F, 1))));
    }
 
    public static void addBirchTrees(Biome var0) {
-      var0.addFeature(GenerationStep.Decoration.VEGETAL_DECORATION, Feature.NORMAL_TREE.configured(BIRCH_TREE_WITH_BEES_0002_CONFIG).decorated(FeatureDecorator.COUNT_EXTRA_HEIGHTMAP.configured(new FrequencyWithExtraChanceDecoratorConfiguration(10, 0.1F, 1))));
+      var0.addFeature(GenerationStep.Decoration.VEGETAL_DECORATION, Feature.TREE.configured(BIRCH_TREE_WITH_BEES_0002_CONFIG).decorated(FeatureDecorator.COUNT_EXTRA_HEIGHTMAP.configured(new FrequencyWithExtraChanceDecoratorConfiguration(10, 0.1F, 1))));
    }
 
    public static void addOtherBirchTrees(Biome var0) {
-      var0.addFeature(GenerationStep.Decoration.VEGETAL_DECORATION, Feature.RANDOM_SELECTOR.configured(new RandomFeatureConfiguration(ImmutableList.of(Feature.NORMAL_TREE.configured(BIRCH_TREE_WITH_BEES_0002_CONFIG).weighted(0.2F), Feature.FANCY_TREE.configured(FANCY_TREE_WITH_BEES_0002_CONFIG).weighted(0.1F)), Feature.NORMAL_TREE.configured(NORMAL_TREE_WITH_BEES_0002_CONFIG))).decorated(FeatureDecorator.COUNT_EXTRA_HEIGHTMAP.configured(new FrequencyWithExtraChanceDecoratorConfiguration(10, 0.1F, 1))));
+      var0.addFeature(GenerationStep.Decoration.VEGETAL_DECORATION, Feature.RANDOM_SELECTOR.configured(new RandomFeatureConfiguration(ImmutableList.of(Feature.TREE.configured(BIRCH_TREE_WITH_BEES_0002_CONFIG).weighted(0.2F), Feature.TREE.configured(FANCY_TREE_WITH_BEES_0002_CONFIG).weighted(0.1F)), Feature.TREE.configured(NORMAL_TREE_WITH_BEES_0002_CONFIG))).decorated(FeatureDecorator.COUNT_EXTRA_HEIGHTMAP.configured(new FrequencyWithExtraChanceDecoratorConfiguration(10, 0.1F, 1))));
    }
 
    public static void addTallBirchTrees(Biome var0) {
-      var0.addFeature(GenerationStep.Decoration.VEGETAL_DECORATION, Feature.RANDOM_SELECTOR.configured(new RandomFeatureConfiguration(ImmutableList.of(Feature.NORMAL_TREE.configured(SUPER_BIRCH_TREE_WITH_BEES_0002_CONFIG).weighted(0.5F)), Feature.NORMAL_TREE.configured(BIRCH_TREE_WITH_BEES_0002_CONFIG))).decorated(FeatureDecorator.COUNT_EXTRA_HEIGHTMAP.configured(new FrequencyWithExtraChanceDecoratorConfiguration(10, 0.1F, 1))));
+      var0.addFeature(GenerationStep.Decoration.VEGETAL_DECORATION, Feature.RANDOM_SELECTOR.configured(new RandomFeatureConfiguration(ImmutableList.of(Feature.TREE.configured(SUPER_BIRCH_TREE_WITH_BEES_0002_CONFIG).weighted(0.5F)), Feature.TREE.configured(BIRCH_TREE_WITH_BEES_0002_CONFIG))).decorated(FeatureDecorator.COUNT_EXTRA_HEIGHTMAP.configured(new FrequencyWithExtraChanceDecoratorConfiguration(10, 0.1F, 1))));
    }
 
    public static void addSavannaTrees(Biome var0) {
-      var0.addFeature(GenerationStep.Decoration.VEGETAL_DECORATION, Feature.RANDOM_SELECTOR.configured(new RandomFeatureConfiguration(ImmutableList.of(Feature.ACACIA_TREE.configured(ACACIA_TREE_CONFIG).weighted(0.8F)), Feature.NORMAL_TREE.configured(NORMAL_TREE_CONFIG))).decorated(FeatureDecorator.COUNT_EXTRA_HEIGHTMAP.configured(new FrequencyWithExtraChanceDecoratorConfiguration(1, 0.1F, 1))));
+      var0.addFeature(GenerationStep.Decoration.VEGETAL_DECORATION, Feature.RANDOM_SELECTOR.configured(new RandomFeatureConfiguration(ImmutableList.of(Feature.TREE.configured(ACACIA_TREE_CONFIG).weighted(0.8F)), Feature.TREE.configured(NORMAL_TREE_CONFIG))).decorated(FeatureDecorator.COUNT_EXTRA_HEIGHTMAP.configured(new FrequencyWithExtraChanceDecoratorConfiguration(1, 0.1F, 1))));
    }
 
    public static void addShatteredSavannaTrees(Biome var0) {
-      var0.addFeature(GenerationStep.Decoration.VEGETAL_DECORATION, Feature.RANDOM_SELECTOR.configured(new RandomFeatureConfiguration(ImmutableList.of(Feature.ACACIA_TREE.configured(ACACIA_TREE_CONFIG).weighted(0.8F)), Feature.NORMAL_TREE.configured(NORMAL_TREE_CONFIG))).decorated(FeatureDecorator.COUNT_EXTRA_HEIGHTMAP.configured(new FrequencyWithExtraChanceDecoratorConfiguration(2, 0.1F, 1))));
+      var0.addFeature(GenerationStep.Decoration.VEGETAL_DECORATION, Feature.RANDOM_SELECTOR.configured(new RandomFeatureConfiguration(ImmutableList.of(Feature.TREE.configured(ACACIA_TREE_CONFIG).weighted(0.8F)), Feature.TREE.configured(NORMAL_TREE_CONFIG))).decorated(FeatureDecorator.COUNT_EXTRA_HEIGHTMAP.configured(new FrequencyWithExtraChanceDecoratorConfiguration(2, 0.1F, 1))));
    }
 
    public static void addMountainTrees(Biome var0) {
-      var0.addFeature(GenerationStep.Decoration.VEGETAL_DECORATION, Feature.RANDOM_SELECTOR.configured(new RandomFeatureConfiguration(ImmutableList.of(Feature.NORMAL_TREE.configured(SPRUCE_TREE_CONFIG).weighted(0.666F), Feature.FANCY_TREE.configured(FANCY_TREE_CONFIG).weighted(0.1F)), Feature.NORMAL_TREE.configured(NORMAL_TREE_CONFIG))).decorated(FeatureDecorator.COUNT_EXTRA_HEIGHTMAP.configured(new FrequencyWithExtraChanceDecoratorConfiguration(0, 0.1F, 1))));
+      var0.addFeature(GenerationStep.Decoration.VEGETAL_DECORATION, Feature.RANDOM_SELECTOR.configured(new RandomFeatureConfiguration(ImmutableList.of(Feature.TREE.configured(SPRUCE_TREE_CONFIG).weighted(0.666F), Feature.TREE.configured(FANCY_TREE_CONFIG).weighted(0.1F)), Feature.TREE.configured(NORMAL_TREE_CONFIG))).decorated(FeatureDecorator.COUNT_EXTRA_HEIGHTMAP.configured(new FrequencyWithExtraChanceDecoratorConfiguration(0, 0.1F, 1))));
    }
 
    public static void addMountainEdgeTrees(Biome var0) {
-      var0.addFeature(GenerationStep.Decoration.VEGETAL_DECORATION, Feature.RANDOM_SELECTOR.configured(new RandomFeatureConfiguration(ImmutableList.of(Feature.NORMAL_TREE.configured(SPRUCE_TREE_CONFIG).weighted(0.666F), Feature.FANCY_TREE.configured(FANCY_TREE_CONFIG).weighted(0.1F)), Feature.NORMAL_TREE.configured(NORMAL_TREE_CONFIG))).decorated(FeatureDecorator.COUNT_EXTRA_HEIGHTMAP.configured(new FrequencyWithExtraChanceDecoratorConfiguration(3, 0.1F, 1))));
+      var0.addFeature(GenerationStep.Decoration.VEGETAL_DECORATION, Feature.RANDOM_SELECTOR.configured(new RandomFeatureConfiguration(ImmutableList.of(Feature.TREE.configured(SPRUCE_TREE_CONFIG).weighted(0.666F), Feature.TREE.configured(FANCY_TREE_CONFIG).weighted(0.1F)), Feature.TREE.configured(NORMAL_TREE_CONFIG))).decorated(FeatureDecorator.COUNT_EXTRA_HEIGHTMAP.configured(new FrequencyWithExtraChanceDecoratorConfiguration(3, 0.1F, 1))));
    }
 
    public static void addJungleTrees(Biome var0) {
-      var0.addFeature(GenerationStep.Decoration.VEGETAL_DECORATION, Feature.RANDOM_SELECTOR.configured(new RandomFeatureConfiguration(ImmutableList.of(Feature.FANCY_TREE.configured(FANCY_TREE_CONFIG).weighted(0.1F), Feature.JUNGLE_GROUND_BUSH.configured(JUNGLE_BUSH_CONFIG).weighted(0.5F), Feature.MEGA_JUNGLE_TREE.configured(MEGA_JUNGLE_TREE_CONFIG).weighted(0.33333334F)), Feature.NORMAL_TREE.configured(JUNGLE_TREE_CONFIG))).decorated(FeatureDecorator.COUNT_EXTRA_HEIGHTMAP.configured(new FrequencyWithExtraChanceDecoratorConfiguration(50, 0.1F, 1))));
+      var0.addFeature(GenerationStep.Decoration.VEGETAL_DECORATION, Feature.RANDOM_SELECTOR.configured(new RandomFeatureConfiguration(ImmutableList.of(Feature.TREE.configured(FANCY_TREE_CONFIG).weighted(0.1F), Feature.TREE.configured(JUNGLE_BUSH_CONFIG).weighted(0.5F), Feature.TREE.configured(MEGA_JUNGLE_TREE_CONFIG).weighted(0.33333334F)), Feature.TREE.configured(JUNGLE_TREE_CONFIG))).decorated(FeatureDecorator.COUNT_EXTRA_HEIGHTMAP.configured(new FrequencyWithExtraChanceDecoratorConfiguration(50, 0.1F, 1))));
    }
 
    public static void addJungleEdgeTrees(Biome var0) {
-      var0.addFeature(GenerationStep.Decoration.VEGETAL_DECORATION, Feature.RANDOM_SELECTOR.configured(new RandomFeatureConfiguration(ImmutableList.of(Feature.FANCY_TREE.configured(FANCY_TREE_CONFIG).weighted(0.1F), Feature.JUNGLE_GROUND_BUSH.configured(JUNGLE_BUSH_CONFIG).weighted(0.5F)), Feature.NORMAL_TREE.configured(JUNGLE_TREE_CONFIG))).decorated(FeatureDecorator.COUNT_EXTRA_HEIGHTMAP.configured(new FrequencyWithExtraChanceDecoratorConfiguration(2, 0.1F, 1))));
+      var0.addFeature(GenerationStep.Decoration.VEGETAL_DECORATION, Feature.RANDOM_SELECTOR.configured(new RandomFeatureConfiguration(ImmutableList.of(Feature.TREE.configured(FANCY_TREE_CONFIG).weighted(0.1F), Feature.TREE.configured(JUNGLE_BUSH_CONFIG).weighted(0.5F)), Feature.TREE.configured(JUNGLE_TREE_CONFIG))).decorated(FeatureDecorator.COUNT_EXTRA_HEIGHTMAP.configured(new FrequencyWithExtraChanceDecoratorConfiguration(2, 0.1F, 1))));
    }
 
    public static void addBadlandsTrees(Biome var0) {
-      var0.addFeature(GenerationStep.Decoration.VEGETAL_DECORATION, Feature.NORMAL_TREE.configured(NORMAL_TREE_CONFIG).decorated(FeatureDecorator.COUNT_EXTRA_HEIGHTMAP.configured(new FrequencyWithExtraChanceDecoratorConfiguration(5, 0.1F, 1))));
+      var0.addFeature(GenerationStep.Decoration.VEGETAL_DECORATION, Feature.TREE.configured(NORMAL_TREE_CONFIG).decorated(FeatureDecorator.COUNT_EXTRA_HEIGHTMAP.configured(new FrequencyWithExtraChanceDecoratorConfiguration(5, 0.1F, 1))));
    }
 
    public static void addSnowyTrees(Biome var0) {
-      var0.addFeature(GenerationStep.Decoration.VEGETAL_DECORATION, Feature.NORMAL_TREE.configured(SPRUCE_TREE_CONFIG).decorated(FeatureDecorator.COUNT_EXTRA_HEIGHTMAP.configured(new FrequencyWithExtraChanceDecoratorConfiguration(0, 0.1F, 1))));
+      var0.addFeature(GenerationStep.Decoration.VEGETAL_DECORATION, Feature.TREE.configured(SPRUCE_TREE_CONFIG).decorated(FeatureDecorator.COUNT_EXTRA_HEIGHTMAP.configured(new FrequencyWithExtraChanceDecoratorConfiguration(0, 0.1F, 1))));
    }
 
    public static void addGiantSpruceTrees(Biome var0) {
-      var0.addFeature(GenerationStep.Decoration.VEGETAL_DECORATION, Feature.RANDOM_SELECTOR.configured(new RandomFeatureConfiguration(ImmutableList.of(Feature.MEGA_SPRUCE_TREE.configured(MEGA_SPRUCE_TREE_CONFIG).weighted(0.33333334F), Feature.NORMAL_TREE.configured(PINE_TREE_CONFIG).weighted(0.33333334F)), Feature.NORMAL_TREE.configured(SPRUCE_TREE_CONFIG))).decorated(FeatureDecorator.COUNT_EXTRA_HEIGHTMAP.configured(new FrequencyWithExtraChanceDecoratorConfiguration(10, 0.1F, 1))));
+      var0.addFeature(GenerationStep.Decoration.VEGETAL_DECORATION, Feature.RANDOM_SELECTOR.configured(new RandomFeatureConfiguration(ImmutableList.of(Feature.TREE.configured(MEGA_SPRUCE_TREE_CONFIG).weighted(0.33333334F), Feature.TREE.configured(PINE_TREE_CONFIG).weighted(0.33333334F)), Feature.TREE.configured(SPRUCE_TREE_CONFIG))).decorated(FeatureDecorator.COUNT_EXTRA_HEIGHTMAP.configured(new FrequencyWithExtraChanceDecoratorConfiguration(10, 0.1F, 1))));
    }
 
    public static void addGiantTrees(Biome var0) {
-      var0.addFeature(GenerationStep.Decoration.VEGETAL_DECORATION, Feature.RANDOM_SELECTOR.configured(new RandomFeatureConfiguration(ImmutableList.of(Feature.MEGA_SPRUCE_TREE.configured(MEGA_SPRUCE_TREE_CONFIG).weighted(0.025641026F), Feature.MEGA_SPRUCE_TREE.configured(MEGA_PINE_TREE_CONFIG).weighted(0.30769232F), Feature.NORMAL_TREE.configured(PINE_TREE_CONFIG).weighted(0.33333334F)), Feature.NORMAL_TREE.configured(SPRUCE_TREE_CONFIG))).decorated(FeatureDecorator.COUNT_EXTRA_HEIGHTMAP.configured(new FrequencyWithExtraChanceDecoratorConfiguration(10, 0.1F, 1))));
+      var0.addFeature(GenerationStep.Decoration.VEGETAL_DECORATION, Feature.RANDOM_SELECTOR.configured(new RandomFeatureConfiguration(ImmutableList.of(Feature.TREE.configured(MEGA_SPRUCE_TREE_CONFIG).weighted(0.025641026F), Feature.TREE.configured(MEGA_PINE_TREE_CONFIG).weighted(0.30769232F), Feature.TREE.configured(PINE_TREE_CONFIG).weighted(0.33333334F)), Feature.TREE.configured(SPRUCE_TREE_CONFIG))).decorated(FeatureDecorator.COUNT_EXTRA_HEIGHTMAP.configured(new FrequencyWithExtraChanceDecoratorConfiguration(10, 0.1F, 1))));
    }
 
    public static void addJungleGrass(Biome var0) {
       var0.addFeature(GenerationStep.Decoration.VEGETAL_DECORATION, Feature.RANDOM_PATCH.configured(JUNGLE_GRASS_CONFIG).decorated(FeatureDecorator.COUNT_HEIGHTMAP_DOUBLE.configured(new FrequencyDecoratorConfiguration(25))));
    }
@@ -385,11 +469,11 @@
    public static void addForestGrass(Biome var0) {
       var0.addFeature(GenerationStep.Decoration.VEGETAL_DECORATION, Feature.RANDOM_PATCH.configured(DEFAULT_GRASS_CONFIG).decorated(FeatureDecorator.COUNT_HEIGHTMAP_DOUBLE.configured(new FrequencyDecoratorConfiguration(2))));
    }
 
    public static void addSwampVegetation(Biome var0) {
-      var0.addFeature(GenerationStep.Decoration.VEGETAL_DECORATION, Feature.NORMAL_TREE.configured(SWAMP_TREE_CONFIG).decorated(FeatureDecorator.COUNT_EXTRA_HEIGHTMAP.configured(new FrequencyWithExtraChanceDecoratorConfiguration(2, 0.1F, 1))));
+      var0.addFeature(GenerationStep.Decoration.VEGETAL_DECORATION, Feature.TREE.configured(SWAMP_TREE_CONFIG).decorated(FeatureDecorator.COUNT_EXTRA_HEIGHTMAP.configured(new FrequencyWithExtraChanceDecoratorConfiguration(2, 0.1F, 1))));
       var0.addFeature(GenerationStep.Decoration.VEGETAL_DECORATION, Feature.FLOWER.configured(SwAMP_FLOWER_CONFIG).decorated(FeatureDecorator.COUNT_HEIGHTMAP_32.configured(new FrequencyDecoratorConfiguration(1))));
       var0.addFeature(GenerationStep.Decoration.VEGETAL_DECORATION, Feature.RANDOM_PATCH.configured(DEFAULT_GRASS_CONFIG).decorated(FeatureDecorator.COUNT_HEIGHTMAP_DOUBLE.configured(new FrequencyDecoratorConfiguration(5))));
       var0.addFeature(GenerationStep.Decoration.VEGETAL_DECORATION, Feature.RANDOM_PATCH.configured(DEAD_BUSH_CONFIG).decorated(FeatureDecorator.COUNT_HEIGHTMAP_DOUBLE.configured(new FrequencyDecoratorConfiguration(1))));
       var0.addFeature(GenerationStep.Decoration.VEGETAL_DECORATION, Feature.RANDOM_PATCH.configured(WATERLILLY_CONFIG).decorated(FeatureDecorator.COUNT_HEIGHTMAP_DOUBLE.configured(new FrequencyDecoratorConfiguration(4))));
       var0.addFeature(GenerationStep.Decoration.VEGETAL_DECORATION, Feature.RANDOM_PATCH.configured(BROWN_MUSHROOM_CONFIG).decorated(FeatureDecorator.COUNT_CHANCE_HEIGHTMAP.configured(new FrequencyChanceDecoratorConfiguration(8, 0.25F))));
@@ -401,11 +485,11 @@
       var0.addFeature(GenerationStep.Decoration.VEGETAL_DECORATION, Feature.RANDOM_PATCH.configured(BROWN_MUSHROOM_CONFIG).decorated(FeatureDecorator.COUNT_CHANCE_HEIGHTMAP.configured(new FrequencyChanceDecoratorConfiguration(1, 0.25F))));
       var0.addFeature(GenerationStep.Decoration.VEGETAL_DECORATION, Feature.RANDOM_PATCH.configured(RED_MUSHROOM_CONFIG).decorated(FeatureDecorator.COUNT_CHANCE_HEIGHTMAP_DOUBLE.configured(new FrequencyChanceDecoratorConfiguration(1, 0.125F))));
    }
 
    public static void addPlainVegetation(Biome var0) {
-      var0.addFeature(GenerationStep.Decoration.VEGETAL_DECORATION, Feature.RANDOM_SELECTOR.configured(new RandomFeatureConfiguration(ImmutableList.of(Feature.FANCY_TREE.configured(FANCY_TREE_WITH_BEES_005_CONFIG).weighted(0.33333334F)), Feature.NORMAL_TREE.configured(NORMAL_TREE_WITH_BEES_005_CONFIG))).decorated(FeatureDecorator.COUNT_EXTRA_HEIGHTMAP.configured(new FrequencyWithExtraChanceDecoratorConfiguration(0, 0.05F, 1))));
+      var0.addFeature(GenerationStep.Decoration.VEGETAL_DECORATION, Feature.RANDOM_SELECTOR.configured(new RandomFeatureConfiguration(ImmutableList.of(Feature.TREE.configured(FANCY_TREE_WITH_BEES_005_CONFIG).weighted(0.33333334F)), Feature.TREE.configured(NORMAL_TREE_WITH_BEES_005_CONFIG))).decorated(FeatureDecorator.COUNT_EXTRA_HEIGHTMAP.configured(new FrequencyWithExtraChanceDecoratorConfiguration(0, 0.05F, 1))));
       var0.addFeature(GenerationStep.Decoration.VEGETAL_DECORATION, Feature.FLOWER.configured(PLAIN_FLOWER_CONFIG).decorated(FeatureDecorator.NOISE_HEIGHTMAP_32.configured(new NoiseDependantDecoratorConfiguration(-0.8D, 15, 4))));
       var0.addFeature(GenerationStep.Decoration.VEGETAL_DECORATION, Feature.RANDOM_PATCH.configured(DEFAULT_GRASS_CONFIG).decorated(FeatureDecorator.NOISE_HEIGHTMAP_DOUBLE.configured(new NoiseDependantDecoratorConfiguration(-0.8D, 5, 10))));
    }
 
    public static void addDesertVegetation(Biome var0) {
@@ -473,23 +557,22 @@
       var0.addFeature(GenerationStep.Decoration.VEGETAL_DECORATION, Feature.RANDOM_PATCH.configured(PUMPKIN_CONFIG).decorated(FeatureDecorator.CHANCE_HEIGHTMAP_DOUBLE.configured(new ChanceDecoratorConfiguration(32))));
    }
 
    public static void addDesertExtraDecoration(Biome var0) {
       var0.addFeature(GenerationStep.Decoration.SURFACE_STRUCTURES, Feature.DESERT_WELL.configured(FeatureConfiguration.NONE).decorated(FeatureDecorator.CHANCE_HEIGHTMAP.configured(new ChanceDecoratorConfiguration(1000))));
-      var0.addFeature(GenerationStep.Decoration.UNDERGROUND_DECORATION, Feature.FOSSIL.configured(FeatureConfiguration.NONE).decorated(FeatureDecorator.CHANCE_PASSTHROUGH.configured(new ChanceDecoratorConfiguration(64))));
    }
 
-   public static void addSwampExtraDecoration(Biome var0) {
-      var0.addFeature(GenerationStep.Decoration.UNDERGROUND_DECORATION, Feature.FOSSIL.configured(FeatureConfiguration.NONE).decorated(FeatureDecorator.CHANCE_PASSTHROUGH.configured(new ChanceDecoratorConfiguration(64))));
+   public static void addFossilDecoration(Biome var0) {
+      var0.addFeature(GenerationStep.Decoration.UNDERGROUND_STRUCTURES, Feature.FOSSIL.configured(FeatureConfiguration.NONE).decorated(FeatureDecorator.CHANCE_PASSTHROUGH.configured(new ChanceDecoratorConfiguration(64))));
    }
 
    public static void addColdOceanExtraVegetation(Biome var0) {
       var0.addFeature(GenerationStep.Decoration.VEGETAL_DECORATION, Feature.KELP.configured(FeatureConfiguration.NONE).decorated(FeatureDecorator.TOP_SOLID_HEIGHTMAP_NOISE_BIASED.configured(new NoiseCountFactorDecoratorConfiguration(120, 80.0D, 0.0D, Heightmap.Types.OCEAN_FLOOR_WG))));
    }
 
    public static void addDefaultSeagrass(Biome var0) {
-      var0.addFeature(GenerationStep.Decoration.VEGETAL_DECORATION, Feature.SIMPLE_BLOCK.configured(new SimpleBlockConfiguration(SEAGRASS, new BlockState[]{STONE}, new BlockState[]{WATER}, new BlockState[]{WATER})).decorated(FeatureDecorator.CARVING_MASK.configured(new CarvingMaskDecoratorConfiguration(GenerationStep.Carving.LIQUID, 0.1F))));
+      var0.addFeature(GenerationStep.Decoration.VEGETAL_DECORATION, Feature.SIMPLE_BLOCK.configured(new SimpleBlockConfiguration(SEAGRASS, ImmutableList.of(STONE), ImmutableList.of(WATER), ImmutableList.of(WATER))).decorated(FeatureDecorator.CARVING_MASK.configured(new CarvingMaskDecoratorConfiguration(GenerationStep.Carving.LIQUID, 0.1F))));
    }
 
    public static void addWarmSeagrass(Biome var0) {
       var0.addFeature(GenerationStep.Decoration.VEGETAL_DECORATION, Feature.SEAGRASS.configured(new SeagrassFeatureConfiguration(80, 0.3D)).decorated(FeatureDecorator.TOP_SOLID_HEIGHTMAP.configured(DecoratorConfiguration.NONE)));
    }
@@ -515,17 +598,42 @@
    public static void addBlueIce(Biome var0) {
       var0.addFeature(GenerationStep.Decoration.SURFACE_STRUCTURES, Feature.BLUE_ICE.configured(FeatureConfiguration.NONE).decorated(FeatureDecorator.RANDOM_COUNT_RANGE.configured(new CountRangeDecoratorConfiguration(20, 30, 32, 64))));
    }
 
    public static void addSurfaceFreezing(Biome var0) {
-      var0.addFeature(GenerationStep.Decoration.TOP_LAYER_MODIFICATION, Feature.FREEZE_TOP_LAYER.configured(FeatureConfiguration.NONE).decorated(FeatureDecorator.NOPE.configured(DecoratorConfiguration.NONE)));
+      var0.addFeature(GenerationStep.Decoration.TOP_LAYER_MODIFICATION, Feature.FREEZE_TOP_LAYER.configured(FeatureConfiguration.NONE));
    }
 
-   public static void addEndCity(Biome var0) {
-      var0.addFeature(GenerationStep.Decoration.SURFACE_STRUCTURES, Feature.END_CITY.configured(FeatureConfiguration.NONE).decorated(FeatureDecorator.NOPE.configured(DecoratorConfiguration.NONE)));
+   public static void addNetherDefaultOres(Biome var0) {
+      var0.addFeature(GenerationStep.Decoration.UNDERGROUND_DECORATION, Feature.ORE.configured(new OreConfiguration(OreConfiguration.Predicates.NETHERRACK, Blocks.GRAVEL.defaultBlockState(), 33)).decorated(FeatureDecorator.COUNT_RANGE.configured(new CountRangeDecoratorConfiguration(2, 5, 0, 37))));
+      var0.addFeature(GenerationStep.Decoration.UNDERGROUND_DECORATION, Feature.ORE.configured(new OreConfiguration(OreConfiguration.Predicates.NETHERRACK, Blocks.BLACKSTONE.defaultBlockState(), 33)).decorated(FeatureDecorator.COUNT_RANGE.configured(new CountRangeDecoratorConfiguration(2, 5, 10, 37))));
+      addNetherOres(var0, 10, 16);
+      addAncientDebris(var0);
    }
 
+   public static void addNetherOres(Biome var0, int var1, int var2) {
+      var0.addFeature(GenerationStep.Decoration.UNDERGROUND_DECORATION, Feature.ORE.configured(new OreConfiguration(OreConfiguration.Predicates.NETHERRACK, NETHER_GOLD_ORE, 10)).decorated(FeatureDecorator.COUNT_RANGE.configured(new CountRangeDecoratorConfiguration(var1, 10, 20, 128))));
+      var0.addFeature(GenerationStep.Decoration.UNDERGROUND_DECORATION, Feature.ORE.configured(new OreConfiguration(OreConfiguration.Predicates.NETHERRACK, NETHER_QUARTZ_ORE, 14)).decorated(FeatureDecorator.COUNT_RANGE.configured(new CountRangeDecoratorConfiguration(var2, 10, 20, 128))));
+   }
+
+   public static void addAncientDebris(Biome var0) {
+      var0.addFeature(GenerationStep.Decoration.UNDERGROUND_DECORATION, Feature.NO_SURFACE_ORE.configured(new OreConfiguration(OreConfiguration.Predicates.NETHER_ORE_REPLACEABLES, Blocks.ANCIENT_DEBRIS.defaultBlockState(), 3)).decorated(FeatureDecorator.COUNT_DEPTH_AVERAGE.configured(new DepthAverageConfigation(1, 16, 8))));
+      var0.addFeature(GenerationStep.Decoration.UNDERGROUND_DECORATION, Feature.NO_SURFACE_ORE.configured(new OreConfiguration(OreConfiguration.Predicates.NETHER_ORE_REPLACEABLES, Blocks.ANCIENT_DEBRIS.defaultBlockState(), 2)).decorated(FeatureDecorator.COUNT_RANGE.configured(new CountRangeDecoratorConfiguration(1, 8, 16, 128))));
+   }
+
+   public static void addCrimsonForestVegetation(Biome var0) {
+      var0.addFeature(GenerationStep.Decoration.VEGETAL_DECORATION, Feature.HUGE_FUNGUS.configured(HugeFungusConfiguration.HUGE_CRIMSON_FUNGI_NOT_PLANTED_CONFIG).decorated(FeatureDecorator.COUNT_HEIGHTMAP.configured(new FrequencyDecoratorConfiguration(8))));
+      var0.addFeature(GenerationStep.Decoration.VEGETAL_DECORATION, Feature.NETHER_FOREST_VEGETATION.configured(CRIMSON_FOREST_CONFIG).decorated(FeatureDecorator.COUNT_HEIGHTMAP.configured(new FrequencyDecoratorConfiguration(6))));
+   }
+
+   public static void addWarpedForestVegetation(Biome var0) {
+      var0.addFeature(GenerationStep.Decoration.VEGETAL_DECORATION, Feature.HUGE_FUNGUS.configured(HugeFungusConfiguration.HUGE_WARPED_FUNGI_NOT_PLANTED_CONFIG).decorated(FeatureDecorator.COUNT_HEIGHTMAP.configured(new FrequencyDecoratorConfiguration(8))));
+      var0.addFeature(GenerationStep.Decoration.VEGETAL_DECORATION, Feature.NETHER_FOREST_VEGETATION.configured(WARPED_FOREST_CONFIG).decorated(FeatureDecorator.COUNT_HEIGHTMAP.configured(new FrequencyDecoratorConfiguration(5))));
+      var0.addFeature(GenerationStep.Decoration.VEGETAL_DECORATION, Feature.NETHER_FOREST_VEGETATION.configured(NETHER_SPROUTS_CONFIG).decorated(FeatureDecorator.COUNT_HEIGHTMAP.configured(new FrequencyDecoratorConfiguration(4))));
+      var0.addFeature(GenerationStep.Decoration.VEGETAL_DECORATION, Feature.TWISTING_VINES.configured(FeatureConfiguration.NONE).decorated(FeatureDecorator.COUNT_RANGE.configured(new CountRangeDecoratorConfiguration(10, 0, 0, 128))));
+   }
+
    static {
       GRASS = Blocks.GRASS.defaultBlockState();
       FERN = Blocks.FERN.defaultBlockState();
       PODZOL = Blocks.PODZOL.defaultBlockState();
       OAK_LOG = Blocks.OAK_LOG.defaultBlockState();
@@ -577,60 +685,106 @@
       DEAD_BUSH = Blocks.DEAD_BUSH.defaultBlockState();
       MELON = Blocks.MELON.defaultBlockState();
       PUMPKIN = Blocks.PUMPKIN.defaultBlockState();
       SWEET_BERRY_BUSH = (BlockState)Blocks.SWEET_BERRY_BUSH.defaultBlockState().setValue(SweetBerryBushBlock.AGE, 3);
       FIRE = Blocks.FIRE.defaultBlockState();
+      SOUL_FIRE = Blocks.SOUL_FIRE.defaultBlockState();
       NETHERRACK = Blocks.NETHERRACK.defaultBlockState();
+      SOUL_SOIL = Blocks.SOUL_SOIL.defaultBlockState();
+      CRIMSON_ROOTS = Blocks.CRIMSON_ROOTS.defaultBlockState();
       LILY_PAD = Blocks.LILY_PAD.defaultBlockState();
       SNOW = Blocks.SNOW.defaultBlockState();
       JACK_O_LANTERN = Blocks.JACK_O_LANTERN.defaultBlockState();
       SUNFLOWER = Blocks.SUNFLOWER.defaultBlockState();
       CACTUS = Blocks.CACTUS.defaultBlockState();
       SUGAR_CANE = Blocks.SUGAR_CANE.defaultBlockState();
       HUGE_RED_MUSHROOM = (BlockState)Blocks.RED_MUSHROOM_BLOCK.defaultBlockState().setValue(HugeMushroomBlock.DOWN, false);
       HUGE_BROWN_MUSHROOM = (BlockState)((BlockState)Blocks.BROWN_MUSHROOM_BLOCK.defaultBlockState().setValue(HugeMushroomBlock.UP, true)).setValue(HugeMushroomBlock.DOWN, false);
       HUGE_MUSHROOM_STEM = (BlockState)((BlockState)Blocks.MUSHROOM_STEM.defaultBlockState().setValue(HugeMushroomBlock.UP, false)).setValue(HugeMushroomBlock.DOWN, false);
-      NORMAL_TREE_CONFIG = (new SmallTreeConfiguration.SmallTreeConfigurationBuilder(new SimpleStateProvider(OAK_LOG), new SimpleStateProvider(OAK_LEAVES), new BlobFoliagePlacer(2, 0))).baseHeight(4).heightRandA(2).foliageHeight(3).ignoreVines().build();
-      JUNGLE_TREE_CONFIG = (new SmallTreeConfiguration.SmallTreeConfigurationBuilder(new SimpleStateProvider(JUNGLE_LOG), new SimpleStateProvider(JUNGLE_LEAVES), new BlobFoliagePlacer(2, 0))).baseHeight(4).heightRandA(8).foliageHeight(3).decorators(ImmutableList.of(new CocoaDecorator(0.2F), new TrunkVineDecorator(), new LeaveVineDecorator())).ignoreVines().build();
-      JUNGLE_TREE_NOVINE_CONFIG = (new SmallTreeConfiguration.SmallTreeConfigurationBuilder(new SimpleStateProvider(JUNGLE_LOG), new SimpleStateProvider(JUNGLE_LEAVES), new BlobFoliagePlacer(2, 0))).baseHeight(4).heightRandA(8).foliageHeight(3).ignoreVines().build();
-      PINE_TREE_CONFIG = (new SmallTreeConfiguration.SmallTreeConfigurationBuilder(new SimpleStateProvider(SPRUCE_LOG), new SimpleStateProvider(SPRUCE_LEAVES), new PineFoliagePlacer(1, 0))).baseHeight(7).heightRandA(4).trunkTopOffset(1).foliageHeight(3).foliageHeightRandom(1).ignoreVines().build();
-      SPRUCE_TREE_CONFIG = (new SmallTreeConfiguration.SmallTreeConfigurationBuilder(new SimpleStateProvider(SPRUCE_LOG), new SimpleStateProvider(SPRUCE_LEAVES), new SpruceFoliagePlacer(2, 1))).baseHeight(6).heightRandA(3).trunkHeight(1).trunkHeightRandom(1).trunkTopOffsetRandom(2).ignoreVines().build();
-      ACACIA_TREE_CONFIG = (new SmallTreeConfiguration.SmallTreeConfigurationBuilder(new SimpleStateProvider(ACACIA_LOG), new SimpleStateProvider(ACACIA_LEAVES), new AcaciaFoliagePlacer(2, 0))).baseHeight(5).heightRandA(2).heightRandB(2).trunkHeight(0).ignoreVines().build();
-      BIRCH_TREE_CONFIG = (new SmallTreeConfiguration.SmallTreeConfigurationBuilder(new SimpleStateProvider(BIRCH_LOG), new SimpleStateProvider(BIRCH_LEAVES), new BlobFoliagePlacer(2, 0))).baseHeight(5).heightRandA(2).foliageHeight(3).ignoreVines().build();
-      BIRCH_TREE_WITH_BEES_0002_CONFIG = (new SmallTreeConfiguration.SmallTreeConfigurationBuilder(new SimpleStateProvider(BIRCH_LOG), new SimpleStateProvider(BIRCH_LEAVES), new BlobFoliagePlacer(2, 0))).baseHeight(5).heightRandA(2).foliageHeight(3).ignoreVines().decorators(ImmutableList.of(new BeehiveDecorator(0.002F))).build();
-      SUPER_BIRCH_TREE_WITH_BEES_0002_CONFIG = (new SmallTreeConfiguration.SmallTreeConfigurationBuilder(new SimpleStateProvider(BIRCH_LOG), new SimpleStateProvider(BIRCH_LEAVES), new BlobFoliagePlacer(2, 0))).baseHeight(5).heightRandA(2).heightRandB(6).foliageHeight(3).ignoreVines().decorators(ImmutableList.of(new BeehiveDecorator(0.002F))).build();
-      SWAMP_TREE_CONFIG = (new SmallTreeConfiguration.SmallTreeConfigurationBuilder(new SimpleStateProvider(OAK_LOG), new SimpleStateProvider(OAK_LEAVES), new BlobFoliagePlacer(3, 0))).baseHeight(5).heightRandA(3).foliageHeight(3).maxWaterDepth(1).decorators(ImmutableList.of(new LeaveVineDecorator())).build();
-      FANCY_TREE_CONFIG = (new SmallTreeConfiguration.SmallTreeConfigurationBuilder(new SimpleStateProvider(OAK_LOG), new SimpleStateProvider(OAK_LEAVES), new BlobFoliagePlacer(0, 0))).build();
-      NORMAL_TREE_WITH_BEES_005_CONFIG = (new SmallTreeConfiguration.SmallTreeConfigurationBuilder(new SimpleStateProvider(OAK_LOG), new SimpleStateProvider(OAK_LEAVES), new BlobFoliagePlacer(2, 0))).baseHeight(4).heightRandA(2).foliageHeight(3).ignoreVines().decorators(ImmutableList.of(new BeehiveDecorator(0.05F))).build();
-      FANCY_TREE_WITH_BEES_0002_CONFIG = (new SmallTreeConfiguration.SmallTreeConfigurationBuilder(new SimpleStateProvider(OAK_LOG), new SimpleStateProvider(OAK_LEAVES), new BlobFoliagePlacer(0, 0))).decorators(ImmutableList.of(new BeehiveDecorator(0.002F))).build();
-      FANCY_TREE_WITH_BEES_005_CONFIG = (new SmallTreeConfiguration.SmallTreeConfigurationBuilder(new SimpleStateProvider(OAK_LOG), new SimpleStateProvider(OAK_LEAVES), new BlobFoliagePlacer(0, 0))).decorators(ImmutableList.of(new BeehiveDecorator(0.05F))).build();
-      NORMAL_TREE_WITH_BEES_0002_CONFIG = (new SmallTreeConfiguration.SmallTreeConfigurationBuilder(new SimpleStateProvider(OAK_LOG), new SimpleStateProvider(OAK_LEAVES), new BlobFoliagePlacer(2, 0))).baseHeight(4).heightRandA(2).foliageHeight(3).ignoreVines().decorators(ImmutableList.of(new BeehiveDecorator(0.002F))).build();
-      NORMAL_TREE_WITH_BEES_002_CONFIG = (new SmallTreeConfiguration.SmallTreeConfigurationBuilder(new SimpleStateProvider(OAK_LOG), new SimpleStateProvider(OAK_LEAVES), new BlobFoliagePlacer(2, 0))).baseHeight(4).heightRandA(2).foliageHeight(3).ignoreVines().decorators(ImmutableList.of(new BeehiveDecorator(0.02F))).build();
-      FANCY_TREE_WITH_BEES_002_CONFIG = (new SmallTreeConfiguration.SmallTreeConfigurationBuilder(new SimpleStateProvider(OAK_LOG), new SimpleStateProvider(OAK_LEAVES), new BlobFoliagePlacer(0, 0))).decorators(ImmutableList.of(new BeehiveDecorator(0.02F))).build();
-      BIRCH_TREE_WITH_BEES_002_CONFIG = (new SmallTreeConfiguration.SmallTreeConfigurationBuilder(new SimpleStateProvider(BIRCH_LOG), new SimpleStateProvider(BIRCH_LEAVES), new BlobFoliagePlacer(2, 0))).baseHeight(5).heightRandA(2).foliageHeight(3).ignoreVines().decorators(ImmutableList.of(new BeehiveDecorator(0.02F))).build();
-      BIRCH_TREE_WITH_BEES_005_CONFIG = (new SmallTreeConfiguration.SmallTreeConfigurationBuilder(new SimpleStateProvider(BIRCH_LOG), new SimpleStateProvider(BIRCH_LEAVES), new BlobFoliagePlacer(2, 0))).baseHeight(5).heightRandA(2).foliageHeight(3).ignoreVines().decorators(ImmutableList.of(new BeehiveDecorator(0.05F))).build();
-      JUNGLE_BUSH_CONFIG = (new TreeConfiguration.TreeConfigurationBuilder(new SimpleStateProvider(JUNGLE_LOG), new SimpleStateProvider(OAK_LEAVES))).baseHeight(4).build();
-      DARK_OAK_TREE_CONFIG = (new MegaTreeConfiguration.MegaTreeConfigurationBuilder(new SimpleStateProvider(DARK_OAK_LOG), new SimpleStateProvider(DARK_OAK_LEAVES))).baseHeight(6).build();
-      MEGA_SPRUCE_TREE_CONFIG = (new MegaTreeConfiguration.MegaTreeConfigurationBuilder(new SimpleStateProvider(SPRUCE_LOG), new SimpleStateProvider(SPRUCE_LEAVES))).baseHeight(13).heightInterval(15).crownHeight(13).decorators(ImmutableList.of(new AlterGroundDecorator(new SimpleStateProvider(PODZOL)))).build();
-      MEGA_PINE_TREE_CONFIG = (new MegaTreeConfiguration.MegaTreeConfigurationBuilder(new SimpleStateProvider(SPRUCE_LOG), new SimpleStateProvider(SPRUCE_LEAVES))).baseHeight(13).heightInterval(15).crownHeight(3).decorators(ImmutableList.of(new AlterGroundDecorator(new SimpleStateProvider(PODZOL)))).build();
-      MEGA_JUNGLE_TREE_CONFIG = (new MegaTreeConfiguration.MegaTreeConfigurationBuilder(new SimpleStateProvider(JUNGLE_LOG), new SimpleStateProvider(JUNGLE_LEAVES))).baseHeight(10).heightInterval(20).decorators(ImmutableList.of(new TrunkVineDecorator(), new LeaveVineDecorator())).build();
-      DEFAULT_GRASS_CONFIG = (new RandomPatchConfiguration.GrassConfigurationBuilder(new SimpleStateProvider(GRASS), new SimpleBlockPlacer())).tries(32).build();
-      TAIGA_GRASS_CONFIG = (new RandomPatchConfiguration.GrassConfigurationBuilder((new WeightedStateProvider()).add(GRASS, 1).add(FERN, 4), new SimpleBlockPlacer())).tries(32).build();
-      JUNGLE_GRASS_CONFIG = (new RandomPatchConfiguration.GrassConfigurationBuilder((new WeightedStateProvider()).add(GRASS, 3).add(FERN, 1), new SimpleBlockPlacer())).blacklist(ImmutableSet.of(PODZOL)).tries(32).build();
-      GENERAL_FOREST_FLOWER_CONFIG = (new RandomPatchConfiguration.GrassConfigurationBuilder(new SimpleStateProvider(LILY_OF_THE_VALLEY), new SimpleBlockPlacer())).tries(64).build();
-      SwAMP_FLOWER_CONFIG = (new RandomPatchConfiguration.GrassConfigurationBuilder(new SimpleStateProvider(BLUE_ORCHID), new SimpleBlockPlacer())).tries(64).build();
-      DEFAULT_FLOWER_CONFIG = (new RandomPatchConfiguration.GrassConfigurationBuilder((new WeightedStateProvider()).add(POPPY, 2).add(DANDELION, 1), new SimpleBlockPlacer())).tries(64).build();
-      PLAIN_FLOWER_CONFIG = (new RandomPatchConfiguration.GrassConfigurationBuilder(new PlainFlowerProvider(), new SimpleBlockPlacer())).tries(64).build();
-      FOREST_FLOWER_CONFIG = (new RandomPatchConfiguration.GrassConfigurationBuilder(new ForestFlowerProvider(), new SimpleBlockPlacer())).tries(64).build();
-      DEAD_BUSH_CONFIG = (new RandomPatchConfiguration.GrassConfigurationBuilder(new SimpleStateProvider(DEAD_BUSH), new SimpleBlockPlacer())).tries(4).build();
-      MELON_CONFIG = (new RandomPatchConfiguration.GrassConfigurationBuilder(new SimpleStateProvider(MELON), new SimpleBlockPlacer())).tries(64).whitelist(ImmutableSet.of(GRASS_BLOCK.getBlock())).canReplace().noProjection().build();
-      PUMPKIN_CONFIG = (new RandomPatchConfiguration.GrassConfigurationBuilder(new SimpleStateProvider(PUMPKIN), new SimpleBlockPlacer())).tries(64).whitelist(ImmutableSet.of(GRASS_BLOCK.getBlock())).noProjection().build();
-      SWEET_BERRY_BUSH_CONFIG = (new RandomPatchConfiguration.GrassConfigurationBuilder(new SimpleStateProvider(SWEET_BERRY_BUSH), new SimpleBlockPlacer())).tries(64).whitelist(ImmutableSet.of(GRASS_BLOCK.getBlock())).noProjection().build();
-      HELL_FIRE_CONFIG = (new RandomPatchConfiguration.GrassConfigurationBuilder(new SimpleStateProvider(FIRE), new SimpleBlockPlacer())).tries(64).whitelist(ImmutableSet.of(NETHERRACK.getBlock())).noProjection().build();
-      WATERLILLY_CONFIG = (new RandomPatchConfiguration.GrassConfigurationBuilder(new SimpleStateProvider(LILY_PAD), new SimpleBlockPlacer())).tries(10).build();
-      RED_MUSHROOM_CONFIG = (new RandomPatchConfiguration.GrassConfigurationBuilder(new SimpleStateProvider(RED_MUSHROOM), new SimpleBlockPlacer())).tries(64).noProjection().build();
-      BROWN_MUSHROOM_CONFIG = (new RandomPatchConfiguration.GrassConfigurationBuilder(new SimpleStateProvider(BROWN_MUSHROOM), new SimpleBlockPlacer())).tries(64).noProjection().build();
+      NETHER_GOLD_ORE = Blocks.NETHER_GOLD_ORE.defaultBlockState();
+      NETHER_QUARTZ_ORE = Blocks.NETHER_QUARTZ_ORE.defaultBlockState();
+      WARPED_STEM = Blocks.WARPED_STEM.defaultBlockState();
+      WARPED_WART_BLOCK = Blocks.WARPED_WART_BLOCK.defaultBlockState();
+      NETHER_WART_BLOCK = Blocks.NETHER_WART_BLOCK.defaultBlockState();
+      CRIMSON_STEM = Blocks.CRIMSON_STEM.defaultBlockState();
+      SHROOMLIGHT = Blocks.SHROOMLIGHT.defaultBlockState();
+      PILLAGER_OUTPOST = StructureFeature.PILLAGER_OUTPOST.configured(NoneFeatureConfiguration.INSTANCE);
+      MINESHAFT = StructureFeature.MINESHAFT.configured(new MineshaftConfiguration(0.004000000189989805D, MineshaftFeature.Type.NORMAL));
+      MINESHAFT_MESA = StructureFeature.MINESHAFT.configured(new MineshaftConfiguration(0.004D, MineshaftFeature.Type.MESA));
+      WOODLAND_MANSION = StructureFeature.WOODLAND_MANSION.configured(NoneFeatureConfiguration.INSTANCE);
+      JUNGLE_TEMPLE = StructureFeature.JUNGLE_TEMPLE.configured(NoneFeatureConfiguration.INSTANCE);
+      DESERT_PYRAMID = StructureFeature.DESERT_PYRAMID.configured(NoneFeatureConfiguration.INSTANCE);
+      IGLOO = StructureFeature.IGLOO.configured(NoneFeatureConfiguration.INSTANCE);
+      SHIPWRECK = StructureFeature.SHIPWRECK.configured(new ShipwreckConfiguration(false));
+      SHIPWRECH_BEACHED = StructureFeature.SHIPWRECK.configured(new ShipwreckConfiguration(true));
+      SWAMP_HUT = StructureFeature.SWAMP_HUT.configured(NoneFeatureConfiguration.INSTANCE);
+      STRONGHOLD = StructureFeature.STRONGHOLD.configured(NoneFeatureConfiguration.INSTANCE);
+      OCEAN_MONUMENT = StructureFeature.OCEAN_MONUMENT.configured(NoneFeatureConfiguration.INSTANCE);
+      OCEAN_RUIN_COLD = StructureFeature.OCEAN_RUIN.configured(new OceanRuinConfiguration(OceanRuinFeature.Type.COLD, 0.3F, 0.9F));
+      OCEAN_RUIN_WARM = StructureFeature.OCEAN_RUIN.configured(new OceanRuinConfiguration(OceanRuinFeature.Type.WARM, 0.3F, 0.9F));
+      NETHER_BRIDGE = StructureFeature.NETHER_BRIDGE.configured(NoneFeatureConfiguration.INSTANCE);
+      NETHER_FOSSIL = StructureFeature.NETHER_FOSSIL.configured(NoneFeatureConfiguration.INSTANCE);
+      END_CITY = StructureFeature.END_CITY.configured(NoneFeatureConfiguration.INSTANCE);
+      BURIED_TREASURE = StructureFeature.BURIED_TREASURE.configured(new BuriedTreasureConfiguration(0.01F));
+      BASTION_REMNANT = StructureFeature.BASTION_REMNANT.configured(new MultiJigsawConfiguration(BastionPieces.POOLS));
+      VILLAGE_PLAINS = StructureFeature.VILLAGE.configured(new JigsawConfiguration(new ResourceLocation("village/plains/town_centers"), 6));
+      VILLAGE_DESERT = StructureFeature.VILLAGE.configured(new JigsawConfiguration(new ResourceLocation("village/desert/town_centers"), 6));
+      VILLAGE_SAVANNA = StructureFeature.VILLAGE.configured(new JigsawConfiguration(new ResourceLocation("village/savanna/town_centers"), 6));
+      VILLAGE_SNOVY = StructureFeature.VILLAGE.configured(new JigsawConfiguration(new ResourceLocation("village/snowy/town_centers"), 6));
+      VILLAGE_TAIGA = StructureFeature.VILLAGE.configured(new JigsawConfiguration(new ResourceLocation("village/taiga/town_centers"), 6));
+      RUINED_PORTAL_STANDARD = StructureFeature.RUINED_PORTAL.configured(new RuinedPortalConfiguration(RuinedPortalFeature.Type.STANDARD));
+      RUINED_PORTAL_DESERT = StructureFeature.RUINED_PORTAL.configured(new RuinedPortalConfiguration(RuinedPortalFeature.Type.DESERT));
+      RUINED_PORTAL_JUNGLE = StructureFeature.RUINED_PORTAL.configured(new RuinedPortalConfiguration(RuinedPortalFeature.Type.JUNGLE));
+      RUINED_PORTAL_SWAMP = StructureFeature.RUINED_PORTAL.configured(new RuinedPortalConfiguration(RuinedPortalFeature.Type.SWAMP));
+      RUINED_PORTAL_MOUNTAIN = StructureFeature.RUINED_PORTAL.configured(new RuinedPortalConfiguration(RuinedPortalFeature.Type.MOUNTAIN));
+      RUINED_PORTAL_OCEAN = StructureFeature.RUINED_PORTAL.configured(new RuinedPortalConfiguration(RuinedPortalFeature.Type.OCEAN));
+      RUINED_PORTAL_NETHER = StructureFeature.RUINED_PORTAL.configured(new RuinedPortalConfiguration(RuinedPortalFeature.Type.NETHER));
+      NORMAL_TREE_CONFIG = (new TreeConfiguration.TreeConfigurationBuilder(new SimpleStateProvider(OAK_LOG), new SimpleStateProvider(OAK_LEAVES), new BlobFoliagePlacer(2, 0, 0, 0, 3), new StraightTrunkPlacer(4, 2, 0), new TwoLayersFeatureSize(1, 0, 1))).ignoreVines().build();
+      BEEHIVE_0002 = new BeehiveDecorator(0.002F);
+      BEEHIVE_002 = new BeehiveDecorator(0.02F);
+      BEEHIVE_005 = new BeehiveDecorator(0.05F);
+      NORMAL_TREE_WITH_BEES_0002_CONFIG = NORMAL_TREE_CONFIG.withDecorators(ImmutableList.of(BEEHIVE_0002));
+      NORMAL_TREE_WITH_BEES_002_CONFIG = NORMAL_TREE_CONFIG.withDecorators(ImmutableList.of(BEEHIVE_002));
+      NORMAL_TREE_WITH_BEES_005_CONFIG = NORMAL_TREE_CONFIG.withDecorators(ImmutableList.of(BEEHIVE_005));
+      JUNGLE_TREE_CONFIG = (new TreeConfiguration.TreeConfigurationBuilder(new SimpleStateProvider(JUNGLE_LOG), new SimpleStateProvider(JUNGLE_LEAVES), new BlobFoliagePlacer(2, 0, 0, 0, 3), new StraightTrunkPlacer(4, 8, 0), new TwoLayersFeatureSize(1, 0, 1))).decorators(ImmutableList.of(new CocoaDecorator(0.2F), TrunkVineDecorator.INSTANCE, LeaveVineDecorator.INSTANCE)).ignoreVines().build();
+      JUNGLE_TREE_NOVINE_CONFIG = (new TreeConfiguration.TreeConfigurationBuilder(new SimpleStateProvider(JUNGLE_LOG), new SimpleStateProvider(JUNGLE_LEAVES), new BlobFoliagePlacer(2, 0, 0, 0, 3), new StraightTrunkPlacer(4, 8, 0), new TwoLayersFeatureSize(1, 0, 1))).ignoreVines().build();
+      PINE_TREE_CONFIG = (new TreeConfiguration.TreeConfigurationBuilder(new SimpleStateProvider(SPRUCE_LOG), new SimpleStateProvider(SPRUCE_LEAVES), new PineFoliagePlacer(1, 0, 1, 0, 3, 1), new StraightTrunkPlacer(6, 4, 0), new TwoLayersFeatureSize(2, 0, 2))).ignoreVines().build();
+      SPRUCE_TREE_CONFIG = (new TreeConfiguration.TreeConfigurationBuilder(new SimpleStateProvider(SPRUCE_LOG), new SimpleStateProvider(SPRUCE_LEAVES), new SpruceFoliagePlacer(2, 1, 0, 2, 1, 1), new StraightTrunkPlacer(5, 2, 1), new TwoLayersFeatureSize(2, 0, 2))).ignoreVines().build();
+      ACACIA_TREE_CONFIG = (new TreeConfiguration.TreeConfigurationBuilder(new SimpleStateProvider(ACACIA_LOG), new SimpleStateProvider(ACACIA_LEAVES), new AcaciaFoliagePlacer(2, 0, 0, 0), new ForkingTrunkPlacer(5, 2, 2), new TwoLayersFeatureSize(1, 0, 2))).ignoreVines().build();
+      BIRCH_TREE_CONFIG = (new TreeConfiguration.TreeConfigurationBuilder(new SimpleStateProvider(BIRCH_LOG), new SimpleStateProvider(BIRCH_LEAVES), new BlobFoliagePlacer(2, 0, 0, 0, 3), new StraightTrunkPlacer(5, 2, 0), new TwoLayersFeatureSize(1, 0, 1))).ignoreVines().build();
+      BIRCH_TREE_WITH_BEES_0002_CONFIG = BIRCH_TREE_CONFIG.withDecorators(ImmutableList.of(BEEHIVE_0002));
+      BIRCH_TREE_WITH_BEES_002_CONFIG = BIRCH_TREE_CONFIG.withDecorators(ImmutableList.of(BEEHIVE_002));
+      BIRCH_TREE_WITH_BEES_005_CONFIG = BIRCH_TREE_CONFIG.withDecorators(ImmutableList.of(BEEHIVE_005));
+      SUPER_BIRCH_TREE_WITH_BEES_0002_CONFIG = (new TreeConfiguration.TreeConfigurationBuilder(new SimpleStateProvider(BIRCH_LOG), new SimpleStateProvider(BIRCH_LEAVES), new BlobFoliagePlacer(2, 0, 0, 0, 3), new StraightTrunkPlacer(5, 2, 6), new TwoLayersFeatureSize(1, 0, 1))).ignoreVines().decorators(ImmutableList.of(BEEHIVE_0002)).build();
+      SWAMP_TREE_CONFIG = (new TreeConfiguration.TreeConfigurationBuilder(new SimpleStateProvider(OAK_LOG), new SimpleStateProvider(OAK_LEAVES), new BlobFoliagePlacer(3, 0, 0, 0, 3), new StraightTrunkPlacer(5, 3, 0), new TwoLayersFeatureSize(1, 0, 1))).maxWaterDepth(1).decorators(ImmutableList.of(LeaveVineDecorator.INSTANCE)).build();
+      FANCY_TREE_CONFIG = (new TreeConfiguration.TreeConfigurationBuilder(new SimpleStateProvider(OAK_LOG), new SimpleStateProvider(OAK_LEAVES), new FancyFoliagePlacer(2, 0, 4, 0, 4), new FancyTrunkPlacer(3, 11, 0), new TwoLayersFeatureSize(0, 0, 0, OptionalInt.of(4)))).ignoreVines().heightmap(Heightmap.Types.MOTION_BLOCKING).build();
+      FANCY_TREE_WITH_BEES_0002_CONFIG = FANCY_TREE_CONFIG.withDecorators(ImmutableList.of(BEEHIVE_0002));
+      FANCY_TREE_WITH_BEES_002_CONFIG = FANCY_TREE_CONFIG.withDecorators(ImmutableList.of(BEEHIVE_002));
+      FANCY_TREE_WITH_BEES_005_CONFIG = FANCY_TREE_CONFIG.withDecorators(ImmutableList.of(BEEHIVE_005));
+      JUNGLE_BUSH_CONFIG = (new TreeConfiguration.TreeConfigurationBuilder(new SimpleStateProvider(JUNGLE_LOG), new SimpleStateProvider(OAK_LEAVES), new BushFoliagePlacer(2, 0, 1, 0, 2), new StraightTrunkPlacer(1, 0, 0), new TwoLayersFeatureSize(0, 0, 0))).heightmap(Heightmap.Types.MOTION_BLOCKING_NO_LEAVES).build();
+      DARK_OAK_TREE_CONFIG = (new TreeConfiguration.TreeConfigurationBuilder(new SimpleStateProvider(DARK_OAK_LOG), new SimpleStateProvider(DARK_OAK_LEAVES), new DarkOakFoliagePlacer(0, 0, 0, 0), new DarkOakTrunkPlacer(6, 2, 1), new ThreeLayersFeatureSize(1, 1, 0, 1, 2, OptionalInt.empty()))).maxWaterDepth(Integer.MAX_VALUE).heightmap(Heightmap.Types.MOTION_BLOCKING).ignoreVines().build();
+      MEGA_SPRUCE_TREE_CONFIG = (new TreeConfiguration.TreeConfigurationBuilder(new SimpleStateProvider(SPRUCE_LOG), new SimpleStateProvider(SPRUCE_LEAVES), new MegaPineFoliagePlacer(0, 0, 0, 0, 4, 13), new GiantTrunkPlacer(13, 2, 14), new TwoLayersFeatureSize(1, 1, 2))).decorators(ImmutableList.of(new AlterGroundDecorator(new SimpleStateProvider(PODZOL)))).build();
+      MEGA_PINE_TREE_CONFIG = (new TreeConfiguration.TreeConfigurationBuilder(new SimpleStateProvider(SPRUCE_LOG), new SimpleStateProvider(SPRUCE_LEAVES), new MegaPineFoliagePlacer(0, 0, 0, 0, 4, 3), new GiantTrunkPlacer(13, 2, 14), new TwoLayersFeatureSize(1, 1, 2))).decorators(ImmutableList.of(new AlterGroundDecorator(new SimpleStateProvider(PODZOL)))).build();
+      MEGA_JUNGLE_TREE_CONFIG = (new TreeConfiguration.TreeConfigurationBuilder(new SimpleStateProvider(JUNGLE_LOG), new SimpleStateProvider(JUNGLE_LEAVES), new MegaJungleFoliagePlacer(2, 0, 0, 0, 2), new MegaJungleTrunkPlacer(10, 2, 19), new TwoLayersFeatureSize(1, 1, 2))).decorators(ImmutableList.of(TrunkVineDecorator.INSTANCE, LeaveVineDecorator.INSTANCE)).build();
+      DEFAULT_GRASS_CONFIG = (new RandomPatchConfiguration.GrassConfigurationBuilder(new SimpleStateProvider(GRASS), SimpleBlockPlacer.INSTANCE)).tries(32).build();
+      TAIGA_GRASS_CONFIG = (new RandomPatchConfiguration.GrassConfigurationBuilder((new WeightedStateProvider()).add(GRASS, 1).add(FERN, 4), SimpleBlockPlacer.INSTANCE)).tries(32).build();
+      JUNGLE_GRASS_CONFIG = (new RandomPatchConfiguration.GrassConfigurationBuilder((new WeightedStateProvider()).add(GRASS, 3).add(FERN, 1), SimpleBlockPlacer.INSTANCE)).blacklist(ImmutableSet.of(PODZOL)).tries(32).build();
+      GENERAL_FOREST_FLOWER_CONFIG = (new RandomPatchConfiguration.GrassConfigurationBuilder(new SimpleStateProvider(LILY_OF_THE_VALLEY), SimpleBlockPlacer.INSTANCE)).tries(64).build();
+      SwAMP_FLOWER_CONFIG = (new RandomPatchConfiguration.GrassConfigurationBuilder(new SimpleStateProvider(BLUE_ORCHID), SimpleBlockPlacer.INSTANCE)).tries(64).build();
+      DEFAULT_FLOWER_CONFIG = (new RandomPatchConfiguration.GrassConfigurationBuilder((new WeightedStateProvider()).add(POPPY, 2).add(DANDELION, 1), SimpleBlockPlacer.INSTANCE)).tries(64).build();
+      PLAIN_FLOWER_CONFIG = (new RandomPatchConfiguration.GrassConfigurationBuilder(PlainFlowerProvider.INSTANCE, SimpleBlockPlacer.INSTANCE)).tries(64).build();
+      FOREST_FLOWER_CONFIG = (new RandomPatchConfiguration.GrassConfigurationBuilder(ForestFlowerProvider.INSTANCE, SimpleBlockPlacer.INSTANCE)).tries(64).build();
+      DEAD_BUSH_CONFIG = (new RandomPatchConfiguration.GrassConfigurationBuilder(new SimpleStateProvider(DEAD_BUSH), SimpleBlockPlacer.INSTANCE)).tries(4).build();
+      MELON_CONFIG = (new RandomPatchConfiguration.GrassConfigurationBuilder(new SimpleStateProvider(MELON), SimpleBlockPlacer.INSTANCE)).tries(64).whitelist(ImmutableSet.of(GRASS_BLOCK.getBlock())).canReplace().noProjection().build();
+      PUMPKIN_CONFIG = (new RandomPatchConfiguration.GrassConfigurationBuilder(new SimpleStateProvider(PUMPKIN), SimpleBlockPlacer.INSTANCE)).tries(64).whitelist(ImmutableSet.of(GRASS_BLOCK.getBlock())).noProjection().build();
+      SWEET_BERRY_BUSH_CONFIG = (new RandomPatchConfiguration.GrassConfigurationBuilder(new SimpleStateProvider(SWEET_BERRY_BUSH), SimpleBlockPlacer.INSTANCE)).tries(64).whitelist(ImmutableSet.of(GRASS_BLOCK.getBlock())).noProjection().build();
+      FIRE_CONFIG = (new RandomPatchConfiguration.GrassConfigurationBuilder(new SimpleStateProvider(FIRE), SimpleBlockPlacer.INSTANCE)).tries(64).whitelist(ImmutableSet.of(NETHERRACK.getBlock())).noProjection().build();
+      SOUL_FIRE_CONFIG = (new RandomPatchConfiguration.GrassConfigurationBuilder(new SimpleStateProvider(SOUL_FIRE), new SimpleBlockPlacer())).tries(64).whitelist(ImmutableSet.of(SOUL_SOIL.getBlock())).noProjection().build();
+      WATERLILLY_CONFIG = (new RandomPatchConfiguration.GrassConfigurationBuilder(new SimpleStateProvider(LILY_PAD), SimpleBlockPlacer.INSTANCE)).tries(10).build();
+      RED_MUSHROOM_CONFIG = (new RandomPatchConfiguration.GrassConfigurationBuilder(new SimpleStateProvider(RED_MUSHROOM), SimpleBlockPlacer.INSTANCE)).tries(64).noProjection().build();
+      BROWN_MUSHROOM_CONFIG = (new RandomPatchConfiguration.GrassConfigurationBuilder(new SimpleStateProvider(BROWN_MUSHROOM), SimpleBlockPlacer.INSTANCE)).tries(64).noProjection().build();
+      CRIMSON_ROOTS_CONFIG = (new RandomPatchConfiguration.GrassConfigurationBuilder(new SimpleStateProvider(CRIMSON_ROOTS), new SimpleBlockPlacer())).tries(64).noProjection().build();
       DOUBLE_LILAC_CONFIG = (new RandomPatchConfiguration.GrassConfigurationBuilder(new SimpleStateProvider(LILAC), new DoublePlantPlacer())).tries(64).noProjection().build();
       DOUBLE_ROSE_BUSH_CONFIG = (new RandomPatchConfiguration.GrassConfigurationBuilder(new SimpleStateProvider(ROSE_BUSH), new DoublePlantPlacer())).tries(64).noProjection().build();
       DOUBLE_PEONY_CONFIG = (new RandomPatchConfiguration.GrassConfigurationBuilder(new SimpleStateProvider(PEONY), new DoublePlantPlacer())).tries(64).noProjection().build();
       SUNFLOWER_CONFIG = (new RandomPatchConfiguration.GrassConfigurationBuilder(new SimpleStateProvider(SUNFLOWER), new DoublePlantPlacer())).tries(64).noProjection().build();
       TALL_GRASS_CONFIG = (new RandomPatchConfiguration.GrassConfigurationBuilder(new SimpleStateProvider(TALL_GRASS), new DoublePlantPlacer())).tries(64).noProjection().build();
@@ -640,13 +794,26 @@
       HAY_PILE_CONFIG = new BlockPileConfiguration(new RotatedBlockProvider(Blocks.HAY_BLOCK));
       SNOW_PILE_CONFIG = new BlockPileConfiguration(new SimpleStateProvider(SNOW));
       MELON_PILE_CONFIG = new BlockPileConfiguration(new SimpleStateProvider(MELON));
       PUMPKIN_PILE_CONFIG = new BlockPileConfiguration((new WeightedStateProvider()).add(PUMPKIN, 19).add(JACK_O_LANTERN, 1));
       ICE_PILE_CONFIG = new BlockPileConfiguration((new WeightedStateProvider()).add(BLUE_ICE, 1).add(PACKED_ICE, 5));
-      WATER_SPRING_CONFIG = new SpringConfiguration(Fluids.WATER.defaultFluidState(), true, 4, 1, ImmutableSet.of(Blocks.STONE, Blocks.GRANITE, Blocks.DIORITE, Blocks.ANDESITE));
-      LAVA_SPRING_CONFIG = new SpringConfiguration(Fluids.LAVA.defaultFluidState(), true, 4, 1, ImmutableSet.of(Blocks.STONE, Blocks.GRANITE, Blocks.DIORITE, Blocks.ANDESITE));
-      OPEN_NETHER_SPRING_CONFIG = new SpringConfiguration(Fluids.LAVA.defaultFluidState(), false, 4, 1, ImmutableSet.of(Blocks.NETHERRACK));
-      CLOSED_NETHER_SPRING_CONFIG = new SpringConfiguration(Fluids.LAVA.defaultFluidState(), false, 5, 0, ImmutableSet.of(Blocks.NETHERRACK));
+      WATER_STATE = Fluids.WATER.defaultFluidState();
+      LAVA_STATE = Fluids.LAVA.defaultFluidState();
+      WATER_SPRING_CONFIG = new SpringConfiguration(WATER_STATE, true, 4, 1, ImmutableSet.of(Blocks.STONE, Blocks.GRANITE, Blocks.DIORITE, Blocks.ANDESITE));
+      LAVA_SPRING_CONFIG = new SpringConfiguration(LAVA_STATE, true, 4, 1, ImmutableSet.of(Blocks.STONE, Blocks.GRANITE, Blocks.DIORITE, Blocks.ANDESITE));
+      OPEN_NETHER_SPRING_CONFIG = new SpringConfiguration(LAVA_STATE, false, 4, 1, ImmutableSet.of(Blocks.NETHERRACK));
+      BASALT_DELTA_SPRING_CONFIG = new SpringConfiguration(LAVA_STATE, true, 4, 1, ImmutableSet.of(Blocks.NETHERRACK, Blocks.SOUL_SAND, Blocks.GRAVEL, Blocks.MAGMA_BLOCK, Blocks.BLACKSTONE));
+      CLOSED_NETHER_SPRING_CONFIG = new SpringConfiguration(LAVA_STATE, false, 5, 0, ImmutableSet.of(Blocks.NETHERRACK));
+      OPEN_NETHER_SPRING_SOUL_SAND_CONFIG = new SpringConfiguration(LAVA_STATE, false, 4, 1, ImmutableSet.of(Blocks.SOUL_SAND));
+      CLOSED_NETHER_SPRING_SOUL_SAND_CONFIG = new SpringConfiguration(LAVA_STATE, false, 5, 0, ImmutableSet.of(Blocks.SOUL_SAND));
+      SMALL_BASALT_COLUMN_FEATURE_CONFIG = (new ColumnFeatureConfiguration.Builder()).horizontalReach(1).heightRange(1, 4).build();
+      LARGE_BASALT_COLUMN_FEATURE_CONFIG = (new ColumnFeatureConfiguration.Builder()).horizontalReach(2, 3).heightRange(5, 10).build();
+      BASALT_BLOBS_FEATURE_CONFIG = (new ReplaceSpheroidConfiguration.Builder()).minimumReach(new Vec3i(3, 3, 3)).maximumReach(new Vec3i(7, 7, 7)).targetBlockState(Blocks.NETHERRACK.defaultBlockState()).replaceWithBlockState(Blocks.BASALT.defaultBlockState()).build();
+      BLACKSTONE_BLOBS_FEATURE_CONFIG = (new ReplaceSpheroidConfiguration.Builder()).minimumReach(new Vec3i(3, 3, 3)).maximumReach(new Vec3i(7, 7, 7)).targetBlockState(Blocks.NETHERRACK.defaultBlockState()).replaceWithBlockState(Blocks.BLACKSTONE.defaultBlockState()).build();
+      BASALT_DELTA_FEATURE_CONFIG = (new DeltaFeatureConfiguration.Builder()).contents(Blocks.LAVA.defaultBlockState()).radius(3, 7).rim(Blocks.MAGMA_BLOCK.defaultBlockState(), 2).build();
       HUGE_RED_MUSHROOM_CONFIG = new HugeMushroomFeatureConfiguration(new SimpleStateProvider(HUGE_RED_MUSHROOM), new SimpleStateProvider(HUGE_MUSHROOM_STEM), 2);
       HUGE_BROWN_MUSHROOM_CONFIG = new HugeMushroomFeatureConfiguration(new SimpleStateProvider(HUGE_BROWN_MUSHROOM), new SimpleStateProvider(HUGE_MUSHROOM_STEM), 3);
+      CRIMSON_FOREST_CONFIG = new BlockPileConfiguration((new WeightedStateProvider()).add(Blocks.CRIMSON_ROOTS.defaultBlockState(), 87).add(Blocks.CRIMSON_FUNGUS.defaultBlockState(), 11).add(Blocks.WARPED_FUNGUS.defaultBlockState(), 1));
+      WARPED_FOREST_CONFIG = new BlockPileConfiguration((new WeightedStateProvider()).add(Blocks.WARPED_ROOTS.defaultBlockState(), 85).add(Blocks.CRIMSON_ROOTS.defaultBlockState(), 1).add(Blocks.WARPED_FUNGUS.defaultBlockState(), 13).add(Blocks.CRIMSON_FUNGUS.defaultBlockState(), 1));
+      NETHER_SPROUTS_CONFIG = new BlockPileConfiguration(new SimpleStateProvider(Blocks.NETHER_SPROUTS.defaultBlockState()));
    }
 }
