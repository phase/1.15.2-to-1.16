--- net/minecraft/world/level/pathfinder/TurtleNodeEvaluator.java
+++ net/minecraft/world/level/pathfinder/TurtleNodeEvaluator.java
@@ -1,17 +1,18 @@
 package net.minecraft.world.level.pathfinder;
 
 import javax.annotation.Nullable;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
+import net.minecraft.tags.BlockTags;
 import net.minecraft.util.Mth;
 import net.minecraft.world.entity.Mob;
 import net.minecraft.world.level.BlockGetter;
 import net.minecraft.world.level.PathNavigationRegion;
 import net.minecraft.world.level.block.BaseRailBlock;
-import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.Blocks;
+import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.phys.AABB;
 import net.minecraft.world.phys.shapes.VoxelShape;
 
 public class TurtleNodeEvaluator extends WalkNodeEvaluator {
    private float oldWalkableCost;
@@ -216,50 +217,51 @@
 
       return var5;
    }
 
    public BlockPathTypes getBlockPathType(BlockGetter var1, int var2, int var3, int var4) {
-      BlockPathTypes var5 = getBlockPathTypeRaw(var1, var2, var3, var4);
-      if (var5 == BlockPathTypes.WATER) {
-         Direction[] var11 = Direction.values();
-         int var12 = var11.length;
+      BlockPos.MutableBlockPos var5 = new BlockPos.MutableBlockPos();
+      BlockPathTypes var6 = getBlockPathTypeRaw(var1, var5.set(var2, var3, var4));
+      if (var6 == BlockPathTypes.WATER) {
+         Direction[] var12 = Direction.values();
+         int var13 = var12.length;
 
-         for(int var8 = 0; var8 < var12; ++var8) {
-            Direction var9 = var11[var8];
-            BlockPathTypes var10 = getBlockPathTypeRaw(var1, var2 + var9.getStepX(), var3 + var9.getStepY(), var4 + var9.getStepZ());
-            if (var10 == BlockPathTypes.BLOCKED) {
+         for(int var9 = 0; var9 < var13; ++var9) {
+            Direction var10 = var12[var9];
+            BlockPathTypes var11 = getBlockPathTypeRaw(var1, var5.set(var2, var3, var4).move(var10));
+            if (var11 == BlockPathTypes.BLOCKED) {
                return BlockPathTypes.WATER_BORDER;
             }
          }
 
          return BlockPathTypes.WATER;
       } else {
-         if (var5 == BlockPathTypes.OPEN && var3 >= 1) {
-            Block var6 = var1.getBlockState(new BlockPos(var2, var3 - 1, var4)).getBlock();
-            BlockPathTypes var7 = getBlockPathTypeRaw(var1, var2, var3 - 1, var4);
-            if (var7 != BlockPathTypes.WALKABLE && var7 != BlockPathTypes.OPEN && var7 != BlockPathTypes.LAVA) {
-               var5 = BlockPathTypes.WALKABLE;
+         if (var6 == BlockPathTypes.OPEN && var3 >= 1) {
+            BlockState var7 = var1.getBlockState(new BlockPos(var2, var3 - 1, var4));
+            BlockPathTypes var8 = getBlockPathTypeRaw(var1, var5.set(var2, var3 - 1, var4));
+            if (var8 != BlockPathTypes.WALKABLE && var8 != BlockPathTypes.OPEN && var8 != BlockPathTypes.LAVA) {
+               var6 = BlockPathTypes.WALKABLE;
             } else {
-               var5 = BlockPathTypes.OPEN;
+               var6 = BlockPathTypes.OPEN;
             }
 
-            if (var7 == BlockPathTypes.DAMAGE_FIRE || var6 == Blocks.MAGMA_BLOCK || var6 == Blocks.CAMPFIRE) {
-               var5 = BlockPathTypes.DAMAGE_FIRE;
+            if (var8 == BlockPathTypes.DAMAGE_FIRE || var7.is(Blocks.MAGMA_BLOCK) || var7.is(BlockTags.CAMPFIRES)) {
+               var6 = BlockPathTypes.DAMAGE_FIRE;
             }
 
-            if (var7 == BlockPathTypes.DAMAGE_CACTUS) {
-               var5 = BlockPathTypes.DAMAGE_CACTUS;
+            if (var8 == BlockPathTypes.DAMAGE_CACTUS) {
+               var6 = BlockPathTypes.DAMAGE_CACTUS;
             }
 
-            if (var7 == BlockPathTypes.DAMAGE_OTHER) {
-               var5 = BlockPathTypes.DAMAGE_OTHER;
+            if (var8 == BlockPathTypes.DAMAGE_OTHER) {
+               var6 = BlockPathTypes.DAMAGE_OTHER;
             }
          }
 
-         if (var5 == BlockPathTypes.WALKABLE) {
-            var5 = checkNeighbourBlocks(var1, var2, var3, var4, var5);
+         if (var6 == BlockPathTypes.WALKABLE) {
+            var6 = checkNeighbourBlocks(var1, var5.set(var2, var3, var4), var6);
          }
 
-         return var5;
+         return var6;
       }
    }
 }
