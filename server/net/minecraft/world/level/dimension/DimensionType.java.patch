--- net/minecraft/world/level/dimension/DimensionType.java
+++ net/minecraft/world/level/dimension/DimensionType.java
@@ -1,101 +1,303 @@
 package net.minecraft.world.level.dimension;
 
-import com.mojang.datafixers.Dynamic;
-import com.mojang.datafixers.types.DynamicOps;
+import com.google.common.collect.ImmutableList;
+import com.google.common.collect.ImmutableMap;
+import com.google.common.collect.Lists;
+import com.google.common.collect.Maps;
+import com.google.common.collect.Sets;
+import com.mojang.datafixers.util.Either;
+import com.mojang.datafixers.util.Function7;
+import com.mojang.datafixers.util.Pair;
+import com.mojang.serialization.Codec;
+import com.mojang.serialization.DataResult;
+import com.mojang.serialization.Dynamic;
+import com.mojang.serialization.Lifecycle;
+import com.mojang.serialization.codecs.RecordCodecBuilder;
 import java.io.File;
-import java.util.function.BiFunction;
-import javax.annotation.Nullable;
+import java.util.ArrayList;
+import java.util.Iterator;
+import java.util.LinkedHashMap;
+import java.util.LinkedHashSet;
+import java.util.Map;
+import java.util.Optional;
+import java.util.OptionalLong;
+import java.util.Map.Entry;
 import net.minecraft.core.Registry;
+import net.minecraft.resources.ResourceKey;
 import net.minecraft.resources.ResourceLocation;
-import net.minecraft.util.Serializable;
+import net.minecraft.util.Mth;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.biome.BiomeZoomer;
 import net.minecraft.world.level.biome.FuzzyOffsetBiomeZoomer;
 import net.minecraft.world.level.biome.FuzzyOffsetConstantColumnBiomeZoomer;
-import net.minecraft.world.level.dimension.end.TheEndDimension;
+import net.minecraft.world.level.biome.MultiNoiseBiomeSource;
+import net.minecraft.world.level.biome.TheEndBiomeSource;
+import net.minecraft.world.level.chunk.ChunkGenerator;
+import net.minecraft.world.level.levelgen.NoiseBasedChunkGenerator;
+import net.minecraft.world.level.levelgen.NoiseGeneratorSettings;
 
-public class DimensionType implements Serializable {
-   public static final DimensionType OVERWORLD;
-   public static final DimensionType NETHER;
-   public static final DimensionType THE_END;
-   private final int id;
+public class DimensionType {
+   public static final Codec<ResourceKey<DimensionType>> RESOURCE_KEY_CODEC;
+   private static final Codec<DimensionType> DIRECT_CODEC;
+   public static final float[] MOON_BRIGHTNESS_PER_PHASE;
+   public static final ResourceKey<DimensionType> OVERWORLD_LOCATION;
+   public static final ResourceKey<DimensionType> NETHER_LOCATION;
+   public static final ResourceKey<DimensionType> END_LOCATION;
+   private static final LinkedHashSet<ResourceKey<Level>> BUILTIN_ORDER;
+   private static final Map<ResourceKey<DimensionType>, DimensionType> BUILTIN;
+   private static final Codec<DimensionType> BUILTIN_CODEC;
+   public static final Codec<DimensionType> CODEC;
    private final String fileSuffix;
-   private final String folder;
-   private final BiFunction<Level, DimensionType, ? extends Dimension> factory;
+   private final OptionalLong fixedTime;
    private final boolean hasSkylight;
+   private final boolean hasCeiling;
+   private final boolean ultraWarm;
+   private final boolean natural;
+   private final boolean shrunk;
+   private final boolean createDragonFight;
    private final BiomeZoomer biomeZoomer;
+   private final Optional<ResourceKey<DimensionType>> builtinKey;
+   private final float ambientLight;
+   private final transient float[] brightnessRamp;
 
-   private static DimensionType register(String var0, DimensionType var1) {
-      return (DimensionType)Registry.registerMapping(Registry.DIMENSION_TYPE, var1.id, var0, var1);
+   public static DimensionType makeDefaultOverworld() {
+      return new DimensionType("", OptionalLong.empty(), true, false, false, true, false, false, FuzzyOffsetConstantColumnBiomeZoomer.INSTANCE, Optional.of(OVERWORLD_LOCATION), 0.0F);
    }
 
-   protected DimensionType(int var1, String var2, String var3, BiFunction<Level, DimensionType, ? extends Dimension> var4, boolean var5, BiomeZoomer var6) {
-      this.id = var1;
-      this.fileSuffix = var2;
-      this.folder = var3;
-      this.factory = var4;
-      this.hasSkylight = var5;
-      this.biomeZoomer = var6;
+   private static DimensionType makeDefaultNether() {
+      return new DimensionType("_nether", OptionalLong.of(18000L), false, true, true, false, true, false, FuzzyOffsetBiomeZoomer.INSTANCE, Optional.of(NETHER_LOCATION), 0.1F);
    }
 
-   public static DimensionType of(Dynamic<?> var0) {
-      return (DimensionType)Registry.DIMENSION_TYPE.get(new ResourceLocation(var0.asString("")));
+   private static DimensionType makeDefaultEnd() {
+      return new DimensionType("_end", OptionalLong.of(6000L), false, false, false, false, false, true, FuzzyOffsetBiomeZoomer.INSTANCE, Optional.of(END_LOCATION), 0.0F);
    }
 
-   public static Iterable<DimensionType> getAllTypes() {
-      return Registry.DIMENSION_TYPE;
+   protected DimensionType(OptionalLong var1, boolean var2, boolean var3, boolean var4, boolean var5, boolean var6, float var7) {
+      this("", var1, var2, var3, var4, var5, var6, false, FuzzyOffsetBiomeZoomer.INSTANCE, Optional.empty(), var7);
    }
 
-   public int getId() {
-      return this.id + -1;
+   protected DimensionType(String var1, OptionalLong var2, boolean var3, boolean var4, boolean var5, boolean var6, boolean var7, boolean var8, BiomeZoomer var9, Optional<ResourceKey<DimensionType>> var10, float var11) {
+      this.fileSuffix = var1;
+      this.fixedTime = var2;
+      this.hasSkylight = var3;
+      this.hasCeiling = var4;
+      this.ultraWarm = var5;
+      this.natural = var6;
+      this.shrunk = var7;
+      this.createDragonFight = var8;
+      this.biomeZoomer = var9;
+      this.builtinKey = var10;
+      this.ambientLight = var11;
+      this.brightnessRamp = fillBrightnessRamp(var11);
    }
 
-   public String getFileSuffix() {
-      return this.fileSuffix;
+   private static float[] fillBrightnessRamp(float var0) {
+      float[] var1 = new float[16];
+
+      for(int var2 = 0; var2 <= 15; ++var2) {
+         float var3 = (float)var2 / 15.0F;
+         float var4 = var3 / (4.0F - 3.0F * var3);
+         var1[var2] = Mth.lerp(var0, var4, 1.0F);
+      }
+
+      return var1;
    }
 
-   public File getStorageFolder(File var1) {
-      return this.folder.isEmpty() ? var1 : new File(var1, this.folder);
+   @Deprecated
+   public static DataResult<ResourceKey<Level>> parseLegacy(Dynamic<?> var0) {
+      DataResult var1 = var0.asNumber();
+      if (var1.result().equals(Optional.of(-1))) {
+         return DataResult.success(Level.NETHER);
+      } else if (var1.result().equals(Optional.of(0))) {
+         return DataResult.success(Level.OVERWORLD);
+      } else {
+         return var1.result().equals(Optional.of(1)) ? DataResult.success(Level.END) : Level.RESOURCE_KEY_CODEC.parse(var0);
+      }
    }
 
-   public Dimension create(Level var1) {
-      return (Dimension)this.factory.apply(var1, this);
+   private static ChunkGenerator defaultEndGenerator(long var0) {
+      return new NoiseBasedChunkGenerator(new TheEndBiomeSource(var0), var0, NoiseGeneratorSettings.Preset.END.settings());
    }
 
-   public String toString() {
-      return getName(this).toString();
+   private static ChunkGenerator defaultNetherGenerator(long var0) {
+      return new NoiseBasedChunkGenerator(MultiNoiseBiomeSource.Preset.NETHER.biomeSource(var0), var0, NoiseGeneratorSettings.Preset.NETHER.settings());
    }
 
-   @Nullable
-   public static DimensionType getById(int var0) {
-      return (DimensionType)Registry.DIMENSION_TYPE.byId(var0 - -1);
+   public static LinkedHashMap<ResourceKey<Level>, Pair<DimensionType, ChunkGenerator>> defaultDimensions(long var0) {
+      LinkedHashMap var2 = Maps.newLinkedHashMap();
+      var2.put(Level.NETHER, Pair.of(makeDefaultNether(), defaultNetherGenerator(var0)));
+      var2.put(Level.END, Pair.of(makeDefaultEnd(), defaultEndGenerator(var0)));
+      return var2;
    }
 
-   @Nullable
-   public static DimensionType getByName(ResourceLocation var0) {
-      return (DimensionType)Registry.DIMENSION_TYPE.get(var0);
+   public static boolean stable(long var0, LinkedHashMap<ResourceKey<Level>, Pair<DimensionType, ChunkGenerator>> var2) {
+      ArrayList var3 = Lists.newArrayList((Iterable)var2.entrySet());
+      if (var3.size() != 3) {
+         return false;
+      } else {
+         Entry var4 = (Entry)var3.get(0);
+         Entry var5 = (Entry)var3.get(1);
+         Entry var6 = (Entry)var3.get(2);
+         if (var4.getKey() == Level.OVERWORLD && var5.getKey() == Level.NETHER && var6.getKey() == Level.END) {
+            if (((DimensionType)((Pair)var4.getValue()).getFirst()).isOverworld() && ((DimensionType)((Pair)var5.getValue()).getFirst()).isNether() && ((DimensionType)((Pair)var6.getValue()).getFirst()).isEnd()) {
+               if (((Pair)var5.getValue()).getSecond() instanceof NoiseBasedChunkGenerator && ((Pair)var6.getValue()).getSecond() instanceof NoiseBasedChunkGenerator) {
+                  NoiseBasedChunkGenerator var7 = (NoiseBasedChunkGenerator)((Pair)var5.getValue()).getSecond();
+                  NoiseBasedChunkGenerator var8 = (NoiseBasedChunkGenerator)((Pair)var6.getValue()).getSecond();
+                  if (!var7.stable(var0, NoiseGeneratorSettings.Preset.NETHER)) {
+                     return false;
+                  } else if (!var8.stable(var0, NoiseGeneratorSettings.Preset.END)) {
+                     return false;
+                  } else if (!(var7.getBiomeSource() instanceof MultiNoiseBiomeSource)) {
+                     return false;
+                  } else {
+                     MultiNoiseBiomeSource var9 = (MultiNoiseBiomeSource)var7.getBiomeSource();
+                     if (!var9.stable(var0)) {
+                        return false;
+                     } else if (!(var8.getBiomeSource() instanceof TheEndBiomeSource)) {
+                        return false;
+                     } else {
+                        TheEndBiomeSource var10 = (TheEndBiomeSource)var8.getBiomeSource();
+                        return var10.stable(var0);
+                     }
+                  }
+               } else {
+                  return false;
+               }
+            } else {
+               return false;
+            }
+         } else {
+            return false;
+         }
+      }
    }
 
-   @Nullable
-   public static ResourceLocation getName(DimensionType var0) {
-      return Registry.DIMENSION_TYPE.getKey(var0);
+   public String getFileSuffix() {
+      return this.fileSuffix;
    }
 
+   public static File getStorageFolder(ResourceKey<Level> var0, File var1) {
+      if (var0 == Level.OVERWORLD) {
+         return var1;
+      } else if (var0 == Level.END) {
+         return new File(var1, "DIM1");
+      } else {
+         return var0 == Level.NETHER ? new File(var1, "DIM-1") : new File(var1, "dimensions/" + var0.location().getNamespace() + "/" + var0.location().getPath());
+      }
+   }
+
    public boolean hasSkyLight() {
       return this.hasSkylight;
    }
 
+   public boolean hasCeiling() {
+      return this.hasCeiling;
+   }
+
+   public boolean ultraWarm() {
+      return this.ultraWarm;
+   }
+
+   public boolean natural() {
+      return this.natural;
+   }
+
+   public boolean shrunk() {
+      return this.shrunk;
+   }
+
+   public boolean createDragonFight() {
+      return this.createDragonFight;
+   }
+
    public BiomeZoomer getBiomeZoomer() {
       return this.biomeZoomer;
    }
 
-   public <T> T serialize(DynamicOps<T> var1) {
-      return var1.createString(Registry.DIMENSION_TYPE.getKey(this).toString());
+   public float timeOfDay(long var1) {
+      double var3 = Mth.frac((double)this.fixedTime.orElse(var1) / 24000.0D - 0.25D);
+      double var5 = 0.5D - Math.cos(var3 * 3.141592653589793D) / 2.0D;
+      return (float)(var3 * 2.0D + var5) / 3.0F;
    }
 
+   public int moonPhase(long var1) {
+      return (int)(var1 / 24000L % 8L + 8L) % 8;
+   }
+
+   public float brightness(int var1) {
+      return this.brightnessRamp[var1];
+   }
+
+   public boolean isOverworld() {
+      return this.builtinKey.equals(Optional.of(OVERWORLD_LOCATION));
+   }
+
+   public boolean isNether() {
+      return this.builtinKey.equals(Optional.of(NETHER_LOCATION));
+   }
+
+   public boolean isEnd() {
+      return this.builtinKey.equals(Optional.of(END_LOCATION));
+   }
+
+   public static LinkedHashMap<ResourceKey<Level>, Pair<DimensionType, ChunkGenerator>> sortMap(Map<ResourceKey<Level>, Pair<DimensionType, ChunkGenerator>> var0) {
+      LinkedHashMap var1 = Maps.newLinkedHashMap();
+      Iterator var2 = BUILTIN_ORDER.iterator();
+
+      while(var2.hasNext()) {
+         ResourceKey var3 = (ResourceKey)var2.next();
+         Pair var4 = (Pair)var0.get(var3);
+         if (var4 != null) {
+            var1.put(var3, var4);
+         }
+      }
+
+      var2 = var0.entrySet().iterator();
+
+      while(var2.hasNext()) {
+         Entry var5 = (Entry)var2.next();
+         if (!BUILTIN_ORDER.contains(var5.getKey())) {
+            var1.put(var5.getKey(), var5.getValue());
+         }
+      }
+
+      return var1;
+   }
+
    static {
-      OVERWORLD = register("overworld", new DimensionType(1, "", "", NormalDimension::new, true, FuzzyOffsetConstantColumnBiomeZoomer.INSTANCE));
-      NETHER = register("the_nether", new DimensionType(0, "_nether", "DIM-1", NetherDimension::new, false, FuzzyOffsetBiomeZoomer.INSTANCE));
-      THE_END = register("the_end", new DimensionType(2, "_end", "DIM1", TheEndDimension::new, false, FuzzyOffsetBiomeZoomer.INSTANCE));
+      RESOURCE_KEY_CODEC = ResourceLocation.CODEC.xmap(ResourceKey.elementKey(Registry.DIMENSION_TYPE_REGISTRY), ResourceKey::location);
+      DIRECT_CODEC = RecordCodecBuilder.create((var0) -> {
+         return var0.group(Codec.LONG.optionalFieldOf("fixed_time").xmap((var0x) -> {
+            return (OptionalLong)var0x.map(OptionalLong::of).orElseGet(OptionalLong::empty);
+         }, (var0x) -> {
+            return var0x.isPresent() ? Optional.of(var0x.getAsLong()) : Optional.empty();
+         }).forGetter((var0x) -> {
+            return var0x.fixedTime;
+         }), Codec.BOOL.fieldOf("has_skylight").forGetter(DimensionType::hasSkyLight), Codec.BOOL.fieldOf("has_ceiling").forGetter(DimensionType::hasCeiling), Codec.BOOL.fieldOf("ultrawarm").forGetter(DimensionType::ultraWarm), Codec.BOOL.fieldOf("natural").forGetter(DimensionType::natural), Codec.BOOL.fieldOf("shrunk").forGetter(DimensionType::shrunk), Codec.FLOAT.fieldOf("ambient_light").forGetter((var0x) -> {
+            return var0x.ambientLight;
+         })).apply(var0, (Function7)(DimensionType::new));
+      });
+      MOON_BRIGHTNESS_PER_PHASE = new float[]{1.0F, 0.75F, 0.5F, 0.25F, 0.0F, 0.25F, 0.5F, 0.75F};
+      OVERWORLD_LOCATION = ResourceKey.create(Registry.DIMENSION_TYPE_REGISTRY, new ResourceLocation("overworld"));
+      NETHER_LOCATION = ResourceKey.create(Registry.DIMENSION_TYPE_REGISTRY, new ResourceLocation("the_nether"));
+      END_LOCATION = ResourceKey.create(Registry.DIMENSION_TYPE_REGISTRY, new ResourceLocation("the_end"));
+      BUILTIN_ORDER = Sets.newLinkedHashSet(ImmutableList.of(Level.OVERWORLD, Level.NETHER, Level.END));
+      BUILTIN = ImmutableMap.of(OVERWORLD_LOCATION, makeDefaultOverworld(), NETHER_LOCATION, makeDefaultNether(), END_LOCATION, makeDefaultEnd());
+      BUILTIN_CODEC = RESOURCE_KEY_CODEC.flatXmap((var0) -> {
+         return (DataResult)Optional.ofNullable(BUILTIN.get(var0)).map(DataResult::success).orElseGet(() -> {
+            return DataResult.error("Unknown builtin dimension: " + var0);
+         });
+      }, (var0) -> {
+         return (DataResult)var0.builtinKey.map(DataResult::success).orElseGet(() -> {
+            return DataResult.error("Unknown builtin dimension: " + var0);
+         });
+      }).stable();
+      CODEC = Codec.either(BUILTIN_CODEC, DIRECT_CODEC).flatXmap((var0) -> {
+         return (DataResult)var0.map((var0x) -> {
+            return DataResult.success(var0x, Lifecycle.stable());
+         }, DataResult::success);
+      }, (var0) -> {
+         return var0.builtinKey.isPresent() ? DataResult.success(Either.left(var0), Lifecycle.stable()) : DataResult.success(Either.right(var0));
+      });
    }
 }
