--- net/minecraft/world/scores/PlayerTeam.java
+++ net/minecraft/world/scores/PlayerTeam.java
@@ -6,48 +6,54 @@
 import javax.annotation.Nullable;
 import net.minecraft.ChatFormatting;
 import net.minecraft.network.chat.Component;
 import net.minecraft.network.chat.ComponentUtils;
 import net.minecraft.network.chat.HoverEvent;
+import net.minecraft.network.chat.MutableComponent;
+import net.minecraft.network.chat.Style;
 import net.minecraft.network.chat.TextComponent;
 
 public class PlayerTeam extends Team {
    private final Scoreboard scoreboard;
    private final String name;
    private final Set<String> players = Sets.newHashSet();
    private Component displayName;
-   private Component playerPrefix = new TextComponent("");
-   private Component playerSuffix = new TextComponent("");
-   private boolean allowFriendlyFire = true;
-   private boolean seeFriendlyInvisibles = true;
+   private Component playerPrefix;
+   private Component playerSuffix;
+   private boolean allowFriendlyFire;
+   private boolean seeFriendlyInvisibles;
    private Team.Visibility nameTagVisibility;
    private Team.Visibility deathMessageVisibility;
    private ChatFormatting color;
    private Team.CollisionRule collisionRule;
+   private final Style displayNameStyle;
 
    public PlayerTeam(Scoreboard var1, String var2) {
+      this.playerPrefix = TextComponent.EMPTY;
+      this.playerSuffix = TextComponent.EMPTY;
+      this.allowFriendlyFire = true;
+      this.seeFriendlyInvisibles = true;
       this.nameTagVisibility = Team.Visibility.ALWAYS;
       this.deathMessageVisibility = Team.Visibility.ALWAYS;
       this.color = ChatFormatting.RESET;
       this.collisionRule = Team.CollisionRule.ALWAYS;
       this.scoreboard = var1;
       this.name = var2;
       this.displayName = new TextComponent(var2);
+      this.displayNameStyle = Style.EMPTY.withInsertion(var2).withHoverEvent(new HoverEvent(HoverEvent.Action.SHOW_TEXT, new TextComponent(var2)));
    }
 
    public String getName() {
       return this.name;
    }
 
    public Component getDisplayName() {
       return this.displayName;
    }
 
-   public Component getFormattedDisplayName() {
-      Component var1 = ComponentUtils.wrapInSquareBrackets(this.displayName.deepCopy().withStyle((var1x) -> {
-         var1x.setInsertion(this.name).setHoverEvent(new HoverEvent(HoverEvent.Action.SHOW_TEXT, new TextComponent(this.name)));
-      }));
+   public MutableComponent getFormattedDisplayName() {
+      MutableComponent var1 = ComponentUtils.wrapInSquareBrackets(this.displayName.copy().withStyle(this.displayNameStyle));
       ChatFormatting var2 = this.getColor();
       if (var2 != ChatFormatting.RESET) {
          var1.withStyle(var2);
       }
 
@@ -62,20 +68,20 @@
          this.scoreboard.onTeamChanged(this);
       }
    }
 
    public void setPlayerPrefix(@Nullable Component var1) {
-      this.playerPrefix = (Component)(var1 == null ? new TextComponent("") : var1.deepCopy());
+      this.playerPrefix = var1 == null ? TextComponent.EMPTY : var1;
       this.scoreboard.onTeamChanged(this);
    }
 
    public Component getPlayerPrefix() {
       return this.playerPrefix;
    }
 
    public void setPlayerSuffix(@Nullable Component var1) {
-      this.playerSuffix = (Component)(var1 == null ? new TextComponent("") : var1.deepCopy());
+      this.playerSuffix = var1 == null ? TextComponent.EMPTY : var1;
       this.scoreboard.onTeamChanged(this);
    }
 
    public Component getPlayerSuffix() {
       return this.playerSuffix;
@@ -83,22 +89,22 @@
 
    public Collection<String> getPlayers() {
       return this.players;
    }
 
-   public Component getFormattedName(Component var1) {
-      Component var2 = (new TextComponent("")).append(this.playerPrefix).append(var1).append(this.playerSuffix);
+   public MutableComponent getFormattedName(Component var1) {
+      MutableComponent var2 = (new TextComponent("")).append(this.playerPrefix).append(var1).append(this.playerSuffix);
       ChatFormatting var3 = this.getColor();
       if (var3 != ChatFormatting.RESET) {
          var2.withStyle(var3);
       }
 
       return var2;
    }
 
-   public static Component formatNameForTeam(@Nullable Team var0, Component var1) {
-      return var0 == null ? var1.deepCopy() : var0.getFormattedName(var1);
+   public static MutableComponent formatNameForTeam(@Nullable Team var0, Component var1) {
+      return var0 == null ? var1.copy() : var0.getFormattedName(var1);
    }
 
    public boolean isAllowFriendlyFire() {
       return this.allowFriendlyFire;
    }
