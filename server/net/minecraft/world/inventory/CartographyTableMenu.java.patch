--- net/minecraft/world/inventory/CartographyTableMenu.java
+++ net/minecraft/world/inventory/CartographyTableMenu.java
@@ -14,11 +14,10 @@
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.saveddata.maps.MapItemSavedData;
 
 public class CartographyTableMenu extends AbstractContainerMenu {
    private final ContainerLevelAccess access;
-   private boolean quickMoved;
    private long lastSoundTime;
    public final Container container;
    private final ResultContainer resultContainer;
 
    public CartographyTableMenu(int var1, Inventory var2) {
@@ -54,34 +53,13 @@
       this.addSlot(new Slot(this.resultContainer, 2, 145, 39) {
          public boolean mayPlace(ItemStack var1) {
             return false;
          }
 
-         public ItemStack remove(int var1) {
-            ItemStack var2 = super.remove(var1);
-            ItemStack var3x = (ItemStack)var3.evaluate((var2x, var3xx) -> {
-               if (!CartographyTableMenu.this.quickMoved && CartographyTableMenu.this.container.getItem(1).getItem() == Items.GLASS_PANE) {
-                  ItemStack var4 = MapItem.lockMap(var2x, CartographyTableMenu.this.container.getItem(0));
-                  if (var4 != null) {
-                     var4.setCount(1);
-                     return var4;
-                  }
-               }
-
-               return var2;
-            }).orElse(var2);
-            CartographyTableMenu.this.container.removeItem(0, 1);
-            CartographyTableMenu.this.container.removeItem(1, 1);
-            return var3x;
-         }
-
-         protected void onQuickCraft(ItemStack var1, int var2) {
-            this.remove(var2);
-            super.onQuickCraft(var1, var2);
-         }
-
          public ItemStack onTake(Player var1, ItemStack var2) {
+            ((Slot)CartographyTableMenu.this.slots.get(0)).remove(1);
+            ((Slot)CartographyTableMenu.this.slots.get(1)).remove(1);
             var2.getItem().onCraftedBy(var2, var1.level, var1);
             var3.execute((var1x, var2x) -> {
                long var3x = var1x.getGameTime();
                if (CartographyTableMenu.this.lastSoundTime != var3x) {
                   var1x.playSound((Player)null, (BlockPos)var2x, SoundEvents.UI_CARTOGRAPHY_TABLE_TAKE_RESULT, SoundSource.BLOCKS, 1.0F, 1.0F);
@@ -136,10 +114,11 @@
                var8.getOrCreateTag().putInt("map_scale_direction", 1);
                this.broadcastChanges();
             } else if (var6 == Items.GLASS_PANE && !var7.locked) {
                var8 = var1.copy();
                var8.setCount(1);
+               var8.getOrCreateTag().putBoolean("map_to_lock", true);
                this.broadcastChanges();
             } else {
                if (var6 != Items.MAP) {
                   this.resultContainer.removeItemNoUpdate(2);
                   this.broadcastChanges();
@@ -167,32 +146,19 @@
    public ItemStack quickMoveStack(Player var1, int var2) {
       ItemStack var3 = ItemStack.EMPTY;
       Slot var4 = (Slot)this.slots.get(var2);
       if (var4 != null && var4.hasItem()) {
          ItemStack var5 = var4.getItem();
-         ItemStack var6 = var5;
          Item var7 = var5.getItem();
          var3 = var5.copy();
          if (var2 == 2) {
-            if (this.container.getItem(1).getItem() == Items.GLASS_PANE) {
-               var6 = (ItemStack)this.access.evaluate((var2x, var3x) -> {
-                  ItemStack var4 = MapItem.lockMap(var2x, this.container.getItem(0));
-                  if (var4 != null) {
-                     var4.setCount(1);
-                     return var4;
-                  } else {
-                     return var5;
-                  }
-               }).orElse(var5);
-            }
-
-            var7.onCraftedBy(var6, var1.level, var1);
-            if (!this.moveItemStackTo(var6, 3, 39, true)) {
+            var7.onCraftedBy(var5, var1.level, var1);
+            if (!this.moveItemStackTo(var5, 3, 39, true)) {
                return ItemStack.EMPTY;
             }
 
-            var4.onQuickCraft(var6, var3);
+            var4.onQuickCraft(var5, var3);
          } else if (var2 != 1 && var2 != 0) {
             if (var7 == Items.FILLED_MAP) {
                if (!this.moveItemStackTo(var5, 0, 1, false)) {
                   return ItemStack.EMPTY;
                }
@@ -209,22 +175,20 @@
             }
          } else if (!this.moveItemStackTo(var5, 3, 39, false)) {
             return ItemStack.EMPTY;
          }
 
-         if (var6.isEmpty()) {
+         if (var5.isEmpty()) {
             var4.set(ItemStack.EMPTY);
          }
 
          var4.setChanged();
-         if (var6.getCount() == var3.getCount()) {
+         if (var5.getCount() == var3.getCount()) {
             return ItemStack.EMPTY;
          }
 
-         this.quickMoved = true;
-         var4.onTake(var1, var6);
-         this.quickMoved = false;
+         var4.onTake(var1, var5);
          this.broadcastChanges();
       }
 
       return var3;
    }
