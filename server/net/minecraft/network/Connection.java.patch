--- net/minecraft/network/Connection.java
+++ net/minecraft/network/Connection.java
@@ -81,11 +81,11 @@
       this.channel.config().setAutoRead(true);
       LOGGER.debug("Enabled auto read");
    }
 
    public void channelInactive(ChannelHandlerContext var1) throws Exception {
-      this.disconnect(new TranslatableComponent("disconnect.endOfStream", new Object[0]));
+      this.disconnect(new TranslatableComponent("disconnect.endOfStream"));
    }
 
    public void exceptionCaught(ChannelHandlerContext var1, Throwable var2) {
       if (var2 instanceof SkipPacketException) {
          LOGGER.debug("Skipping packet due to errors", var2.getCause());
@@ -93,11 +93,11 @@
          boolean var3 = !this.handlingFault;
          this.handlingFault = true;
          if (this.channel.isOpen()) {
             if (var2 instanceof TimeoutException) {
                LOGGER.debug("Timeout", var2);
-               this.disconnect(new TranslatableComponent("disconnect.timeout", new Object[0]));
+               this.disconnect(new TranslatableComponent("disconnect.timeout"));
             } else {
                TranslatableComponent var4 = new TranslatableComponent("disconnect.genericReason", new Object[]{"Internal Exception: " + var2});
                if (var3) {
                   LOGGER.debug("Failed to sent packet", var2);
                   this.send(new ClientboundDisconnectPacket(var4), (var2x) -> {
@@ -130,11 +130,10 @@
       var0.handle(var1);
    }
 
    public void setListener(PacketListener var1) {
       Validate.notNull(var1, "packetListener");
-      LOGGER.debug((String)"Set listener of {} to {}", (Object)this, (Object)var1);
       this.packetListener = var1;
    }
 
    public void send(Packet<?> var1) {
       this.send(var1, (GenericFutureListener)null);
@@ -297,11 +296,11 @@
          } else {
             this.disconnectionHandled = true;
             if (this.getDisconnectedReason() != null) {
                this.getPacketListener().onDisconnect(this.getDisconnectedReason());
             } else if (this.getPacketListener() != null) {
-               this.getPacketListener().onDisconnect(new TranslatableComponent("multiplayer.disconnect.generic", new Object[0]));
+               this.getPacketListener().onDisconnect(new TranslatableComponent("multiplayer.disconnect.generic"));
             }
          }
 
       }
    }
