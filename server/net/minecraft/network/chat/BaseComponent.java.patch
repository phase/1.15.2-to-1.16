--- net/minecraft/network/chat/BaseComponent.java
+++ net/minecraft/network/chat/BaseComponent.java
@@ -1,69 +1,58 @@
 package net.minecraft.network.chat;
 
 import com.google.common.collect.Lists;
-import com.google.common.collect.Streams;
-import java.util.Iterator;
 import java.util.List;
 import java.util.Objects;
-import java.util.stream.Stream;
 
-public abstract class BaseComponent implements Component {
+public abstract class BaseComponent implements MutableComponent {
    protected final List<Component> siblings = Lists.newArrayList();
    private Style style;
 
    public BaseComponent() {
+      this.style = Style.EMPTY;
    }
 
-   public Component append(Component var1) {
-      var1.getStyle().inheritFrom(this.getStyle());
+   public MutableComponent append(Component var1) {
       this.siblings.add(var1);
       return this;
    }
 
+   public String getContents() {
+      return "";
+   }
+
    public List<Component> getSiblings() {
       return this.siblings;
    }
 
-   public Component setStyle(Style var1) {
+   public MutableComponent setStyle(Style var1) {
       this.style = var1;
-      Iterator var2 = this.siblings.iterator();
-
-      while(var2.hasNext()) {
-         Component var3 = (Component)var2.next();
-         var3.getStyle().inheritFrom(this.getStyle());
-      }
-
       return this;
    }
 
    public Style getStyle() {
-      if (this.style == null) {
-         this.style = new Style();
-         Iterator var1 = this.siblings.iterator();
-
-         while(var1.hasNext()) {
-            Component var2 = (Component)var1.next();
-            var2.getStyle().inheritFrom(this.style);
-         }
-      }
-
       return this.style;
    }
 
-   public Stream<Component> stream() {
-      return Streams.concat(Stream.of(this), this.siblings.stream().flatMap(Component::stream));
+   public abstract BaseComponent toMutable();
+
+   public final MutableComponent mutableCopy() {
+      BaseComponent var1 = this.toMutable();
+      var1.siblings.addAll(this.siblings);
+      var1.setStyle(this.style);
+      return var1;
    }
 
    public boolean equals(Object var1) {
       if (this == var1) {
          return true;
       } else if (!(var1 instanceof BaseComponent)) {
          return false;
       } else {
          BaseComponent var2 = (BaseComponent)var1;
-         return this.siblings.equals(var2.siblings) && this.getStyle().equals(var2.getStyle());
+         return this.siblings.equals(var2.siblings) && Objects.equals(this.getStyle(), var2.getStyle());
       }
    }
 
    public int hashCode() {
       return Objects.hash(new Object[]{this.getStyle(), this.siblings});
