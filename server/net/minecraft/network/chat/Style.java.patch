--- net/minecraft/network/chat/Style.java
+++ net/minecraft/network/chat/Style.java
@@ -5,408 +5,321 @@
 import com.google.gson.JsonElement;
 import com.google.gson.JsonObject;
 import com.google.gson.JsonParseException;
 import com.google.gson.JsonSerializationContext;
 import com.google.gson.JsonSerializer;
+import com.google.gson.JsonSyntaxException;
 import java.lang.reflect.Type;
 import java.util.Objects;
 import javax.annotation.Nullable;
 import net.minecraft.ChatFormatting;
+import net.minecraft.ResourceLocationException;
+import net.minecraft.resources.ResourceLocation;
 import net.minecraft.util.GsonHelper;
 
 public class Style {
-   private Style parent;
-   private ChatFormatting color;
-   private Boolean bold;
-   private Boolean italic;
-   private Boolean underlined;
-   private Boolean strikethrough;
-   private Boolean obfuscated;
-   private ClickEvent clickEvent;
-   private HoverEvent hoverEvent;
-   private String insertion;
-   private static final Style ROOT = new Style() {
-      @Nullable
-      public ChatFormatting getColor() {
-         return null;
-      }
+   public static final ResourceLocation DEFAULT_FONT = new ResourceLocation("minecraft", "default");
+   public static final Style EMPTY = new Style((TextColor)null, (Boolean)null, (Boolean)null, (Boolean)null, (Boolean)null, (Boolean)null, (ClickEvent)null, (HoverEvent)null, (String)null, (ResourceLocation)null);
+   @Nullable
+   private final TextColor color;
+   @Nullable
+   private final Boolean bold;
+   @Nullable
+   private final Boolean italic;
+   @Nullable
+   private final Boolean underlined;
+   @Nullable
+   private final Boolean strikethrough;
+   @Nullable
+   private final Boolean obfuscated;
+   @Nullable
+   private final ClickEvent clickEvent;
+   @Nullable
+   private final HoverEvent hoverEvent;
+   @Nullable
+   private final String insertion;
+   @Nullable
+   private final ResourceLocation font;
 
-      public boolean isBold() {
-         return false;
-      }
-
-      public boolean isItalic() {
-         return false;
-      }
-
-      public boolean isStrikethrough() {
-         return false;
-      }
-
-      public boolean isUnderlined() {
-         return false;
-      }
-
-      public boolean isObfuscated() {
-         return false;
-      }
-
-      @Nullable
-      public ClickEvent getClickEvent() {
-         return null;
-      }
-
-      @Nullable
-      public HoverEvent getHoverEvent() {
-         return null;
-      }
-
-      @Nullable
-      public String getInsertion() {
-         return null;
-      }
-
-      public Style setColor(ChatFormatting var1) {
-         throw new UnsupportedOperationException();
-      }
-
-      public Style setBold(Boolean var1) {
-         throw new UnsupportedOperationException();
-      }
-
-      public Style setItalic(Boolean var1) {
-         throw new UnsupportedOperationException();
-      }
-
-      public Style setStrikethrough(Boolean var1) {
-         throw new UnsupportedOperationException();
-      }
-
-      public Style setUnderlined(Boolean var1) {
-         throw new UnsupportedOperationException();
-      }
-
-      public Style setObfuscated(Boolean var1) {
-         throw new UnsupportedOperationException();
-      }
-
-      public Style setClickEvent(ClickEvent var1) {
-         throw new UnsupportedOperationException();
-      }
-
-      public Style setHoverEvent(HoverEvent var1) {
-         throw new UnsupportedOperationException();
-      }
-
-      public Style inheritFrom(Style var1) {
-         throw new UnsupportedOperationException();
-      }
-
-      public String toString() {
-         return "Style.ROOT";
-      }
-
-      public Style copy() {
-         return this;
-      }
-
-      public Style flatCopy() {
-         return this;
-      }
-
-      public String getLegacyFormatCodes() {
-         return "";
-      }
-   };
-
-   public Style() {
+   private Style(@Nullable TextColor var1, @Nullable Boolean var2, @Nullable Boolean var3, @Nullable Boolean var4, @Nullable Boolean var5, @Nullable Boolean var6, @Nullable ClickEvent var7, @Nullable HoverEvent var8, @Nullable String var9, @Nullable ResourceLocation var10) {
+      this.color = var1;
+      this.bold = var2;
+      this.italic = var3;
+      this.underlined = var4;
+      this.strikethrough = var5;
+      this.obfuscated = var6;
+      this.clickEvent = var7;
+      this.hoverEvent = var8;
+      this.insertion = var9;
+      this.font = var10;
    }
 
    @Nullable
-   public ChatFormatting getColor() {
-      return this.color == null ? this.getParent().getColor() : this.color;
+   public TextColor getColor() {
+      return this.color;
    }
 
    public boolean isBold() {
-      return this.bold == null ? this.getParent().isBold() : this.bold;
+      return this.bold == Boolean.TRUE;
    }
 
    public boolean isItalic() {
-      return this.italic == null ? this.getParent().isItalic() : this.italic;
+      return this.italic == Boolean.TRUE;
    }
 
    public boolean isStrikethrough() {
-      return this.strikethrough == null ? this.getParent().isStrikethrough() : this.strikethrough;
+      return this.strikethrough == Boolean.TRUE;
    }
 
    public boolean isUnderlined() {
-      return this.underlined == null ? this.getParent().isUnderlined() : this.underlined;
+      return this.underlined == Boolean.TRUE;
    }
 
    public boolean isObfuscated() {
-      return this.obfuscated == null ? this.getParent().isObfuscated() : this.obfuscated;
+      return this.obfuscated == Boolean.TRUE;
    }
 
    public boolean isEmpty() {
-      return this.bold == null && this.italic == null && this.strikethrough == null && this.underlined == null && this.obfuscated == null && this.color == null && this.clickEvent == null && this.hoverEvent == null && this.insertion == null;
+      return this == EMPTY;
    }
 
    @Nullable
    public ClickEvent getClickEvent() {
-      return this.clickEvent == null ? this.getParent().getClickEvent() : this.clickEvent;
+      return this.clickEvent;
    }
 
    @Nullable
    public HoverEvent getHoverEvent() {
-      return this.hoverEvent == null ? this.getParent().getHoverEvent() : this.hoverEvent;
+      return this.hoverEvent;
    }
 
    @Nullable
    public String getInsertion() {
-      return this.insertion == null ? this.getParent().getInsertion() : this.insertion;
+      return this.insertion;
    }
 
-   public Style setColor(ChatFormatting var1) {
-      this.color = var1;
-      return this;
+   public ResourceLocation getFont() {
+      return this.font != null ? this.font : DEFAULT_FONT;
    }
 
-   public Style setBold(Boolean var1) {
-      this.bold = var1;
-      return this;
+   public Style withColor(@Nullable TextColor var1) {
+      return new Style(var1, this.bold, this.italic, this.underlined, this.strikethrough, this.obfuscated, this.clickEvent, this.hoverEvent, this.insertion, this.font);
    }
 
-   public Style setItalic(Boolean var1) {
-      this.italic = var1;
-      return this;
+   public Style withColor(@Nullable ChatFormatting var1) {
+      return this.withColor(var1 != null ? TextColor.fromLegacyFormat(var1) : null);
    }
 
-   public Style setStrikethrough(Boolean var1) {
-      this.strikethrough = var1;
-      return this;
+   public Style withBold(@Nullable Boolean var1) {
+      return new Style(this.color, var1, this.italic, this.underlined, this.strikethrough, this.obfuscated, this.clickEvent, this.hoverEvent, this.insertion, this.font);
    }
 
-   public Style setUnderlined(Boolean var1) {
-      this.underlined = var1;
-      return this;
+   public Style withItalic(@Nullable Boolean var1) {
+      return new Style(this.color, this.bold, var1, this.underlined, this.strikethrough, this.obfuscated, this.clickEvent, this.hoverEvent, this.insertion, this.font);
    }
 
-   public Style setObfuscated(Boolean var1) {
-      this.obfuscated = var1;
-      return this;
+   public Style withClickEvent(@Nullable ClickEvent var1) {
+      return new Style(this.color, this.bold, this.italic, this.underlined, this.strikethrough, this.obfuscated, var1, this.hoverEvent, this.insertion, this.font);
    }
 
-   public Style setClickEvent(ClickEvent var1) {
-      this.clickEvent = var1;
-      return this;
+   public Style withHoverEvent(@Nullable HoverEvent var1) {
+      return new Style(this.color, this.bold, this.italic, this.underlined, this.strikethrough, this.obfuscated, this.clickEvent, var1, this.insertion, this.font);
    }
 
-   public Style setHoverEvent(HoverEvent var1) {
-      this.hoverEvent = var1;
-      return this;
+   public Style withInsertion(@Nullable String var1) {
+      return new Style(this.color, this.bold, this.italic, this.underlined, this.strikethrough, this.obfuscated, this.clickEvent, this.hoverEvent, var1, this.font);
    }
 
-   public Style setInsertion(String var1) {
-      this.insertion = var1;
-      return this;
-   }
+   public Style applyFormat(ChatFormatting var1) {
+      TextColor var2 = this.color;
+      Boolean var3 = this.bold;
+      Boolean var4 = this.italic;
+      Boolean var5 = this.strikethrough;
+      Boolean var6 = this.underlined;
+      Boolean var7 = this.obfuscated;
+      switch(var1) {
+      case OBFUSCATED:
+         var7 = true;
+         break;
+      case BOLD:
+         var3 = true;
+         break;
+      case STRIKETHROUGH:
+         var5 = true;
+         break;
+      case UNDERLINE:
+         var6 = true;
+         break;
+      case ITALIC:
+         var4 = true;
+         break;
+      case RESET:
+         return EMPTY;
+      default:
+         var2 = TextColor.fromLegacyFormat(var1);
+      }
 
-   public Style inheritFrom(Style var1) {
-      this.parent = var1;
-      return this;
+      return new Style(var2, var3, var4, var6, var5, var7, this.clickEvent, this.hoverEvent, this.insertion, this.font);
    }
 
-   public String getLegacyFormatCodes() {
-      if (this.isEmpty()) {
-         return this.parent != null ? this.parent.getLegacyFormatCodes() : "";
-      } else {
-         StringBuilder var1 = new StringBuilder();
-         if (this.getColor() != null) {
-            var1.append(this.getColor());
-         }
+   public Style applyFormats(ChatFormatting... var1) {
+      TextColor var2 = this.color;
+      Boolean var3 = this.bold;
+      Boolean var4 = this.italic;
+      Boolean var5 = this.strikethrough;
+      Boolean var6 = this.underlined;
+      Boolean var7 = this.obfuscated;
+      ChatFormatting[] var8 = var1;
+      int var9 = var1.length;
 
-         if (this.isBold()) {
-            var1.append(ChatFormatting.BOLD);
+      for(int var10 = 0; var10 < var9; ++var10) {
+         ChatFormatting var11 = var8[var10];
+         switch(var11) {
+         case OBFUSCATED:
+            var7 = true;
+            break;
+         case BOLD:
+            var3 = true;
+            break;
+         case STRIKETHROUGH:
+            var5 = true;
+            break;
+         case UNDERLINE:
+            var6 = true;
+            break;
+         case ITALIC:
+            var4 = true;
+            break;
+         case RESET:
+            return EMPTY;
+         default:
+            var2 = TextColor.fromLegacyFormat(var11);
          }
+      }
 
-         if (this.isItalic()) {
-            var1.append(ChatFormatting.ITALIC);
-         }
+      return new Style(var2, var3, var4, var6, var5, var7, this.clickEvent, this.hoverEvent, this.insertion, this.font);
+   }
 
-         if (this.isUnderlined()) {
-            var1.append(ChatFormatting.UNDERLINE);
-         }
-
-         if (this.isObfuscated()) {
-            var1.append(ChatFormatting.OBFUSCATED);
-         }
-
-         if (this.isStrikethrough()) {
-            var1.append(ChatFormatting.STRIKETHROUGH);
-         }
-
-         return var1.toString();
+   public Style applyTo(Style var1) {
+      if (this == EMPTY) {
+         return var1;
+      } else {
+         return var1 == EMPTY ? this : new Style(this.color != null ? this.color : var1.color, this.bold != null ? this.bold : var1.bold, this.italic != null ? this.italic : var1.italic, this.underlined != null ? this.underlined : var1.underlined, this.strikethrough != null ? this.strikethrough : var1.strikethrough, this.obfuscated != null ? this.obfuscated : var1.obfuscated, this.clickEvent != null ? this.clickEvent : var1.clickEvent, this.hoverEvent != null ? this.hoverEvent : var1.hoverEvent, this.insertion != null ? this.insertion : var1.insertion, this.font != null ? this.font : var1.font);
       }
    }
 
-   private Style getParent() {
-      return this.parent == null ? ROOT : this.parent;
-   }
-
    public String toString() {
-      return "Style{hasParent=" + (this.parent != null) + ", color=" + this.color + ", bold=" + this.bold + ", italic=" + this.italic + ", underlined=" + this.underlined + ", obfuscated=" + this.obfuscated + ", clickEvent=" + this.getClickEvent() + ", hoverEvent=" + this.getHoverEvent() + ", insertion=" + this.getInsertion() + '}';
+      return "Style{ color=" + this.color + ", bold=" + this.bold + ", italic=" + this.italic + ", underlined=" + this.underlined + ", strikethrough=" + this.strikethrough + ", obfuscated=" + this.obfuscated + ", clickEvent=" + this.getClickEvent() + ", hoverEvent=" + this.getHoverEvent() + ", insertion=" + this.getInsertion() + ", font=" + this.getFont() + '}';
    }
 
    public boolean equals(Object var1) {
       if (this == var1) {
          return true;
       } else if (!(var1 instanceof Style)) {
          return false;
       } else {
-         boolean var10000;
-         label77: {
-            Style var2 = (Style)var1;
-            if (this.isBold() == var2.isBold() && this.getColor() == var2.getColor() && this.isItalic() == var2.isItalic() && this.isObfuscated() == var2.isObfuscated() && this.isStrikethrough() == var2.isStrikethrough() && this.isUnderlined() == var2.isUnderlined()) {
-               label71: {
-                  if (this.getClickEvent() != null) {
-                     if (!this.getClickEvent().equals(var2.getClickEvent())) {
-                        break label71;
-                     }
-                  } else if (var2.getClickEvent() != null) {
-                     break label71;
-                  }
-
-                  if (this.getHoverEvent() != null) {
-                     if (!this.getHoverEvent().equals(var2.getHoverEvent())) {
-                        break label71;
-                     }
-                  } else if (var2.getHoverEvent() != null) {
-                     break label71;
-                  }
-
-                  if (this.getInsertion() != null) {
-                     if (this.getInsertion().equals(var2.getInsertion())) {
-                        break label77;
-                     }
-                  } else if (var2.getInsertion() == null) {
-                     break label77;
-                  }
-               }
-            }
-
-            var10000 = false;
-            return var10000;
-         }
-
-         var10000 = true;
-         return var10000;
+         Style var2 = (Style)var1;
+         return this.isBold() == var2.isBold() && Objects.equals(this.getColor(), var2.getColor()) && this.isItalic() == var2.isItalic() && this.isObfuscated() == var2.isObfuscated() && this.isStrikethrough() == var2.isStrikethrough() && this.isUnderlined() == var2.isUnderlined() && Objects.equals(this.getClickEvent(), var2.getClickEvent()) && Objects.equals(this.getHoverEvent(), var2.getHoverEvent()) && Objects.equals(this.getInsertion(), var2.getInsertion()) && Objects.equals(this.getFont(), var2.getFont());
       }
    }
 
    public int hashCode() {
       return Objects.hash(new Object[]{this.color, this.bold, this.italic, this.underlined, this.strikethrough, this.obfuscated, this.clickEvent, this.hoverEvent, this.insertion});
    }
 
-   public Style copy() {
-      Style var1 = new Style();
-      var1.bold = this.bold;
-      var1.italic = this.italic;
-      var1.strikethrough = this.strikethrough;
-      var1.underlined = this.underlined;
-      var1.obfuscated = this.obfuscated;
-      var1.color = this.color;
-      var1.clickEvent = this.clickEvent;
-      var1.hoverEvent = this.hoverEvent;
-      var1.parent = this.parent;
-      var1.insertion = this.insertion;
-      return var1;
-   }
-
-   public Style flatCopy() {
-      Style var1 = new Style();
-      var1.setBold(this.isBold());
-      var1.setItalic(this.isItalic());
-      var1.setStrikethrough(this.isStrikethrough());
-      var1.setUnderlined(this.isUnderlined());
-      var1.setObfuscated(this.isObfuscated());
-      var1.setColor(this.getColor());
-      var1.setClickEvent(this.getClickEvent());
-      var1.setHoverEvent(this.getHoverEvent());
-      var1.setInsertion(this.getInsertion());
-      return var1;
-   }
-
    public static class Serializer implements JsonDeserializer<Style>, JsonSerializer<Style> {
       public Serializer() {
       }
 
       @Nullable
       public Style deserialize(JsonElement var1, Type var2, JsonDeserializationContext var3) throws JsonParseException {
          if (var1.isJsonObject()) {
-            Style var4 = new Style();
-            JsonObject var5 = var1.getAsJsonObject();
-            if (var5 == null) {
+            JsonObject var4 = var1.getAsJsonObject();
+            if (var4 == null) {
                return null;
             } else {
-               if (var5.has("bold")) {
-                  var4.bold = var5.get("bold").getAsBoolean();
-               }
+               Boolean var5 = getOptionalFlag(var4, "bold");
+               Boolean var6 = getOptionalFlag(var4, "italic");
+               Boolean var7 = getOptionalFlag(var4, "underlined");
+               Boolean var8 = getOptionalFlag(var4, "strikethrough");
+               Boolean var9 = getOptionalFlag(var4, "obfuscated");
+               TextColor var10 = getTextColor(var4);
+               String var11 = getInsertion(var4);
+               ClickEvent var12 = getClickEvent(var4);
+               HoverEvent var13 = getHoverEvent(var4);
+               ResourceLocation var14 = getFont(var4);
+               return new Style(var10, var5, var6, var7, var8, var9, var12, var13, var11, var14);
+            }
+         } else {
+            return null;
+         }
+      }
 
-               if (var5.has("italic")) {
-                  var4.italic = var5.get("italic").getAsBoolean();
-               }
+      @Nullable
+      private static ResourceLocation getFont(JsonObject var0) {
+         if (var0.has("font")) {
+            String var1 = GsonHelper.getAsString(var0, "font");
 
-               if (var5.has("underlined")) {
-                  var4.underlined = var5.get("underlined").getAsBoolean();
-               }
+            try {
+               return new ResourceLocation(var1);
+            } catch (ResourceLocationException var3) {
+               throw new JsonSyntaxException("Invalid font name: " + var1);
+            }
+         } else {
+            return null;
+         }
+      }
 
-               if (var5.has("strikethrough")) {
-                  var4.strikethrough = var5.get("strikethrough").getAsBoolean();
-               }
+      @Nullable
+      private static HoverEvent getHoverEvent(JsonObject var0) {
+         if (var0.has("hoverEvent")) {
+            JsonObject var1 = GsonHelper.getAsJsonObject(var0, "hoverEvent");
+            HoverEvent var2 = HoverEvent.deserialize(var1);
+            if (var2 != null && var2.getAction().isAllowedFromServer()) {
+               return var2;
+            }
+         }
 
-               if (var5.has("obfuscated")) {
-                  var4.obfuscated = var5.get("obfuscated").getAsBoolean();
-               }
+         return null;
+      }
 
-               if (var5.has("color")) {
-                  var4.color = (ChatFormatting)var3.deserialize(var5.get("color"), ChatFormatting.class);
-               }
+      @Nullable
+      private static ClickEvent getClickEvent(JsonObject var0) {
+         if (var0.has("clickEvent")) {
+            JsonObject var1 = GsonHelper.getAsJsonObject(var0, "clickEvent");
+            String var2 = GsonHelper.getAsString(var1, "action", (String)null);
+            ClickEvent.Action var3 = var2 == null ? null : ClickEvent.Action.getByName(var2);
+            String var4 = GsonHelper.getAsString(var1, "value", (String)null);
+            if (var3 != null && var4 != null && var3.isAllowedFromServer()) {
+               return new ClickEvent(var3, var4);
+            }
+         }
 
-               if (var5.has("insertion")) {
-                  var4.insertion = var5.get("insertion").getAsString();
-               }
+         return null;
+      }
 
-               JsonObject var6;
-               String var7;
-               if (var5.has("clickEvent")) {
-                  var6 = GsonHelper.getAsJsonObject(var5, "clickEvent");
-                  var7 = GsonHelper.getAsString(var6, "action", (String)null);
-                  ClickEvent.Action var8 = var7 == null ? null : ClickEvent.Action.getByName(var7);
-                  String var9 = GsonHelper.getAsString(var6, "value", (String)null);
-                  if (var8 != null && var9 != null && var8.isAllowedFromServer()) {
-                     var4.clickEvent = new ClickEvent(var8, var9);
-                  }
-               }
+      @Nullable
+      private static String getInsertion(JsonObject var0) {
+         return GsonHelper.getAsString(var0, "insertion", (String)null);
+      }
 
-               if (var5.has("hoverEvent")) {
-                  var6 = GsonHelper.getAsJsonObject(var5, "hoverEvent");
-                  var7 = GsonHelper.getAsString(var6, "action", (String)null);
-                  HoverEvent.Action var10 = var7 == null ? null : HoverEvent.Action.getByName(var7);
-                  Component var11 = (Component)var3.deserialize(var6.get("value"), Component.class);
-                  if (var10 != null && var11 != null && var10.isAllowedFromServer()) {
-                     var4.hoverEvent = new HoverEvent(var10, var11);
-                  }
-               }
-
-               return var4;
-            }
+      @Nullable
+      private static TextColor getTextColor(JsonObject var0) {
+         if (var0.has("color")) {
+            String var1 = GsonHelper.getAsString(var0, "color");
+            return TextColor.parseColor(var1);
          } else {
             return null;
          }
       }
 
       @Nullable
+      private static Boolean getOptionalFlag(JsonObject var0, String var1) {
+         return var0.has(var1) ? var0.get(var1).getAsBoolean() : null;
+      }
+
+      @Nullable
       public JsonElement serialize(Style var1, Type var2, JsonSerializationContext var3) {
          if (var1.isEmpty()) {
             return null;
          } else {
             JsonObject var4 = new JsonObject();
@@ -429,32 +342,32 @@
             if (var1.obfuscated != null) {
                var4.addProperty("obfuscated", var1.obfuscated);
             }
 
             if (var1.color != null) {
-               var4.add("color", var3.serialize(var1.color));
+               var4.addProperty("color", var1.color.serialize());
             }
 
             if (var1.insertion != null) {
                var4.add("insertion", var3.serialize(var1.insertion));
             }
 
-            JsonObject var5;
             if (var1.clickEvent != null) {
-               var5 = new JsonObject();
+               JsonObject var5 = new JsonObject();
                var5.addProperty("action", var1.clickEvent.getAction().getName());
                var5.addProperty("value", var1.clickEvent.getValue());
                var4.add("clickEvent", var5);
             }
 
             if (var1.hoverEvent != null) {
-               var5 = new JsonObject();
-               var5.addProperty("action", var1.hoverEvent.getAction().getName());
-               var5.add("value", var3.serialize(var1.hoverEvent.getValue()));
-               var4.add("hoverEvent", var5);
+               var4.add("hoverEvent", var1.hoverEvent.serialize());
             }
 
+            if (var1.font != null) {
+               var4.addProperty("font", var1.font.toString());
+            }
+
             return var4;
          }
       }
    }
 }
