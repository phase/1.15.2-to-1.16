--- net/minecraft/util/datafix/fixes/EntityRedundantChanceTagsFix.java
+++ net/minecraft/util/datafix/fixes/EntityRedundantChanceTagsFix.java
@@ -1,37 +1,47 @@
 package net.minecraft.util.datafix.fixes;
 
 import com.mojang.datafixers.DSL;
 import com.mojang.datafixers.DataFix;
-import com.mojang.datafixers.Dynamic;
 import com.mojang.datafixers.TypeRewriteRule;
 import com.mojang.datafixers.schemas.Schema;
-import java.util.Objects;
-import java.util.Optional;
-import java.util.stream.Stream;
+import com.mojang.serialization.Codec;
+import com.mojang.serialization.OptionalDynamic;
+import java.util.List;
 
 public class EntityRedundantChanceTagsFix extends DataFix {
+   private static final Codec<List<Float>> FLOAT_LIST_CODEC;
+
    public EntityRedundantChanceTagsFix(Schema var1, boolean var2) {
       super(var1, var2);
    }
 
    public TypeRewriteRule makeRule() {
       return this.fixTypeEverywhereTyped("EntityRedundantChanceTagsFix", this.getInputSchema().getType(References.ENTITY), (var0) -> {
          return var0.update(DSL.remainderFinder(), (var0x) -> {
-            Dynamic var1 = var0x;
-            if (Objects.equals(var0x.get("HandDropChances"), Optional.of(var0x.createList(Stream.generate(() -> {
-               return var0x.createFloat(0.0F);
-            }).limit(2L))))) {
+            if (isZeroList(var0x.get("HandDropChances"), 2)) {
                var0x = var0x.remove("HandDropChances");
             }
 
-            if (Objects.equals(var0x.get("ArmorDropChances"), Optional.of(var0x.createList(Stream.generate(() -> {
-               return var1.createFloat(0.0F);
-            }).limit(4L))))) {
+            if (isZeroList(var0x.get("ArmorDropChances"), 4)) {
                var0x = var0x.remove("ArmorDropChances");
             }
 
             return var0x;
          });
       });
    }
+
+   private static boolean isZeroList(OptionalDynamic<?> var0, int var1) {
+      Codec var10001 = FLOAT_LIST_CODEC;
+      var10001.getClass();
+      return (Boolean)var0.flatMap(var10001::parse).map((var1x) -> {
+         return var1x.size() == var1 && var1x.stream().allMatch((var0) -> {
+            return var0 == 0.0F;
+         });
+      }).result().orElse(false);
+   }
+
+   static {
+      FLOAT_LIST_CODEC = Codec.FLOAT.listOf();
+   }
 }
