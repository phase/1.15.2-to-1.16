--- net/minecraft/util/datafix/fixes/LeavesFix.java
+++ net/minecraft/util/datafix/fixes/LeavesFix.java
@@ -4,18 +4,18 @@
 import com.google.common.collect.ImmutableSet;
 import com.google.common.collect.Lists;
 import com.mojang.datafixers.DSL;
 import com.mojang.datafixers.DataFix;
 import com.mojang.datafixers.DataFixUtils;
-import com.mojang.datafixers.Dynamic;
 import com.mojang.datafixers.OpticFinder;
 import com.mojang.datafixers.TypeRewriteRule;
 import com.mojang.datafixers.Typed;
 import com.mojang.datafixers.schemas.Schema;
 import com.mojang.datafixers.types.Type;
 import com.mojang.datafixers.types.templates.List;
 import com.mojang.datafixers.util.Pair;
+import com.mojang.serialization.Dynamic;
 import it.unimi.dsi.fastutil.ints.Int2IntMap;
 import it.unimi.dsi.fastutil.ints.Int2IntOpenHashMap;
 import it.unimi.dsi.fastutil.ints.Int2ObjectOpenHashMap;
 import it.unimi.dsi.fastutil.ints.IntIterator;
 import it.unimi.dsi.fastutil.ints.IntOpenHashSet;
@@ -28,13 +28,12 @@
 import java.util.Map;
 import java.util.Objects;
 import java.util.Optional;
 import java.util.Set;
 import java.util.stream.Collectors;
-import java.util.stream.LongStream;
 import javax.annotation.Nullable;
-import net.minecraft.util.BitStorage;
+import net.minecraft.util.datafix.PackedBitStorage;
 
 public class LeavesFix extends DataFix {
    private static final int[][] DIRECTIONS = new int[][]{{-1, 0, 0}, {1, 0, 0}, {0, -1, 0}, {0, 1, 0}, {0, 0, -1}, {0, 0, 1}};
    private static final Object2IntMap<String> LEAVES = (Object2IntMap)DataFixUtils.make(new Object2IntOpenHashMap(), (var0) -> {
       var0.put("minecraft:acacia_leaves", 0);
@@ -144,11 +143,11 @@
                      }
                   }
                });
                if (var4[0] != 0) {
                   var5 = var5.update(DSL.remainderFinder(), (var1) -> {
-                     Dynamic var2 = (Dynamic)DataFixUtils.orElse(var1.get("UpgradeData").get(), var1.emptyMap());
+                     Dynamic var2 = (Dynamic)DataFixUtils.orElse(var1.get("UpgradeData").result(), var1.emptyMap());
                      return var1.set("UpgradeData", var2.set("Sides", var1.createByte((byte)(var2.get("Sides").asByte((byte)0) | var4[0]))));
                   });
                }
 
                return var5;
@@ -270,11 +269,11 @@
             this.palette.add(this.makeLeafTag(var4, var5, var6, var3));
          }
 
          var8 = this.stateToIdMap.get(var7);
          if (1 << this.storage.getBits() <= var8) {
-            BitStorage var9 = new BitStorage(this.storage.getBits() + 1, 4096);
+            PackedBitStorage var9 = new PackedBitStorage(this.storage.getBits() + 1, 4096);
 
             for(int var10 = 0; var10 < 4096; ++var10) {
                var9.set(var10, this.storage.get(var10));
             }
 
@@ -289,11 +288,11 @@
       private final Type<Pair<String, Dynamic<?>>> blockStateType;
       protected final OpticFinder<java.util.List<Pair<String, Dynamic<?>>>> paletteFinder;
       protected final java.util.List<Dynamic<?>> palette;
       protected final int index;
       @Nullable
-      protected BitStorage storage;
+      protected PackedBitStorage storage;
 
       public Section(Typed<?> var1, Schema var2) {
          this.blockStateType = DSL.named(References.BLOCK_STATE.typeName(), DSL.remainderType());
          this.paletteFinder = DSL.fieldFinder("Palette", DSL.list(this.blockStateType));
          if (!Objects.equals(var2.getType(References.BLOCK_STATE), this.blockStateType)) {
@@ -311,13 +310,13 @@
 
       protected void readStorage(Dynamic<?> var1) {
          if (this.skippable()) {
             this.storage = null;
          } else {
-            long[] var2 = ((LongStream)var1.get("BlockStates").asLongStreamOpt().get()).toArray();
+            long[] var2 = var1.get("BlockStates").asLongStream().toArray();
             int var3 = Math.max(4, DataFixUtils.ceillog2(this.palette.size()));
-            this.storage = new BitStorage(var3, 4096, var2);
+            this.storage = new PackedBitStorage(var3, 4096, var2);
          }
 
       }
 
       public Typed<?> write(Typed<?> var1) {
