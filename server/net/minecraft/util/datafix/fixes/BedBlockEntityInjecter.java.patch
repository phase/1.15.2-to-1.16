--- net/minecraft/util/datafix/fixes/BedBlockEntityInjecter.java
+++ net/minecraft/util/datafix/fixes/BedBlockEntityInjecter.java
@@ -2,21 +2,21 @@
 
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.mojang.datafixers.DSL;
 import com.mojang.datafixers.DataFix;
-import com.mojang.datafixers.Dynamic;
 import com.mojang.datafixers.OpticFinder;
 import com.mojang.datafixers.TypeRewriteRule;
 import com.mojang.datafixers.Typed;
 import com.mojang.datafixers.schemas.Schema;
 import com.mojang.datafixers.types.Type;
 import com.mojang.datafixers.types.templates.List;
+import com.mojang.datafixers.util.Pair;
+import com.mojang.serialization.Dynamic;
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.Iterator;
-import java.util.Optional;
 import java.util.function.Function;
 import java.util.stream.Stream;
 
 public class BedBlockEntityInjecter extends DataFix {
    public BedBlockEntityInjecter(Schema var1, boolean var2) {
@@ -71,13 +71,13 @@
                   var20.put(var11.createString("id"), var11.createString("minecraft:bed"));
                   var20.put(var11.createString("x"), var11.createInt(var17 + (var6 << 4)));
                   var20.put(var11.createString("y"), var11.createInt(var18 + (var12 << 4)));
                   var20.put(var11.createString("z"), var11.createInt(var19 + (var7 << 4)));
                   var20.put(var11.createString("color"), var11.createShort((short)14));
-                  var8.add(((Optional)var3.read(var11.createMap(var20)).getSecond()).orElseThrow(() -> {
+                  var8.add(((Pair)var3.read(var11.createMap(var20)).result().orElseThrow(() -> {
                      return new IllegalStateException("Could not parse newly created bed block entity.");
-                  }));
+                  })).getFirst());
                }
             }
          }
 
          if (!var8.isEmpty()) {
