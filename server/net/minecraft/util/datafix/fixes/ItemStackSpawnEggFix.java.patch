--- net/minecraft/util/datafix/fixes/ItemStackSpawnEggFix.java
+++ net/minecraft/util/datafix/fixes/ItemStackSpawnEggFix.java
@@ -11,10 +11,11 @@
 import com.mojang.datafixers.types.Type;
 import com.mojang.datafixers.util.Pair;
 import java.util.Map;
 import java.util.Objects;
 import java.util.Optional;
+import net.minecraft.util.datafix.schemas.NamespacedSchema;
 
 public class ItemStackSpawnEggFix extends DataFix {
    private static final Map<String, String> MAP = (Map)DataFixUtils.make(Maps.newHashMap(), (var0) -> {
       var0.put("minecraft:bat", "minecraft:bat_spawn_egg");
       var0.put("minecraft:blaze", "minecraft:blaze_spawn_egg");
@@ -67,12 +68,12 @@
       super(var1, var2);
    }
 
    public TypeRewriteRule makeRule() {
       Type var1 = this.getInputSchema().getType(References.ITEM_STACK);
-      OpticFinder var2 = DSL.fieldFinder("id", DSL.named(References.ITEM_NAME.typeName(), DSL.namespacedString()));
-      OpticFinder var3 = DSL.fieldFinder("id", DSL.namespacedString());
+      OpticFinder var2 = DSL.fieldFinder("id", DSL.named(References.ITEM_NAME.typeName(), NamespacedSchema.namespacedString()));
+      OpticFinder var3 = DSL.fieldFinder("id", NamespacedSchema.namespacedString());
       OpticFinder var4 = var1.findField("tag");
       OpticFinder var5 = var4.type().findField("EntityTag");
       return this.fixTypeEverywhereTyped("ItemInstanceSpawnEggFix", var1, (var4x) -> {
          Optional var5x = var4x.getOptional(var2);
          if (var5x.isPresent() && Objects.equals(((Pair)var5x.get()).getSecond(), "minecraft:spawn_egg")) {
