--- net/minecraft/util/datafix/fixes/SavedDataVillageCropFix.java
+++ net/minecraft/util/datafix/fixes/SavedDataVillageCropFix.java
@@ -1,12 +1,12 @@
 package net.minecraft.util.datafix.fixes;
 
 import com.mojang.datafixers.DataFix;
-import com.mojang.datafixers.Dynamic;
 import com.mojang.datafixers.TypeRewriteRule;
 import com.mojang.datafixers.schemas.Schema;
-import java.util.Optional;
+import com.mojang.serialization.DataResult;
+import com.mojang.serialization.Dynamic;
 import java.util.stream.Stream;
 
 public class SavedDataVillageCropFix extends DataFix {
    public SavedDataVillageCropFix(Schema var1, boolean var2) {
       super(var1, var2);
@@ -19,13 +19,13 @@
    private <T> Dynamic<T> fixTag(Dynamic<T> var1) {
       return var1.update("Children", SavedDataVillageCropFix::updateChildren);
    }
 
    private static <T> Dynamic<T> updateChildren(Dynamic<T> var0) {
-      Optional var10000 = var0.asStreamOpt().map(SavedDataVillageCropFix::updateChildren);
+      DataResult var10000 = var0.asStreamOpt().map(SavedDataVillageCropFix::updateChildren);
       var0.getClass();
-      return (Dynamic)var10000.map(var0::createList).orElse(var0);
+      return (Dynamic)var10000.map(var0::createList).result().orElse(var0);
    }
 
    private static Stream<? extends Dynamic<?>> updateChildren(Stream<? extends Dynamic<?>> var0) {
       return var0.map((var0x) -> {
          String var1 = var0x.get("id").asString("");
@@ -48,8 +48,8 @@
       var0 = updateCrop(var0, "CC");
       return updateCrop(var0, "CD");
    }
 
    private static <T> Dynamic<T> updateCrop(Dynamic<T> var0, String var1) {
-      return var0.get(var1).asNumber().isPresent() ? var0.set(var1, BlockStateData.getTag(var0.get(var1).asInt(0) << 4)) : var0;
+      return var0.get(var1).asNumber().result().isPresent() ? var0.set(var1, BlockStateData.getTag(var0.get(var1).asInt(0) << 4)) : var0;
    }
 }
