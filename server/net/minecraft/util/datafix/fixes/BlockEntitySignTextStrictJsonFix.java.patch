--- net/minecraft/util/datafix/fixes/BlockEntitySignTextStrictJsonFix.java
+++ net/minecraft/util/datafix/fixes/BlockEntitySignTextStrictJsonFix.java
@@ -6,37 +6,38 @@
 import com.google.gson.JsonDeserializationContext;
 import com.google.gson.JsonDeserializer;
 import com.google.gson.JsonElement;
 import com.google.gson.JsonParseException;
 import com.mojang.datafixers.DSL;
-import com.mojang.datafixers.Dynamic;
 import com.mojang.datafixers.Typed;
 import com.mojang.datafixers.schemas.Schema;
+import com.mojang.serialization.Dynamic;
 import java.lang.reflect.Type;
 import java.util.Iterator;
 import net.minecraft.network.chat.Component;
+import net.minecraft.network.chat.MutableComponent;
 import net.minecraft.network.chat.TextComponent;
 import net.minecraft.util.GsonHelper;
 import org.apache.commons.lang3.StringUtils;
 
 public class BlockEntitySignTextStrictJsonFix extends NamedEntityFix {
    public static final Gson GSON = (new GsonBuilder()).registerTypeAdapter(Component.class, new JsonDeserializer<Component>() {
-      public Component deserialize(JsonElement var1, Type var2, JsonDeserializationContext var3) throws JsonParseException {
+      public MutableComponent deserialize(JsonElement var1, Type var2, JsonDeserializationContext var3) throws JsonParseException {
          if (var1.isJsonPrimitive()) {
             return new TextComponent(var1.getAsString());
          } else if (var1.isJsonArray()) {
             JsonArray var4 = var1.getAsJsonArray();
-            Component var5 = null;
+            MutableComponent var5 = null;
             Iterator var6 = var4.iterator();
 
             while(var6.hasNext()) {
                JsonElement var7 = (JsonElement)var6.next();
-               Component var8 = this.deserialize(var7, var7.getClass(), var3);
+               MutableComponent var8 = this.deserialize(var7, var7.getClass(), var3);
                if (var5 == null) {
                   var5 = var8;
                } else {
-                  var5.append(var8);
+                  var5.append((Component)var8);
                }
             }
 
             return var5;
          } else {
@@ -55,11 +56,11 @@
       if (!"null".equals(var3) && !StringUtils.isEmpty(var3)) {
          if (var3.charAt(0) == '"' && var3.charAt(var3.length() - 1) == '"' || var3.charAt(0) == '{' && var3.charAt(var3.length() - 1) == '}') {
             try {
                var4 = (Component)GsonHelper.fromJson(GSON, var3, Component.class, true);
                if (var4 == null) {
-                  var4 = new TextComponent("");
+                  var4 = TextComponent.EMPTY;
                }
             } catch (JsonParseException var8) {
             }
 
             if (var4 == null) {
@@ -81,11 +82,11 @@
             }
          } else {
             var4 = new TextComponent(var3);
          }
       } else {
-         var4 = new TextComponent("");
+         var4 = TextComponent.EMPTY;
       }
 
       return var1.set(var2, var1.createString(Component.Serializer.toJson((Component)var4)));
    }
 
