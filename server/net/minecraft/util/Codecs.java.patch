--- net/minecraft/util/Codecs.java
+++ net/minecraft/util/Codecs.java
@@ -1,0 +1,102 @@
+package net.minecraft.util;
+
+import com.mojang.datafixers.util.Pair;
+import com.mojang.serialization.Codec;
+import com.mojang.serialization.DataResult;
+import com.mojang.serialization.DynamicOps;
+import com.mojang.serialization.MapCodec;
+import com.mojang.serialization.MapLike;
+import com.mojang.serialization.RecordBuilder;
+import java.util.function.Consumer;
+import java.util.function.Function;
+import java.util.function.Supplier;
+import java.util.stream.Stream;
+import net.minecraft.core.Registry;
+import net.minecraft.resources.ResourceKey;
+import net.minecraft.resources.ResourceLocation;
+
+public class Codecs {
+   private static Function<Integer, DataResult<Integer>> checkRange(int var0, int var1) {
+      return (var2) -> {
+         return var2 >= var0 && var2 <= var1 ? DataResult.success(var2) : DataResult.error("Value " + var2 + " outside of range [" + var0 + ":" + var1 + "]", (Object)var2);
+      };
+   }
+
+   public static Codec<Integer> intRange(int var0, int var1) {
+      Function var2 = checkRange(var0, var1);
+      return Codec.INT.flatXmap(var2, var2);
+   }
+
+   private static Function<Double, DataResult<Double>> checkRange(double var0, double var2) {
+      return (var4) -> {
+         return var4 >= var0 && var4 <= var2 ? DataResult.success(var4) : DataResult.error("Value " + var4 + " outside of range [" + var0 + ":" + var2 + "]", (Object)var4);
+      };
+   }
+
+   public static Codec<Double> doubleRange(double var0, double var2) {
+      Function var4 = checkRange(var0, var2);
+      return Codec.DOUBLE.flatXmap(var4, var4);
+   }
+
+   public static <T> MapCodec<Pair<ResourceKey<T>, T>> withName(ResourceKey<Registry<T>> var0, MapCodec<T> var1) {
+      return Codec.mapPair(ResourceLocation.CODEC.xmap(ResourceKey.elementKey(var0), ResourceKey::location).fieldOf("name"), var1);
+   }
+
+   private static <A> MapCodec<A> mapResult(final MapCodec<A> var0, final Codecs.ResultFunction<A> var1) {
+      return new MapCodec<A>() {
+         public <T> Stream<T> keys(DynamicOps<T> var1x) {
+            return var0.keys(var1x);
+         }
+
+         public <T> RecordBuilder<T> encode(A var1x, DynamicOps<T> var2, RecordBuilder<T> var3) {
+            return var1.coApply(var2, var1x, var0.encode(var1x, var2, var3));
+         }
+
+         public <T> DataResult<A> decode(DynamicOps<T> var1x, MapLike<T> var2) {
+            return var1.apply(var1x, var2, var0.decode(var1x, var2));
+         }
+
+         public String toString() {
+            return var0 + "[mapResult " + var1 + "]";
+         }
+      };
+   }
+
+   public static <A> MapCodec<A> withDefault(MapCodec<A> var0, final Consumer<String> var1, final Supplier<? extends A> var2) {
+      return mapResult(var0, new Codecs.ResultFunction<A>() {
+         public <T> DataResult<A> apply(DynamicOps<T> var1x, MapLike<T> var2x, DataResult<A> var3) {
+            return DataResult.success(var3.resultOrPartial(var1).orElseGet(var2));
+         }
+
+         public <T> RecordBuilder<T> coApply(DynamicOps<T> var1x, A var2x, RecordBuilder<T> var3) {
+            return var3;
+         }
+
+         public String toString() {
+            return "WithDefault[" + var2.get() + "]";
+         }
+      });
+   }
+
+   public static <A> MapCodec<A> setPartial(MapCodec<A> var0, final Supplier<A> var1) {
+      return mapResult(var0, new Codecs.ResultFunction<A>() {
+         public <T> DataResult<A> apply(DynamicOps<T> var1x, MapLike<T> var2, DataResult<A> var3) {
+            return var3.setPartial(var1);
+         }
+
+         public <T> RecordBuilder<T> coApply(DynamicOps<T> var1x, A var2, RecordBuilder<T> var3) {
+            return var3;
+         }
+
+         public String toString() {
+            return "SetPartial[" + var1 + "]";
+         }
+      });
+   }
+
+   interface ResultFunction<A> {
+      <T> DataResult<A> apply(DynamicOps<T> var1, MapLike<T> var2, DataResult<A> var3);
+
+      <T> RecordBuilder<T> coApply(DynamicOps<T> var1, A var2, RecordBuilder<T> var3);
+   }
+}
