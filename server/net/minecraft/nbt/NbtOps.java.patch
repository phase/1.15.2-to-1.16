--- net/minecraft/nbt/NbtOps.java
+++ net/minecraft/nbt/NbtOps.java
@@ -1,27 +1,30 @@
 package net.minecraft.nbt;
 
 import com.google.common.collect.Iterators;
 import com.google.common.collect.Lists;
+import com.google.common.collect.Maps;
 import com.google.common.collect.PeekingIterator;
-import com.mojang.datafixers.DSL;
 import com.mojang.datafixers.DataFixUtils;
-import com.mojang.datafixers.types.DynamicOps;
-import com.mojang.datafixers.types.Type;
 import com.mojang.datafixers.util.Pair;
+import com.mojang.serialization.DataResult;
+import com.mojang.serialization.DynamicOps;
+import com.mojang.serialization.MapLike;
+import com.mojang.serialization.RecordBuilder;
 import java.nio.ByteBuffer;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Iterator;
-import java.util.Map;
+import java.util.List;
 import java.util.Objects;
-import java.util.Optional;
 import java.util.Map.Entry;
-import java.util.stream.Collectors;
+import java.util.function.BiConsumer;
+import java.util.function.Consumer;
 import java.util.stream.IntStream;
 import java.util.stream.LongStream;
 import java.util.stream.Stream;
+import javax.annotation.Nullable;
 
 public class NbtOps implements DynamicOps<Tag> {
    public static final NbtOps INSTANCE = new NbtOps();
 
    protected NbtOps() {
@@ -29,45 +32,45 @@
 
    public Tag empty() {
       return EndTag.INSTANCE;
    }
 
-   public Type<?> getType(Tag var1) {
-      switch(var1.getId()) {
+   public <U> U convertTo(DynamicOps<U> var1, Tag var2) {
+      switch(var2.getId()) {
       case 0:
-         return DSL.nilType();
+         return var1.empty();
       case 1:
-         return DSL.byteType();
+         return var1.createByte(((NumericTag)var2).getAsByte());
       case 2:
-         return DSL.shortType();
+         return var1.createShort(((NumericTag)var2).getAsShort());
       case 3:
-         return DSL.intType();
+         return var1.createInt(((NumericTag)var2).getAsInt());
       case 4:
-         return DSL.longType();
+         return var1.createLong(((NumericTag)var2).getAsLong());
       case 5:
-         return DSL.floatType();
+         return var1.createFloat(((NumericTag)var2).getAsFloat());
       case 6:
-         return DSL.doubleType();
+         return var1.createDouble(((NumericTag)var2).getAsDouble());
       case 7:
-         return DSL.list(DSL.byteType());
+         return var1.createByteList(ByteBuffer.wrap(((ByteArrayTag)var2).getAsByteArray()));
       case 8:
-         return DSL.string();
+         return var1.createString(var2.getAsString());
       case 9:
-         return DSL.list(DSL.remainderType());
+         return this.convertList(var1, var2);
       case 10:
-         return DSL.compoundList(DSL.remainderType(), DSL.remainderType());
+         return this.convertMap(var1, var2);
       case 11:
-         return DSL.list(DSL.intType());
+         return var1.createIntList(Arrays.stream(((IntArrayTag)var2).getAsIntArray()));
       case 12:
-         return DSL.list(DSL.longType());
+         return var1.createLongList(Arrays.stream(((LongArrayTag)var2).getAsLongArray()));
       default:
-         return DSL.remainderType();
+         throw new IllegalStateException("Unknown tag type: " + var2);
       }
    }
 
-   public Optional<Number> getNumberValue(Tag var1) {
-      return var1 instanceof NumericTag ? Optional.of(((NumericTag)var1).getAsNumber()) : Optional.empty();
+   public DataResult<Number> getNumberValue(Tag var1) {
+      return var1 instanceof NumericTag ? DataResult.success(((NumericTag)var1).getAsNumber()) : DataResult.error("Not a number");
    }
 
    public Tag createNumeric(Number var1) {
       return DoubleTag.valueOf(var1.doubleValue());
    }
@@ -98,153 +101,215 @@
 
    public Tag createBoolean(boolean var1) {
       return ByteTag.valueOf(var1);
    }
 
-   public Optional<String> getStringValue(Tag var1) {
-      return var1 instanceof StringTag ? Optional.of(var1.getAsString()) : Optional.empty();
+   public DataResult<String> getStringValue(Tag var1) {
+      return var1 instanceof StringTag ? DataResult.success(var1.getAsString()) : DataResult.error("Not a string");
    }
 
    public Tag createString(String var1) {
       return StringTag.valueOf(var1);
    }
 
-   public Tag mergeInto(Tag var1, Tag var2) {
-      if (var2 instanceof EndTag) {
-         return var1;
-      } else if (!(var1 instanceof CompoundTag)) {
-         if (var1 instanceof EndTag) {
-            throw new IllegalArgumentException("mergeInto called with a null input.");
-         } else if (var1 instanceof CollectionTag) {
-            ListTag var3 = new ListTag();
-            CollectionTag var9 = (CollectionTag)var1;
-            var3.addAll(var9);
-            var3.add(var2);
-            return var3;
-         } else {
-            return var1;
-         }
-      } else if (!(var2 instanceof CompoundTag)) {
-         return var1;
+   private static CollectionTag<?> createGenericList(byte var0, byte var1) {
+      if (typesMatch(var0, var1, (byte)4)) {
+         return new LongArrayTag(new long[0]);
+      } else if (typesMatch(var0, var1, (byte)1)) {
+         return new ByteArrayTag(new byte[0]);
       } else {
-         CompoundTag var4 = new CompoundTag();
-         CompoundTag var5 = (CompoundTag)var1;
-         Iterator var6 = var5.getAllKeys().iterator();
+         return (CollectionTag)(typesMatch(var0, var1, (byte)3) ? new IntArrayTag(new int[0]) : new ListTag());
+      }
+   }
 
-         while(var6.hasNext()) {
-            String var7 = (String)var6.next();
-            var4.put(var7, var5.get(var7));
-         }
+   private static boolean typesMatch(byte var0, byte var1, byte var2) {
+      return var0 == var2 && (var1 == var2 || var1 == 0);
+   }
 
-         CompoundTag var10 = (CompoundTag)var2;
-         Iterator var11 = var10.getAllKeys().iterator();
+   private static <T extends Tag> void fillOne(CollectionTag<T> var0, Tag var1, Tag var2) {
+      if (var1 instanceof CollectionTag) {
+         CollectionTag var3 = (CollectionTag)var1;
+         var3.forEach((var1x) -> {
+            var0.add(var1x);
+         });
+      }
 
-         while(var11.hasNext()) {
-            String var8 = (String)var11.next();
-            var4.put(var8, var10.get(var8));
-         }
+      var0.add(var2);
+   }
 
-         return var4;
+   private static <T extends Tag> void fillMany(CollectionTag<T> var0, Tag var1, List<Tag> var2) {
+      if (var1 instanceof CollectionTag) {
+         CollectionTag var3 = (CollectionTag)var1;
+         var3.forEach((var1x) -> {
+            var0.add(var1x);
+         });
       }
+
+      var2.forEach((var1x) -> {
+         var0.add(var1x);
+      });
    }
 
-   public Tag mergeInto(Tag var1, Tag var2, Tag var3) {
-      CompoundTag var4;
-      if (var1 instanceof EndTag) {
-         var4 = new CompoundTag();
+   public DataResult<Tag> mergeToList(Tag var1, Tag var2) {
+      if (!(var1 instanceof CollectionTag) && !(var1 instanceof EndTag)) {
+         return DataResult.error("mergeToList called with not a list: " + var1, (Object)var1);
       } else {
-         if (!(var1 instanceof CompoundTag)) {
-            return var1;
-         }
-
-         CompoundTag var5 = (CompoundTag)var1;
-         var4 = new CompoundTag();
-         var5.getAllKeys().forEach((var2x) -> {
-            var4.put(var2x, var5.get(var2x));
-         });
+         CollectionTag var3 = createGenericList(var1 instanceof CollectionTag ? ((CollectionTag)var1).getElementType() : 0, var2.getId());
+         fillOne(var3, var1, var2);
+         return DataResult.success(var3);
       }
+   }
 
-      var4.put(var2.getAsString(), var3);
-      return var4;
+   public DataResult<Tag> mergeToList(Tag var1, List<Tag> var2) {
+      if (!(var1 instanceof CollectionTag) && !(var1 instanceof EndTag)) {
+         return DataResult.error("mergeToList called with not a list: " + var1, (Object)var1);
+      } else {
+         CollectionTag var3 = createGenericList(var1 instanceof CollectionTag ? ((CollectionTag)var1).getElementType() : 0, (Byte)var2.stream().findFirst().map(Tag::getId).orElse((byte)0));
+         fillMany(var3, var1, var2);
+         return DataResult.success(var3);
+      }
    }
 
-   public Tag merge(Tag var1, Tag var2) {
-      if (var1 instanceof EndTag) {
-         return var2;
-      } else if (var2 instanceof EndTag) {
-         return var1;
+   public DataResult<Tag> mergeToMap(Tag var1, Tag var2, Tag var3) {
+      if (!(var1 instanceof CompoundTag) && !(var1 instanceof EndTag)) {
+         return DataResult.error("mergeToMap called with not a map: " + var1, (Object)var1);
+      } else if (!(var2 instanceof StringTag)) {
+         return DataResult.error("key is not a string: " + var2, (Object)var1);
       } else {
-         if (var1 instanceof CompoundTag && var2 instanceof CompoundTag) {
-            CompoundTag var3 = (CompoundTag)var1;
-            CompoundTag var4 = (CompoundTag)var2;
-            CompoundTag var5 = new CompoundTag();
-            var3.getAllKeys().forEach((var2x) -> {
-               var5.put(var2x, var3.get(var2x));
+         CompoundTag var4 = new CompoundTag();
+         if (var1 instanceof CompoundTag) {
+            CompoundTag var5 = (CompoundTag)var1;
+            var5.getAllKeys().forEach((var2x) -> {
+               var4.put(var2x, var5.get(var2x));
             });
+         }
+
+         var4.put(var2.getAsString(), var3);
+         return DataResult.success(var4);
+      }
+   }
+
+   public DataResult<Tag> mergeToMap(Tag var1, MapLike<Tag> var2) {
+      if (!(var1 instanceof CompoundTag) && !(var1 instanceof EndTag)) {
+         return DataResult.error("mergeToMap called with not a map: " + var1, (Object)var1);
+      } else {
+         CompoundTag var3 = new CompoundTag();
+         if (var1 instanceof CompoundTag) {
+            CompoundTag var4 = (CompoundTag)var1;
             var4.getAllKeys().forEach((var2x) -> {
-               var5.put(var2x, var4.get(var2x));
+               var3.put(var2x, var4.get(var2x));
             });
          }
 
-         if (var1 instanceof CollectionTag && var2 instanceof CollectionTag) {
-            ListTag var6 = new ListTag();
-            var6.addAll((CollectionTag)var1);
-            var6.addAll((CollectionTag)var2);
-            return var6;
-         } else {
-            throw new IllegalArgumentException("Could not merge " + var1 + " and " + var2);
-         }
+         ArrayList var5 = Lists.newArrayList();
+         var2.entries().forEach((var2x) -> {
+            Tag var3x = (Tag)var2x.getFirst();
+            if (!(var3x instanceof StringTag)) {
+               var5.add(var3x);
+            } else {
+               var3.put(var3x.getAsString(), (Tag)var2x.getSecond());
+            }
+         });
+         return !var5.isEmpty() ? DataResult.error("some keys are not strings: " + var5, (Object)var3) : DataResult.success(var3);
       }
    }
 
-   public Optional<Map<Tag, Tag>> getMapValues(Tag var1) {
-      if (var1 instanceof CompoundTag) {
+   public DataResult<Stream<Pair<Tag, Tag>>> getMapValues(Tag var1) {
+      if (!(var1 instanceof CompoundTag)) {
+         return DataResult.error("Not a map: " + var1);
+      } else {
          CompoundTag var2 = (CompoundTag)var1;
-         return Optional.of(var2.getAllKeys().stream().map((var2x) -> {
+         return DataResult.success(var2.getAllKeys().stream().map((var2x) -> {
             return Pair.of(this.createString(var2x), var2.get(var2x));
-         }).collect(Collectors.toMap(Pair::getFirst, Pair::getSecond)));
+         }));
+      }
+   }
+
+   public DataResult<Consumer<BiConsumer<Tag, Tag>>> getMapEntries(Tag var1) {
+      if (!(var1 instanceof CompoundTag)) {
+         return DataResult.error("Not a map: " + var1);
       } else {
-         return Optional.empty();
+         CompoundTag var2 = (CompoundTag)var1;
+         return DataResult.success((var2x) -> {
+            var2.getAllKeys().forEach((var3) -> {
+               var2x.accept(this.createString(var3), var2.get(var3));
+            });
+         });
       }
    }
 
-   public Tag createMap(Map<Tag, Tag> var1) {
-      CompoundTag var2 = new CompoundTag();
-      Iterator var3 = var1.entrySet().iterator();
+   public DataResult<MapLike<Tag>> getMap(Tag var1) {
+      if (!(var1 instanceof CompoundTag)) {
+         return DataResult.error("Not a map: " + var1);
+      } else {
+         final CompoundTag var2 = (CompoundTag)var1;
+         return DataResult.success(new MapLike<Tag>() {
+            @Nullable
+            public Tag get(Tag var1) {
+               return var2.get(var1.getAsString());
+            }
 
-      while(var3.hasNext()) {
-         Entry var4 = (Entry)var3.next();
-         var2.put(((Tag)var4.getKey()).getAsString(), (Tag)var4.getValue());
+            @Nullable
+            public Tag get(String var1) {
+               return var2.get(var1);
+            }
+
+            public Stream<Pair<Tag, Tag>> entries() {
+               return var2.getAllKeys().stream().map((var2x) -> {
+                  return Pair.of(NbtOps.this.createString(var2x), var2.get(var2x));
+               });
+            }
+
+            public String toString() {
+               return "MapLike[" + var2 + "]";
+            }
+         });
       }
+   }
 
+   public Tag createMap(Stream<Pair<Tag, Tag>> var1) {
+      CompoundTag var2 = new CompoundTag();
+      var1.forEach((var1x) -> {
+         var2.put(((Tag)var1x.getFirst()).getAsString(), (Tag)var1x.getSecond());
+      });
       return var2;
    }
 
-   public Optional<Stream<Tag>> getStream(Tag var1) {
-      return var1 instanceof CollectionTag ? Optional.of(((CollectionTag)var1).stream().map((var0) -> {
+   public DataResult<Stream<Tag>> getStream(Tag var1) {
+      return var1 instanceof CollectionTag ? DataResult.success(((CollectionTag)var1).stream().map((var0) -> {
          return var0;
-      })) : Optional.empty();
+      })) : DataResult.error("Not a list");
    }
 
-   public Optional<ByteBuffer> getByteBuffer(Tag var1) {
-      return var1 instanceof ByteArrayTag ? Optional.of(ByteBuffer.wrap(((ByteArrayTag)var1).getAsByteArray())) : DynamicOps.super.getByteBuffer(var1);
+   public DataResult<Consumer<Consumer<Tag>>> getList(Tag var1) {
+      if (var1 instanceof CollectionTag) {
+         CollectionTag var2 = (CollectionTag)var1;
+         var2.getClass();
+         return DataResult.success(var2::forEach);
+      } else {
+         return DataResult.error("Not a list: " + var1);
+      }
    }
 
+   public DataResult<ByteBuffer> getByteBuffer(Tag var1) {
+      return var1 instanceof ByteArrayTag ? DataResult.success(ByteBuffer.wrap(((ByteArrayTag)var1).getAsByteArray())) : DynamicOps.super.getByteBuffer(var1);
+   }
+
    public Tag createByteList(ByteBuffer var1) {
       return new ByteArrayTag(DataFixUtils.toArray(var1));
    }
 
-   public Optional<IntStream> getIntStream(Tag var1) {
-      return var1 instanceof IntArrayTag ? Optional.of(Arrays.stream(((IntArrayTag)var1).getAsIntArray())) : DynamicOps.super.getIntStream(var1);
+   public DataResult<IntStream> getIntStream(Tag var1) {
+      return var1 instanceof IntArrayTag ? DataResult.success(Arrays.stream(((IntArrayTag)var1).getAsIntArray())) : DynamicOps.super.getIntStream(var1);
    }
 
    public Tag createIntList(IntStream var1) {
       return new IntArrayTag(var1.toArray());
    }
 
-   public Optional<LongStream> getLongStream(Tag var1) {
-      return var1 instanceof LongArrayTag ? Optional.of(Arrays.stream(((LongArrayTag)var1).getAsLongArray())) : DynamicOps.super.getLongStream(var1);
+   public DataResult<LongStream> getLongStream(Tag var1) {
+      return var1 instanceof LongArrayTag ? DataResult.success(Arrays.stream(((LongArrayTag)var1).getAsLongArray())) : DynamicOps.super.getLongStream(var1);
    }
 
    public Tag createLongList(LongStream var1) {
       return new LongArrayTag(var1.toArray());
    }
@@ -302,6 +367,45 @@
    }
 
    public String toString() {
       return "NBT";
    }
+
+   public RecordBuilder<Tag> mapBuilder() {
+      return new NbtOps.NbtRecordBuilder();
+   }
+
+   class NbtRecordBuilder extends RecordBuilder.AbstractStringBuilder<Tag, CompoundTag> {
+      protected NbtRecordBuilder() {
+         super(NbtOps.this);
+      }
+
+      protected CompoundTag initBuilder() {
+         return new CompoundTag();
+      }
+
+      protected CompoundTag append(String var1, Tag var2, CompoundTag var3) {
+         var3.put(var1, var2);
+         return var3;
+      }
+
+      protected DataResult<Tag> build(CompoundTag var1, Tag var2) {
+         if (var2 != null && var2 != EndTag.INSTANCE) {
+            if (!(var2 instanceof CompoundTag)) {
+               return DataResult.error("mergeToMap called with not a map: " + var2, (Object)var2);
+            } else {
+               CompoundTag var3 = new CompoundTag(Maps.newHashMap(((CompoundTag)var2).entries()));
+               Iterator var4 = var1.entries().entrySet().iterator();
+
+               while(var4.hasNext()) {
+                  Entry var5 = (Entry)var4.next();
+                  var3.put((String)var5.getKey(), (Tag)var5.getValue());
+               }
+
+               return DataResult.success(var3);
+            }
+         } else {
+            return DataResult.success(var1);
+         }
+      }
+   }
 }
