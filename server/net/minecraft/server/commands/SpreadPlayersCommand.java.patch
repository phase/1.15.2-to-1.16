--- net/minecraft/server/commands/SpreadPlayersCommand.java
+++ net/minecraft/server/commands/SpreadPlayersCommand.java
@@ -3,11 +3,13 @@
 import com.google.common.collect.Maps;
 import com.google.common.collect.Sets;
 import com.mojang.brigadier.CommandDispatcher;
 import com.mojang.brigadier.arguments.BoolArgumentType;
 import com.mojang.brigadier.arguments.FloatArgumentType;
+import com.mojang.brigadier.arguments.IntegerArgumentType;
 import com.mojang.brigadier.builder.LiteralArgumentBuilder;
+import com.mojang.brigadier.builder.RequiredArgumentBuilder;
 import com.mojang.brigadier.exceptions.CommandSyntaxException;
 import com.mojang.brigadier.exceptions.Dynamic4CommandExceptionType;
 import java.util.Collection;
 import java.util.HashMap;
 import java.util.HashSet;
@@ -17,10 +19,11 @@
 import net.minecraft.commands.CommandSourceStack;
 import net.minecraft.commands.Commands;
 import net.minecraft.commands.arguments.EntityArgument;
 import net.minecraft.commands.arguments.coordinates.Vec2Argument;
 import net.minecraft.core.BlockPos;
+import net.minecraft.core.Direction;
 import net.minecraft.network.chat.TranslatableComponent;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.util.Mth;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.player.Player;
@@ -39,26 +42,28 @@
    });
 
    public static void register(CommandDispatcher<CommandSourceStack> var0) {
       var0.register((LiteralArgumentBuilder)((LiteralArgumentBuilder)Commands.literal("spreadplayers").requires((var0x) -> {
          return var0x.hasPermission(2);
-      })).then(Commands.argument("center", Vec2Argument.vec2()).then(Commands.argument("spreadDistance", FloatArgumentType.floatArg(0.0F)).then(Commands.argument("maxRange", FloatArgumentType.floatArg(1.0F)).then(Commands.argument("respectTeams", BoolArgumentType.bool()).then(Commands.argument("targets", EntityArgument.entities()).executes((var0x) -> {
-         return spreadPlayers((CommandSourceStack)var0x.getSource(), Vec2Argument.getVec2(var0x, "center"), FloatArgumentType.getFloat(var0x, "spreadDistance"), FloatArgumentType.getFloat(var0x, "maxRange"), BoolArgumentType.getBool(var0x, "respectTeams"), EntityArgument.getEntities(var0x, "targets"));
-      })))))));
+      })).then(Commands.argument("center", Vec2Argument.vec2()).then(Commands.argument("spreadDistance", FloatArgumentType.floatArg(0.0F)).then(((RequiredArgumentBuilder)Commands.argument("maxRange", FloatArgumentType.floatArg(1.0F)).then(Commands.argument("respectTeams", BoolArgumentType.bool()).then(Commands.argument("targets", EntityArgument.entities()).executes((var0x) -> {
+         return spreadPlayers((CommandSourceStack)var0x.getSource(), Vec2Argument.getVec2(var0x, "center"), FloatArgumentType.getFloat(var0x, "spreadDistance"), FloatArgumentType.getFloat(var0x, "maxRange"), 256, BoolArgumentType.getBool(var0x, "respectTeams"), EntityArgument.getEntities(var0x, "targets"));
+      })))).then(Commands.literal("under").then(Commands.argument("maxHeight", IntegerArgumentType.integer(0)).then(Commands.argument("respectTeams", BoolArgumentType.bool()).then(Commands.argument("targets", EntityArgument.entities()).executes((var0x) -> {
+         return spreadPlayers((CommandSourceStack)var0x.getSource(), Vec2Argument.getVec2(var0x, "center"), FloatArgumentType.getFloat(var0x, "spreadDistance"), FloatArgumentType.getFloat(var0x, "maxRange"), IntegerArgumentType.getInteger(var0x, "maxHeight"), BoolArgumentType.getBool(var0x, "respectTeams"), EntityArgument.getEntities(var0x, "targets"));
+      })))))))));
    }
 
-   private static int spreadPlayers(CommandSourceStack var0, Vec2 var1, float var2, float var3, boolean var4, Collection<? extends Entity> var5) throws CommandSyntaxException {
-      Random var6 = new Random();
-      double var7 = (double)(var1.x - var3);
-      double var9 = (double)(var1.y - var3);
-      double var11 = (double)(var1.x + var3);
-      double var13 = (double)(var1.y + var3);
-      SpreadPlayersCommand.Position[] var15 = createInitialPositions(var6, var4 ? getNumberOfTeams(var5) : var5.size(), var7, var9, var11, var13);
-      spreadPositions(var1, (double)var2, var0.getLevel(), var6, var7, var9, var11, var13, var15, var4);
-      double var16 = setPlayerPositions(var5, var0.getLevel(), var15, var4);
-      var0.sendSuccess(new TranslatableComponent("commands.spreadplayers.success." + (var4 ? "teams" : "entities"), new Object[]{var15.length, var1.x, var1.y, String.format(Locale.ROOT, "%.2f", var16)}), true);
-      return var15.length;
+   private static int spreadPlayers(CommandSourceStack var0, Vec2 var1, float var2, float var3, int var4, boolean var5, Collection<? extends Entity> var6) throws CommandSyntaxException {
+      Random var7 = new Random();
+      double var8 = (double)(var1.x - var3);
+      double var10 = (double)(var1.y - var3);
+      double var12 = (double)(var1.x + var3);
+      double var14 = (double)(var1.y + var3);
+      SpreadPlayersCommand.Position[] var16 = createInitialPositions(var7, var5 ? getNumberOfTeams(var6) : var6.size(), var8, var10, var12, var14);
+      spreadPositions(var1, (double)var2, var0.getLevel(), var7, var8, var10, var12, var14, var4, var16, var5);
+      double var17 = setPlayerPositions(var6, var0.getLevel(), var16, var4, var5);
+      var0.sendSuccess(new TranslatableComponent("commands.spreadplayers.success." + (var5 ? "teams" : "entities"), new Object[]{var16.length, var1.x, var1.y, String.format(Locale.ROOT, "%.2f", var17)}), true);
+      return var16.length;
    }
 
    private static int getNumberOfTeams(Collection<? extends Entity> var0) {
       HashSet var1 = Sets.newHashSet();
       Iterator var2 = var0.iterator();
@@ -73,124 +78,124 @@
       }
 
       return var1.size();
    }
 
-   private static void spreadPositions(Vec2 var0, double var1, ServerLevel var3, Random var4, double var5, double var7, double var9, double var11, SpreadPlayersCommand.Position[] var13, boolean var14) throws CommandSyntaxException {
-      boolean var15 = true;
-      double var17 = 3.4028234663852886E38D;
+   private static void spreadPositions(Vec2 var0, double var1, ServerLevel var3, Random var4, double var5, double var7, double var9, double var11, int var13, SpreadPlayersCommand.Position[] var14, boolean var15) throws CommandSyntaxException {
+      boolean var16 = true;
+      double var18 = 3.4028234663852886E38D;
 
-      int var16;
-      for(var16 = 0; var16 < 10000 && var15; ++var16) {
-         var15 = false;
-         var17 = 3.4028234663852886E38D;
+      int var17;
+      for(var17 = 0; var17 < 10000 && var16; ++var17) {
+         var16 = false;
+         var18 = 3.4028234663852886E38D;
 
-         int var21;
-         SpreadPlayersCommand.Position var22;
-         for(int var19 = 0; var19 < var13.length; ++var19) {
-            SpreadPlayersCommand.Position var20 = var13[var19];
-            var21 = 0;
-            var22 = new SpreadPlayersCommand.Position();
+         int var22;
+         SpreadPlayersCommand.Position var23;
+         for(int var20 = 0; var20 < var14.length; ++var20) {
+            SpreadPlayersCommand.Position var21 = var14[var20];
+            var22 = 0;
+            var23 = new SpreadPlayersCommand.Position();
 
-            for(int var23 = 0; var23 < var13.length; ++var23) {
-               if (var19 != var23) {
-                  SpreadPlayersCommand.Position var24 = var13[var23];
-                  double var25 = var20.dist(var24);
-                  var17 = Math.min(var25, var17);
-                  if (var25 < var1) {
-                     ++var21;
-                     var22.x = var22.x + (var24.x - var20.x);
-                     var22.z = var22.z + (var24.z - var20.z);
+            for(int var24 = 0; var24 < var14.length; ++var24) {
+               if (var20 != var24) {
+                  SpreadPlayersCommand.Position var25 = var14[var24];
+                  double var26 = var21.dist(var25);
+                  var18 = Math.min(var26, var18);
+                  if (var26 < var1) {
+                     ++var22;
+                     var23.x = var23.x + (var25.x - var21.x);
+                     var23.z = var23.z + (var25.z - var21.z);
                   }
                }
             }
 
-            if (var21 > 0) {
-               var22.x = var22.x / (double)var21;
-               var22.z = var22.z / (double)var21;
-               double var29 = (double)var22.getLength();
-               if (var29 > 0.0D) {
-                  var22.normalize();
-                  var20.moveAway(var22);
+            if (var22 > 0) {
+               var23.x = var23.x / (double)var22;
+               var23.z = var23.z / (double)var22;
+               double var30 = (double)var23.getLength();
+               if (var30 > 0.0D) {
+                  var23.normalize();
+                  var21.moveAway(var23);
                } else {
-                  var20.randomize(var4, var5, var7, var9, var11);
+                  var21.randomize(var4, var5, var7, var9, var11);
                }
 
-               var15 = true;
+               var16 = true;
             }
 
-            if (var20.clamp(var5, var7, var9, var11)) {
-               var15 = true;
+            if (var21.clamp(var5, var7, var9, var11)) {
+               var16 = true;
             }
          }
 
-         if (!var15) {
-            SpreadPlayersCommand.Position[] var27 = var13;
-            int var28 = var13.length;
+         if (!var16) {
+            SpreadPlayersCommand.Position[] var28 = var14;
+            int var29 = var14.length;
 
-            for(var21 = 0; var21 < var28; ++var21) {
-               var22 = var27[var21];
-               if (!var22.isSafe(var3)) {
-                  var22.randomize(var4, var5, var7, var9, var11);
-                  var15 = true;
+            for(var22 = 0; var22 < var29; ++var22) {
+               var23 = var28[var22];
+               if (!var23.isSafe(var3, var13)) {
+                  var23.randomize(var4, var5, var7, var9, var11);
+                  var16 = true;
                }
             }
          }
       }
 
-      if (var17 == 3.4028234663852886E38D) {
-         var17 = 0.0D;
+      if (var18 == 3.4028234663852886E38D) {
+         var18 = 0.0D;
       }
 
-      if (var16 >= 10000) {
-         if (var14) {
-            throw ERROR_FAILED_TO_SPREAD_TEAMS.create(var13.length, var0.x, var0.y, String.format(Locale.ROOT, "%.2f", var17));
+      if (var17 >= 10000) {
+         if (var15) {
+            throw ERROR_FAILED_TO_SPREAD_TEAMS.create(var14.length, var0.x, var0.y, String.format(Locale.ROOT, "%.2f", var18));
          } else {
-            throw ERROR_FAILED_TO_SPREAD_ENTITIES.create(var13.length, var0.x, var0.y, String.format(Locale.ROOT, "%.2f", var17));
+            throw ERROR_FAILED_TO_SPREAD_ENTITIES.create(var14.length, var0.x, var0.y, String.format(Locale.ROOT, "%.2f", var18));
          }
       }
    }
 
-   private static double setPlayerPositions(Collection<? extends Entity> var0, ServerLevel var1, SpreadPlayersCommand.Position[] var2, boolean var3) {
-      double var4 = 0.0D;
-      int var6 = 0;
-      HashMap var7 = Maps.newHashMap();
+   private static double setPlayerPositions(Collection<? extends Entity> var0, ServerLevel var1, SpreadPlayersCommand.Position[] var2, int var3, boolean var4) {
+      double var5 = 0.0D;
+      int var7 = 0;
+      HashMap var8 = Maps.newHashMap();
 
-      double var19;
-      for(Iterator var8 = var0.iterator(); var8.hasNext(); var4 += var19) {
-         Entity var9 = (Entity)var8.next();
-         SpreadPlayersCommand.Position var10;
-         if (var3) {
-            Team var11 = var9 instanceof Player ? var9.getTeam() : null;
-            if (!var7.containsKey(var11)) {
-               var7.put(var11, var2[var6++]);
+      double var20;
+      for(Iterator var9 = var0.iterator(); var9.hasNext(); var5 += var20) {
+         Entity var10 = (Entity)var9.next();
+         SpreadPlayersCommand.Position var11;
+         if (var4) {
+            Team var12 = var10 instanceof Player ? var10.getTeam() : null;
+            if (!var8.containsKey(var12)) {
+               var8.put(var12, var2[var7++]);
             }
 
-            var10 = (SpreadPlayersCommand.Position)var7.get(var11);
+            var11 = (SpreadPlayersCommand.Position)var8.get(var12);
          } else {
-            var10 = var2[var6++];
+            var11 = var2[var7++];
          }
 
-         var9.teleportToWithTicket((double)((float)Mth.floor(var10.x) + 0.5F), (double)var10.getSpawnY(var1), (double)Mth.floor(var10.z) + 0.5D);
-         var19 = Double.MAX_VALUE;
-         SpreadPlayersCommand.Position[] var13 = var2;
-         int var14 = var2.length;
+         var10.teleportToWithTicket((double)Mth.floor(var11.x) + 0.5D, (double)var11.getSpawnY(var1, var3), (double)Mth.floor(var11.z) + 0.5D);
+         var20 = Double.MAX_VALUE;
+         SpreadPlayersCommand.Position[] var14 = var2;
+         int var15 = var2.length;
 
-         for(int var15 = 0; var15 < var14; ++var15) {
-            SpreadPlayersCommand.Position var16 = var13[var15];
-            if (var10 != var16) {
-               double var17 = var10.dist(var16);
-               var19 = Math.min(var17, var19);
+         for(int var16 = 0; var16 < var15; ++var16) {
+            SpreadPlayersCommand.Position var17 = var14[var16];
+            if (var11 != var17) {
+               double var18 = var11.dist(var17);
+               var20 = Math.min(var18, var20);
             }
          }
       }
 
       if (var0.size() < 2) {
          return 0.0D;
       } else {
-         var4 /= (double)var0.size();
-         return var4;
+         var5 /= (double)var0.size();
+         return var5;
       }
    }
 
    private static SpreadPlayersCommand.Position[] createInitialPositions(Random var0, int var1, double var2, double var4, double var6, double var8) {
       SpreadPlayersCommand.Position[] var10 = new SpreadPlayersCommand.Position[var1];
@@ -251,39 +256,34 @@
          }
 
          return var9;
       }
 
-      public int getSpawnY(BlockGetter var1) {
-         BlockPos var2 = new BlockPos(this.x, 256.0D, this.z);
+      public int getSpawnY(BlockGetter var1, int var2) {
+         BlockPos.MutableBlockPos var3 = new BlockPos.MutableBlockPos(this.x, (double)(var2 + 1), this.z);
+         boolean var4 = var1.getBlockState(var3).isAir();
+         var3.move(Direction.DOWN);
 
-         do {
-            if (var2.getY() <= 0) {
-               return 257;
+         boolean var6;
+         for(boolean var5 = var1.getBlockState(var3).isAir(); var3.getY() > 0; var5 = var6) {
+            var3.move(Direction.DOWN);
+            var6 = var1.getBlockState(var3).isAir();
+            if (!var6 && var5 && var4) {
+               return var3.getY() + 1;
             }
 
-            var2 = var2.below();
-         } while(var1.getBlockState(var2).isAir());
+            var4 = var5;
+         }
 
-         return var2.getY() + 1;
+         return var2 + 1;
       }
 
-      public boolean isSafe(BlockGetter var1) {
-         BlockPos var2 = new BlockPos(this.x, 256.0D, this.z);
-
-         BlockState var3;
-         do {
-            if (var2.getY() <= 0) {
-               return false;
-            }
-
-            var2 = var2.below();
-            var3 = var1.getBlockState(var2);
-         } while(var3.isAir());
-
-         Material var4 = var3.getMaterial();
-         return !var4.isLiquid() && var4 != Material.FIRE;
+      public boolean isSafe(BlockGetter var1, int var2) {
+         BlockPos var3 = new BlockPos(this.x, (double)(this.getSpawnY(var1, var2) - 1), this.z);
+         BlockState var4 = var1.getBlockState(var3);
+         Material var5 = var4.getMaterial();
+         return var3.getY() < var2 && !var5.isLiquid() && var5 != Material.FIRE;
       }
 
       public void randomize(Random var1, double var2, double var4, double var6, double var8) {
          this.x = Mth.nextDouble(var1, var2, var6);
          this.z = Mth.nextDouble(var1, var4, var8);
