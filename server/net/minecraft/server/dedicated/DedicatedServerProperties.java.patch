--- net/minecraft/server/dedicated/DedicatedServerProperties.java
+++ net/minecraft/server/dedicated/DedicatedServerProperties.java
@@ -4,11 +4,11 @@
 import java.util.Properties;
 import java.util.concurrent.TimeUnit;
 import net.minecraft.util.Mth;
 import net.minecraft.world.Difficulty;
 import net.minecraft.world.level.GameType;
-import net.minecraft.world.level.LevelType;
+import net.minecraft.world.level.levelgen.WorldGenSettings;
 
 public class DedicatedServerProperties extends Settings<DedicatedServerProperties> {
    public final boolean onlineMode = this.get("online-mode", true);
    public final boolean preventProxyConnections = this.get("prevent-proxy-connections", false);
    public final String serverIp = this.get("server-ip", "");
@@ -18,17 +18,13 @@
    public final boolean allowFlight = this.get("allow-flight", false);
    public final String resourcePack = this.get("resource-pack", "");
    public final String motd = this.get("motd", "A Minecraft Server");
    public final boolean forceGameMode = this.get("force-gamemode", false);
    public final boolean enforceWhitelist = this.get("enforce-whitelist", false);
-   public final boolean generateStructures = this.get("generate-structures", true);
    public final Difficulty difficulty;
    public final GameType gamemode;
    public final String levelName;
-   public final String levelSeed;
-   public final LevelType levelType;
-   public final String generatorSettings;
    public final int serverPort;
    public final int maxBuildHeight;
    public final Boolean announcePlayerAchievements;
    public final boolean enableQuery;
    public final int queryPort;
@@ -51,21 +47,23 @@
    public final int maxPlayers;
    public final int networkCompressionThreshold;
    public final boolean broadcastRconToOps;
    public final boolean broadcastConsoleToOps;
    public final int maxWorldSize;
+   public final boolean syncChunkWrites;
+   public final boolean enableJmxMonitoring;
+   public final boolean enableStatus;
+   public final int entityBroadcastRangePercentage;
    public final Settings<DedicatedServerProperties>.MutableValue<Integer> playerIdleTimeout;
    public final Settings<DedicatedServerProperties>.MutableValue<Boolean> whiteList;
+   public final WorldGenSettings worldGenSettings;
 
    public DedicatedServerProperties(Properties var1) {
       super(var1);
       this.difficulty = (Difficulty)this.get("difficulty", dispatchNumberOrString(Difficulty::byId, Difficulty::byName), Difficulty::getKey, Difficulty.EASY);
       this.gamemode = (GameType)this.get("gamemode", dispatchNumberOrString(GameType::byId, GameType::byName), GameType::getName, GameType.SURVIVAL);
       this.levelName = this.get("level-name", "world");
-      this.levelSeed = this.get("level-seed", "");
-      this.levelType = (LevelType)this.get("level-type", LevelType::getLevelType, LevelType::getName, LevelType.NORMAL);
-      this.generatorSettings = this.get("generator-settings", "");
       this.serverPort = this.get("server-port", 25565);
       this.maxBuildHeight = this.get("max-build-height", (var0) -> {
          return Mth.clamp((var0 + 8) / 16 * 16, 64, 256);
       }, 256);
       this.announcePlayerAchievements = this.getLegacyBoolean("announce-player-achievements");
@@ -95,12 +93,19 @@
       this.broadcastRconToOps = this.get("broadcast-rcon-to-ops", true);
       this.broadcastConsoleToOps = this.get("broadcast-console-to-ops", true);
       this.maxWorldSize = this.get("max-world-size", (var0) -> {
          return Mth.clamp(var0, 1, 29999984);
       }, 29999984);
+      this.syncChunkWrites = this.get("sync-chunk-writes", true);
+      this.enableJmxMonitoring = this.get("enable-jmx-monitoring", false);
+      this.enableStatus = this.get("enable-status", true);
+      this.entityBroadcastRangePercentage = this.get("entity-broadcast-range-percentage", (var0) -> {
+         return Mth.clamp(var0, 10, 1000);
+      }, 100);
       this.playerIdleTimeout = this.getMutable("player-idle-timeout", 0);
       this.whiteList = this.getMutable("white-list", false);
+      this.worldGenSettings = WorldGenSettings.create(var1);
    }
 
    public static DedicatedServerProperties fromFile(Path var0) {
       return new DedicatedServerProperties(loadFromFile(var0));
    }
