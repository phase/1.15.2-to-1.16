--- net/minecraft/server/packs/resources/SimpleReloadableResourceManager.java
+++ net/minecraft/server/packs/resources/SimpleReloadableResourceManager.java
@@ -1,7 +1,8 @@
 package net.minecraft.server.packs.resources;
 
+import com.google.common.collect.ImmutableSet;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.google.common.collect.Sets;
 import java.io.FileNotFoundException;
 import java.io.IOException;
@@ -16,11 +17,11 @@
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.Executor;
 import java.util.function.Predicate;
 import java.util.stream.Collectors;
 import net.minecraft.resources.ResourceLocation;
-import net.minecraft.server.packs.Pack;
+import net.minecraft.server.packs.PackResources;
 import net.minecraft.server.packs.PackType;
 import net.minecraft.util.Unit;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
@@ -28,19 +29,20 @@
    private static final Logger LOGGER = LogManager.getLogger();
    private final Map<String, FallbackResourceManager> namespacedPacks = Maps.newHashMap();
    private final List<PreparableReloadListener> listeners = Lists.newArrayList();
    private final List<PreparableReloadListener> recentlyRegistered = Lists.newArrayList();
    private final Set<String> namespaces = Sets.newLinkedHashSet();
+   private final List<PackResources> packs = Lists.newArrayList();
    private final PackType type;
-   private final Thread mainThread;
 
-   public SimpleReloadableResourceManager(PackType var1, Thread var2) {
+   public SimpleReloadableResourceManager(PackType var1) {
       this.type = var1;
-      this.mainThread = var2;
    }
 
-   public void add(Pack var1) {
+   public void add(PackResources var1) {
+      this.packs.add(var1);
+
       FallbackResourceManager var4;
       for(Iterator var2 = var1.getNamespaces(this.type).iterator(); var2.hasNext(); var4.add(var1)) {
          String var3 = (String)var2.next();
          this.namespaces.add(var3);
          var4 = (FallbackResourceManager)this.namespacedPacks.get(var3);
@@ -68,10 +70,15 @@
       } else {
          throw new FileNotFoundException(var1.toString());
       }
    }
 
+   public Collection<ResourceLocation> listResources(ResourceLocation var1, Predicate<String> var2) {
+      ResourceManager var3 = (ResourceManager)this.namespacedPacks.get(var1.getNamespace());
+      return (Collection)(var3 != null ? var3.listResources(var1.getPath(), var2) : ImmutableSet.of());
+   }
+
    public Collection<ResourceLocation> listResources(String var1, Predicate<String> var2) {
       HashSet var3 = Sets.newHashSet();
       Iterator var4 = this.namespacedPacks.values().iterator();
 
       while(var4.hasNext()) {
@@ -85,15 +92,16 @@
    }
 
    private void clear() {
       this.namespacedPacks.clear();
       this.namespaces.clear();
+      this.packs.forEach(PackResources::close);
+      this.packs.clear();
    }
 
-   public CompletableFuture<Unit> reload(Executor var1, Executor var2, List<Pack> var3, CompletableFuture<Unit> var4) {
-      ReloadInstance var5 = this.createFullReload(var1, var2, var4, var3);
-      return var5.done();
+   public void close() {
+      this.clear();
    }
 
    public void registerReloadListener(PreparableReloadListener var1) {
       this.listeners.add(var1);
       this.recentlyRegistered.add(var1);
@@ -109,17 +117,19 @@
 
       this.recentlyRegistered.clear();
       return (ReloadInstance)var5;
    }
 
-   public ReloadInstance createFullReload(Executor var1, Executor var2, CompletableFuture<Unit> var3, List<Pack> var4) {
+   public ReloadInstance createFullReload(Executor var1, Executor var2, CompletableFuture<Unit> var3, List<PackResources> var4) {
       this.clear();
-      LOGGER.info("Reloading ResourceManager: {}", var4.stream().map(Pack::getName).collect(Collectors.joining(", ")));
+      LOGGER.info("Reloading ResourceManager: {}", () -> {
+         return (String)var4.stream().map(PackResources::getName).collect(Collectors.joining(", "));
+      });
       Iterator var5 = var4.iterator();
 
       while(var5.hasNext()) {
-         Pack var6 = (Pack)var5.next();
+         PackResources var6 = (PackResources)var5.next();
 
          try {
             this.add(var6);
          } catch (Exception var8) {
             LOGGER.error((String)"Failed to add resource pack {}", (Object)var6.getName(), (Object)var8);
@@ -144,13 +154,13 @@
          return this.failedFuture;
       }
    }
 
    public static class ResourcePackLoadingFailure extends RuntimeException {
-      private final Pack pack;
+      private final PackResources pack;
 
-      public ResourcePackLoadingFailure(Pack var1, Throwable var2) {
+      public ResourcePackLoadingFailure(PackResources var1, Throwable var2) {
          super(var1.getName(), var2);
          this.pack = var1;
       }
    }
 }
