--- net/minecraft/server/packs/repository/PackRepository.java
+++ net/minecraft/server/packs/repository/PackRepository.java
@@ -1,107 +1,107 @@
 package net.minecraft.server.packs.repository;
 
 import com.google.common.base.Functions;
-import com.google.common.collect.Lists;
+import com.google.common.collect.ImmutableList;
+import com.google.common.collect.ImmutableMap;
+import com.google.common.collect.ImmutableSet;
 import com.google.common.collect.Maps;
-import com.google.common.collect.Sets;
-import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Iterator;
-import java.util.LinkedHashSet;
 import java.util.List;
 import java.util.Map;
 import java.util.Objects;
 import java.util.Set;
-import java.util.Map.Entry;
+import java.util.TreeMap;
 import java.util.stream.Collectors;
 import java.util.stream.Stream;
 import javax.annotation.Nullable;
+import net.minecraft.server.packs.Pack;
 
 public class PackRepository<T extends UnopenedPack> implements AutoCloseable {
-   private final Set<RepositorySource> sources = Sets.newHashSet();
-   private final Map<String, T> available = Maps.newLinkedHashMap();
-   private final List<T> selected = Lists.newLinkedList();
+   private final Set<RepositorySource> sources;
+   private Map<String, T> available = ImmutableMap.of();
+   private List<T> selected = ImmutableList.of();
    private final UnopenedPack.UnopenedPackConstructor<T> constructor;
 
-   public PackRepository(UnopenedPack.UnopenedPackConstructor<T> var1) {
+   public PackRepository(UnopenedPack.UnopenedPackConstructor<T> var1, RepositorySource... var2) {
       this.constructor = var1;
+      this.sources = ImmutableSet.copyOf((Object[])var2);
    }
 
    public void reload() {
+      List var1 = (List)this.selected.stream().map(UnopenedPack::getId).collect(ImmutableList.toImmutableList());
       this.close();
-      Set var1 = (Set)this.selected.stream().map(UnopenedPack::getId).collect(Collectors.toCollection(LinkedHashSet::new));
-      this.available.clear();
-      this.selected.clear();
+      this.available = this.discoverAvailable();
+      this.selected = this.rebuildSelected(var1);
+   }
+
+   private Map<String, T> discoverAvailable() {
+      TreeMap var1 = Maps.newTreeMap();
       Iterator var2 = this.sources.iterator();
 
       while(var2.hasNext()) {
          RepositorySource var3 = (RepositorySource)var2.next();
-         var3.loadPacks(this.available, this.constructor);
+         var3.loadPacks(var1, this.constructor);
       }
 
-      this.sortAvailable();
-      List var10000 = this.selected;
-      Stream var10001 = var1.stream();
-      Map var10002 = this.available;
-      var10002.getClass();
-      var10000.addAll((Collection)var10001.map(var10002::get).filter(Objects::nonNull).collect(Collectors.toCollection(LinkedHashSet::new)));
-      var2 = this.available.values().iterator();
-
-      while(var2.hasNext()) {
-         UnopenedPack var4 = (UnopenedPack)var2.next();
-         if (var4.isRequired() && !this.selected.contains(var4)) {
-            var4.getDefaultPosition().insert(this.selected, var4, Functions.identity(), false);
-         }
-      }
-
+      return ImmutableMap.copyOf((Map)var1);
    }
 
-   private void sortAvailable() {
-      ArrayList var1 = Lists.newArrayList((Iterable)this.available.entrySet());
-      this.available.clear();
-      var1.stream().sorted(Entry.comparingByKey()).forEachOrdered((var1x) -> {
-         UnopenedPack var10000 = (UnopenedPack)this.available.put(var1x.getKey(), var1x.getValue());
-      });
+   public void setSelected(Collection<String> var1) {
+      this.selected = this.rebuildSelected(var1);
    }
 
-   public void setSelected(Collection<T> var1) {
-      this.selected.clear();
-      this.selected.addAll(var1);
-      Iterator var2 = this.available.values().iterator();
+   private List<T> rebuildSelected(Collection<String> var1) {
+      List var2 = (List)this.getAvailablePacks(var1).collect(Collectors.toList());
+      Iterator var3 = this.available.values().iterator();
 
-      while(var2.hasNext()) {
-         UnopenedPack var3 = (UnopenedPack)var2.next();
-         if (var3.isRequired() && !this.selected.contains(var3)) {
-            var3.getDefaultPosition().insert(this.selected, var3, Functions.identity(), false);
+      while(var3.hasNext()) {
+         UnopenedPack var4 = (UnopenedPack)var3.next();
+         if (var4.isRequired() && !var2.contains(var4)) {
+            var4.getDefaultPosition().insert(var2, var4, Functions.identity(), false);
          }
       }
 
+      return ImmutableList.copyOf((Collection)var2);
    }
 
-   public Collection<T> getAvailable() {
+   private Stream<T> getAvailablePacks(Collection<String> var1) {
+      Stream var10000 = var1.stream();
+      Map var10001 = this.available;
+      var10001.getClass();
+      return var10000.map(var10001::get).filter(Objects::nonNull);
+   }
+
+   public Collection<String> getAvailableIds() {
+      return this.available.keySet();
+   }
+
+   public Collection<T> getAvailablePacks() {
       return this.available.values();
    }
 
-   public Collection<T> getUnselected() {
-      ArrayList var1 = Lists.newArrayList((Iterable)this.available.values());
-      var1.removeAll(this.selected);
-      return var1;
+   public Collection<String> getSelectedIds() {
+      return (Collection)this.selected.stream().map(UnopenedPack::getId).collect(ImmutableSet.toImmutableSet());
    }
 
-   public Collection<T> getSelected() {
+   public Collection<T> getSelectedPacks() {
       return this.selected;
    }
 
    @Nullable
    public T getPack(String var1) {
       return (UnopenedPack)this.available.get(var1);
    }
 
-   public void addSource(RepositorySource var1) {
-      this.sources.add(var1);
-   }
-
    public void close() {
       this.available.values().forEach(UnopenedPack::close);
    }
+
+   public boolean isAvailable(String var1) {
+      return this.available.containsKey(var1);
+   }
+
+   public List<Pack> openAllSelected() {
+      return (List)this.selected.stream().map(UnopenedPack::open).collect(ImmutableList.toImmutableList());
+   }
 }
