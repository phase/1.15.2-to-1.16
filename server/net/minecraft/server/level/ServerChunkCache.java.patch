--- net/minecraft/server/level/ServerChunkCache.java
+++ net/minecraft/server/level/ServerChunkCache.java
@@ -1,55 +1,55 @@
 package net.minecraft.server.level;
 
 import com.google.common.annotations.VisibleForTesting;
+import com.google.common.collect.Lists;
 import com.mojang.datafixers.DataFixer;
 import com.mojang.datafixers.util.Either;
-import it.unimi.dsi.fastutil.objects.Object2IntMap;
 import java.io.File;
 import java.io.IOException;
+import java.util.ArrayList;
 import java.util.Arrays;
+import java.util.Collections;
 import java.util.List;
 import java.util.Optional;
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.Executor;
 import java.util.function.BooleanSupplier;
+import java.util.function.Consumer;
 import java.util.function.Function;
 import java.util.function.Supplier;
 import javax.annotation.Nullable;
 import net.minecraft.Util;
 import net.minecraft.core.BlockPos;
-import net.minecraft.core.Registry;
 import net.minecraft.core.SectionPos;
 import net.minecraft.network.protocol.Packet;
 import net.minecraft.server.level.progress.ChunkProgressListener;
 import net.minecraft.util.Mth;
 import net.minecraft.util.profiling.ProfilerFiller;
 import net.minecraft.util.thread.BlockableEventLoop;
 import net.minecraft.world.entity.Entity;
-import net.minecraft.world.entity.MobCategory;
 import net.minecraft.world.entity.ai.village.poi.PoiManager;
 import net.minecraft.world.level.BlockGetter;
 import net.minecraft.world.level.ChunkPos;
 import net.minecraft.world.level.GameRules;
 import net.minecraft.world.level.Level;
-import net.minecraft.world.level.LevelType;
 import net.minecraft.world.level.LightLayer;
 import net.minecraft.world.level.NaturalSpawner;
 import net.minecraft.world.level.chunk.ChunkAccess;
 import net.minecraft.world.level.chunk.ChunkGenerator;
 import net.minecraft.world.level.chunk.ChunkSource;
 import net.minecraft.world.level.chunk.ChunkStatus;
 import net.minecraft.world.level.chunk.LevelChunk;
 import net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager;
 import net.minecraft.world.level.storage.DimensionDataStorage;
 import net.minecraft.world.level.storage.LevelData;
+import net.minecraft.world.level.storage.LevelStorageSource;
 
 public class ServerChunkCache extends ChunkSource {
-   private static final int MAGIC_NUMBER = (int)Math.pow(17.0D, 2.0D);
    private static final List<ChunkStatus> CHUNK_STATUSES = ChunkStatus.getStatusList();
    private final DistanceManager distanceManager;
-   private final ChunkGenerator<?> generator;
+   private final ChunkGenerator generator;
    private final ServerLevel level;
    private final Thread mainThread;
    private final ThreadedLevelLightEngine lightEngine;
    private final ServerChunkCache.MainThreadExecutor mainThreadProcessor;
    public final ChunkMap chunkMap;
@@ -58,21 +58,23 @@
    private boolean spawnEnemies = true;
    private boolean spawnFriendlies = true;
    private final long[] lastChunkPos = new long[4];
    private final ChunkStatus[] lastChunkStatus = new ChunkStatus[4];
    private final ChunkAccess[] lastChunk = new ChunkAccess[4];
+   @Nullable
+   private NaturalSpawner.SpawnState lastSpawnState;
 
-   public ServerChunkCache(ServerLevel var1, File var2, DataFixer var3, StructureManager var4, Executor var5, ChunkGenerator<?> var6, int var7, ChunkProgressListener var8, Supplier<DimensionDataStorage> var9) {
+   public ServerChunkCache(ServerLevel var1, LevelStorageSource.LevelStorageAccess var2, DataFixer var3, StructureManager var4, Executor var5, ChunkGenerator var6, int var7, boolean var8, ChunkProgressListener var9, Supplier<DimensionDataStorage> var10) {
       this.level = var1;
       this.mainThreadProcessor = new ServerChunkCache.MainThreadExecutor(var1);
       this.generator = var6;
       this.mainThread = Thread.currentThread();
-      File var10 = var1.getDimension().getType().getStorageFolder(var2);
-      File var11 = new File(var10, "data");
-      var11.mkdirs();
-      this.dataStorage = new DimensionDataStorage(var11, var3);
-      this.chunkMap = new ChunkMap(var1, var2, var3, var4, var5, this.mainThreadProcessor, this, this.getGenerator(), var8, var9, var7);
+      File var11 = var2.getDimensionPath(var1.dimension());
+      File var12 = new File(var11, "data");
+      var12.mkdirs();
+      this.dataStorage = new DimensionDataStorage(var12, var3);
+      this.chunkMap = new ChunkMap(var1, var2, var3, var4, var5, this.mainThreadProcessor, this, this.getGenerator(), var9, var10, var7, var8);
       this.lightEngine = this.chunkMap.getLightEngine();
       this.distanceManager = this.chunkMap.getDistanceManager();
       this.clearCache();
    }
 
@@ -269,15 +271,10 @@
    public boolean isTickingChunk(BlockPos var1) {
       long var2 = ChunkPos.asLong(var1.getX() >> 4, var1.getZ() >> 4);
       return this.checkChunkFuture(var2, ChunkHolder::getTickingChunkFuture);
    }
 
-   public boolean isInAccessibleChunk(Entity var1) {
-      long var2 = ChunkPos.asLong(Mth.floor(var1.getX()) >> 4, Mth.floor(var1.getZ()) >> 4);
-      return this.checkChunkFuture(var2, ChunkHolder::getFullChunkFuture);
-   }
-
    private boolean checkChunkFuture(long var1, Function<ChunkHolder, CompletableFuture<Either<LevelChunk, ChunkHolder.ChunkLoadingFailure>>> var3) {
       ChunkHolder var4 = this.getVisibleChunkIfPresent(var1);
       if (var4 == null) {
          return false;
       } else {
@@ -312,76 +309,74 @@
    private void tickChunks() {
       long var1 = this.level.getGameTime();
       long var3 = var1 - this.lastInhabitedUpdate;
       this.lastInhabitedUpdate = var1;
       LevelData var5 = this.level.getLevelData();
-      boolean var6 = var5.getGeneratorType() == LevelType.DEBUG_ALL_BLOCK_STATES;
+      boolean var6 = this.level.isDebug();
       boolean var7 = this.level.getGameRules().getBoolean(GameRules.RULE_DOMOBSPAWNING);
       if (!var6) {
          this.level.getProfiler().push("pollingChunks");
          int var8 = this.level.getGameRules().getInt(GameRules.RULE_RANDOMTICKING);
-         BlockPos var9 = this.level.getSharedSpawnPos();
-         boolean var10 = var5.getGameTime() % 400L == 0L;
+         boolean var9 = var5.getGameTime() % 400L == 0L;
          this.level.getProfiler().push("naturalSpawnCount");
-         int var11 = this.distanceManager.getNaturalSpawnChunkCount();
-         MobCategory[] var12 = MobCategory.values();
-         Object2IntMap var13 = this.level.getMobCategoryCounts();
+         int var10 = this.distanceManager.getNaturalSpawnChunkCount();
+         NaturalSpawner.SpawnState var11 = NaturalSpawner.createState(var10, this.level.getAllEntities(), this::getFullChunk);
+         this.lastSpawnState = var11;
          this.level.getProfiler().pop();
-         this.chunkMap.getChunks().forEach((var10x) -> {
-            Optional var11x = ((Either)var10x.getEntityTickingChunkFuture().getNow(ChunkHolder.UNLOADED_LEVEL_CHUNK)).left();
-            if (var11x.isPresent()) {
-               LevelChunk var12x = (LevelChunk)var11x.get();
+         ArrayList var12 = Lists.newArrayList(this.chunkMap.getChunks());
+         Collections.shuffle(var12);
+         var12.forEach((var7x) -> {
+            Optional var8x = ((Either)var7x.getTickingChunkFuture().getNow(ChunkHolder.UNLOADED_LEVEL_CHUNK)).left();
+            if (var8x.isPresent()) {
                this.level.getProfiler().push("broadcast");
-               var10x.broadcastChanges(var12x);
+               var7x.broadcastChanges((LevelChunk)var8x.get());
                this.level.getProfiler().pop();
-               ChunkPos var13x = var10x.getPos();
-               if (!this.chunkMap.noPlayersCloseForSpawning(var13x)) {
-                  var12x.setInhabitedTime(var12x.getInhabitedTime() + var3);
-                  if (var7 && (this.spawnEnemies || this.spawnFriendlies) && this.level.getWorldBorder().isWithinBounds(var12x.getPos())) {
-                     this.level.getProfiler().push("spawner");
-                     MobCategory[] var14 = var12;
-                     int var15 = var12.length;
-
-                     for(int var16 = 0; var16 < var15; ++var16) {
-                        MobCategory var17 = var14[var16];
-                        if (var17 != MobCategory.MISC && (!var17.isFriendly() || this.spawnFriendlies) && (var17.isFriendly() || this.spawnEnemies) && (!var17.isPersistent() || var10)) {
-                           int var18 = var17.getMaxInstancesPerChunk() * var11 / MAGIC_NUMBER;
-                           if (var13.getInt(var17) <= var18) {
-                              NaturalSpawner.spawnCategoryForChunk(var17, this.level, var12x, var9);
-                           }
-                        }
+               Optional var9x = ((Either)var7x.getEntityTickingChunkFuture().getNow(ChunkHolder.UNLOADED_LEVEL_CHUNK)).left();
+               if (var9x.isPresent()) {
+                  LevelChunk var10 = (LevelChunk)var9x.get();
+                  ChunkPos var11x = var7x.getPos();
+                  if (!this.chunkMap.noPlayersCloseForSpawning(var11x)) {
+                     var10.setInhabitedTime(var10.getInhabitedTime() + var3);
+                     if (var7 && (this.spawnEnemies || this.spawnFriendlies) && this.level.getWorldBorder().isWithinBounds(var10.getPos())) {
+                        NaturalSpawner.spawnForChunk(this.level, var10, var11, this.spawnFriendlies, this.spawnEnemies, var9);
                      }
 
-                     this.level.getProfiler().pop();
+                     this.level.tickChunk(var10, var8);
                   }
-
-                  this.level.tickChunk(var12x, var8);
                }
             }
          });
          this.level.getProfiler().push("customSpawners");
          if (var7) {
-            this.generator.tickCustomSpawners(this.level, this.spawnEnemies, this.spawnFriendlies);
+            this.level.tickCustomSpawners(this.spawnEnemies, this.spawnFriendlies);
          }
 
          this.level.getProfiler().pop();
          this.level.getProfiler().pop();
       }
 
       this.chunkMap.tick();
    }
 
+   private void getFullChunk(long var1, Consumer<LevelChunk> var3) {
+      ChunkHolder var4 = this.getVisibleChunkIfPresent(var1);
+      if (var4 != null) {
+         ((Either)var4.getFullChunkFuture().getNow(ChunkHolder.UNLOADED_LEVEL_CHUNK)).left().ifPresent(var3);
+      }
+
+   }
+
    public String gatherStats() {
       return "ServerChunkCache: " + this.getLoadedChunksCount();
    }
 
    @VisibleForTesting
    public int getPendingTasksCount() {
       return this.mainThreadProcessor.getPendingTasksCount();
    }
 
-   public ChunkGenerator<?> getGenerator() {
+   public ChunkGenerator getGenerator() {
       return this.generator;
    }
 
    public int getLoadedChunksCount() {
       return this.chunkMap.size();
@@ -390,11 +385,11 @@
    public void blockChanged(BlockPos var1) {
       int var2 = var1.getX() >> 4;
       int var3 = var1.getZ() >> 4;
       ChunkHolder var4 = this.getVisibleChunkIfPresent(ChunkPos.asLong(var2, var3));
       if (var4 != null) {
-         var4.blockChanged(var1.getX() & 15, var1.getY(), var1.getZ() & 15);
+         var4.blockChanged(var1);
       }
 
    }
 
    public void onLightUpdate(LightLayer var1, SectionPos var2) {
@@ -454,13 +449,18 @@
 
    public PoiManager getPoiManager() {
       return this.chunkMap.getPoiManager();
    }
 
+   @Nullable
+   public NaturalSpawner.SpawnState getLastSpawnState() {
+      return this.lastSpawnState;
+   }
+
    final class MainThreadExecutor extends BlockableEventLoop<Runnable> {
       private MainThreadExecutor(Level var2) {
-         super("Chunk source main thread executor for " + Registry.DIMENSION_TYPE.getKey(var2.getDimension().getType()));
+         super("Chunk source main thread executor for " + var2.dimension().location());
       }
 
       protected Runnable wrapRunnable(Runnable var1) {
          return var1;
       }
