--- net/minecraft/server/level/ServerPlayer.java
+++ net/minecraft/server/level/ServerPlayer.java
@@ -1,31 +1,36 @@
 package net.minecraft.server.level;
 
 import com.google.common.collect.Lists;
 import com.mojang.authlib.GameProfile;
 import com.mojang.datafixers.util.Either;
+import com.mojang.serialization.DataResult;
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Iterator;
 import java.util.List;
 import java.util.OptionalInt;
 import java.util.Random;
+import java.util.UUID;
 import javax.annotation.Nullable;
 import net.minecraft.ChatFormatting;
 import net.minecraft.CrashReport;
 import net.minecraft.CrashReportCategory;
 import net.minecraft.ReportedException;
 import net.minecraft.Util;
 import net.minecraft.advancements.CriteriaTriggers;
 import net.minecraft.commands.arguments.EntityAnchorArgument;
 import net.minecraft.core.BlockPos;
+import net.minecraft.core.Direction;
 import net.minecraft.core.NonNullList;
 import net.minecraft.core.SectionPos;
 import net.minecraft.nbt.CompoundTag;
+import net.minecraft.nbt.NbtOps;
 import net.minecraft.network.chat.ChatType;
 import net.minecraft.network.chat.Component;
 import net.minecraft.network.chat.HoverEvent;
+import net.minecraft.network.chat.MutableComponent;
 import net.minecraft.network.chat.TextComponent;
 import net.minecraft.network.chat.TranslatableComponent;
 import net.minecraft.network.protocol.Packet;
 import net.minecraft.network.protocol.game.ClientboundAddPlayerPacket;
 import net.minecraft.network.protocol.game.ClientboundAnimatePacket;
@@ -56,10 +61,11 @@
 import net.minecraft.network.protocol.game.ClientboundSetExperiencePacket;
 import net.minecraft.network.protocol.game.ClientboundSetHealthPacket;
 import net.minecraft.network.protocol.game.ClientboundSoundPacket;
 import net.minecraft.network.protocol.game.ClientboundUpdateMobEffectPacket;
 import net.minecraft.network.protocol.game.ServerboundClientInformationPacket;
+import net.minecraft.resources.ResourceKey;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.PlayerAdvancements;
 import net.minecraft.server.network.ServerGamePacketListenerImpl;
 import net.minecraft.server.players.PlayerList;
@@ -81,10 +87,11 @@
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.HumanoidArm;
 import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.animal.horse.AbstractHorse;
 import net.minecraft.world.entity.item.ItemEntity;
+import net.minecraft.world.entity.monster.Monster;
 import net.minecraft.world.entity.player.ChatVisiblity;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.entity.projectile.AbstractArrow;
 import net.minecraft.world.inventory.AbstractContainerMenu;
 import net.minecraft.world.inventory.ContainerListener;
@@ -100,17 +107,20 @@
 import net.minecraft.world.item.crafting.Recipe;
 import net.minecraft.world.item.trading.MerchantOffers;
 import net.minecraft.world.level.ChunkPos;
 import net.minecraft.world.level.GameRules;
 import net.minecraft.world.level.GameType;
-import net.minecraft.world.level.block.Blocks;
+import net.minecraft.world.level.Level;
+import net.minecraft.world.level.biome.BiomeManager;
+import net.minecraft.world.level.block.HorizontalDirectionalBlock;
 import net.minecraft.world.level.block.entity.BlockEntity;
 import net.minecraft.world.level.block.entity.CommandBlockEntity;
 import net.minecraft.world.level.block.entity.SignBlockEntity;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.dimension.DimensionType;
 import net.minecraft.world.level.storage.LevelData;
+import net.minecraft.world.phys.AABB;
 import net.minecraft.world.phys.Vec3;
 import net.minecraft.world.scores.PlayerTeam;
 import net.minecraft.world.scores.Score;
 import net.minecraft.world.scores.Team;
 import net.minecraft.world.scores.criteria.ObjectiveCriteria;
@@ -141,37 +151,40 @@
    private boolean canChatColor = true;
    private long lastActionTime = Util.getMillis();
    private Entity camera;
    private boolean isChangingDimension;
    private boolean seenCredits;
-   private final ServerRecipeBook recipeBook;
+   private final ServerRecipeBook recipeBook = new ServerRecipeBook();
    private Vec3 levitationStartPos;
    private int levitationStartTime;
    private boolean disconnected;
    @Nullable
    private Vec3 enteredNetherPosition;
    private SectionPos lastSectionPos = SectionPos.of(0, 0, 0);
+   private ResourceKey<Level> respawnDimension;
+   private BlockPos respawnPosition;
+   private boolean respawnForced;
    private int containerCounter;
    public boolean ignoreSlotUpdateHack;
    public int latency;
    public boolean wonGame;
 
    public ServerPlayer(MinecraftServer var1, ServerLevel var2, GameProfile var3, ServerPlayerGameMode var4) {
-      super(var2, var3);
+      super(var2, var2.getSharedSpawnPos(), var3);
+      this.respawnDimension = Level.OVERWORLD;
       var4.player = this;
       this.gameMode = var4;
       this.server = var1;
-      this.recipeBook = new ServerRecipeBook(var1.getRecipeManager());
       this.stats = var1.getPlayerList().getPlayerStats(this);
       this.advancements = var1.getPlayerList().getPlayerAdvancements(this);
       this.maxUpStep = 1.0F;
       this.fudgeSpawnLocation(var2);
    }
 
    private void fudgeSpawnLocation(ServerLevel var1) {
       BlockPos var2 = var1.getSharedSpawnPos();
-      if (var1.dimension.isHasSkyLight() && var1.getLevelData().getGameType() != GameType.ADVENTURE) {
+      if (var1.dimensionType().hasSkyLight() && var1.getServer().getWorldData().getGameType() != GameType.ADVENTURE) {
          int var3 = Math.max(0, this.server.getSpawnRadius(var1));
          int var4 = Mth.floor(var1.getWorldBorder().getDistanceToBorder((double)var2.getX(), (double)var2.getZ()));
          if (var4 < var3) {
             var3 = var4;
          }
@@ -188,11 +201,11 @@
 
          for(int var12 = 0; var12 < var9; ++var12) {
             int var13 = (var11 + var10 * var12) % var9;
             int var14 = var13 % (var3 * 2 + 1);
             int var15 = var13 / (var3 * 2 + 1);
-            BlockPos var16 = var1.getDimension().getValidSpawnPosition(var2.getX() + var14 - var3, var2.getZ() + var15 - var3, false);
+            BlockPos var16 = PlayerRespawnLogic.validSpawnPosition(var1, var2, var3, var14, var15);
             if (var16 != null) {
                this.moveTo(var16, 0.0F, 0.0F);
                if (var1.noCollision(this)) {
                   break;
                }
@@ -227,17 +240,28 @@
          this.enteredNetherPosition = new Vec3(var2.getDouble("x"), var2.getDouble("y"), var2.getDouble("z"));
       }
 
       this.seenCredits = var1.getBoolean("seenCredits");
       if (var1.contains("recipeBook", 10)) {
-         this.recipeBook.fromNbt(var1.getCompound("recipeBook"));
+         this.recipeBook.fromNbt(var1.getCompound("recipeBook"), this.server.getRecipeManager());
       }
 
       if (this.isSleeping()) {
          this.stopSleeping();
       }
 
+      if (var1.contains("SpawnX", 99) && var1.contains("SpawnY", 99) && var1.contains("SpawnZ", 99)) {
+         this.respawnPosition = new BlockPos(var1.getInt("SpawnX"), var1.getInt("SpawnY"), var1.getInt("SpawnZ"));
+         this.respawnForced = var1.getBoolean("SpawnForced");
+         if (var1.contains("SpawnDimension")) {
+            DataResult var10001 = Level.RESOURCE_KEY_CODEC.parse(NbtOps.INSTANCE, var1.get("SpawnDimension"));
+            Logger var10002 = LOGGER;
+            var10002.getClass();
+            this.respawnDimension = (ResourceKey)var10001.resultOrPartial(var10002::error).orElse(Level.OVERWORLD);
+         }
+      }
+
    }
 
    public void addAdditionalSaveData(CompoundTag var1) {
       super.addAdditionalSaveData(var1);
       var1.putInt("playerGameType", this.gameMode.getGameModeForPlayer().getId());
@@ -260,10 +284,24 @@
          var4.put("Entity", var5);
          var1.put("RootVehicle", var4);
       }
 
       var1.put("recipeBook", this.recipeBook.toNbt());
+      var1.putString("Dimension", this.level.dimension().location().toString());
+      if (this.respawnPosition != null) {
+         var1.putInt("SpawnX", this.respawnPosition.getX());
+         var1.putInt("SpawnY", this.respawnPosition.getY());
+         var1.putInt("SpawnZ", this.respawnPosition.getZ());
+         var1.putBoolean("SpawnForced", this.respawnForced);
+         DataResult var10000 = ResourceLocation.CODEC.encodeStart(NbtOps.INSTANCE, this.respawnDimension.location());
+         Logger var10001 = LOGGER;
+         var10001.getClass();
+         var10000.resultOrPartial(var10001::error).ifPresent((var1x) -> {
+            var1.put("SpawnDimension", var1x);
+         });
+      }
+
    }
 
    public void setExperiencePoints(int var1) {
       float var2 = (float)this.getXpNeededForNextLevel();
       float var3 = (var2 - 1.0F) / var2;
@@ -356,11 +394,11 @@
       this.advancements.flushDirty(this);
    }
 
    public void doTick() {
       try {
-         if (!this.isSpectator() || this.level.hasChunkAt(new BlockPos(this))) {
+         if (!this.isSpectator() || this.level.hasChunkAt(this.blockPosition())) {
             super.tick();
          }
 
          for(int var1 = 0; var1 < this.inventory.getContainerSize(); ++var1) {
             ItemStack var5 = this.inventory.getItem(var1);
@@ -439,12 +477,12 @@
          this.connection.send(new ClientboundPlayerCombatPacket(this.getCombatTracker(), ClientboundPlayerCombatPacket.Event.ENTITY_DIED, var3), (var2x) -> {
             if (!var2x.isSuccess()) {
                boolean var3x = true;
                String var4 = var3.getString(256);
                TranslatableComponent var5 = new TranslatableComponent("death.attack.message_too_long", new Object[]{(new TextComponent(var4)).withStyle(ChatFormatting.YELLOW)});
-               Component var6 = (new TranslatableComponent("death.attack.even_more_magic", new Object[]{this.getDisplayName()})).withStyle((var1) -> {
-                  var1.setHoverEvent(new HoverEvent(HoverEvent.Action.SHOW_TEXT, var5));
+               MutableComponent var6 = (new TranslatableComponent("death.attack.even_more_magic", new Object[]{this.getDisplayName()})).withStyle((var1) -> {
+                  return var1.withHoverEvent(new HoverEvent(HoverEvent.Action.SHOW_TEXT, var5));
                });
                this.connection.send(new ClientboundPlayerCombatPacket(this.getCombatTracker(), ClientboundPlayerCombatPacket.Event.ENTITY_DIED, var6));
             }
 
          });
@@ -454,11 +492,11 @@
                this.server.getPlayerList().broadcastToTeam(this, var3);
             } else if (var4.getDeathMessageVisibility() == Team.Visibility.HIDE_FOR_OWN_TEAM) {
                this.server.getPlayerList().broadcastToAllExceptTeam(this, var3);
             }
          } else {
-            this.server.getPlayerList().broadcastMessage(var3);
+            this.server.getPlayerList().broadcastMessage(var3, ChatType.SYSTEM, Util.NIL_UUID);
          }
       } else {
          this.connection.send(new ClientboundPlayerCombatPacket(this.getCombatTracker(), ClientboundPlayerCombatPacket.Event.ENTITY_DIED));
       }
 
@@ -550,14 +588,14 @@
    private boolean isPvpAllowed() {
       return this.server.isPvpAllowed();
    }
 
    @Nullable
-   public Entity changeDimension(DimensionType var1) {
+   public Entity changeDimension(ResourceKey<Level> var1) {
       this.isChangingDimension = true;
-      DimensionType var2 = this.dimension;
-      if (var2 == DimensionType.THE_END && var1 == DimensionType.OVERWORLD) {
+      ResourceKey var2 = this.level.dimension();
+      if (var2 == Level.END && var1 == Level.OVERWORLD) {
          this.unRide();
          this.getLevel().removePlayerImmediately(this);
          if (!this.wonGame) {
             this.wonGame = true;
             this.connection.send(new ClientboundGameEventPacket(4, this.seenCredits ? 0.0F : 1.0F));
@@ -565,77 +603,70 @@
          }
 
          return this;
       } else {
          ServerLevel var3 = this.server.getLevel(var2);
-         this.dimension = var1;
          ServerLevel var4 = this.server.getLevel(var1);
          LevelData var5 = var4.getLevelData();
-         this.connection.send(new ClientboundRespawnPacket(var1, LevelData.obfuscateSeed(var5.getSeed()), var5.getGeneratorType(), this.gameMode.getGameModeForPlayer()));
+         this.connection.send(new ClientboundRespawnPacket(var4.dimensionTypeKey(), var1, BiomeManager.obfuscateSeed(var4.getSeed()), this.gameMode.getGameModeForPlayer(), var4.isDebug(), var4.isFlat(), true));
          this.connection.send(new ClientboundChangeDifficultyPacket(var5.getDifficulty(), var5.isDifficultyLocked()));
          PlayerList var6 = this.server.getPlayerList();
          var6.sendPlayerPermissionLevel(this);
          var3.removePlayerImmediately(this);
          this.removed = false;
          double var7 = this.getX();
          double var9 = this.getY();
          double var11 = this.getZ();
          float var13 = this.xRot;
          float var14 = this.yRot;
-         double var15 = 8.0D;
-         float var17 = var14;
+         float var15 = var14;
          var3.getProfiler().push("moving");
-         if (var2 == DimensionType.OVERWORLD && var1 == DimensionType.NETHER) {
-            this.enteredNetherPosition = this.position();
-            var7 /= 8.0D;
-            var11 /= 8.0D;
-         } else if (var2 == DimensionType.NETHER && var1 == DimensionType.OVERWORLD) {
-            var7 *= 8.0D;
-            var11 *= 8.0D;
-         } else if (var2 == DimensionType.OVERWORLD && var1 == DimensionType.THE_END) {
-            BlockPos var18 = var4.getDimensionSpecificSpawn();
-            var7 = (double)var18.getX();
-            var9 = (double)var18.getY();
-            var11 = (double)var18.getZ();
+         double var18;
+         if (var2 == Level.OVERWORLD && var1 == Level.END) {
+            BlockPos var29 = ServerLevel.END_SPAWN_POINT;
+            var7 = (double)var29.getX();
+            var9 = (double)var29.getY();
+            var11 = (double)var29.getZ();
             var14 = 90.0F;
             var13 = 0.0F;
+         } else {
+            if (var2 == Level.OVERWORLD && var1 == Level.NETHER) {
+               this.enteredNetherPosition = this.position();
+            }
+
+            DimensionType var16 = var3.dimensionType();
+            DimensionType var17 = var4.dimensionType();
+            var18 = 8.0D;
+            if (!var16.shrunk() && var17.shrunk()) {
+               var7 /= 8.0D;
+               var11 /= 8.0D;
+            } else if (var16.shrunk() && !var17.shrunk()) {
+               var7 *= 8.0D;
+               var11 *= 8.0D;
+            }
          }
 
          this.moveTo(var7, var9, var11, var14, var13);
          var3.getProfiler().pop();
          var3.getProfiler().push("placing");
-         double var38 = Math.min(-2.9999872E7D, var4.getWorldBorder().getMinX() + 16.0D);
-         double var20 = Math.min(-2.9999872E7D, var4.getWorldBorder().getMinZ() + 16.0D);
-         double var22 = Math.min(2.9999872E7D, var4.getWorldBorder().getMaxX() - 16.0D);
-         double var24 = Math.min(2.9999872E7D, var4.getWorldBorder().getMaxZ() - 16.0D);
-         var7 = Mth.clamp(var7, var38, var22);
-         var11 = Mth.clamp(var11, var20, var24);
+         double var30 = Math.min(-2.9999872E7D, var4.getWorldBorder().getMinX() + 16.0D);
+         var18 = Math.min(-2.9999872E7D, var4.getWorldBorder().getMinZ() + 16.0D);
+         double var20 = Math.min(2.9999872E7D, var4.getWorldBorder().getMaxX() - 16.0D);
+         double var22 = Math.min(2.9999872E7D, var4.getWorldBorder().getMaxZ() - 16.0D);
+         var7 = Mth.clamp(var7, var30, var20);
+         var11 = Mth.clamp(var11, var18, var22);
          this.moveTo(var7, var9, var11, var14, var13);
-         if (var1 == DimensionType.THE_END) {
-            int var26 = Mth.floor(this.getX());
-            int var27 = Mth.floor(this.getY()) - 1;
-            int var28 = Mth.floor(this.getZ());
-            boolean var29 = true;
-            boolean var30 = false;
-
-            for(int var31 = -2; var31 <= 2; ++var31) {
-               for(int var32 = -2; var32 <= 2; ++var32) {
-                  for(int var33 = -1; var33 < 3; ++var33) {
-                     int var34 = var26 + var32 * 1 + var31 * 0;
-                     int var35 = var27 + var33;
-                     int var36 = var28 + var32 * 0 - var31 * 1;
-                     boolean var37 = var33 < 0;
-                     var4.setBlockAndUpdate(new BlockPos(var34, var35, var36), var37 ? Blocks.OBSIDIAN.defaultBlockState() : Blocks.AIR.defaultBlockState());
-                  }
-               }
-            }
-
-            this.moveTo((double)var26, (double)var27, (double)var28, var14, 0.0F);
+         if (var1 == Level.END) {
+            int var24 = Mth.floor(this.getX());
+            int var25 = Mth.floor(this.getY()) - 1;
+            int var26 = Mth.floor(this.getZ());
+            ServerLevel.makeObsidianPlatform(var4);
+            this.moveTo((double)var24, (double)var25, (double)var26, var14, 0.0F);
             this.setDeltaMovement(Vec3.ZERO);
-         } else if (!var4.getPortalForcer().findAndMoveToPortal(this, var17)) {
+         } else if (!var4.getPortalForcer().findAndMoveToPortal(this, var15)) {
             var4.getPortalForcer().createPortal(this);
-            var4.getPortalForcer().findAndMoveToPortal(this, var17);
+            var4.getPortalForcer().findAndMoveToPortal(this, var15);
          }
 
          var3.getProfiler().pop();
          this.setLevel(var4);
          var4.addDuringPortalTeleport(this);
@@ -643,15 +674,15 @@
          this.connection.teleport(this.getX(), this.getY(), this.getZ(), var14, var13);
          this.gameMode.setLevel(var4);
          this.connection.send(new ClientboundPlayerAbilitiesPacket(this.abilities));
          var6.sendLevelInfo(this, var4);
          var6.sendAllPlayerInfo(this);
-         Iterator var39 = this.getActiveEffects().iterator();
+         Iterator var27 = this.getActiveEffects().iterator();
 
-         while(var39.hasNext()) {
-            MobEffectInstance var40 = (MobEffectInstance)var39.next();
-            this.connection.send(new ClientboundUpdateMobEffectPacket(this.getId(), var40));
+         while(var27.hasNext()) {
+            MobEffectInstance var28 = (MobEffectInstance)var27.next();
+            this.connection.send(new ClientboundUpdateMobEffectPacket(this.getId(), var28));
          }
 
          this.connection.send(new ClientboundLevelEventPacket(1032, BlockPos.ZERO, 0, false));
          this.lastSentExp = -1;
          this.lastSentHealth = -1.0F;
@@ -659,18 +690,20 @@
          return this;
       }
    }
 
    private void triggerDimensionChangeTriggers(ServerLevel var1) {
-      DimensionType var2 = var1.dimension.getType();
-      DimensionType var3 = this.level.dimension.getType();
-      CriteriaTriggers.CHANGED_DIMENSION.trigger(this, var2, var3);
-      if (var2 == DimensionType.NETHER && var3 == DimensionType.OVERWORLD && this.enteredNetherPosition != null) {
+      DimensionType var2 = var1.dimensionType();
+      DimensionType var3 = this.level.dimensionType();
+      ResourceKey var4 = var1.dimension();
+      ResourceKey var5 = this.level.dimension();
+      CriteriaTriggers.CHANGED_DIMENSION.trigger(this, var4, var5);
+      if (var2.isNether() && var3.isOverworld() && this.enteredNetherPosition != null) {
          CriteriaTriggers.NETHER_TRAVEL.trigger(this, this.enteredNetherPosition);
       }
 
-      if (var3 != DimensionType.NETHER) {
+      if (var5 != Level.NETHER) {
          this.enteredNetherPosition = null;
       }
 
    }
 
@@ -696,16 +729,67 @@
       super.take(var1, var2);
       this.containerMenu.broadcastChanges();
    }
 
    public Either<Player.BedSleepingProblem, Unit> startSleepInBed(BlockPos var1) {
-      return super.startSleepInBed(var1).ifRight((var1x) -> {
-         this.awardStat(Stats.SLEEP_IN_BED);
-         CriteriaTriggers.SLEPT_IN_BED.trigger(this);
-      });
+      Direction var2 = (Direction)this.level.getBlockState(var1).getValue(HorizontalDirectionalBlock.FACING);
+      if (!this.isSleeping() && this.isAlive()) {
+         if (!this.level.dimensionType().natural()) {
+            return Either.left(Player.BedSleepingProblem.NOT_POSSIBLE_HERE);
+         } else if (!this.bedInRange(var1, var2)) {
+            return Either.left(Player.BedSleepingProblem.TOO_FAR_AWAY);
+         } else if (this.bedBlocked(var1, var2)) {
+            return Either.left(Player.BedSleepingProblem.OBSTRUCTED);
+         } else {
+            this.setRespawnPosition(this.level.dimension(), var1, false, true);
+            if (this.level.isDay()) {
+               return Either.left(Player.BedSleepingProblem.NOT_POSSIBLE_NOW);
+            } else {
+               if (!this.isCreative()) {
+                  double var3 = 8.0D;
+                  double var5 = 5.0D;
+                  Vec3 var7 = Vec3.atBottomCenterOf(var1);
+                  List var8 = this.level.getEntitiesOfClass(Monster.class, new AABB(var7.x() - 8.0D, var7.y() - 5.0D, var7.z() - 8.0D, var7.x() + 8.0D, var7.y() + 5.0D, var7.z() + 8.0D), (var1x) -> {
+                     return var1x.isPreventingPlayerRest(this);
+                  });
+                  if (!var8.isEmpty()) {
+                     return Either.left(Player.BedSleepingProblem.NOT_SAFE);
+                  }
+               }
+
+               Either var9 = super.startSleepInBed(var1).ifRight((var1x) -> {
+                  this.awardStat(Stats.SLEEP_IN_BED);
+                  CriteriaTriggers.SLEPT_IN_BED.trigger(this);
+               });
+               ((ServerLevel)this.level).updateSleepingPlayerList();
+               return var9;
+            }
+         }
+      } else {
+         return Either.left(Player.BedSleepingProblem.OTHER_PROBLEM);
+      }
    }
 
+   public void startSleeping(BlockPos var1) {
+      this.resetStat(Stats.CUSTOM.get(Stats.TIME_SINCE_REST));
+      super.startSleeping(var1);
+   }
+
+   private boolean bedInRange(BlockPos var1, Direction var2) {
+      return this.isReachableBedBlock(var1) || this.isReachableBedBlock(var1.relative(var2.getOpposite()));
+   }
+
+   private boolean isReachableBedBlock(BlockPos var1) {
+      Vec3 var2 = Vec3.atBottomCenterOf(var1);
+      return Math.abs(this.getX() - var2.x()) <= 3.0D && Math.abs(this.getY() - var2.y()) <= 2.0D && Math.abs(this.getZ() - var2.z()) <= 3.0D;
+   }
+
+   private boolean bedBlocked(BlockPos var1, Direction var2) {
+      BlockPos var3 = var1.above();
+      return !this.freeAt(var3) || !this.freeAt(var3.relative(var2.getOpposite()));
+   }
+
    public void stopSleepInBed(boolean var1, boolean var2) {
       if (this.isSleeping()) {
          this.getLevel().getChunkSource().broadcastAndSend(this, new ClientboundAnimatePacket(this, 2));
       }
 
@@ -755,12 +839,11 @@
    }
 
    public void doCheckFallDamage(double var1, boolean var3) {
       BlockPos var4 = this.getOnPos();
       if (this.level.hasChunkAt(var4)) {
-         BlockState var5 = this.level.getBlockState(var4);
-         super.checkFallDamage(var1, var3, var5, var4);
+         super.checkFallDamage(var1, var3, this.level.getBlockState(var4), var4);
       }
    }
 
    public void openTextEdit(SignBlockEntity var1) {
       var1.setAllowedPlayerEditor(this);
@@ -781,11 +864,11 @@
 
          this.nextContainerCounter();
          AbstractContainerMenu var2 = var1.createMenu(this.containerCounter, this.inventory, this);
          if (var2 == null) {
             if (this.isSpectator()) {
-               this.displayClientMessage((new TranslatableComponent("container.spectatorCantOpen", new Object[0])).withStyle(ChatFormatting.RED), true);
+               this.displayClientMessage((new TranslatableComponent("container.spectatorCantOpen")).withStyle(ChatFormatting.RED), true);
             }
 
             return OptionalInt.empty();
          } else {
             this.connection.send(new ClientboundOpenScreenPacket(var2.containerId, var2.getType(), var1.getDisplayName()));
@@ -829,11 +912,11 @@
    }
 
    public void slotChanged(AbstractContainerMenu var1, int var2, ItemStack var3) {
       if (!(var1.getSlot(var2) instanceof ResultSlot)) {
          if (var1 == this.inventoryMenu) {
-            CriteriaTriggers.INVENTORY_CHANGED.trigger(this, this.inventory);
+            CriteriaTriggers.INVENTORY_CHANGED.trigger(this, this.inventory, var3);
          }
 
          if (!this.ignoreSlotUpdateHack) {
             this.connection.send(new ClientboundContainerSetSlotPacket(var1.containerId, var2, var3));
          }
@@ -939,11 +1022,11 @@
    public void resetSentInfo() {
       this.lastSentHealth = -1.0E8F;
    }
 
    public void displayClientMessage(Component var1, boolean var2) {
-      this.connection.send(new ClientboundChatPacket(var1, var2 ? ChatType.GAME_INFO : ChatType.CHAT));
+      this.connection.send(new ClientboundChatPacket(var1, var2 ? ChatType.GAME_INFO : ChatType.CHAT, Util.NIL_UUID));
    }
 
    protected void completeUsingItem() {
       if (!this.useItem.isEmpty() && this.isUsingItem()) {
          this.connection.send(new ClientboundEntityEventPacket(this, (byte)9));
@@ -1026,11 +1109,11 @@
 
    public void teleportTo(double var1, double var3, double var5) {
       this.connection.teleport(var1, var3, var5, this.yRot, this.xRot);
    }
 
-   public void forceMove(double var1, double var3, double var5) {
+   public void moveTo(double var1, double var3, double var5) {
       this.connection.teleport(var1, var3, var5, this.yRot, this.xRot);
       this.connection.resetPosition();
    }
 
    public void crit(Entity var1) {
@@ -1072,21 +1155,21 @@
 
    public boolean isCreative() {
       return this.gameMode.getGameModeForPlayer() == GameType.CREATIVE;
    }
 
-   public void sendMessage(Component var1) {
-      this.sendMessage(var1, ChatType.SYSTEM);
+   public void sendMessage(Component var1, UUID var2) {
+      this.sendMessage(var1, ChatType.SYSTEM, var2);
    }
 
-   public void sendMessage(Component var1, ChatType var2) {
-      this.connection.send(new ClientboundChatPacket(var1, var2), (var3) -> {
-         if (!var3.isSuccess() && (var2 == ChatType.GAME_INFO || var2 == ChatType.SYSTEM)) {
-            boolean var4 = true;
-            String var5 = var1.getString(256);
-            Component var6 = (new TextComponent(var5)).withStyle(ChatFormatting.YELLOW);
-            this.connection.send(new ClientboundChatPacket((new TranslatableComponent("multiplayer.message_not_delivered", new Object[]{var6})).withStyle(ChatFormatting.RED), ChatType.SYSTEM));
+   public void sendMessage(Component var1, ChatType var2, UUID var3) {
+      this.connection.send(new ClientboundChatPacket(var1, var2, var3), (var4) -> {
+         if (!var4.isSuccess() && (var2 == ChatType.GAME_INFO || var2 == ChatType.SYSTEM)) {
+            boolean var5 = true;
+            String var6 = var1.getString(256);
+            MutableComponent var7 = (new TextComponent(var6)).withStyle(ChatFormatting.YELLOW);
+            this.connection.send(new ClientboundChatPacket((new TranslatableComponent("multiplayer.message_not_delivered", new Object[]{var7})).withStyle(ChatFormatting.RED), ChatType.SYSTEM, var3));
          }
 
       });
    }
 
@@ -1213,13 +1296,12 @@
       this.stopRiding();
       if (var1 == this.level) {
          this.connection.teleport(var2, var4, var6, var8, var9);
       } else {
          ServerLevel var10 = this.getLevel();
-         this.dimension = var1.dimension.getType();
          LevelData var11 = var1.getLevelData();
-         this.connection.send(new ClientboundRespawnPacket(this.dimension, LevelData.obfuscateSeed(var11.getSeed()), var11.getGeneratorType(), this.gameMode.getGameModeForPlayer()));
+         this.connection.send(new ClientboundRespawnPacket(var1.dimensionTypeKey(), var1.dimension(), BiomeManager.obfuscateSeed(var1.getSeed()), this.gameMode.getGameModeForPlayer(), var1.isDebug(), var1.isFlat(), true));
          this.connection.send(new ClientboundChangeDifficultyPacket(var11.getDifficulty(), var11.isDifficultyLocked()));
          this.server.getPlayerList().sendPlayerPermissionLevel(this);
          var10.removePlayerImmediately(this);
          this.removed = false;
          this.moveTo(var2, var4, var6, var8, var9);
@@ -1232,10 +1314,41 @@
          this.server.getPlayerList().sendAllPlayerInfo(this);
       }
 
    }
 
+   @Nullable
+   public BlockPos getRespawnPosition() {
+      return this.respawnPosition;
+   }
+
+   public ResourceKey<Level> getRespawnDimension() {
+      return this.respawnDimension;
+   }
+
+   public boolean isRespawnForced() {
+      return this.respawnForced;
+   }
+
+   public void setRespawnPosition(ResourceKey<Level> var1, BlockPos var2, boolean var3, boolean var4) {
+      if (var2 != null) {
+         boolean var5 = var2.equals(this.respawnPosition) && var1.equals(this.respawnDimension);
+         if (var4 && !var5) {
+            this.sendMessage(new TranslatableComponent("block.minecraft.set_spawn"), Util.NIL_UUID);
+         }
+
+         this.respawnPosition = var2;
+         this.respawnDimension = var1;
+         this.respawnForced = var3;
+      } else {
+         this.respawnPosition = null;
+         this.respawnDimension = Level.OVERWORLD;
+         this.respawnForced = false;
+      }
+
+   }
+
    public void trackChunk(ChunkPos var1, Packet<?> var2, Packet<?> var3) {
       this.connection.send(var3);
       this.connection.send(var2);
    }
 
