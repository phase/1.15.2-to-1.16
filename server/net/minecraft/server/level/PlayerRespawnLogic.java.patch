--- net/minecraft/server/level/PlayerRespawnLogic.java
+++ net/minecraft/server/level/PlayerRespawnLogic.java
@@ -1,0 +1,77 @@
+package net.minecraft.server.level;
+
+import java.util.Random;
+import javax.annotation.Nullable;
+import net.minecraft.core.BlockPos;
+import net.minecraft.tags.BlockTags;
+import net.minecraft.tags.Tag;
+import net.minecraft.world.level.ChunkPos;
+import net.minecraft.world.level.biome.Biome;
+import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.chunk.LevelChunk;
+import net.minecraft.world.level.levelgen.Heightmap;
+
+public class PlayerRespawnLogic {
+   @Nullable
+   private static BlockPos getOverworldRespawnPos(ServerLevel var0, int var1, int var2, boolean var3) {
+      BlockPos.MutableBlockPos var4 = new BlockPos.MutableBlockPos(var1, 0, var2);
+      Biome var5 = var0.getBiome(var4);
+      BlockState var6 = var5.getSurfaceBuilderConfig().getTopMaterial();
+      if (var3 && !var6.getBlock().is((Tag)BlockTags.VALID_SPAWN)) {
+         return null;
+      } else {
+         LevelChunk var7 = var0.getChunk(var1 >> 4, var2 >> 4);
+         int var8 = var7.getHeight(Heightmap.Types.MOTION_BLOCKING, var1 & 15, var2 & 15);
+         if (var8 < 0) {
+            return null;
+         } else if (var7.getHeight(Heightmap.Types.WORLD_SURFACE, var1 & 15, var2 & 15) > var7.getHeight(Heightmap.Types.OCEAN_FLOOR, var1 & 15, var2 & 15)) {
+            return null;
+         } else {
+            for(int var9 = var8 + 1; var9 >= 0; --var9) {
+               var4.set(var1, var9, var2);
+               BlockState var10 = var0.getBlockState(var4);
+               if (!var10.getFluidState().isEmpty()) {
+                  break;
+               }
+
+               if (var10.equals(var6)) {
+                  return var4.above().immutable();
+               }
+            }
+
+            return null;
+         }
+      }
+   }
+
+   @Nullable
+   private static BlockPos getEndRespawnPos(ServerLevel var0, long var1, int var3, int var4) {
+      ChunkPos var5 = new ChunkPos(var3 >> 4, var4 >> 4);
+      Random var6 = new Random(var1);
+      BlockPos var7 = new BlockPos(var5.getMinBlockX() + var6.nextInt(15), 0, var5.getMaxBlockZ() + var6.nextInt(15));
+      return var0.getTopBlockState(var7).getMaterial().blocksMotion() ? var7 : null;
+   }
+
+   @Nullable
+   public static BlockPos getSpawnPosInChunk(ServerLevel var0, ChunkPos var1, boolean var2) {
+      for(int var3 = var1.getMinBlockX(); var3 <= var1.getMaxBlockX(); ++var3) {
+         for(int var4 = var1.getMinBlockZ(); var4 <= var1.getMaxBlockZ(); ++var4) {
+            BlockPos var5 = getOverworldRespawnPos(var0, var3, var4, var2);
+            if (var5 != null) {
+               return var5;
+            }
+         }
+      }
+
+      return null;
+   }
+
+   @Nullable
+   protected static BlockPos validSpawnPosition(ServerLevel var0, BlockPos var1, int var2, int var3, int var4) {
+      if (var0.dimensionType().isOverworld()) {
+         return getOverworldRespawnPos(var0, var1.getX() + var3 - var2, var1.getZ() + var4 - var2, false);
+      } else {
+         return var0.dimensionType().isEnd() ? getEndRespawnPos(var0, var0.getSeed(), var1.getX() + var3 - var2, var1.getZ() + var4 - var2) : null;
+      }
+   }
+}
