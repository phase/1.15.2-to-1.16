--- net/minecraft/core/MappedRegistry.java
+++ net/minecraft/core/MappedRegistry.java
@@ -1,62 +1,87 @@
 package net.minecraft.core;
 
 import com.google.common.collect.BiMap;
 import com.google.common.collect.HashBiMap;
+import com.google.common.collect.ImmutableList;
+import com.google.common.collect.ImmutableMap;
+import com.google.common.collect.Sets;
+import com.mojang.datafixers.util.Pair;
+import com.mojang.serialization.Codec;
+import com.mojang.serialization.Lifecycle;
+import com.mojang.serialization.MapCodec;
 import java.util.Collections;
 import java.util.Iterator;
 import java.util.Optional;
 import java.util.Random;
 import java.util.Set;
+import java.util.Map.Entry;
 import javax.annotation.Nullable;
+import net.minecraft.Util;
+import net.minecraft.resources.RegistryDataPackCodec;
+import net.minecraft.resources.ResourceKey;
 import net.minecraft.resources.ResourceLocation;
+import net.minecraft.util.Codecs;
 import net.minecraft.util.CrudeIncrementalIntIdentityHashBiMap;
 import org.apache.commons.lang3.Validate;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
 public class MappedRegistry<T> extends WritableRegistry<T> {
    protected static final Logger LOGGER = LogManager.getLogger();
    protected final CrudeIncrementalIntIdentityHashBiMap<T> map = new CrudeIncrementalIntIdentityHashBiMap(256);
    protected final BiMap<ResourceLocation, T> storage = HashBiMap.create();
+   private final BiMap<ResourceKey<T>, T> keyStorage = HashBiMap.create();
+   private final Set<ResourceKey<T>> persistent = Sets.newIdentityHashSet();
    protected Object[] randomCache;
    private int nextId;
 
-   public MappedRegistry() {
+   public MappedRegistry(ResourceKey<Registry<T>> var1, Lifecycle var2) {
+      super(var1, var2);
    }
 
-   public <V extends T> V registerMapping(int var1, ResourceLocation var2, V var3) {
+   public <V extends T> V registerMapping(int var1, ResourceKey<T> var2, V var3) {
       this.map.addMapping(var3, var1);
       Validate.notNull(var2);
       Validate.notNull(var3);
       this.randomCache = null;
-      if (this.storage.containsKey(var2)) {
+      if (this.keyStorage.containsKey(var2)) {
          LOGGER.debug((String)"Adding duplicate key '{}' to registry", (Object)var2);
       }
 
-      this.storage.put(var2, var3);
+      this.storage.put(var2.location(), var3);
+      this.keyStorage.put(var2, var3);
       if (this.nextId <= var1) {
          this.nextId = var1 + 1;
       }
 
       return var3;
    }
 
-   public <V extends T> V register(ResourceLocation var1, V var2) {
+   public <V extends T> V register(ResourceKey<T> var1, V var2) {
       return this.registerMapping(this.nextId, var1, var2);
    }
 
    @Nullable
    public ResourceLocation getKey(T var1) {
       return (ResourceLocation)this.storage.inverse().get(var1);
    }
 
+   public Optional<ResourceKey<T>> getResourceKey(T var1) {
+      return Optional.ofNullable(this.keyStorage.inverse().get(var1));
+   }
+
    public int getId(@Nullable T var1) {
       return this.map.getId(var1);
    }
 
    @Nullable
+   public T get(@Nullable ResourceKey<T> var1) {
+      return this.keyStorage.get(var1);
+   }
+
+   @Nullable
    public T byId(int var1) {
       return this.map.byId(var1);
    }
 
    public Iterator<T> iterator() {
@@ -74,12 +99,12 @@
 
    public Set<ResourceLocation> keySet() {
       return Collections.unmodifiableSet(this.storage.keySet());
    }
 
-   public boolean isEmpty() {
-      return this.storage.isEmpty();
+   public Set<Entry<ResourceKey<T>, T>> entrySet() {
+      return Collections.unmodifiableMap(this.keyStorage).entrySet();
    }
 
    @Nullable
    public T getRandom(Random var1) {
       if (this.randomCache == null) {
@@ -89,8 +114,69 @@
          }
 
          this.randomCache = var2.toArray(new Object[var2.size()]);
       }
 
-      return this.randomCache[var1.nextInt(this.randomCache.length)];
+      return Util.getRandom(this.randomCache, var1);
    }
+
+   public boolean containsKey(ResourceLocation var1) {
+      return this.storage.containsKey(var1);
+   }
+
+   public boolean containsId(int var1) {
+      return this.map.contains(var1);
+   }
+
+   public boolean persistent(ResourceKey<T> var1) {
+      return this.persistent.contains(var1);
+   }
+
+   public void setPersistent(ResourceKey<T> var1) {
+      this.persistent.add(var1);
+   }
+
+   public static <T> Codec<MappedRegistry<T>> networkCodec(ResourceKey<Registry<T>> var0, Lifecycle var1, MapCodec<T> var2) {
+      return Codecs.withName(var0, var2).codec().listOf().xmap((var2x) -> {
+         MappedRegistry var3 = new MappedRegistry(var0, var1);
+         Iterator var4 = var2x.iterator();
+
+         while(var4.hasNext()) {
+            Pair var5 = (Pair)var4.next();
+            var3.register((ResourceKey)var5.getFirst(), var5.getSecond());
+         }
+
+         return var3;
+      }, (var0x) -> {
+         ImmutableList.Builder var1 = ImmutableList.builder();
+         Iterator var2 = var0x.map.iterator();
+
+         while(var2.hasNext()) {
+            Object var3 = var2.next();
+            var1.add((Object)Pair.of(var0x.getResourceKey(var3).get(), var3));
+         }
+
+         return var1.build();
+      });
+   }
+
+   public static <T> Codec<MappedRegistry<T>> dataPackCodec(ResourceKey<Registry<T>> var0, Lifecycle var1, MapCodec<T> var2) {
+      return RegistryDataPackCodec.create(var0, var1, var2);
+   }
+
+   public static <T> Codec<MappedRegistry<T>> directCodec(ResourceKey<Registry<T>> var0, Lifecycle var1, MapCodec<T> var2) {
+      return Codec.unboundedMap(ResourceLocation.CODEC.xmap(ResourceKey.elementKey(var0), ResourceKey::location), var2.codec()).xmap((var2x) -> {
+         MappedRegistry var3 = new MappedRegistry(var0, var1);
+         var2x.forEach((var1x, var2) -> {
+            var3.registerMapping(var3.nextId, var1x, var2);
+            var3.setPersistent(var1x);
+         });
+         return var3;
+      }, (var0x) -> {
+         ImmutableMap.Builder var1 = ImmutableMap.builder();
+         var0x.keyStorage.entrySet().stream().filter((var1x) -> {
+            return var0x.persistent((ResourceKey)var1x.getKey());
+         }).forEach(var1::put);
+         return var1.build();
+      });
+   }
 }
