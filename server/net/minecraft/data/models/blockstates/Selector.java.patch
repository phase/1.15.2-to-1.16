--- net/minecraft/data/models/blockstates/Selector.java
+++ net/minecraft/data/models/blockstates/Selector.java
@@ -1,0 +1,50 @@
+package net.minecraft.data.models.blockstates;
+
+import com.google.common.collect.ImmutableList;
+import java.util.Comparator;
+import java.util.List;
+import java.util.stream.Collectors;
+
+public final class Selector {
+   private static final Selector EMPTY = new Selector(ImmutableList.of());
+   private static final Comparator<PropertyValue<?>> COMPARE_BY_NAME = Comparator.comparing((var0) -> {
+      return var0.getProperty().getName();
+   });
+   private final List<PropertyValue<?>> values;
+
+   public Selector extend(PropertyValue<?> var1) {
+      return new Selector(ImmutableList.builder().addAll((Iterable)this.values).add((Object)var1).build());
+   }
+
+   public Selector extend(Selector var1) {
+      return new Selector(ImmutableList.builder().addAll((Iterable)this.values).addAll((Iterable)var1.values).build());
+   }
+
+   private Selector(List<PropertyValue<?>> var1) {
+      this.values = var1;
+   }
+
+   public static Selector empty() {
+      return EMPTY;
+   }
+
+   public static Selector of(PropertyValue<?>... var0) {
+      return new Selector(ImmutableList.copyOf((Object[])var0));
+   }
+
+   public boolean equals(Object var1) {
+      return this == var1 || var1 instanceof Selector && this.values.equals(((Selector)var1).values);
+   }
+
+   public int hashCode() {
+      return this.values.hashCode();
+   }
+
+   public String getKey() {
+      return (String)this.values.stream().sorted(COMPARE_BY_NAME).map(PropertyValue::toString).collect(Collectors.joining(","));
+   }
+
+   public String toString() {
+      return this.getKey();
+   }
+}
