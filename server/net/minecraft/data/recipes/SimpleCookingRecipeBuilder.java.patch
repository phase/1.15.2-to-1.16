--- net/minecraft/data/recipes/SimpleCookingRecipeBuilder.java
+++ net/minecraft/data/recipes/SimpleCookingRecipeBuilder.java
@@ -44,11 +44,11 @@
 
    public static SimpleCookingRecipeBuilder smelting(Ingredient var0, ItemLike var1, float var2, int var3) {
       return cooking(var0, var1, var2, var3, RecipeSerializer.SMELTING_RECIPE);
    }
 
-   public SimpleCookingRecipeBuilder unlocks(String var1, CriterionTriggerInstance var2) {
+   public SimpleCookingRecipeBuilder unlockedBy(String var1, CriterionTriggerInstance var2) {
       this.advancement.addCriterion(var1, var2);
       return this;
    }
 
    public void save(Consumer<FinishedRecipe> var1) {
@@ -65,11 +65,11 @@
       }
    }
 
    public void save(Consumer<FinishedRecipe> var1, ResourceLocation var2) {
       this.ensureValid(var2);
-      this.advancement.parent(new ResourceLocation("recipes/root")).addCriterion("has_the_recipe", (CriterionTriggerInstance)(new RecipeUnlockedTrigger.TriggerInstance(var2))).rewards(AdvancementRewards.Builder.recipe(var2)).requirements(RequirementsStrategy.OR);
+      this.advancement.parent(new ResourceLocation("recipes/root")).addCriterion("has_the_recipe", (CriterionTriggerInstance)RecipeUnlockedTrigger.unlocked(var2)).rewards(AdvancementRewards.Builder.recipe(var2)).requirements(RequirementsStrategy.OR);
       var1.accept(new SimpleCookingRecipeBuilder.Result(var2, this.group == null ? "" : this.group, this.ingredient, this.result, this.experience, this.cookingTime, this.advancement, new ResourceLocation(var2.getNamespace(), "recipes/" + this.result.getItemCategory().getRecipeFolderName() + "/" + var2.getPath()), this.serializer));
    }
 
    private void ensureValid(ResourceLocation var1) {
       if (this.advancement.getCriteria().isEmpty()) {
