--- net/minecraft/data/worldgen/biome/DeepFrozenOceanBiome.java
+++ net/minecraft/data/worldgen/biome/DeepFrozenOceanBiome.java
@@ -1,0 +1,66 @@
+package net.minecraft.data.worldgen.biome;
+
+import com.google.common.collect.ImmutableList;
+import net.minecraft.core.BlockPos;
+import net.minecraft.data.worldgen.BiomeDefaultFeatures;
+import net.minecraft.data.worldgen.StructureFeatures;
+import net.minecraft.data.worldgen.SurfaceBuilders;
+import net.minecraft.world.entity.EntityType;
+import net.minecraft.world.entity.MobCategory;
+import net.minecraft.world.level.biome.AmbientMoodSettings;
+import net.minecraft.world.level.biome.Biome;
+import net.minecraft.world.level.biome.BiomeSpecialEffects;
+import net.minecraft.world.level.levelgen.WorldgenRandom;
+import net.minecraft.world.level.levelgen.synth.PerlinSimplexNoise;
+
+public class DeepFrozenOceanBiome extends Biome {
+   protected static final PerlinSimplexNoise FROZEN_TEMPERATURE_NOISE = new PerlinSimplexNoise(new WorldgenRandom(3456L), ImmutableList.of(-2, -1, 0));
+
+   public DeepFrozenOceanBiome() {
+      super((new Biome.BiomeBuilder()).surfaceBuilder(SurfaceBuilders.FROZEN_OCEAN).precipitation(Biome.Precipitation.RAIN).biomeCategory(Biome.BiomeCategory.OCEAN).depth(-1.8F).scale(0.1F).temperature(0.5F).downfall(0.5F).specialEffects((new BiomeSpecialEffects.Builder()).waterColor(3750089).waterFogColor(329011).fogColor(12638463).ambientMoodSound(AmbientMoodSettings.LEGACY_CAVE_SETTINGS).build()).parent((String)null));
+      this.addStructureStart(StructureFeatures.OCEAN_RUIN_COLD);
+      this.addStructureStart(StructureFeatures.OCEAN_MONUMENT);
+      BiomeDefaultFeatures.addDefaultOverworldOceanStructures(this);
+      this.addStructureStart(StructureFeatures.RUINED_PORTAL_OCEAN);
+      BiomeDefaultFeatures.addOceanCarvers(this);
+      BiomeDefaultFeatures.addDefaultLakes(this);
+      BiomeDefaultFeatures.addIcebergs(this);
+      BiomeDefaultFeatures.addDefaultMonsterRoom(this);
+      BiomeDefaultFeatures.addBlueIce(this);
+      BiomeDefaultFeatures.addDefaultUndergroundVariety(this);
+      BiomeDefaultFeatures.addDefaultOres(this);
+      BiomeDefaultFeatures.addDefaultSoftDisks(this);
+      BiomeDefaultFeatures.addWaterTrees(this);
+      BiomeDefaultFeatures.addDefaultFlowers(this);
+      BiomeDefaultFeatures.addDefaultGrass(this);
+      BiomeDefaultFeatures.addDefaultMushrooms(this);
+      BiomeDefaultFeatures.addDefaultExtraVegetation(this);
+      BiomeDefaultFeatures.addDefaultSprings(this);
+      BiomeDefaultFeatures.addSurfaceFreezing(this);
+      this.addSpawn(MobCategory.WATER_CREATURE, new Biome.SpawnerData(EntityType.SQUID, 1, 1, 4));
+      this.addSpawn(MobCategory.WATER_AMBIENT, new Biome.SpawnerData(EntityType.SALMON, 15, 1, 5));
+      this.addSpawn(MobCategory.CREATURE, new Biome.SpawnerData(EntityType.POLAR_BEAR, 1, 1, 2));
+      BiomeDefaultFeatures.commonSpawns(this);
+      this.addSpawn(MobCategory.MONSTER, new Biome.SpawnerData(EntityType.DROWNED, 5, 1, 1));
+   }
+
+   protected float getTemperatureNoCache(BlockPos var1) {
+      float var2 = this.getTemperature();
+      double var3 = FROZEN_TEMPERATURE_NOISE.getValue((double)var1.getX() * 0.05D, (double)var1.getZ() * 0.05D, false) * 7.0D;
+      double var5 = BIOME_INFO_NOISE.getValue((double)var1.getX() * 0.2D, (double)var1.getZ() * 0.2D, false);
+      double var7 = var3 + var5;
+      if (var7 < 0.3D) {
+         double var9 = BIOME_INFO_NOISE.getValue((double)var1.getX() * 0.09D, (double)var1.getZ() * 0.09D, false);
+         if (var9 < 0.8D) {
+            var2 = 0.2F;
+         }
+      }
+
+      if (var1.getY() > 64) {
+         float var11 = (float)(TEMPERATURE_NOISE.getValue((double)((float)var1.getX() / 8.0F), (double)((float)var1.getZ() / 8.0F), false) * 4.0D);
+         return var2 - (var11 + (float)var1.getY() - 64.0F) * 0.05F / 30.0F;
+      } else {
+         return var2;
+      }
+   }
+}
