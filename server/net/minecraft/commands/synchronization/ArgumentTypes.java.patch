--- net/minecraft/commands/synchronization/ArgumentTypes.java
+++ net/minecraft/commands/synchronization/ArgumentTypes.java
@@ -15,11 +15,11 @@
 import javax.annotation.Nullable;
 import net.minecraft.SharedConstants;
 import net.minecraft.commands.arguments.ColorArgument;
 import net.minecraft.commands.arguments.ComponentArgument;
 import net.minecraft.commands.arguments.CompoundTagArgument;
-import net.minecraft.commands.arguments.DimensionTypeArgument;
+import net.minecraft.commands.arguments.DimensionArgument;
 import net.minecraft.commands.arguments.EntityAnchorArgument;
 import net.minecraft.commands.arguments.EntityArgument;
 import net.minecraft.commands.arguments.EntitySummonArgument;
 import net.minecraft.commands.arguments.GameProfileArgument;
 import net.minecraft.commands.arguments.ItemEnchantmentArgument;
@@ -36,10 +36,11 @@
 import net.minecraft.commands.arguments.ScoreHolderArgument;
 import net.minecraft.commands.arguments.ScoreboardSlotArgument;
 import net.minecraft.commands.arguments.SlotArgument;
 import net.minecraft.commands.arguments.TeamArgument;
 import net.minecraft.commands.arguments.TimeArgument;
+import net.minecraft.commands.arguments.UuidArgument;
 import net.minecraft.commands.arguments.blocks.BlockPredicateArgument;
 import net.minecraft.commands.arguments.blocks.BlockStateArgument;
 import net.minecraft.commands.arguments.coordinates.BlockPosArgument;
 import net.minecraft.commands.arguments.coordinates.ColumnPosArgument;
 import net.minecraft.commands.arguments.coordinates.RotationArgument;
@@ -109,12 +110,13 @@
       register("entity_anchor", EntityAnchorArgument.class, new EmptyArgumentSerializer(EntityAnchorArgument::anchor));
       register("int_range", RangeArgument.Ints.class, new RangeArgument.Ints.Serializer());
       register("float_range", RangeArgument.Floats.class, new RangeArgument.Floats.Serializer());
       register("item_enchantment", ItemEnchantmentArgument.class, new EmptyArgumentSerializer(ItemEnchantmentArgument::enchantment));
       register("entity_summon", EntitySummonArgument.class, new EmptyArgumentSerializer(EntitySummonArgument::id));
-      register("dimension", DimensionTypeArgument.class, new EmptyArgumentSerializer(DimensionTypeArgument::dimension));
+      register("dimension", DimensionArgument.class, new EmptyArgumentSerializer(DimensionArgument::dimension));
       register("time", TimeArgument.class, new EmptyArgumentSerializer(TimeArgument::time));
+      register("uuid", UuidArgument.class, new EmptyArgumentSerializer(UuidArgument::uuid));
       if (SharedConstants.IS_RUNNING_IN_IDE) {
          register("test_argument", TestFunctionArgument.class, new EmptyArgumentSerializer(TestFunctionArgument::testFunctionArgument));
          register("test_class", TestClassNameArgument.class, new EmptyArgumentSerializer(TestClassNameArgument::testClassName));
       }
 
