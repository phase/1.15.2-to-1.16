--- net/minecraft/commands/synchronization/SuggestionProviders.java
+++ net/minecraft/commands/synchronization/SuggestionProviders.java
@@ -20,10 +20,11 @@
    private static final Map<ResourceLocation, SuggestionProvider<SharedSuggestionProvider>> PROVIDERS_BY_NAME = Maps.newHashMap();
    private static final ResourceLocation DEFAULT_NAME = new ResourceLocation("ask_server");
    public static final SuggestionProvider<SharedSuggestionProvider> ASK_SERVER;
    public static final SuggestionProvider<CommandSourceStack> ALL_RECIPES;
    public static final SuggestionProvider<CommandSourceStack> AVAILABLE_SOUNDS;
+   public static final SuggestionProvider<CommandSourceStack> AVAILABLE_BIOMES;
    public static final SuggestionProvider<CommandSourceStack> SUMMONABLE_ENTITIES;
 
    public static <S extends SharedSuggestionProvider> SuggestionProvider<S> register(ResourceLocation var0, SuggestionProvider<SharedSuggestionProvider> var1) {
       if (PROVIDERS_BY_NAME.containsKey(var0)) {
          throw new IllegalArgumentException("A command suggestion provider is already registered with the name " + var0);
@@ -53,13 +54,16 @@
          return SharedSuggestionProvider.suggestResource(((SharedSuggestionProvider)var0.getSource()).getRecipeNames(), var1);
       });
       AVAILABLE_SOUNDS = register(new ResourceLocation("available_sounds"), (var0, var1) -> {
          return SharedSuggestionProvider.suggestResource((Iterable)((SharedSuggestionProvider)var0.getSource()).getAvailableSoundEvents(), var1);
       });
+      AVAILABLE_BIOMES = register(new ResourceLocation("available_biomes"), (var0, var1) -> {
+         return SharedSuggestionProvider.suggestResource((Iterable)((SharedSuggestionProvider)var0.getSource()).registryAccess().registryOrThrow(Registry.BIOME_REGISTRY).keySet(), var1);
+      });
       SUMMONABLE_ENTITIES = register(new ResourceLocation("summonable_entities"), (var0, var1) -> {
          return SharedSuggestionProvider.suggestResource(Registry.ENTITY_TYPE.stream().filter(EntityType::canSummon), var1, EntityType::getKey, (var0x) -> {
-            return new TranslatableComponent(Util.makeDescriptionId("entity", EntityType.getKey(var0x)), new Object[0]);
+            return new TranslatableComponent(Util.makeDescriptionId("entity", EntityType.getKey(var0x)));
          });
       });
    }
 
    public static class Wrapper implements SuggestionProvider<SharedSuggestionProvider> {
