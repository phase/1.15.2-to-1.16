--- net/minecraft/gametest/framework/StructureUtils.java
+++ net/minecraft/gametest/framework/StructureUtils.java
@@ -23,15 +23,16 @@
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.level.ChunkPos;
 import net.minecraft.world.level.block.Blocks;
+import net.minecraft.world.level.block.Mirror;
+import net.minecraft.world.level.block.Rotation;
 import net.minecraft.world.level.block.entity.CommandBlockEntity;
 import net.minecraft.world.level.block.entity.StructureBlockEntity;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.block.state.properties.StructureMode;
-import net.minecraft.world.level.levelgen.ChunkGeneratorSettings;
 import net.minecraft.world.level.levelgen.flat.FlatLevelGeneratorSettings;
 import net.minecraft.world.level.levelgen.structure.BoundingBox;
 import net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager;
 import net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplate;
 import net.minecraft.world.phys.AABB;
@@ -39,42 +40,84 @@
 import org.apache.commons.io.IOUtils;
 
 public class StructureUtils {
    public static String testStructuresDir = "gameteststructures";
 
+   public static Rotation getRotationForRotationSteps(int var0) {
+      switch(var0) {
+      case 0:
+         return Rotation.NONE;
+      case 1:
+         return Rotation.CLOCKWISE_90;
+      case 2:
+         return Rotation.CLOCKWISE_180;
+      case 3:
+         return Rotation.COUNTERCLOCKWISE_90;
+      default:
+         throw new IllegalArgumentException("rotationSteps must be a value from 0-3. Got value " + var0);
+      }
+   }
+
    public static AABB getStructureBounds(StructureBlockEntity var0) {
-      BlockPos var1 = var0.getBlockPos().offset(var0.getStructurePos());
-      return new AABB(var1, var1.offset(var0.getStructureSize()));
+      BlockPos var1 = var0.getBlockPos();
+      BlockPos var2 = var1.offset(var0.getStructureSize().offset(-1, -1, -1));
+      BlockPos var3 = StructureTemplate.transform(var2, Mirror.NONE, var0.getRotation(), var1);
+      return new AABB(var1, var3);
    }
 
-   public static void addCommandBlockAndButtonToStartTest(BlockPos var0, ServerLevel var1) {
-      var1.setBlockAndUpdate(var0, Blocks.COMMAND_BLOCK.defaultBlockState());
-      CommandBlockEntity var2 = (CommandBlockEntity)var1.getBlockEntity(var0);
-      var2.getCommandBlock().setCommand("test runthis");
-      var1.setBlockAndUpdate(var0.offset(0, 0, -1), Blocks.STONE_BUTTON.defaultBlockState());
+   public static BoundingBox getStructureBoundingBox(StructureBlockEntity var0) {
+      BlockPos var1 = var0.getBlockPos();
+      BlockPos var2 = var1.offset(var0.getStructureSize().offset(-1, -1, -1));
+      BlockPos var3 = StructureTemplate.transform(var2, Mirror.NONE, var0.getRotation(), var1);
+      return new BoundingBox(var1, var3);
    }
 
-   public static void createNewEmptyStructureBlock(String var0, BlockPos var1, BlockPos var2, int var3, ServerLevel var4) {
-      BoundingBox var5 = createStructureBoundingBox(var1, var2, var3);
+   public static void addCommandBlockAndButtonToStartTest(BlockPos var0, BlockPos var1, Rotation var2, ServerLevel var3) {
+      BlockPos var4 = StructureTemplate.transform(var0.offset(var1), Mirror.NONE, var2, var0);
+      var3.setBlockAndUpdate(var4, Blocks.COMMAND_BLOCK.defaultBlockState());
+      CommandBlockEntity var5 = (CommandBlockEntity)var3.getBlockEntity(var4);
+      var5.getCommandBlock().setCommand("test runthis");
+      BlockPos var6 = StructureTemplate.transform(var4.offset(0, 0, -1), Mirror.NONE, var2, var4);
+      var3.setBlockAndUpdate(var6, Blocks.STONE_BUTTON.defaultBlockState().rotate(var2));
+   }
+
+   public static void createNewEmptyStructureBlock(String var0, BlockPos var1, BlockPos var2, Rotation var3, ServerLevel var4) {
+      BoundingBox var5 = getStructureBoundingBox(var1, var2, var3);
       clearSpaceForStructure(var5, var1.getY(), var4);
       var4.setBlockAndUpdate(var1, Blocks.STRUCTURE_BLOCK.defaultBlockState());
       StructureBlockEntity var6 = (StructureBlockEntity)var4.getBlockEntity(var1);
       var6.setIgnoreEntities(false);
       var6.setStructureName(new ResourceLocation(var0));
       var6.setStructureSize(var2);
       var6.setMode(StructureMode.SAVE);
       var6.setShowBoundingBox(true);
    }
 
-   public static StructureBlockEntity spawnStructure(String var0, BlockPos var1, int var2, ServerLevel var3, boolean var4) {
-      BoundingBox var5 = createStructureBoundingBox(var1, getStructureTemplate(var0, var3).getSize(), var2);
-      forceLoadChunks(var1, var3);
-      clearSpaceForStructure(var5, var1.getY(), var3);
-      StructureBlockEntity var6 = createStructureBlock(var0, var1, var3, var4);
-      var3.getBlockTicks().fetchTicksInArea(var5, true, false);
-      var3.clearBlockEvents(var5);
-      return var6;
+   public static StructureBlockEntity spawnStructure(String var0, BlockPos var1, Rotation var2, int var3, ServerLevel var4, boolean var5) {
+      BlockPos var6 = getStructureTemplate(var0, var4).getSize();
+      BoundingBox var7 = getStructureBoundingBox(var1, var6, var2);
+      BlockPos var8;
+      if (var2 == Rotation.NONE) {
+         var8 = var1;
+      } else if (var2 == Rotation.CLOCKWISE_90) {
+         var8 = var1.offset(var6.getZ() - 1, 0, 0);
+      } else if (var2 == Rotation.CLOCKWISE_180) {
+         var8 = var1.offset(var6.getX() - 1, 0, var6.getZ() - 1);
+      } else {
+         if (var2 != Rotation.COUNTERCLOCKWISE_90) {
+            throw new IllegalArgumentException("Invalid rotation: " + var2);
+         }
+
+         var8 = var1.offset(0, 0, var6.getX() - 1);
+      }
+
+      forceLoadChunks(var1, var4);
+      clearSpaceForStructure(var7, var1.getY(), var4);
+      StructureBlockEntity var9 = createStructureBlock(var0, var8, var2, var4, var5);
+      var4.getBlockTicks().fetchTicksInArea(var7, true, false);
+      var4.clearBlockEvents(var7);
+      return var9;
    }
 
    private static void forceLoadChunks(BlockPos var0, ServerLevel var1) {
       ChunkPos var2 = new ChunkPos(var0);
 
@@ -87,26 +130,32 @@
       }
 
    }
 
    public static void clearSpaceForStructure(BoundingBox var0, int var1, ServerLevel var2) {
-      BlockPos.betweenClosedStream(var0).forEach((var2x) -> {
+      BoundingBox var3 = new BoundingBox(var0.x0 - 2, var0.y0 - 3, var0.z0 - 3, var0.x1 + 3, var0.y1 + 20, var0.z1 + 3);
+      BlockPos.betweenClosedStream(var3).forEach((var2x) -> {
          clearBlock(var1, var2x, var2);
       });
-      var2.getBlockTicks().fetchTicksInArea(var0, true, false);
-      var2.clearBlockEvents(var0);
-      AABB var3 = new AABB((double)var0.x0, (double)var0.y0, (double)var0.z0, (double)var0.x1, (double)var0.y1, (double)var0.z1);
-      List var4 = var2.getEntitiesOfClass(Entity.class, var3, (var0x) -> {
+      var2.getBlockTicks().fetchTicksInArea(var3, true, false);
+      var2.clearBlockEvents(var3);
+      AABB var4 = new AABB((double)var3.x0, (double)var3.y0, (double)var3.z0, (double)var3.x1, (double)var3.y1, (double)var3.z1);
+      List var5 = var2.getEntitiesOfClass(Entity.class, var4, (var0x) -> {
          return !(var0x instanceof Player);
       });
-      var4.forEach(Entity::remove);
+      var5.forEach(Entity::remove);
    }
 
-   public static BoundingBox createStructureBoundingBox(BlockPos var0, BlockPos var1, int var2) {
-      BlockPos var3 = var0.offset(-var2, -3, -var2);
-      BlockPos var4 = var0.offset(var1).offset(var2 - 1, 30, var2 - 1);
-      return BoundingBox.createProper(var3.getX(), var3.getY(), var3.getZ(), var4.getX(), var4.getY(), var4.getZ());
+   public static BoundingBox getStructureBoundingBox(BlockPos var0, BlockPos var1, Rotation var2) {
+      BlockPos var3 = var0.offset(var1).offset(-1, -1, -1);
+      BlockPos var4 = StructureTemplate.transform(var3, Mirror.NONE, var2, var0);
+      BoundingBox var5 = BoundingBox.createProper(var0.getX(), var0.getY(), var0.getZ(), var4.getX(), var4.getY(), var4.getZ());
+      int var6 = Math.min(var5.x0, var5.x1);
+      int var7 = Math.min(var5.z0, var5.z1);
+      BlockPos var8 = new BlockPos(var0.getX() - var6, 0, var0.getZ() - var7);
+      var5.move(var8);
+      return var5;
    }
 
    public static Optional<BlockPos> findStructureBlockContainingPos(BlockPos var0, int var1, ServerLevel var2) {
       return findStructureBlocks(var0, var1, var2).stream().filter((var2x) -> {
          return doesStructureContain(var2x, var0, var2);
@@ -131,11 +180,11 @@
       for(int var5 = (int)var4.minX; var5 <= (int)var4.maxX; ++var5) {
          for(int var6 = (int)var4.minY; var6 <= (int)var4.maxY; ++var6) {
             for(int var7 = (int)var4.minZ; var7 <= (int)var4.maxZ; ++var7) {
                BlockPos var8 = new BlockPos(var5, var6, var7);
                BlockState var9 = var2.getBlockState(var8);
-               if (var9.getBlock() == Blocks.STRUCTURE_BLOCK) {
+               if (var9.is(Blocks.STRUCTURE_BLOCK)) {
                   var3.add(var8);
                }
             }
          }
       }
@@ -158,26 +207,27 @@
             return var2.readStructure(var6);
          }
       }
    }
 
-   private static StructureBlockEntity createStructureBlock(String var0, BlockPos var1, ServerLevel var2, boolean var3) {
-      var2.setBlockAndUpdate(var1, Blocks.STRUCTURE_BLOCK.defaultBlockState());
-      StructureBlockEntity var4 = (StructureBlockEntity)var2.getBlockEntity(var1);
-      var4.setMode(StructureMode.LOAD);
-      var4.setIgnoreEntities(false);
-      var4.setStructureName(new ResourceLocation(var0));
-      var4.loadStructure(var3);
-      if (var4.getStructureSize() != BlockPos.ZERO) {
-         return var4;
+   private static StructureBlockEntity createStructureBlock(String var0, BlockPos var1, Rotation var2, ServerLevel var3, boolean var4) {
+      var3.setBlockAndUpdate(var1, Blocks.STRUCTURE_BLOCK.defaultBlockState());
+      StructureBlockEntity var5 = (StructureBlockEntity)var3.getBlockEntity(var1);
+      var5.setMode(StructureMode.LOAD);
+      var5.setRotation(var2);
+      var5.setIgnoreEntities(false);
+      var5.setStructureName(new ResourceLocation(var0));
+      var5.loadStructure(var4);
+      if (var5.getStructureSize() != BlockPos.ZERO) {
+         return var5;
       } else {
-         StructureTemplate var5 = getStructureTemplate(var0, var2);
-         var4.loadStructure(var3, var5);
-         if (var4.getStructureSize() == BlockPos.ZERO) {
+         StructureTemplate var6 = getStructureTemplate(var0, var3);
+         var5.loadStructure(var4, var6);
+         if (var5.getStructureSize() == BlockPos.ZERO) {
             throw new RuntimeException("Failed to load structure " + var0);
          } else {
-            return var4;
+            return var5;
          }
       }
    }
 
    @Nullable
@@ -192,33 +242,33 @@
          throw new RuntimeException("Error while trying to load structure " + var0, var4);
       }
    }
 
    private static void clearBlock(int var0, BlockPos var1, ServerLevel var2) {
-      ChunkGeneratorSettings var4 = var2.getChunkSource().getGenerator().getSettings();
-      BlockState var3;
+      BlockState var3 = null;
+      FlatLevelGeneratorSettings var4 = FlatLevelGeneratorSettings.getDefault();
       if (var4 instanceof FlatLevelGeneratorSettings) {
-         BlockState[] var5 = ((FlatLevelGeneratorSettings)var4).getLayers();
-         if (var1.getY() < var0) {
+         BlockState[] var5 = var4.getLayers();
+         if (var1.getY() < var0 && var1.getY() <= var5.length) {
             var3 = var5[var1.getY() - 1];
-         } else {
-            var3 = Blocks.AIR.defaultBlockState();
          }
       } else if (var1.getY() == var0 - 1) {
          var3 = var2.getBiome(var1).getSurfaceBuilderConfig().getTopMaterial();
       } else if (var1.getY() < var0 - 1) {
          var3 = var2.getBiome(var1).getSurfaceBuilderConfig().getUnderMaterial();
-      } else {
+      }
+
+      if (var3 == null) {
          var3 = Blocks.AIR.defaultBlockState();
       }
 
       BlockInput var6 = new BlockInput(var3, Collections.emptySet(), (CompoundTag)null);
       var6.place(var2, var1, 2);
       var2.blockUpdated(var1, var3.getBlock());
    }
 
    private static boolean doesStructureContain(BlockPos var0, BlockPos var1, ServerLevel var2) {
       StructureBlockEntity var3 = (StructureBlockEntity)var2.getBlockEntity(var0);
-      AABB var4 = getStructureBounds(var3);
-      return var4.contains(new Vec3(var1));
+      AABB var4 = getStructureBounds(var3).inflate(1.0D);
+      return var4.contains(Vec3.atCenterOf(var1));
    }
 }
