--- net/minecraft/gametest/framework/GameTestInfo.java
+++ net/minecraft/gametest/framework/GameTestInfo.java
@@ -7,49 +7,42 @@
 import it.unimi.dsi.fastutil.objects.ObjectIterator;
 import java.util.Collection;
 import javax.annotation.Nullable;
 import net.minecraft.core.BlockPos;
 import net.minecraft.server.level.ServerLevel;
+import net.minecraft.world.level.block.Rotation;
 import net.minecraft.world.level.block.entity.StructureBlockEntity;
 
 public class GameTestInfo {
    private final TestFunction testFunction;
-   private BlockPos testPos;
+   @Nullable
+   private BlockPos structureBlockPos;
    private final ServerLevel level;
-   private final Collection<GameTestListener> listeners;
+   private final Collection<GameTestListener> listeners = Lists.newArrayList();
    private final int timeoutTicks;
-   private final Collection<GameTestSequence> sequences;
-   private Object2LongMap<Runnable> runAtTickTimeMap;
+   private final Collection<GameTestSequence> sequences = Lists.newCopyOnWriteArrayList();
+   private Object2LongMap<Runnable> runAtTickTimeMap = new Object2LongOpenHashMap();
    private long startTick;
    private long tickCount;
-   private boolean started;
-   private final Stopwatch timer;
-   private boolean done;
+   private boolean started = false;
+   private final Stopwatch timer = Stopwatch.createUnstarted();
+   private boolean done = false;
+   private final Rotation rotation;
    @Nullable
    private Throwable error;
 
-   public GameTestInfo(TestFunction var1, ServerLevel var2) {
-      this.listeners = Lists.newArrayList();
-      this.sequences = Lists.newCopyOnWriteArrayList();
-      this.runAtTickTimeMap = new Object2LongOpenHashMap();
-      this.started = false;
-      this.timer = Stopwatch.createUnstarted();
-      this.done = false;
+   public GameTestInfo(TestFunction var1, Rotation var2, ServerLevel var3) {
       this.testFunction = var1;
-      this.level = var2;
+      this.level = var3;
       this.timeoutTicks = var1.getMaxTicks();
+      this.rotation = var1.getRotation().getRotated(var2);
    }
 
-   public GameTestInfo(TestFunction var1, BlockPos var2, ServerLevel var3) {
-      this(var1, var3);
-      this.assignPosition(var2);
+   void setStructureBlockPos(BlockPos var1) {
+      this.structureBlockPos = var1;
    }
 
-   void assignPosition(BlockPos var1) {
-      this.testPos = var1;
-   }
-
    void startExecution() {
       this.startTick = this.level.getGameTime() + 1L + this.testFunction.getSetupTicks();
       this.timer.start();
    }
 
@@ -114,25 +107,14 @@
 
    public String getTestName() {
       return this.testFunction.getTestName();
    }
 
-   public BlockPos getTestPos() {
-      return this.testPos;
+   public BlockPos getStructureBlockPos() {
+      return this.structureBlockPos;
    }
 
-   @Nullable
-   public BlockPos getStructureSize() {
-      StructureBlockEntity var1 = this.getStructureBlockEntity();
-      return var1 == null ? null : var1.getStructureSize();
-   }
-
-   @Nullable
-   private StructureBlockEntity getStructureBlockEntity() {
-      return (StructureBlockEntity)this.level.getBlockEntity(this.testPos);
-   }
-
    public ServerLevel getLevel() {
       return this.level;
    }
 
    public boolean hasSucceeded() {
@@ -178,14 +160,15 @@
 
    public void addListener(GameTestListener var1) {
       this.listeners.add(var1);
    }
 
-   public void spawnStructure(int var1) {
-      StructureBlockEntity var2 = StructureUtils.spawnStructure(this.testFunction.getStructureName(), this.testPos, var1, this.level, false);
-      var2.setStructureName(this.getTestName());
-      StructureUtils.addCommandBlockAndButtonToStartTest(this.testPos.offset(1, 0, -1), this.level);
+   public void spawnStructure(BlockPos var1, int var2) {
+      StructureBlockEntity var3 = StructureUtils.spawnStructure(this.getStructureName(), var1, this.getRotation(), var2, this.level, false);
+      this.setStructureBlockPos(var3.getBlockPos());
+      var3.setStructureName(this.getTestName());
+      StructureUtils.addCommandBlockAndButtonToStartTest(this.structureBlockPos, new BlockPos(1, 0, -1), this.getRotation(), this.level);
       this.listeners.forEach((var1x) -> {
          var1x.testStructureLoaded(this);
       });
    }
 
@@ -198,6 +181,14 @@
    }
 
    public String getStructureName() {
       return this.testFunction.getStructureName();
    }
+
+   public Rotation getRotation() {
+      return this.rotation;
+   }
+
+   public TestFunction getTestFunction() {
+      return this.testFunction;
+   }
 }
