--- net/minecraft/advancements/critereon/PlayerHurtEntityTrigger.java
+++ net/minecraft/advancements/critereon/PlayerHurtEntityTrigger.java
@@ -1,14 +1,13 @@
 package net.minecraft.advancements.critereon;
 
-import com.google.gson.JsonDeserializationContext;
-import com.google.gson.JsonElement;
 import com.google.gson.JsonObject;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.world.damagesource.DamageSource;
 import net.minecraft.world.entity.Entity;
+import net.minecraft.world.level.storage.loot.LootContext;
 
 public class PlayerHurtEntityTrigger extends SimpleCriterionTrigger<PlayerHurtEntityTrigger.TriggerInstance> {
    private static final ResourceLocation ID = new ResourceLocation("player_hurt_entity");
 
    public PlayerHurtEntityTrigger() {
@@ -16,47 +15,48 @@
 
    public ResourceLocation getId() {
       return ID;
    }
 
-   public PlayerHurtEntityTrigger.TriggerInstance createInstance(JsonObject var1, JsonDeserializationContext var2) {
-      DamagePredicate var3 = DamagePredicate.fromJson(var1.get("damage"));
-      EntityPredicate var4 = EntityPredicate.fromJson(var1.get("entity"));
-      return new PlayerHurtEntityTrigger.TriggerInstance(var3, var4);
+   public PlayerHurtEntityTrigger.TriggerInstance createInstance(JsonObject var1, EntityPredicate.Composite var2, DeserializationContext var3) {
+      DamagePredicate var4 = DamagePredicate.fromJson(var1.get("damage"));
+      EntityPredicate.Composite var5 = EntityPredicate.Composite.fromJson(var1, "entity", var3);
+      return new PlayerHurtEntityTrigger.TriggerInstance(var2, var4, var5);
    }
 
    public void trigger(ServerPlayer var1, Entity var2, DamageSource var3, float var4, float var5, boolean var6) {
-      this.trigger(var1.getAdvancements(), (var6x) -> {
-         return var6x.matches(var1, var2, var3, var4, var5, var6);
+      LootContext var7 = EntityPredicate.createContext(var1, var2);
+      this.trigger(var1, (var6x) -> {
+         return var6x.matches(var1, var7, var3, var4, var5, var6);
       });
    }
 
    public static class TriggerInstance extends AbstractCriterionTriggerInstance {
       private final DamagePredicate damage;
-      private final EntityPredicate entity;
+      private final EntityPredicate.Composite entity;
 
-      public TriggerInstance(DamagePredicate var1, EntityPredicate var2) {
-         super(PlayerHurtEntityTrigger.ID);
-         this.damage = var1;
-         this.entity = var2;
+      public TriggerInstance(EntityPredicate.Composite var1, DamagePredicate var2, EntityPredicate.Composite var3) {
+         super(PlayerHurtEntityTrigger.ID, var1);
+         this.damage = var2;
+         this.entity = var3;
       }
 
       public static PlayerHurtEntityTrigger.TriggerInstance playerHurtEntity(DamagePredicate.Builder var0) {
-         return new PlayerHurtEntityTrigger.TriggerInstance(var0.build(), EntityPredicate.ANY);
+         return new PlayerHurtEntityTrigger.TriggerInstance(EntityPredicate.Composite.ANY, var0.build(), EntityPredicate.Composite.ANY);
       }
 
-      public boolean matches(ServerPlayer var1, Entity var2, DamageSource var3, float var4, float var5, boolean var6) {
+      public boolean matches(ServerPlayer var1, LootContext var2, DamageSource var3, float var4, float var5, boolean var6) {
          if (!this.damage.matches(var1, var3, var4, var5, var6)) {
             return false;
          } else {
-            return this.entity.matches(var1, var2);
+            return this.entity.matches(var2);
          }
       }
 
-      public JsonElement serializeToJson() {
-         JsonObject var1 = new JsonObject();
-         var1.add("damage", this.damage.serializeToJson());
-         var1.add("entity", this.entity.serializeToJson());
-         return var1;
+      public JsonObject serializeToJson(SerializationContext var1) {
+         JsonObject var2 = super.serializeToJson(var1);
+         var2.add("damage", this.damage.serializeToJson());
+         var2.add("entity", this.entity.toJson(var1));
+         return var2;
       }
    }
 }
