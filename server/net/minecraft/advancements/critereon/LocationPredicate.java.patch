--- net/minecraft/advancements/critereon/LocationPredicate.java
+++ net/minecraft/advancements/critereon/LocationPredicate.java
@@ -2,58 +2,68 @@
 
 import com.google.gson.JsonElement;
 import com.google.gson.JsonNull;
 import com.google.gson.JsonObject;
 import com.google.gson.JsonSyntaxException;
+import com.mojang.serialization.DataResult;
+import com.mojang.serialization.JsonOps;
 import javax.annotation.Nullable;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Registry;
+import net.minecraft.data.BuiltinRegistries;
+import net.minecraft.resources.ResourceKey;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.util.GsonHelper;
+import net.minecraft.world.level.Level;
 import net.minecraft.world.level.biome.Biome;
-import net.minecraft.world.level.dimension.DimensionType;
-import net.minecraft.world.level.levelgen.feature.Feature;
+import net.minecraft.world.level.block.CampfireBlock;
 import net.minecraft.world.level.levelgen.feature.StructureFeature;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
 
 public class LocationPredicate {
+   private static final Logger LOGGER = LogManager.getLogger();
    public static final LocationPredicate ANY;
    private final MinMaxBounds.Floats x;
    private final MinMaxBounds.Floats y;
    private final MinMaxBounds.Floats z;
    @Nullable
    private final Biome biome;
    @Nullable
    private final StructureFeature<?> feature;
    @Nullable
-   private final DimensionType dimension;
+   private final ResourceKey<Level> dimension;
+   @Nullable
+   private final Boolean smokey;
    private final LightPredicate light;
    private final BlockPredicate block;
    private final FluidPredicate fluid;
 
-   public LocationPredicate(MinMaxBounds.Floats var1, MinMaxBounds.Floats var2, MinMaxBounds.Floats var3, @Nullable Biome var4, @Nullable StructureFeature<?> var5, @Nullable DimensionType var6, LightPredicate var7, BlockPredicate var8, FluidPredicate var9) {
+   public LocationPredicate(MinMaxBounds.Floats var1, MinMaxBounds.Floats var2, MinMaxBounds.Floats var3, @Nullable Biome var4, @Nullable StructureFeature<?> var5, @Nullable ResourceKey<Level> var6, @Nullable Boolean var7, LightPredicate var8, BlockPredicate var9, FluidPredicate var10) {
       this.x = var1;
       this.y = var2;
       this.z = var3;
       this.biome = var4;
       this.feature = var5;
       this.dimension = var6;
-      this.light = var7;
-      this.block = var8;
-      this.fluid = var9;
+      this.smokey = var7;
+      this.light = var8;
+      this.block = var9;
+      this.fluid = var10;
    }
 
    public static LocationPredicate inBiome(Biome var0) {
-      return new LocationPredicate(MinMaxBounds.Floats.ANY, MinMaxBounds.Floats.ANY, MinMaxBounds.Floats.ANY, var0, (StructureFeature)null, (DimensionType)null, LightPredicate.ANY, BlockPredicate.ANY, FluidPredicate.ANY);
+      return new LocationPredicate(MinMaxBounds.Floats.ANY, MinMaxBounds.Floats.ANY, MinMaxBounds.Floats.ANY, var0, (StructureFeature)null, (ResourceKey)null, (Boolean)null, LightPredicate.ANY, BlockPredicate.ANY, FluidPredicate.ANY);
    }
 
-   public static LocationPredicate inDimension(DimensionType var0) {
-      return new LocationPredicate(MinMaxBounds.Floats.ANY, MinMaxBounds.Floats.ANY, MinMaxBounds.Floats.ANY, (Biome)null, (StructureFeature)null, var0, LightPredicate.ANY, BlockPredicate.ANY, FluidPredicate.ANY);
+   public static LocationPredicate inDimension(ResourceKey<Level> var0) {
+      return new LocationPredicate(MinMaxBounds.Floats.ANY, MinMaxBounds.Floats.ANY, MinMaxBounds.Floats.ANY, (Biome)null, (StructureFeature)null, var0, (Boolean)null, LightPredicate.ANY, BlockPredicate.ANY, FluidPredicate.ANY);
    }
 
    public static LocationPredicate inFeature(StructureFeature<?> var0) {
-      return new LocationPredicate(MinMaxBounds.Floats.ANY, MinMaxBounds.Floats.ANY, MinMaxBounds.Floats.ANY, (Biome)null, var0, (DimensionType)null, LightPredicate.ANY, BlockPredicate.ANY, FluidPredicate.ANY);
+      return new LocationPredicate(MinMaxBounds.Floats.ANY, MinMaxBounds.Floats.ANY, MinMaxBounds.Floats.ANY, (Biome)null, var0, (ResourceKey)null, (Boolean)null, LightPredicate.ANY, BlockPredicate.ANY, FluidPredicate.ANY);
    }
 
    public boolean matches(ServerLevel var1, double var2, double var4, double var6) {
       return this.matches(var1, (float)var2, (float)var4, (float)var6);
    }
@@ -63,27 +73,27 @@
          return false;
       } else if (!this.y.matches(var3)) {
          return false;
       } else if (!this.z.matches(var4)) {
          return false;
-      } else if (this.dimension != null && this.dimension != var1.dimension.getType()) {
+      } else if (this.dimension != null && this.dimension != var1.dimension()) {
          return false;
       } else {
          BlockPos var5 = new BlockPos((double)var2, (double)var3, (double)var4);
          boolean var6 = var1.isLoaded(var5);
          if (this.biome != null && (!var6 || this.biome != var1.getBiome(var5))) {
             return false;
-         } else if (this.feature == null || var6 && this.feature.isInsideFeature(var1, var5)) {
-            if (!this.light.matches(var1, var5)) {
-               return false;
-            } else if (!this.block.matches(var1, var5)) {
-               return false;
-            } else {
-               return this.fluid.matches(var1, var5);
-            }
-         } else {
+         } else if (this.feature != null && (!var6 || !var1.structureFeatureManager().getStructureAt(var5, true, this.feature).isValid())) {
             return false;
+         } else if (this.smokey != null && (!var6 || this.smokey != CampfireBlock.isSmokeyPos(var1, var5))) {
+            return false;
+         } else if (!this.light.matches(var1, var5)) {
+            return false;
+         } else if (!this.block.matches(var1, var5)) {
+            return false;
+         } else {
+            return this.fluid.matches(var1, var5);
          }
       }
    }
 
    public JsonElement serializeToJson() {
@@ -98,21 +108,30 @@
             var2.add("z", this.z.serializeToJson());
             var1.add("position", var2);
          }
 
          if (this.dimension != null) {
-            var1.addProperty("dimension", DimensionType.getName(this.dimension).toString());
+            DataResult var10000 = Level.RESOURCE_KEY_CODEC.encodeStart(JsonOps.INSTANCE, this.dimension);
+            Logger var10001 = LOGGER;
+            var10001.getClass();
+            var10000.resultOrPartial(var10001::error).ifPresent((var1x) -> {
+               var1.add("dimension", var1x);
+            });
          }
 
          if (this.feature != null) {
-            var1.addProperty("feature", (String)Feature.STRUCTURES_REGISTRY.inverse().get(this.feature));
+            var1.addProperty("feature", this.feature.getFeatureName());
          }
 
          if (this.biome != null) {
-            var1.addProperty("biome", Registry.BIOME.getKey(this.biome).toString());
+            var1.addProperty("biome", BuiltinRegistries.BIOME.getKey(this.biome).toString());
          }
 
+         if (this.smokey != null) {
+            var1.addProperty("smokey", this.smokey);
+         }
+
          var1.add("light", this.light.serializeToJson());
          var1.add("block", this.block.serializeToJson());
          var1.add("fluid", this.fluid.serializeToJson());
          return var1;
       }
@@ -123,31 +142,44 @@
          JsonObject var1 = GsonHelper.convertToJsonObject(var0, "location");
          JsonObject var2 = GsonHelper.getAsJsonObject(var1, "position", new JsonObject());
          MinMaxBounds.Floats var3 = MinMaxBounds.Floats.fromJson(var2.get("x"));
          MinMaxBounds.Floats var4 = MinMaxBounds.Floats.fromJson(var2.get("y"));
          MinMaxBounds.Floats var5 = MinMaxBounds.Floats.fromJson(var2.get("z"));
-         DimensionType var6 = var1.has("dimension") ? DimensionType.getByName(new ResourceLocation(GsonHelper.getAsString(var1, "dimension"))) : null;
-         StructureFeature var7 = var1.has("feature") ? (StructureFeature)Feature.STRUCTURES_REGISTRY.get(GsonHelper.getAsString(var1, "feature")) : null;
+         ResourceKey var13;
+         if (var1.has("dimension")) {
+            DataResult var10000 = ResourceLocation.CODEC.parse(JsonOps.INSTANCE, var1.get("dimension"));
+            Logger var10001 = LOGGER;
+            var10001.getClass();
+            var13 = (ResourceKey)var10000.resultOrPartial(var10001::error).map((var0x) -> {
+               return ResourceKey.create(Registry.DIMENSION_REGISTRY, var0x);
+            }).orElse((Object)null);
+         } else {
+            var13 = null;
+         }
+
+         ResourceKey var6 = var13;
+         StructureFeature var7 = var1.has("feature") ? (StructureFeature)StructureFeature.STRUCTURES_REGISTRY.get(GsonHelper.getAsString(var1, "feature")) : null;
          Biome var8 = null;
          if (var1.has("biome")) {
             ResourceLocation var9 = new ResourceLocation(GsonHelper.getAsString(var1, "biome"));
-            var8 = (Biome)Registry.BIOME.getOptional(var9).orElseThrow(() -> {
+            var8 = (Biome)BuiltinRegistries.BIOME.getOptional(var9).orElseThrow(() -> {
                return new JsonSyntaxException("Unknown biome '" + var9 + "'");
             });
          }
 
-         LightPredicate var12 = LightPredicate.fromJson(var1.get("light"));
-         BlockPredicate var10 = BlockPredicate.fromJson(var1.get("block"));
-         FluidPredicate var11 = FluidPredicate.fromJson(var1.get("fluid"));
-         return new LocationPredicate(var3, var4, var5, var8, var7, var6, var12, var10, var11);
+         Boolean var14 = var1.has("smokey") ? var1.get("smokey").getAsBoolean() : null;
+         LightPredicate var10 = LightPredicate.fromJson(var1.get("light"));
+         BlockPredicate var11 = BlockPredicate.fromJson(var1.get("block"));
+         FluidPredicate var12 = FluidPredicate.fromJson(var1.get("fluid"));
+         return new LocationPredicate(var3, var4, var5, var8, var7, var6, var14, var10, var11, var12);
       } else {
          return ANY;
       }
    }
 
    static {
-      ANY = new LocationPredicate(MinMaxBounds.Floats.ANY, MinMaxBounds.Floats.ANY, MinMaxBounds.Floats.ANY, (Biome)null, (StructureFeature)null, (DimensionType)null, LightPredicate.ANY, BlockPredicate.ANY, FluidPredicate.ANY);
+      ANY = new LocationPredicate(MinMaxBounds.Floats.ANY, MinMaxBounds.Floats.ANY, MinMaxBounds.Floats.ANY, (Biome)null, (StructureFeature)null, (ResourceKey)null, (Boolean)null, LightPredicate.ANY, BlockPredicate.ANY, FluidPredicate.ANY);
    }
 
    public static class Builder {
       private MinMaxBounds.Floats x;
       private MinMaxBounds.Floats y;
@@ -155,11 +187,13 @@
       @Nullable
       private Biome biome;
       @Nullable
       private StructureFeature<?> feature;
       @Nullable
-      private DimensionType dimension;
+      private ResourceKey<Level> dimension;
+      @Nullable
+      private Boolean smokey;
       private LightPredicate light;
       private BlockPredicate block;
       private FluidPredicate fluid;
 
       public Builder() {
@@ -178,10 +212,20 @@
       public LocationPredicate.Builder setBiome(@Nullable Biome var1) {
          this.biome = var1;
          return this;
       }
 
+      public LocationPredicate.Builder setBlock(BlockPredicate var1) {
+         this.block = var1;
+         return this;
+      }
+
+      public LocationPredicate.Builder setSmokey(Boolean var1) {
+         this.smokey = var1;
+         return this;
+      }
+
       public LocationPredicate build() {
-         return new LocationPredicate(this.x, this.y, this.z, this.biome, this.feature, this.dimension, this.light, this.block, this.fluid);
+         return new LocationPredicate(this.x, this.y, this.z, this.biome, this.feature, this.dimension, this.smokey, this.light, this.block, this.fluid);
       }
    }
 }
