--- net/minecraft/advancements/critereon/EnchantedItemTrigger.java
+++ net/minecraft/advancements/critereon/EnchantedItemTrigger.java
@@ -1,9 +1,7 @@
 package net.minecraft.advancements.critereon;
 
-import com.google.gson.JsonDeserializationContext;
-import com.google.gson.JsonElement;
 import com.google.gson.JsonObject;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.world.item.ItemStack;
 
@@ -15,47 +13,47 @@
 
    public ResourceLocation getId() {
       return ID;
    }
 
-   public EnchantedItemTrigger.TriggerInstance createInstance(JsonObject var1, JsonDeserializationContext var2) {
-      ItemPredicate var3 = ItemPredicate.fromJson(var1.get("item"));
-      MinMaxBounds.Ints var4 = MinMaxBounds.Ints.fromJson(var1.get("levels"));
-      return new EnchantedItemTrigger.TriggerInstance(var3, var4);
+   public EnchantedItemTrigger.TriggerInstance createInstance(JsonObject var1, EntityPredicate.Composite var2, DeserializationContext var3) {
+      ItemPredicate var4 = ItemPredicate.fromJson(var1.get("item"));
+      MinMaxBounds.Ints var5 = MinMaxBounds.Ints.fromJson(var1.get("levels"));
+      return new EnchantedItemTrigger.TriggerInstance(var2, var4, var5);
    }
 
    public void trigger(ServerPlayer var1, ItemStack var2, int var3) {
-      this.trigger(var1.getAdvancements(), (var2x) -> {
+      this.trigger(var1, (var2x) -> {
          return var2x.matches(var2, var3);
       });
    }
 
    public static class TriggerInstance extends AbstractCriterionTriggerInstance {
       private final ItemPredicate item;
       private final MinMaxBounds.Ints levels;
 
-      public TriggerInstance(ItemPredicate var1, MinMaxBounds.Ints var2) {
-         super(EnchantedItemTrigger.ID);
-         this.item = var1;
-         this.levels = var2;
+      public TriggerInstance(EntityPredicate.Composite var1, ItemPredicate var2, MinMaxBounds.Ints var3) {
+         super(EnchantedItemTrigger.ID, var1);
+         this.item = var2;
+         this.levels = var3;
       }
 
       public static EnchantedItemTrigger.TriggerInstance enchantedItem() {
-         return new EnchantedItemTrigger.TriggerInstance(ItemPredicate.ANY, MinMaxBounds.Ints.ANY);
+         return new EnchantedItemTrigger.TriggerInstance(EntityPredicate.Composite.ANY, ItemPredicate.ANY, MinMaxBounds.Ints.ANY);
       }
 
       public boolean matches(ItemStack var1, int var2) {
          if (!this.item.matches(var1)) {
             return false;
          } else {
             return this.levels.matches(var2);
          }
       }
 
-      public JsonElement serializeToJson() {
-         JsonObject var1 = new JsonObject();
-         var1.add("item", this.item.serializeToJson());
-         var1.add("levels", this.levels.serializeToJson());
-         return var1;
+      public JsonObject serializeToJson(SerializationContext var1) {
+         JsonObject var2 = super.serializeToJson(var1);
+         var2.add("item", this.item.serializeToJson());
+         var2.add("levels", this.levels.serializeToJson());
+         return var2;
       }
    }
 }
