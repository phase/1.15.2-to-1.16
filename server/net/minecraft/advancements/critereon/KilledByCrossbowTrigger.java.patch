--- net/minecraft/advancements/critereon/KilledByCrossbowTrigger.java
+++ net/minecraft/advancements/critereon/KilledByCrossbowTrigger.java
@@ -1,19 +1,18 @@
 package net.minecraft.advancements.critereon;
 
 import com.google.common.collect.Lists;
 import com.google.common.collect.Sets;
-import com.google.gson.JsonDeserializationContext;
-import com.google.gson.JsonElement;
 import com.google.gson.JsonObject;
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.HashSet;
 import java.util.Iterator;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.world.entity.Entity;
+import net.minecraft.world.level.storage.loot.LootContext;
 
 public class KilledByCrossbowTrigger extends SimpleCriterionTrigger<KilledByCrossbowTrigger.TriggerInstance> {
    private static final ResourceLocation ID = new ResourceLocation("killed_by_crossbow");
 
    public KilledByCrossbowTrigger() {
@@ -21,92 +20,90 @@
 
    public ResourceLocation getId() {
       return ID;
    }
 
-   public KilledByCrossbowTrigger.TriggerInstance createInstance(JsonObject var1, JsonDeserializationContext var2) {
-      EntityPredicate[] var3 = EntityPredicate.fromJsonArray(var1.get("victims"));
-      MinMaxBounds.Ints var4 = MinMaxBounds.Ints.fromJson(var1.get("unique_entity_types"));
-      return new KilledByCrossbowTrigger.TriggerInstance(var3, var4);
+   public KilledByCrossbowTrigger.TriggerInstance createInstance(JsonObject var1, EntityPredicate.Composite var2, DeserializationContext var3) {
+      EntityPredicate.Composite[] var4 = EntityPredicate.Composite.fromJsonArray(var1, "victims", var3);
+      MinMaxBounds.Ints var5 = MinMaxBounds.Ints.fromJson(var1.get("unique_entity_types"));
+      return new KilledByCrossbowTrigger.TriggerInstance(var2, var4, var5);
    }
 
-   public void trigger(ServerPlayer var1, Collection<Entity> var2, int var3) {
-      this.trigger(var1.getAdvancements(), (var3x) -> {
-         return var3x.matches(var1, var2, var3);
+   public void trigger(ServerPlayer var1, Collection<Entity> var2) {
+      ArrayList var3 = Lists.newArrayList();
+      HashSet var4 = Sets.newHashSet();
+      Iterator var5 = var2.iterator();
+
+      while(var5.hasNext()) {
+         Entity var6 = (Entity)var5.next();
+         var4.add(var6.getType());
+         var3.add(EntityPredicate.createContext(var1, var6));
+      }
+
+      this.trigger(var1, (var2x) -> {
+         return var2x.matches(var3, var4.size());
       });
    }
 
    public static class TriggerInstance extends AbstractCriterionTriggerInstance {
-      private final EntityPredicate[] victims;
+      private final EntityPredicate.Composite[] victims;
       private final MinMaxBounds.Ints uniqueEntityTypes;
 
-      public TriggerInstance(EntityPredicate[] var1, MinMaxBounds.Ints var2) {
-         super(KilledByCrossbowTrigger.ID);
-         this.victims = var1;
-         this.uniqueEntityTypes = var2;
+      public TriggerInstance(EntityPredicate.Composite var1, EntityPredicate.Composite[] var2, MinMaxBounds.Ints var3) {
+         super(KilledByCrossbowTrigger.ID, var1);
+         this.victims = var2;
+         this.uniqueEntityTypes = var3;
       }
 
       public static KilledByCrossbowTrigger.TriggerInstance crossbowKilled(EntityPredicate.Builder... var0) {
-         EntityPredicate[] var1 = new EntityPredicate[var0.length];
+         EntityPredicate.Composite[] var1 = new EntityPredicate.Composite[var0.length];
 
          for(int var2 = 0; var2 < var0.length; ++var2) {
             EntityPredicate.Builder var3 = var0[var2];
-            var1[var2] = var3.build();
+            var1[var2] = EntityPredicate.Composite.wrap(var3.build());
          }
 
-         return new KilledByCrossbowTrigger.TriggerInstance(var1, MinMaxBounds.Ints.ANY);
+         return new KilledByCrossbowTrigger.TriggerInstance(EntityPredicate.Composite.ANY, var1, MinMaxBounds.Ints.ANY);
       }
 
       public static KilledByCrossbowTrigger.TriggerInstance crossbowKilled(MinMaxBounds.Ints var0) {
-         EntityPredicate[] var1 = new EntityPredicate[0];
-         return new KilledByCrossbowTrigger.TriggerInstance(var1, var0);
+         EntityPredicate.Composite[] var1 = new EntityPredicate.Composite[0];
+         return new KilledByCrossbowTrigger.TriggerInstance(EntityPredicate.Composite.ANY, var1, var0);
       }
 
-      public boolean matches(ServerPlayer var1, Collection<Entity> var2, int var3) {
+      public boolean matches(Collection<LootContext> var1, int var2) {
          if (this.victims.length > 0) {
-            ArrayList var4 = Lists.newArrayList((Iterable)var2);
-            EntityPredicate[] var5 = this.victims;
-            int var6 = var5.length;
+            ArrayList var3 = Lists.newArrayList((Iterable)var1);
+            EntityPredicate.Composite[] var4 = this.victims;
+            int var5 = var4.length;
 
-            for(int var7 = 0; var7 < var6; ++var7) {
-               EntityPredicate var8 = var5[var7];
-               boolean var9 = false;
-               Iterator var10 = var4.iterator();
+            for(int var6 = 0; var6 < var5; ++var6) {
+               EntityPredicate.Composite var7 = var4[var6];
+               boolean var8 = false;
+               Iterator var9 = var3.iterator();
 
-               while(var10.hasNext()) {
-                  Entity var11 = (Entity)var10.next();
-                  if (var8.matches(var1, var11)) {
-                     var10.remove();
-                     var9 = true;
+               while(var9.hasNext()) {
+                  LootContext var10 = (LootContext)var9.next();
+                  if (var7.matches(var10)) {
+                     var9.remove();
+                     var8 = true;
                      break;
                   }
                }
 
-               if (!var9) {
+               if (!var8) {
                   return false;
                }
             }
          }
 
-         if (this.uniqueEntityTypes == MinMaxBounds.Ints.ANY) {
-            return true;
-         } else {
-            HashSet var12 = Sets.newHashSet();
-            Iterator var13 = var2.iterator();
-
-            while(var13.hasNext()) {
-               Entity var14 = (Entity)var13.next();
-               var12.add(var14.getType());
-            }
-
-            return this.uniqueEntityTypes.matches(var12.size()) && this.uniqueEntityTypes.matches(var3);
-         }
+         return this.uniqueEntityTypes.matches(var2);
       }
 
-      public JsonElement serializeToJson() {
-         JsonObject var1 = new JsonObject();
-         var1.add("victims", EntityPredicate.serializeArrayToJson(this.victims));
-         var1.add("unique_entity_types", this.uniqueEntityTypes.serializeToJson());
-         return var1;
+      public JsonObject serializeToJson(SerializationContext var1) {
+         JsonObject var2 = super.serializeToJson(var1);
+         var2.add("victims", EntityPredicate.Composite.toJson(this.victims, var1));
+         var2.add("unique_entity_types", this.uniqueEntityTypes.serializeToJson());
+         return var2;
       }
    }
 }
