--- net/minecraft/advancements/Advancement.java
+++ net/minecraft/advancements/Advancement.java
@@ -2,11 +2,10 @@
 
 import com.google.common.collect.ImmutableMap;
 import com.google.common.collect.Maps;
 import com.google.common.collect.Sets;
 import com.google.gson.JsonArray;
-import com.google.gson.JsonDeserializationContext;
 import com.google.gson.JsonElement;
 import com.google.gson.JsonObject;
 import com.google.gson.JsonSyntaxException;
 import java.util.Arrays;
 import java.util.Iterator;
@@ -15,13 +14,17 @@
 import java.util.Map.Entry;
 import java.util.function.Consumer;
 import java.util.function.Function;
 import javax.annotation.Nullable;
 import net.minecraft.ChatFormatting;
+import net.minecraft.advancements.critereon.DeserializationContext;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.network.chat.Component;
+import net.minecraft.network.chat.ComponentUtils;
 import net.minecraft.network.chat.HoverEvent;
+import net.minecraft.network.chat.MutableComponent;
+import net.minecraft.network.chat.Style;
 import net.minecraft.network.chat.TextComponent;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.util.GsonHelper;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.level.ItemLike;
@@ -51,15 +54,15 @@
       if (var3 == null) {
          this.chatComponent = new TextComponent(var1.toString());
       } else {
          Component var7 = var3.getTitle();
          ChatFormatting var8 = var3.getFrame().getChatColor();
-         Component var9 = var7.deepCopy().withStyle(var8).append("\n").append(var3.getDescription());
-         Component var10 = var7.deepCopy().withStyle((var1x) -> {
-            var1x.setHoverEvent(new HoverEvent(HoverEvent.Action.SHOW_TEXT, var9));
+         MutableComponent var9 = ComponentUtils.mergeStyles(var7.copy(), Style.EMPTY.withColor(var8)).append("\n").append(var3.getDescription());
+         MutableComponent var10 = var7.copy().withStyle((var1x) -> {
+            return var1x.withHoverEvent(new HoverEvent(HoverEvent.Action.SHOW_TEXT, var9));
          });
-         this.chatComponent = (new TextComponent("[")).append(var10).append("]").withStyle(var8);
+         this.chatComponent = ComponentUtils.wrapInSquareBrackets(var10).withStyle(var8);
       }
 
    }
 
    public Advancement.Builder deconstruct() {
@@ -319,14 +322,14 @@
 
       public String toString() {
          return "Task Advancement{parentId=" + this.parentId + ", display=" + this.display + ", rewards=" + this.rewards + ", criteria=" + this.criteria + ", requirements=" + Arrays.deepToString(this.requirements) + '}';
       }
 
-      public static Advancement.Builder fromJson(JsonObject var0, JsonDeserializationContext var1) {
+      public static Advancement.Builder fromJson(JsonObject var0, DeserializationContext var1) {
          ResourceLocation var2 = var0.has("parent") ? new ResourceLocation(GsonHelper.getAsString(var0, "parent")) : null;
-         DisplayInfo var3 = var0.has("display") ? DisplayInfo.fromJson(GsonHelper.getAsJsonObject(var0, "display"), var1) : null;
-         AdvancementRewards var4 = (AdvancementRewards)GsonHelper.getAsObject(var0, "rewards", AdvancementRewards.EMPTY, var1, AdvancementRewards.class);
+         DisplayInfo var3 = var0.has("display") ? DisplayInfo.fromJson(GsonHelper.getAsJsonObject(var0, "display")) : null;
+         AdvancementRewards var4 = var0.has("rewards") ? AdvancementRewards.deserialize(GsonHelper.getAsJsonObject(var0, "rewards")) : AdvancementRewards.EMPTY;
          Map var5 = Criterion.criteriaFromJson(GsonHelper.getAsJsonObject(var0, "criteria"), var1);
          if (var5.isEmpty()) {
             throw new JsonSyntaxException("Advancement criteria cannot be empty");
          } else {
             JsonArray var6 = GsonHelper.getAsJsonArray(var0, "requirements", new JsonArray());
