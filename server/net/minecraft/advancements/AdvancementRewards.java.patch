--- net/minecraft/advancements/AdvancementRewards.java
+++ net/minecraft/advancements/AdvancementRewards.java
@@ -1,22 +1,18 @@
 package net.minecraft.advancements;
 
 import com.google.common.collect.Lists;
 import com.google.gson.JsonArray;
-import com.google.gson.JsonDeserializationContext;
-import com.google.gson.JsonDeserializer;
 import com.google.gson.JsonElement;
 import com.google.gson.JsonNull;
 import com.google.gson.JsonObject;
 import com.google.gson.JsonParseException;
-import java.lang.reflect.Type;
 import java.util.Arrays;
 import java.util.Iterator;
 import java.util.List;
 import javax.annotation.Nullable;
 import net.minecraft.commands.CommandFunction;
-import net.minecraft.core.BlockPos;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.sounds.SoundEvents;
 import net.minecraft.sounds.SoundSource;
@@ -42,11 +38,11 @@
       this.function = var4;
    }
 
    public void grant(ServerPlayer var1) {
       var1.giveExperiencePoints(this.experience);
-      LootContext var2 = (new LootContext.Builder(var1.getLevel())).withParameter(LootContextParams.THIS_ENTITY, var1).withParameter(LootContextParams.BLOCK_POS, new BlockPos(var1)).withRandom(var1.getRandom()).create(LootContextParamSets.ADVANCEMENT_REWARD);
+      LootContext var2 = (new LootContext.Builder(var1.getLevel())).withParameter(LootContextParams.THIS_ENTITY, var1).withParameter(LootContextParams.BLOCK_POS, var1.blockPosition()).withRandom(var1.getRandom()).create(LootContextParamSets.ADVANCEMENT_REWARD);
       boolean var3 = false;
       ResourceLocation[] var4 = this.loot;
       int var5 = var4.length;
 
       for(int var6 = 0; var6 < var5; ++var6) {
@@ -132,10 +128,36 @@
 
          return var1;
       }
    }
 
+   public static AdvancementRewards deserialize(JsonObject var0) throws JsonParseException {
+      int var1 = GsonHelper.getAsInt(var0, "experience", 0);
+      JsonArray var2 = GsonHelper.getAsJsonArray(var0, "loot", new JsonArray());
+      ResourceLocation[] var3 = new ResourceLocation[var2.size()];
+
+      for(int var4 = 0; var4 < var3.length; ++var4) {
+         var3[var4] = new ResourceLocation(GsonHelper.convertToString(var2.get(var4), "loot[" + var4 + "]"));
+      }
+
+      JsonArray var7 = GsonHelper.getAsJsonArray(var0, "recipes", new JsonArray());
+      ResourceLocation[] var5 = new ResourceLocation[var7.size()];
+
+      for(int var6 = 0; var6 < var5.length; ++var6) {
+         var5[var6] = new ResourceLocation(GsonHelper.convertToString(var7.get(var6), "recipes[" + var6 + "]"));
+      }
+
+      CommandFunction.CacheableFunction var8;
+      if (var0.has("function")) {
+         var8 = new CommandFunction.CacheableFunction(new ResourceLocation(GsonHelper.getAsString(var0, "function")));
+      } else {
+         var8 = CommandFunction.CacheableFunction.NONE;
+      }
+
+      return new AdvancementRewards(var1, var3, var5, var8);
+   }
+
    static {
       EMPTY = new AdvancementRewards(0, new ResourceLocation[0], new ResourceLocation[0], CommandFunction.CacheableFunction.NONE);
    }
 
    public static class Builder {
@@ -168,38 +190,6 @@
 
       public AdvancementRewards build() {
          return new AdvancementRewards(this.experience, (ResourceLocation[])this.loot.toArray(new ResourceLocation[0]), (ResourceLocation[])this.recipes.toArray(new ResourceLocation[0]), this.function == null ? CommandFunction.CacheableFunction.NONE : new CommandFunction.CacheableFunction(this.function));
       }
    }
-
-   public static class Deserializer implements JsonDeserializer<AdvancementRewards> {
-      public Deserializer() {
-      }
-
-      public AdvancementRewards deserialize(JsonElement var1, Type var2, JsonDeserializationContext var3) throws JsonParseException {
-         JsonObject var4 = GsonHelper.convertToJsonObject(var1, "rewards");
-         int var5 = GsonHelper.getAsInt(var4, "experience", 0);
-         JsonArray var6 = GsonHelper.getAsJsonArray(var4, "loot", new JsonArray());
-         ResourceLocation[] var7 = new ResourceLocation[var6.size()];
-
-         for(int var8 = 0; var8 < var7.length; ++var8) {
-            var7[var8] = new ResourceLocation(GsonHelper.convertToString(var6.get(var8), "loot[" + var8 + "]"));
-         }
-
-         JsonArray var12 = GsonHelper.getAsJsonArray(var4, "recipes", new JsonArray());
-         ResourceLocation[] var9 = new ResourceLocation[var12.size()];
-
-         for(int var10 = 0; var10 < var9.length; ++var10) {
-            var9[var10] = new ResourceLocation(GsonHelper.convertToString(var12.get(var10), "recipes[" + var10 + "]"));
-         }
-
-         CommandFunction.CacheableFunction var11;
-         if (var4.has("function")) {
-            var11 = new CommandFunction.CacheableFunction(new ResourceLocation(GsonHelper.getAsString(var4, "function")));
-         } else {
-            var11 = CommandFunction.CacheableFunction.NONE;
-         }
-
-         return new AdvancementRewards(var5, var7, var9, var11);
-      }
-   }
 }
