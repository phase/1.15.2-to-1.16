--- net/minecraft/tags/TagCollection.java
+++ net/minecraft/tags/TagCollection.java
@@ -1,8 +1,11 @@
 package net.minecraft.tags;
 
-import com.google.common.collect.ImmutableMap;
+import com.google.common.collect.BiMap;
+import com.google.common.collect.HashBiMap;
+import com.google.common.collect.ImmutableBiMap;
+import com.google.common.collect.ImmutableSet;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.google.gson.Gson;
 import com.google.gson.JsonObject;
 import java.io.BufferedReader;
@@ -14,17 +17,18 @@
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.HashMap;
 import java.util.Iterator;
 import java.util.Map;
+import java.util.Objects;
 import java.util.Optional;
 import java.util.Map.Entry;
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.Executor;
 import java.util.function.Function;
+import java.util.stream.Collectors;
 import javax.annotation.Nullable;
-import net.minecraft.Util;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.server.packs.resources.Resource;
 import net.minecraft.server.packs.resources.ResourceManager;
 import net.minecraft.util.GsonHelper;
 import org.apache.commons.io.IOUtils;
@@ -33,33 +37,49 @@
 
 public class TagCollection<T> {
    private static final Logger LOGGER = LogManager.getLogger();
    private static final Gson GSON = new Gson();
    private static final int PATH_SUFFIX_LENGTH = ".json".length();
-   private Map<ResourceLocation, Tag<T>> tags = ImmutableMap.of();
+   private final Tag<T> empty = Tag.fromSet(ImmutableSet.of());
+   private volatile BiMap<ResourceLocation, Tag<T>> tags = HashBiMap.create();
    private final Function<ResourceLocation, Optional<T>> idToValue;
    private final String directory;
-   private final boolean ordered;
    private final String name;
 
-   public TagCollection(Function<ResourceLocation, Optional<T>> var1, String var2, boolean var3, String var4) {
+   public TagCollection(Function<ResourceLocation, Optional<T>> var1, String var2, String var3) {
       this.idToValue = var1;
       this.directory = var2;
-      this.ordered = var3;
-      this.name = var4;
+      this.name = var3;
    }
 
    @Nullable
    public Tag<T> getTag(ResourceLocation var1) {
       return (Tag)this.tags.get(var1);
    }
 
    public Tag<T> getTagOrEmpty(ResourceLocation var1) {
-      Tag var2 = (Tag)this.tags.get(var1);
-      return var2 == null ? new Tag(var1) : var2;
+      return (Tag)this.tags.getOrDefault(var1, this.empty);
    }
 
+   public Tag<T> getEmptyTag() {
+      return this.empty;
+   }
+
+   @Nullable
+   public ResourceLocation getId(Tag<T> var1) {
+      return var1 instanceof Tag.Named ? ((Tag.Named)var1).getName() : (ResourceLocation)this.tags.inverse().get(var1);
+   }
+
+   public ResourceLocation getIdOrThrow(Tag<T> var1) {
+      ResourceLocation var2 = this.getId(var1);
+      if (var2 == null) {
+         throw new IllegalStateException("Unrecognized tag");
+      } else {
+         return var2;
+      }
+   }
+
    public Collection<ResourceLocation> getAvailableTags() {
       return this.tags.keySet();
    }
 
    public Collection<ResourceLocation> getMatchingTags(T var1) {
@@ -74,11 +94,11 @@
       }
 
       return var2;
    }
 
-   public CompletableFuture<Map<ResourceLocation, Tag.Builder<T>>> prepare(ResourceManager var1, Executor var2) {
+   public CompletableFuture<Map<ResourceLocation, Tag.Builder>> prepare(ResourceManager var1, Executor var2) {
       return CompletableFuture.supplyAsync(() -> {
          HashMap var2 = Maps.newHashMap();
          Iterator var3 = var1.listResources(this.directory, (var0) -> {
             return var0.endsWith(".json");
          }).iterator();
@@ -103,17 +123,15 @@
                         Throwable var12 = null;
 
                         try {
                            JsonObject var13 = (JsonObject)GsonHelper.fromJson(GSON, (Reader)var11, (Class)JsonObject.class);
                            if (var13 == null) {
-                              LOGGER.error("Couldn't load {} tag list {} from {} in data pack {} as it's empty or null", this.name, var6, var4, var8.getSourceName());
+                              LOGGER.error("Couldn't load {} tag list {} from {} in data pack {} as it is empty or null", this.name, var6, var4, var8.getSourceName());
                            } else {
-                              ((Tag.Builder)var2.computeIfAbsent(var6, (var1x) -> {
-                                 return (Tag.Builder)Util.make(Tag.Builder.tag(), (var1) -> {
-                                    var1.keepOrder(this.ordered);
-                                 });
-                              })).addFromJson(this.idToValue, var13);
+                              ((Tag.Builder)var2.computeIfAbsent(var6, (var0) -> {
+                                 return Tag.Builder.tag();
+                              })).addFromJson(var13, var8.getSourceName());
                            }
                         } catch (Throwable var53) {
                            var12 = var53;
                            throw var53;
                         } finally {
@@ -160,45 +178,44 @@
 
          return var2;
       }, var2);
    }
 
-   public void load(Map<ResourceLocation, Tag.Builder<T>> var1) {
+   public void load(Map<ResourceLocation, Tag.Builder> var1) {
       HashMap var2 = Maps.newHashMap();
+      Function var3 = var2::get;
+      Function var4 = (var1x) -> {
+         return ((Optional)this.idToValue.apply(var1x)).orElse((Object)null);
+      };
 
       while(!var1.isEmpty()) {
-         boolean var3 = false;
-         Iterator var4 = var1.entrySet().iterator();
+         boolean var5 = false;
+         Iterator var6 = var1.entrySet().iterator();
 
-         while(var4.hasNext()) {
-            Entry var5 = (Entry)var4.next();
-            Tag.Builder var6 = (Tag.Builder)var5.getValue();
-            var2.getClass();
-            if (var6.canBuild(var2::get)) {
-               var3 = true;
-               ResourceLocation var7 = (ResourceLocation)var5.getKey();
-               var2.put(var7, var6.build(var7));
-               var4.remove();
+         while(var6.hasNext()) {
+            Entry var7 = (Entry)var6.next();
+            Optional var8 = ((Tag.Builder)var7.getValue()).build(var3, var4);
+            if (var8.isPresent()) {
+               var2.put(var7.getKey(), var8.get());
+               var6.remove();
+               var5 = true;
             }
          }
 
-         if (!var3) {
-            var1.forEach((var1x, var2x) -> {
-               LOGGER.error("Couldn't load {} tag {} as it either references another tag that doesn't exist, or ultimately references itself", this.name, var1x);
-            });
+         if (!var5) {
             break;
          }
       }
 
-      var1.forEach((var1x, var2x) -> {
-         Tag var10000 = (Tag)var2.put(var1x, var2x.build(var1x));
+      var1.forEach((var3x, var4x) -> {
+         LOGGER.error("Couldn't load {} tag {} as it is missing following references: {}", this.name, var3x, var4x.getUnresolvedEntries(var3, var4).map(Objects::toString).collect(Collectors.joining(",")));
       });
       this.replace(var2);
    }
 
    protected void replace(Map<ResourceLocation, Tag<T>> var1) {
-      this.tags = ImmutableMap.copyOf(var1);
+      this.tags = ImmutableBiMap.copyOf(var1);
    }
 
    public Map<ResourceLocation, Tag<T>> getAllTags() {
       return this.tags;
    }
