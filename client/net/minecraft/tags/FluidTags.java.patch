--- net/minecraft/tags/FluidTags.java
+++ net/minecraft/tags/FluidTags.java
@@ -1,64 +1,31 @@
 package net.minecraft.tags;
 
-import java.util.Collection;
-import java.util.Optional;
+import java.util.Set;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.world.level.material.Fluid;
 
 public class FluidTags {
-   private static TagCollection<Fluid> source = new TagCollection((var0) -> {
-      return Optional.empty();
-   }, "", false, "");
-   private static int resetCount;
-   public static final Tag<Fluid> WATER = bind("water");
-   public static final Tag<Fluid> LAVA = bind("lava");
+   private static final StaticTagHelper<Fluid> HELPER = new StaticTagHelper();
+   public static final Tag.Named<Fluid> WATER = bind("water");
+   public static final Tag.Named<Fluid> LAVA = bind("lava");
 
+   private static Tag.Named<Fluid> bind(String var0) {
+      return HELPER.bind(var0);
+   }
+
    public static void reset(TagCollection<Fluid> var0) {
-      source = var0;
-      ++resetCount;
+      HELPER.reset(var0);
    }
 
-   public static TagCollection<Fluid> getAllTags() {
-      return source;
+   public static void resetToEmpty() {
+      HELPER.resetToEmpty();
    }
 
-   private static Tag<Fluid> bind(String var0) {
-      return new FluidTags.Wrapper(new ResourceLocation(var0));
+   public static TagCollection<Fluid> getAllTags() {
+      return HELPER.getAllTags();
    }
 
-   public static class Wrapper extends Tag<Fluid> {
-      private int check = -1;
-      private Tag<Fluid> actual;
-
-      public Wrapper(ResourceLocation var1) {
-         super(var1);
-      }
-
-      public boolean contains(Fluid var1) {
-         if (this.check != FluidTags.resetCount) {
-            this.actual = FluidTags.source.getTagOrEmpty(this.getId());
-            this.check = FluidTags.resetCount;
-         }
-
-         return this.actual.contains(var1);
-      }
-
-      public Collection<Fluid> getValues() {
-         if (this.check != FluidTags.resetCount) {
-            this.actual = FluidTags.source.getTagOrEmpty(this.getId());
-            this.check = FluidTags.resetCount;
-         }
-
-         return this.actual.getValues();
-      }
-
-      public Collection<Tag.Entry<Fluid>> getSource() {
-         if (this.check != FluidTags.resetCount) {
-            this.actual = FluidTags.source.getTagOrEmpty(this.getId());
-            this.check = FluidTags.resetCount;
-         }
-
-         return this.actual.getSource();
-      }
+   public static Set<ResourceLocation> getMissingTags(TagCollection<Fluid> var0) {
+      return HELPER.getMissingTags(var0);
    }
 }
