--- net/minecraft/tags/Tag.java
+++ net/minecraft/tags/Tag.java
@@ -1,251 +1,235 @@
 package net.minecraft.tags;
 
+import com.google.common.collect.ImmutableList;
+import com.google.common.collect.ImmutableSet;
 import com.google.common.collect.Lists;
-import com.google.common.collect.Sets;
 import com.google.gson.JsonArray;
 import com.google.gson.JsonElement;
 import com.google.gson.JsonObject;
-import com.google.gson.JsonParseException;
+import com.mojang.serialization.Codec;
+import com.mojang.serialization.DataResult;
 import java.util.ArrayList;
-import java.util.Collection;
-import java.util.Collections;
 import java.util.Iterator;
+import java.util.List;
 import java.util.Optional;
 import java.util.Random;
 import java.util.Set;
+import java.util.function.Consumer;
 import java.util.function.Function;
-import javax.annotation.Nullable;
-import net.minecraft.Util;
+import java.util.function.Supplier;
+import java.util.stream.Stream;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.util.GsonHelper;
 
-public class Tag<T> {
-   private final ResourceLocation id;
-   private final Set<T> values;
-   private final Collection<Tag.Entry<T>> source;
-
-   public Tag(ResourceLocation var1) {
-      this.id = var1;
-      this.values = Collections.emptySet();
-      this.source = Collections.emptyList();
+public interface Tag<T> {
+   static <T> Codec<Tag<T>> codec(Supplier<TagCollection<T>> var0) {
+      return ResourceLocation.CODEC.flatXmap((var1) -> {
+         return (DataResult)Optional.ofNullable(((TagCollection)var0.get()).getTag(var1)).map(DataResult::success).orElseGet(() -> {
+            return DataResult.error("Unknown tag: " + var1);
+         });
+      }, (var1) -> {
+         return (DataResult)Optional.ofNullable(((TagCollection)var0.get()).getId(var1)).map(DataResult::success).orElseGet(() -> {
+            return DataResult.error("Unknown tag: " + var1);
+         });
+      });
    }
 
-   public Tag(ResourceLocation var1, Collection<Tag.Entry<T>> var2, boolean var3) {
-      this.id = var1;
-      this.values = (Set)(var3 ? Sets.newLinkedHashSet() : Sets.newHashSet());
-      this.source = var2;
-      Iterator var4 = var2.iterator();
+   boolean contains(T var1);
 
-      while(var4.hasNext()) {
-         Tag.Entry var5 = (Tag.Entry)var4.next();
-         var5.build(this.values);
-      }
+   List<T> getValues();
 
+   default T getRandomElement(Random var1) {
+      List var2 = this.getValues();
+      return var2.get(var1.nextInt(var2.size()));
    }
 
-   public JsonObject serializeToJson(Function<T, ResourceLocation> var1) {
-      JsonObject var2 = new JsonObject();
-      JsonArray var3 = new JsonArray();
-      Iterator var4 = this.source.iterator();
+   static <T> Tag<T> fromSet(final Set<T> var0) {
+      final ImmutableList var1 = ImmutableList.copyOf(var0);
+      return new Tag<T>() {
+         public boolean contains(T var1x) {
+            return var0.contains(var1x);
+         }
 
-      while(var4.hasNext()) {
-         Tag.Entry var5 = (Tag.Entry)var4.next();
-         var5.serializeTo(var3, var1);
-      }
-
-      var2.addProperty("replace", false);
-      var2.add("values", var3);
-      return var2;
+         public List<T> getValues() {
+            return var1;
+         }
+      };
    }
 
-   public boolean contains(T var1) {
-      return this.values.contains(var1);
+   public interface Named<T> extends Tag<T> {
+      ResourceLocation getName();
    }
 
-   public Collection<T> getValues() {
-      return this.values;
-   }
-
-   public Collection<Tag.Entry<T>> getSource() {
-      return this.source;
-   }
-
-   public T getRandomElement(Random var1) {
-      ArrayList var2 = Lists.newArrayList(this.getValues());
-      return var2.get(var1.nextInt(var2.size()));
-   }
-
-   public ResourceLocation getId() {
-      return this.id;
-   }
-
-   public static class TagEntry<T> implements Tag.Entry<T> {
-      @Nullable
+   public static class TagEntry implements Tag.Entry {
       private final ResourceLocation id;
-      @Nullable
-      private Tag<T> tag;
 
       public TagEntry(ResourceLocation var1) {
          this.id = var1;
       }
 
-      public TagEntry(Tag<T> var1) {
-         this.id = var1.getId();
-         this.tag = var1;
-      }
-
-      public boolean canBuild(Function<ResourceLocation, Tag<T>> var1) {
-         if (this.tag == null) {
-            this.tag = (Tag)var1.apply(this.id);
-         }
-
-         return this.tag != null;
-      }
-
-      public void build(Collection<T> var1) {
-         if (this.tag == null) {
-            throw (IllegalStateException)Util.pauseInIde(new IllegalStateException("Cannot build unresolved tag entry"));
+      public <T> boolean build(Function<ResourceLocation, Tag<T>> var1, Function<ResourceLocation, T> var2, Consumer<T> var3) {
+         Tag var4 = (Tag)var1.apply(this.id);
+         if (var4 == null) {
+            return false;
          } else {
-            var1.addAll(this.tag.getValues());
+            var4.getValues().forEach(var3);
+            return true;
          }
       }
 
-      public ResourceLocation getId() {
-         if (this.tag != null) {
-            return this.tag.getId();
-         } else if (this.id != null) {
-            return this.id;
-         } else {
-            throw new IllegalStateException("Cannot serialize an anonymous tag to json!");
-         }
+      public void serializeTo(JsonArray var1) {
+         var1.add("#" + this.id);
       }
 
-      public void serializeTo(JsonArray var1, Function<T, ResourceLocation> var2) {
-         var1.add("#" + this.getId());
+      public String toString() {
+         return "#" + this.id;
       }
    }
 
-   public static class ValuesEntry<T> implements Tag.Entry<T> {
-      private final Collection<T> values;
+   public static class ElementEntry implements Tag.Entry {
+      private final ResourceLocation id;
 
-      public ValuesEntry(Collection<T> var1) {
-         this.values = var1;
+      public ElementEntry(ResourceLocation var1) {
+         this.id = var1;
       }
 
-      public void build(Collection<T> var1) {
-         var1.addAll(this.values);
+      public <T> boolean build(Function<ResourceLocation, Tag<T>> var1, Function<ResourceLocation, T> var2, Consumer<T> var3) {
+         Object var4 = var2.apply(this.id);
+         if (var4 == null) {
+            return false;
+         } else {
+            var3.accept(var4);
+            return true;
+         }
       }
 
-      public void serializeTo(JsonArray var1, Function<T, ResourceLocation> var2) {
-         Iterator var3 = this.values.iterator();
-
-         while(var3.hasNext()) {
-            Object var4 = var3.next();
-            ResourceLocation var5 = (ResourceLocation)var2.apply(var4);
-            if (var5 == null) {
-               throw new IllegalStateException("Unable to serialize an anonymous value to json!");
-            }
-
-            var1.add(var5.toString());
-         }
-
+      public void serializeTo(JsonArray var1) {
+         var1.add(this.id.toString());
       }
 
-      public Collection<T> getValues() {
-         return this.values;
+      public String toString() {
+         return this.id.toString();
       }
    }
 
-   public interface Entry<T> {
-      default boolean canBuild(Function<ResourceLocation, Tag<T>> var1) {
-         return true;
-      }
+   public interface Entry {
+      <T> boolean build(Function<ResourceLocation, Tag<T>> var1, Function<ResourceLocation, T> var2, Consumer<T> var3);
 
-      void build(Collection<T> var1);
-
-      void serializeTo(JsonArray var1, Function<T, ResourceLocation> var2);
+      void serializeTo(JsonArray var1);
    }
 
-   public static class Builder<T> {
-      private final Set<Tag.Entry<T>> values = Sets.newLinkedHashSet();
-      private boolean ordered;
+   public static class Builder {
+      private final List<Tag.BuilderEntry> entries = Lists.newArrayList();
 
       public Builder() {
       }
 
-      public static <T> Tag.Builder<T> tag() {
+      public static Tag.Builder tag() {
          return new Tag.Builder();
       }
 
-      public Tag.Builder<T> add(Tag.Entry<T> var1) {
-         this.values.add(var1);
+      public Tag.Builder add(Tag.BuilderEntry var1) {
+         this.entries.add(var1);
          return this;
       }
 
-      public Tag.Builder<T> add(T var1) {
-         this.values.add(new Tag.ValuesEntry(Collections.singleton(var1)));
-         return this;
+      public Tag.Builder add(Tag.Entry var1, String var2) {
+         return this.add(new Tag.BuilderEntry(var1, var2));
       }
 
-      @SafeVarargs
-      public final Tag.Builder<T> add(T... var1) {
-         this.values.add(new Tag.ValuesEntry(Lists.newArrayList(var1)));
-         return this;
+      public Tag.Builder addElement(ResourceLocation var1, String var2) {
+         return this.add(new Tag.ElementEntry(var1), var2);
       }
 
-      public Tag.Builder<T> addTag(Tag<T> var1) {
-         this.values.add(new Tag.TagEntry(var1));
-         return this;
+      public Tag.Builder addTag(ResourceLocation var1, String var2) {
+         return this.add(new Tag.TagEntry(var1), var2);
       }
 
-      public Tag.Builder<T> keepOrder(boolean var1) {
-         this.ordered = var1;
-         return this;
-      }
+      public <T> Optional<Tag<T>> build(Function<ResourceLocation, Tag<T>> var1, Function<ResourceLocation, T> var2) {
+         com.google.common.collect.ImmutableSet.Builder var3 = ImmutableSet.builder();
+         Iterator var4 = this.entries.iterator();
 
-      public boolean canBuild(Function<ResourceLocation, Tag<T>> var1) {
-         Iterator var2 = this.values.iterator();
-
-         Tag.Entry var3;
+         Tag.Entry var10000;
          do {
-            if (!var2.hasNext()) {
-               return true;
+            if (!var4.hasNext()) {
+               return Optional.of(Tag.fromSet(var3.build()));
             }
 
-            var3 = (Tag.Entry)var2.next();
-         } while(var3.canBuild(var1));
+            Tag.BuilderEntry var5 = (Tag.BuilderEntry)var4.next();
+            var10000 = var5.getEntry();
+            var3.getClass();
+         } while(var10000.build(var1, var2, var3::add));
 
-         return false;
+         return Optional.empty();
       }
 
-      public Tag<T> build(ResourceLocation var1) {
-         return new Tag(var1, this.values, this.ordered);
+      public Stream<Tag.BuilderEntry> getEntries() {
+         return this.entries.stream();
       }
 
-      public Tag.Builder<T> addFromJson(Function<ResourceLocation, Optional<T>> var1, JsonObject var2) {
-         JsonArray var3 = GsonHelper.getAsJsonArray(var2, "values");
+      public <T> Stream<Tag.BuilderEntry> getUnresolvedEntries(Function<ResourceLocation, Tag<T>> var1, Function<ResourceLocation, T> var2) {
+         return this.getEntries().filter((var2x) -> {
+            return !var2x.getEntry().build(var1, var2, (var0) -> {
+            });
+         });
+      }
+
+      public Tag.Builder addFromJson(JsonObject var1, String var2) {
+         JsonArray var3 = GsonHelper.getAsJsonArray(var1, "values");
          ArrayList var4 = Lists.newArrayList();
          Iterator var5 = var3.iterator();
 
          while(var5.hasNext()) {
             JsonElement var6 = (JsonElement)var5.next();
             String var7 = GsonHelper.convertToString(var6, "value");
             if (var7.startsWith("#")) {
                var4.add(new Tag.TagEntry(new ResourceLocation(var7.substring(1))));
             } else {
-               ResourceLocation var8 = new ResourceLocation(var7);
-               var4.add(new Tag.ValuesEntry(Collections.singleton(((Optional)var1.apply(var8)).orElseThrow(() -> {
-                  return new JsonParseException("Unknown value '" + var8 + "'");
-               }))));
+               var4.add(new Tag.ElementEntry(new ResourceLocation(var7)));
             }
          }
 
-         if (GsonHelper.getAsBoolean(var2, "replace", false)) {
-            this.values.clear();
+         if (GsonHelper.getAsBoolean(var1, "replace", false)) {
+            this.entries.clear();
          }
 
-         this.values.addAll(var4);
+         var4.forEach((var2x) -> {
+            this.entries.add(new Tag.BuilderEntry(var2x, var2));
+         });
          return this;
       }
+
+      public JsonObject serializeToJson() {
+         JsonObject var1 = new JsonObject();
+         JsonArray var2 = new JsonArray();
+         Iterator var3 = this.entries.iterator();
+
+         while(var3.hasNext()) {
+            Tag.BuilderEntry var4 = (Tag.BuilderEntry)var3.next();
+            var4.getEntry().serializeTo(var2);
+         }
+
+         var1.addProperty("replace", false);
+         var1.add("values", var2);
+         return var1;
+      }
    }
+
+   public static class BuilderEntry {
+      private final Tag.Entry entry;
+      private final String source;
+
+      private BuilderEntry(Tag.Entry var1, String var2) {
+         this.entry = var1;
+         this.source = var2;
+      }
+
+      public Tag.Entry getEntry() {
+         return this.entry;
+      }
+
+      public String toString() {
+         return this.entry.toString() + " (from " + this.source + ")";
+      }
+   }
 }
