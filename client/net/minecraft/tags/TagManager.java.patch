--- net/minecraft/tags/TagManager.java
+++ net/minecraft/tags/TagManager.java
@@ -1,20 +1,21 @@
 package net.minecraft.tags;
 
-import com.mojang.datafixers.util.Pair;
+import com.google.common.collect.HashMultimap;
 import java.util.Map;
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.Executor;
+import java.util.stream.Collectors;
 import net.minecraft.core.Registry;
 import net.minecraft.network.FriendlyByteBuf;
-import net.minecraft.resources.ResourceLocation;
 import net.minecraft.server.packs.resources.PreparableReloadListener;
 import net.minecraft.server.packs.resources.ResourceManager;
 import net.minecraft.util.profiling.ProfilerFiller;
 import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.item.Item;
 import net.minecraft.world.level.block.Block;
+import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.material.Fluid;
 
 public class TagManager implements PreparableReloadListener {
    private final SynchronizableTagCollection<Block> blocks;
    private final SynchronizableTagCollection<Item> items;
@@ -63,35 +64,34 @@
    public CompletableFuture<Void> reload(PreparableReloadListener.PreparationBarrier var1, ResourceManager var2, ProfilerFiller var3, ProfilerFiller var4, Executor var5, Executor var6) {
       CompletableFuture var7 = this.blocks.prepare(var2, var5);
       CompletableFuture var8 = this.items.prepare(var2, var5);
       CompletableFuture var9 = this.fluids.prepare(var2, var5);
       CompletableFuture var10 = this.entityTypes.prepare(var2, var5);
-      CompletableFuture var10000 = var7.thenCombine(var8, Pair::of).thenCombine(var9.thenCombine(var10, Pair::of), (var0, var1x) -> {
-         return new TagManager.Preparations((Map)var0.getFirst(), (Map)var0.getSecond(), (Map)var1x.getFirst(), (Map)var1x.getSecond());
-      });
+      CompletableFuture var10000 = CompletableFuture.allOf(var7, var8, var9, var10);
       var1.getClass();
-      return var10000.thenCompose(var1::wait).thenAcceptAsync((var1x) -> {
-         this.blocks.load(var1x.blocks);
-         this.items.load(var1x.items);
-         this.fluids.load(var1x.fluids);
-         this.entityTypes.load(var1x.entityTypes);
-         BlockTags.reset(this.blocks);
-         ItemTags.reset(this.items);
-         FluidTags.reset(this.fluids);
-         EntityTypeTags.reset(this.entityTypes);
+      return var10000.thenCompose(var1::wait).thenAcceptAsync((var5x) -> {
+         this.blocks.load((Map)var7.join());
+         this.items.load((Map)var8.join());
+         this.fluids.load((Map)var9.join());
+         this.entityTypes.load((Map)var10.join());
+         SerializationTags.bind(this.blocks, this.items, this.fluids, this.entityTypes);
+         HashMultimap var6 = HashMultimap.create();
+         var6.putAll("blocks", BlockTags.getMissingTags(this.blocks));
+         var6.putAll("items", ItemTags.getMissingTags(this.items));
+         var6.putAll("fluids", FluidTags.getMissingTags(this.fluids));
+         var6.putAll("entity_types", EntityTypeTags.getMissingTags(this.entityTypes));
+         if (!var6.isEmpty()) {
+            throw new IllegalStateException("Missing required tags: " + (String)var6.entries().stream().map((var0) -> {
+               return (String)var0.getKey() + ":" + var0.getValue();
+            }).sorted().collect(Collectors.joining(",")));
+         }
       }, var6);
    }
 
-   public static class Preparations {
-      final Map<ResourceLocation, Tag.Builder<Block>> blocks;
-      final Map<ResourceLocation, Tag.Builder<Item>> items;
-      final Map<ResourceLocation, Tag.Builder<Fluid>> fluids;
-      final Map<ResourceLocation, Tag.Builder<EntityType<?>>> entityTypes;
-
-      public Preparations(Map<ResourceLocation, Tag.Builder<Block>> var1, Map<ResourceLocation, Tag.Builder<Item>> var2, Map<ResourceLocation, Tag.Builder<Fluid>> var3, Map<ResourceLocation, Tag.Builder<EntityType<?>>> var4) {
-         this.blocks = var1;
-         this.items = var2;
-         this.fluids = var3;
-         this.entityTypes = var4;
-      }
+   public void bindToGlobal() {
+      BlockTags.reset(this.blocks);
+      ItemTags.reset(this.items);
+      FluidTags.reset(this.fluids);
+      EntityTypeTags.reset(this.entityTypes);
+      Blocks.rebuildCache();
    }
 }
