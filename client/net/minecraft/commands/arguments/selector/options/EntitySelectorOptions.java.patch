--- net/minecraft/commands/arguments/selector/options/EntitySelectorOptions.java
+++ net/minecraft/commands/arguments/selector/options/EntitySelectorOptions.java
@@ -19,11 +19,10 @@
 import net.minecraft.advancements.CriterionProgress;
 import net.minecraft.advancements.critereon.MinMaxBounds;
 import net.minecraft.advancements.critereon.WrappedMinMaxBounds;
 import net.minecraft.commands.SharedSuggestionProvider;
 import net.minecraft.commands.arguments.selector.EntitySelectorParser;
-import net.minecraft.core.BlockPos;
 import net.minecraft.core.Registry;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.NbtUtils;
 import net.minecraft.nbt.TagParser;
 import net.minecraft.network.chat.Component;
@@ -33,11 +32,10 @@
 import net.minecraft.server.ServerAdvancementManager;
 import net.minecraft.server.ServerScoreboard;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.tags.EntityTypeTags;
-import net.minecraft.tags.Tag;
 import net.minecraft.util.Mth;
 import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.level.GameType;
@@ -55,13 +53,13 @@
       return new TranslatableComponent("argument.entity.options.unknown", new Object[]{var0});
    });
    public static final DynamicCommandExceptionType ERROR_INAPPLICABLE_OPTION = new DynamicCommandExceptionType((var0) -> {
       return new TranslatableComponent("argument.entity.options.inapplicable", new Object[]{var0});
    });
-   public static final SimpleCommandExceptionType ERROR_RANGE_NEGATIVE = new SimpleCommandExceptionType(new TranslatableComponent("argument.entity.options.distance.negative", new Object[0]));
-   public static final SimpleCommandExceptionType ERROR_LEVEL_NEGATIVE = new SimpleCommandExceptionType(new TranslatableComponent("argument.entity.options.level.negative", new Object[0]));
-   public static final SimpleCommandExceptionType ERROR_LIMIT_TOO_SMALL = new SimpleCommandExceptionType(new TranslatableComponent("argument.entity.options.limit.toosmall", new Object[0]));
+   public static final SimpleCommandExceptionType ERROR_RANGE_NEGATIVE = new SimpleCommandExceptionType(new TranslatableComponent("argument.entity.options.distance.negative"));
+   public static final SimpleCommandExceptionType ERROR_LEVEL_NEGATIVE = new SimpleCommandExceptionType(new TranslatableComponent("argument.entity.options.level.negative"));
+   public static final SimpleCommandExceptionType ERROR_LIMIT_TOO_SMALL = new SimpleCommandExceptionType(new TranslatableComponent("argument.entity.options.limit.toosmall"));
    public static final DynamicCommandExceptionType ERROR_SORT_UNKNOWN = new DynamicCommandExceptionType((var0) -> {
       return new TranslatableComponent("argument.entity.options.sort.irreversible", new Object[]{var0});
    });
    public static final DynamicCommandExceptionType ERROR_GAME_MODE_INVALID = new DynamicCommandExceptionType((var0) -> {
       return new TranslatableComponent("argument.entity.options.mode.invalid", new Object[]{var0});
@@ -89,16 +87,16 @@
                } else {
                   var0.setHasNameEquals(true);
                }
 
                var0.addPredicate((var2x) -> {
-                  return var2x.getName().getContents().equals(var3) != var2;
+                  return var2x.getName().getString().equals(var3) != var2;
                });
             }
          }, (var0) -> {
             return !var0.hasNameEquals();
-         }, new TranslatableComponent("argument.entity.options.name.description", new Object[0]));
+         }, new TranslatableComponent("argument.entity.options.name.description"));
          register("distance", (var0) -> {
             int var1 = var0.getReader().getCursor();
             MinMaxBounds.Floats var2 = MinMaxBounds.Floats.fromReader(var0.getReader());
             if ((var2.getMin() == null || (Float)var2.getMin() >= 0.0F) && (var2.getMax() == null || (Float)var2.getMax() >= 0.0F)) {
                var0.setDistance(var2);
@@ -107,11 +105,11 @@
                var0.getReader().setCursor(var1);
                throw ERROR_RANGE_NEGATIVE.createWithContext(var0.getReader());
             }
          }, (var0) -> {
             return var0.getDistance().isAny();
-         }, new TranslatableComponent("argument.entity.options.distance.description", new Object[0]));
+         }, new TranslatableComponent("argument.entity.options.distance.description"));
          register("level", (var0) -> {
             int var1 = var0.getReader().getCursor();
             MinMaxBounds.Ints var2 = MinMaxBounds.Ints.fromReader(var0.getReader());
             if ((var2.getMin() == null || (Integer)var2.getMin() >= 0) && (var2.getMax() == null || (Integer)var2.getMax() >= 0)) {
                var0.setLevel(var2);
@@ -120,57 +118,57 @@
                var0.getReader().setCursor(var1);
                throw ERROR_LEVEL_NEGATIVE.createWithContext(var0.getReader());
             }
          }, (var0) -> {
             return var0.getLevel().isAny();
-         }, new TranslatableComponent("argument.entity.options.level.description", new Object[0]));
+         }, new TranslatableComponent("argument.entity.options.level.description"));
          register("x", (var0) -> {
             var0.setWorldLimited();
             var0.setX(var0.getReader().readDouble());
          }, (var0) -> {
             return var0.getX() == null;
-         }, new TranslatableComponent("argument.entity.options.x.description", new Object[0]));
+         }, new TranslatableComponent("argument.entity.options.x.description"));
          register("y", (var0) -> {
             var0.setWorldLimited();
             var0.setY(var0.getReader().readDouble());
          }, (var0) -> {
             return var0.getY() == null;
-         }, new TranslatableComponent("argument.entity.options.y.description", new Object[0]));
+         }, new TranslatableComponent("argument.entity.options.y.description"));
          register("z", (var0) -> {
             var0.setWorldLimited();
             var0.setZ(var0.getReader().readDouble());
          }, (var0) -> {
             return var0.getZ() == null;
-         }, new TranslatableComponent("argument.entity.options.z.description", new Object[0]));
+         }, new TranslatableComponent("argument.entity.options.z.description"));
          register("dx", (var0) -> {
             var0.setWorldLimited();
             var0.setDeltaX(var0.getReader().readDouble());
          }, (var0) -> {
             return var0.getDeltaX() == null;
-         }, new TranslatableComponent("argument.entity.options.dx.description", new Object[0]));
+         }, new TranslatableComponent("argument.entity.options.dx.description"));
          register("dy", (var0) -> {
             var0.setWorldLimited();
             var0.setDeltaY(var0.getReader().readDouble());
          }, (var0) -> {
             return var0.getDeltaY() == null;
-         }, new TranslatableComponent("argument.entity.options.dy.description", new Object[0]));
+         }, new TranslatableComponent("argument.entity.options.dy.description"));
          register("dz", (var0) -> {
             var0.setWorldLimited();
             var0.setDeltaZ(var0.getReader().readDouble());
          }, (var0) -> {
             return var0.getDeltaZ() == null;
-         }, new TranslatableComponent("argument.entity.options.dz.description", new Object[0]));
+         }, new TranslatableComponent("argument.entity.options.dz.description"));
          register("x_rotation", (var0) -> {
             var0.setRotX(WrappedMinMaxBounds.fromReader(var0.getReader(), true, Mth::wrapDegrees));
          }, (var0) -> {
             return var0.getRotX() == WrappedMinMaxBounds.ANY;
-         }, new TranslatableComponent("argument.entity.options.x_rotation.description", new Object[0]));
+         }, new TranslatableComponent("argument.entity.options.x_rotation.description"));
          register("y_rotation", (var0) -> {
             var0.setRotY(WrappedMinMaxBounds.fromReader(var0.getReader(), true, Mth::wrapDegrees));
          }, (var0) -> {
             return var0.getRotY() == WrappedMinMaxBounds.ANY;
-         }, new TranslatableComponent("argument.entity.options.y_rotation.description", new Object[0]));
+         }, new TranslatableComponent("argument.entity.options.y_rotation.description"));
          register("limit", (var0) -> {
             int var1 = var0.getReader().getCursor();
             int var2 = var0.getReader().readInt();
             if (var2 < 1) {
                var0.getReader().setCursor(var1);
@@ -179,11 +177,11 @@
                var0.setMaxResults(var2);
                var0.setLimited(true);
             }
          }, (var0) -> {
             return !var0.isCurrentEntity() && !var0.isLimited();
-         }, new TranslatableComponent("argument.entity.options.limit.description", new Object[0]));
+         }, new TranslatableComponent("argument.entity.options.limit.description"));
          register("sort", (var0) -> {
             int var1 = var0.getReader().getCursor();
             String var2 = var0.getReader().readUnquotedString();
             var0.setSuggestions((var0x, var1x) -> {
                return SharedSuggestionProvider.suggest((Iterable)Arrays.asList("nearest", "furthest", "random", "arbitrary"), var0x);
@@ -232,11 +230,11 @@
 
             var0.setOrder(var3);
             var0.setSorted(true);
          }, (var0) -> {
             return !var0.isCurrentEntity() && !var0.isSorted();
-         }, new TranslatableComponent("argument.entity.options.sort.description", new Object[0]));
+         }, new TranslatableComponent("argument.entity.options.sort.description"));
          register("gamemode", (var0) -> {
             var0.setSuggestions((var1x, var2x) -> {
                String var3 = var1x.getRemaining().toLowerCase(Locale.ROOT);
                boolean var4 = !var0.hasGamemodeNotEquals();
                boolean var5 = true;
@@ -296,11 +294,11 @@
 
                }
             }
          }, (var0) -> {
             return !var0.hasGamemodeEquals();
-         }, new TranslatableComponent("argument.entity.options.gamemode.description", new Object[0]));
+         }, new TranslatableComponent("argument.entity.options.gamemode.description"));
          register("team", (var0) -> {
             boolean var1 = var0.shouldInvertValue();
             String var2 = var0.getReader().readUnquotedString();
             var0.addPredicate((var2x) -> {
                if (!(var2x instanceof LivingEntity)) {
@@ -317,11 +315,11 @@
                var0.setHasTeamEquals(true);
             }
 
          }, (var0) -> {
             return !var0.hasTeamEquals();
-         }, new TranslatableComponent("argument.entity.options.team.description", new Object[0]));
+         }, new TranslatableComponent("argument.entity.options.team.description"));
          register("type", (var0) -> {
             var0.setSuggestions((var1x, var2x) -> {
                SharedSuggestionProvider.suggestResource(Registry.ENTITY_TYPE.keySet(), var1x, String.valueOf('!'));
                SharedSuggestionProvider.suggestResource(EntityTypeTags.getAllTags().getAvailableTags(), var1x, "!#");
                if (!var0.isTypeLimitedInversely()) {
@@ -342,41 +340,35 @@
                }
 
                ResourceLocation var3;
                if (var0.isTag()) {
                   var3 = ResourceLocation.read(var0.getReader());
-                  Tag var4 = EntityTypeTags.getAllTags().getTag(var3);
-                  if (var4 == null) {
-                     var0.getReader().setCursor(var1);
-                     throw ERROR_ENTITY_TYPE_INVALID.createWithContext(var0.getReader(), var3.toString());
-                  }
-
                   var0.addPredicate((var2x) -> {
-                     return var4.contains(var2x.getType()) != var2;
+                     return var2x.getServer().getTags().getEntityTypes().getTagOrEmpty(var3).contains(var2x.getType()) != var2;
                   });
                } else {
                   var3 = ResourceLocation.read(var0.getReader());
-                  EntityType var5 = (EntityType)Registry.ENTITY_TYPE.getOptional(var3).orElseThrow(() -> {
+                  EntityType var4 = (EntityType)Registry.ENTITY_TYPE.getOptional(var3).orElseThrow(() -> {
                      var0.getReader().setCursor(var1);
                      return ERROR_ENTITY_TYPE_INVALID.createWithContext(var0.getReader(), var3.toString());
                   });
-                  if (Objects.equals(EntityType.PLAYER, var5) && !var2) {
+                  if (Objects.equals(EntityType.PLAYER, var4) && !var2) {
                      var0.setIncludesEntities(false);
                   }
 
                   var0.addPredicate((var2x) -> {
-                     return Objects.equals(var5, var2x.getType()) != var2;
+                     return Objects.equals(var4, var2x.getType()) != var2;
                   });
                   if (!var2) {
-                     var0.limitToType(var5);
+                     var0.limitToType(var4);
                   }
                }
 
             }
          }, (var0) -> {
             return !var0.isTypeLimited();
-         }, new TranslatableComponent("argument.entity.options.type.description", new Object[0]));
+         }, new TranslatableComponent("argument.entity.options.type.description"));
          register("tag", (var0) -> {
             boolean var1 = var0.shouldInvertValue();
             String var2 = var0.getReader().readUnquotedString();
             var0.addPredicate((var2x) -> {
                if ("".equals(var2)) {
@@ -385,11 +377,11 @@
                   return var2x.getTags().contains(var2) != var1;
                }
             });
          }, (var0) -> {
             return true;
-         }, new TranslatableComponent("argument.entity.options.tag.description", new Object[0]));
+         }, new TranslatableComponent("argument.entity.options.tag.description"));
          register("nbt", (var0) -> {
             boolean var1 = var0.shouldInvertValue();
             CompoundTag var2 = (new TagParser(var0.getReader())).readStruct();
             var0.addPredicate((var2x) -> {
                CompoundTag var3 = var2x.saveWithoutId(new CompoundTag());
@@ -402,11 +394,11 @@
 
                return NbtUtils.compareNbt(var2, var3, true) != var1;
             });
          }, (var0) -> {
             return true;
-         }, new TranslatableComponent("argument.entity.options.nbt.description", new Object[0]));
+         }, new TranslatableComponent("argument.entity.options.nbt.description"));
          register("scores", (var0) -> {
             StringReader var1 = var0.getReader();
             HashMap var2 = Maps.newHashMap();
             var1.expect('{');
             var1.skipWhitespace();
@@ -458,11 +450,11 @@
             }
 
             var0.setHasScores(true);
          }, (var0) -> {
             return !var0.hasScores();
-         }, new TranslatableComponent("argument.entity.options.scores.description", new Object[0]));
+         }, new TranslatableComponent("argument.entity.options.scores.description"));
          register("advancements", (var0) -> {
             StringReader var1 = var0.getReader();
             HashMap var2 = Maps.newHashMap();
             var1.expect('{');
             var1.skipWhitespace();
@@ -556,11 +548,11 @@
             }
 
             var0.setHasAdvancements(true);
          }, (var0) -> {
             return !var0.hasAdvancements();
-         }, new TranslatableComponent("argument.entity.options.advancements.description", new Object[0]));
+         }, new TranslatableComponent("argument.entity.options.advancements.description"));
          register("predicate", (var0) -> {
             boolean var1 = var0.shouldInvertValue();
             ResourceLocation var2 = ResourceLocation.read(var0.getReader());
             var0.addPredicate((var2x) -> {
                if (!(var2x.level instanceof ServerLevel)) {
@@ -569,18 +561,18 @@
                   ServerLevel var3 = (ServerLevel)var2x.level;
                   LootItemCondition var4 = var3.getServer().getPredicateManager().get(var2);
                   if (var4 == null) {
                      return false;
                   } else {
-                     LootContext var5 = (new LootContext.Builder(var3)).withParameter(LootContextParams.THIS_ENTITY, var2x).withParameter(LootContextParams.BLOCK_POS, new BlockPos(var2x)).create(LootContextParamSets.SELECTOR);
+                     LootContext var5 = (new LootContext.Builder(var3)).withParameter(LootContextParams.THIS_ENTITY, var2x).withParameter(LootContextParams.BLOCK_POS, var2x.blockPosition()).create(LootContextParamSets.SELECTOR);
                      return var1 ^ var4.test(var5);
                   }
                }
             });
          }, (var0) -> {
             return true;
-         }, new TranslatableComponent("argument.entity.options.predicate.description", new Object[0]));
+         }, new TranslatableComponent("argument.entity.options.predicate.description"));
       }
    }
 
    public static EntitySelectorOptions.Modifier get(EntitySelectorParser var0, String var1, int var2) throws CommandSyntaxException {
       EntitySelectorOptions.Option var3 = (EntitySelectorOptions.Option)OPTIONS.get(var1);
