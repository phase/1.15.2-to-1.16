--- net/minecraft/nbt/NbtIo.java
+++ net/minecraft/nbt/NbtIo.java
@@ -18,10 +18,38 @@
 import net.minecraft.CrashReport;
 import net.minecraft.CrashReportCategory;
 import net.minecraft.ReportedException;
 
 public class NbtIo {
+   public static CompoundTag readCompressed(File var0) throws IOException {
+      FileInputStream var1 = new FileInputStream(var0);
+      Throwable var2 = null;
+
+      CompoundTag var3;
+      try {
+         var3 = readCompressed((InputStream)var1);
+      } catch (Throwable var12) {
+         var2 = var12;
+         throw var12;
+      } finally {
+         if (var1 != null) {
+            if (var2 != null) {
+               try {
+                  var1.close();
+               } catch (Throwable var11) {
+                  var2.addSuppressed(var11);
+               }
+            } else {
+               var1.close();
+            }
+         }
+
+      }
+
+      return var3;
+   }
+
    public static CompoundTag readCompressed(InputStream var0) throws IOException {
       DataInputStream var1 = new DataInputStream(new BufferedInputStream(new GZIPInputStream(var0)));
       Throwable var2 = null;
 
       CompoundTag var3;
@@ -46,16 +74,16 @@
       }
 
       return var3;
    }
 
-   public static void writeCompressed(CompoundTag var0, OutputStream var1) throws IOException {
-      DataOutputStream var2 = new DataOutputStream(new BufferedOutputStream(new GZIPOutputStream(var1)));
+   public static void writeCompressed(CompoundTag var0, File var1) throws IOException {
+      FileOutputStream var2 = new FileOutputStream(var1);
       Throwable var3 = null;
 
       try {
-         write(var0, (DataOutput)var2);
+         writeCompressed(var0, (OutputStream)var2);
       } catch (Throwable var12) {
          var3 = var12;
          throw var12;
       } finally {
          if (var2 != null) {
@@ -72,58 +100,139 @@
 
       }
 
    }
 
-   public static void safeWrite(CompoundTag var0, File var1) throws IOException {
-      File var2 = new File(var1.getAbsolutePath() + "_tmp");
-      if (var2.exists()) {
-         var2.delete();
-      }
+   public static void writeCompressed(CompoundTag var0, OutputStream var1) throws IOException {
+      DataOutputStream var2 = new DataOutputStream(new BufferedOutputStream(new GZIPOutputStream(var1)));
+      Throwable var3 = null;
 
-      write(var0, var2);
-      if (var1.exists()) {
-         var1.delete();
-      }
+      try {
+         write(var0, (DataOutput)var2);
+      } catch (Throwable var12) {
+         var3 = var12;
+         throw var12;
+      } finally {
+         if (var2 != null) {
+            if (var3 != null) {
+               try {
+                  var2.close();
+               } catch (Throwable var11) {
+                  var3.addSuppressed(var11);
+               }
+            } else {
+               var2.close();
+            }
+         }
 
-      if (var1.exists()) {
-         throw new IOException("Failed to delete " + var1);
-      } else {
-         var2.renameTo(var1);
       }
+
    }
 
    public static void write(CompoundTag var0, File var1) throws IOException {
-      DataOutputStream var2 = new DataOutputStream(new FileOutputStream(var1));
+      FileOutputStream var2 = new FileOutputStream(var1);
+      Throwable var3 = null;
 
       try {
-         write(var0, (DataOutput)var2);
+         DataOutputStream var4 = new DataOutputStream(var2);
+         Throwable var5 = null;
+
+         try {
+            write(var0, (DataOutput)var4);
+         } catch (Throwable var28) {
+            var5 = var28;
+            throw var28;
+         } finally {
+            if (var4 != null) {
+               if (var5 != null) {
+                  try {
+                     var4.close();
+                  } catch (Throwable var27) {
+                     var5.addSuppressed(var27);
+                  }
+               } else {
+                  var4.close();
+               }
+            }
+
+         }
+      } catch (Throwable var30) {
+         var3 = var30;
+         throw var30;
       } finally {
-         var2.close();
+         if (var2 != null) {
+            if (var3 != null) {
+               try {
+                  var2.close();
+               } catch (Throwable var26) {
+                  var3.addSuppressed(var26);
+               }
+            } else {
+               var2.close();
+            }
+         }
+
       }
 
    }
 
    @Nullable
    public static CompoundTag read(File var0) throws IOException {
       if (!var0.exists()) {
          return null;
       } else {
-         DataInputStream var1 = new DataInputStream(new FileInputStream(var0));
+         FileInputStream var1 = new FileInputStream(var0);
+         Throwable var2 = null;
 
-         CompoundTag var2;
+         Object var5;
          try {
-            var2 = read(var1, NbtAccounter.UNLIMITED);
+            DataInputStream var3 = new DataInputStream(var1);
+            Throwable var4 = null;
+
+            try {
+               var5 = read(var3, NbtAccounter.UNLIMITED);
+            } catch (Throwable var28) {
+               var5 = var28;
+               var4 = var28;
+               throw var28;
+            } finally {
+               if (var3 != null) {
+                  if (var4 != null) {
+                     try {
+                        var3.close();
+                     } catch (Throwable var27) {
+                        var4.addSuppressed(var27);
+                     }
+                  } else {
+                     var3.close();
+                  }
+               }
+
+            }
+         } catch (Throwable var30) {
+            var2 = var30;
+            throw var30;
          } finally {
-            var1.close();
+            if (var1 != null) {
+               if (var2 != null) {
+                  try {
+                     var1.close();
+                  } catch (Throwable var26) {
+                     var2.addSuppressed(var26);
+                  }
+               } else {
+                  var1.close();
+               }
+            }
+
          }
 
-         return var2;
+         return (CompoundTag)var5;
       }
    }
 
-   public static CompoundTag read(DataInputStream var0) throws IOException {
+   public static CompoundTag read(DataInput var0) throws IOException {
       return read(var0, NbtAccounter.UNLIMITED);
    }
 
    public static CompoundTag read(DataInput var0, NbtAccounter var1) throws IOException {
       Tag var2 = readUnnamedTag(var0, 0, var1);
