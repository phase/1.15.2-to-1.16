--- net/minecraft/world/entity/Entity.java
+++ net/minecraft/world/entity/Entity.java
@@ -1,11 +1,12 @@
 package net.minecraft.world.entity;
 
-import com.google.common.collect.ImmutableSet;
 import com.google.common.collect.Iterables;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Sets;
+import it.unimi.dsi.fastutil.objects.Object2DoubleArrayMap;
+import it.unimi.dsi.fastutil.objects.Object2DoubleMap;
 import java.util.Arrays;
 import java.util.Collection;
 import java.util.Collections;
 import java.util.HashSet;
 import java.util.Iterator;
@@ -25,27 +26,27 @@
 import net.minecraft.commands.CommandSource;
 import net.minecraft.commands.CommandSourceStack;
 import net.minecraft.commands.arguments.EntityAnchorArgument;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
-import net.minecraft.core.Vec3i;
 import net.minecraft.core.particles.BlockParticleOption;
 import net.minecraft.core.particles.ParticleTypes;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.DoubleTag;
 import net.minecraft.nbt.FloatTag;
 import net.minecraft.nbt.ListTag;
 import net.minecraft.nbt.StringTag;
 import net.minecraft.network.chat.ClickEvent;
 import net.minecraft.network.chat.Component;
 import net.minecraft.network.chat.HoverEvent;
-import net.minecraft.network.chat.TextComponent;
+import net.minecraft.network.chat.MutableComponent;
 import net.minecraft.network.protocol.Packet;
 import net.minecraft.network.protocol.game.ClientboundMoveEntityPacket;
 import net.minecraft.network.syncher.EntityDataAccessor;
 import net.minecraft.network.syncher.EntityDataSerializers;
 import net.minecraft.network.syncher.SynchedEntityData;
+import net.minecraft.resources.ResourceKey;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.server.level.TicketType;
@@ -59,11 +60,10 @@
 import net.minecraft.util.RewindableStream;
 import net.minecraft.world.InteractionHand;
 import net.minecraft.world.InteractionResult;
 import net.minecraft.world.Nameable;
 import net.minecraft.world.damagesource.DamageSource;
-import net.minecraft.world.entity.global.LightningBolt;
 import net.minecraft.world.entity.item.ItemEntity;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.entity.vehicle.Boat;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.enchantment.EnchantmentHelper;
@@ -121,23 +121,21 @@
    public boolean forcedLoading;
    public Level level;
    public double xo;
    public double yo;
    public double zo;
-   private double x;
-   private double y;
-   private double z;
+   private Vec3 position;
+   private BlockPos blockPosition;
    private Vec3 deltaMovement;
    public float yRot;
    public float xRot;
    public float yRotO;
    public float xRotO;
    private AABB bb;
-   public boolean onGround;
+   protected boolean onGround;
    public boolean horizontalCollision;
    public boolean verticalCollision;
-   public boolean collision;
    public boolean hurtMarked;
    protected Vec3 stuckSpeedMultiplier;
    public boolean removed;
    public float walkDistO;
    public float walkDist;
@@ -152,14 +150,16 @@
    public boolean noPhysics;
    public float pushthrough;
    protected final Random random;
    public int tickCount;
    private int remainingFireTicks;
-   protected boolean wasInWater;
-   protected double waterHeight;
-   protected boolean wasUnderWater;
-   protected boolean isInLava;
+   protected boolean wasTouchingWater;
+   protected Object2DoubleMap<Tag<Fluid>> fluidHeight;
+   protected boolean wasEyeInWater;
+   @Nullable
+   protected Tag<Fluid> fluidOnEyes;
+   protected boolean isTouchingLava;
    public int invulnerableTime;
    protected boolean firstTick;
    protected final SynchedEntityData entityData;
    protected static final EntityDataAccessor<Byte> DATA_SHARED_FLAGS_ID;
    private static final EntityDataAccessor<Integer> DATA_AIR_SUPPLY_ID;
@@ -170,28 +170,28 @@
    protected static final EntityDataAccessor<Pose> DATA_POSE;
    public boolean inChunk;
    public int xChunk;
    public int yChunk;
    public int zChunk;
+   private boolean movedSinceLastChunkCheck;
    public long xp;
    public long yp;
    public long zp;
    public boolean noCulling;
    public boolean hasImpulse;
    public int changingDimensionDelay;
    protected boolean isInsidePortal;
    protected int portalTime;
-   public DimensionType dimension;
    protected BlockPos portalEntranceBlock;
    protected Vec3 portalEntranceOffset;
    protected Direction portalEntranceForwards;
    private boolean invulnerable;
    protected UUID uuid;
    protected String stringUUID;
    protected boolean glowing;
    private final Set<String> tags;
-   private boolean teleported;
+   private boolean forceChunkAddition;
    private final double[] pistonDeltas;
    private long pistonDeltasGameTime;
    private EntityDimensions dimensions;
    private float eyeHeight;
 
@@ -203,23 +203,22 @@
       this.stuckSpeedMultiplier = Vec3.ZERO;
       this.nextStep = 1.0F;
       this.nextFlap = 1.0F;
       this.random = new Random();
       this.remainingFireTicks = -this.getFireImmuneTicks();
+      this.fluidHeight = new Object2DoubleArrayMap(2);
       this.firstTick = true;
       this.uuid = Mth.createInsecureUUID(this.random);
       this.stringUUID = this.uuid.toString();
       this.tags = Sets.newHashSet();
       this.pistonDeltas = new double[]{0.0D, 0.0D, 0.0D};
       this.type = var1;
       this.level = var2;
       this.dimensions = var1.getDimensions();
+      this.position = Vec3.ZERO;
+      this.blockPosition = BlockPos.ZERO;
       this.setPos(0.0D, 0.0D, 0.0D);
-      if (var2 != null) {
-         this.dimension = var2.dimension.getType();
-      }
-
       this.entityData = new SynchedEntityData(this);
       this.entityData.define(DATA_SHARED_FLAGS_ID, (byte)0);
       this.entityData.define(DATA_AIR_SUPPLY_ID, this.getMaxAirSupply());
       this.entityData.define(DATA_CUSTOM_NAME_VISIBLE, false);
       this.entityData.define(DATA_CUSTOM_NAME, Optional.empty());
@@ -318,18 +317,25 @@
 
    public void remove() {
       this.removed = true;
    }
 
-   protected void setPose(Pose var1) {
+   public void setPose(Pose var1) {
       this.entityData.set(DATA_POSE, var1);
    }
 
    public Pose getPose() {
       return (Pose)this.entityData.get(DATA_POSE);
    }
 
+   public boolean closerThan(Entity var1, double var2) {
+      double var4 = var1.position.x - this.position.x;
+      double var6 = var1.position.y - this.position.y;
+      double var8 = var1.position.z - this.position.z;
+      return var4 * var4 + var6 * var6 + var8 * var8 < var2 * var2;
+   }
+
    protected void setRot(float var1, float var2) {
       this.yRot = var1 % 360.0F;
       this.xRot = var2 % 360.0F;
    }
 
@@ -339,11 +345,11 @@
       float var8 = this.dimensions.height;
       this.setBoundingBox(new AABB(var1 - (double)var7, var3, var5 - (double)var7, var1 + (double)var7, var3 + (double)var8, var5 + (double)var7));
    }
 
    protected void reapplyPosition() {
-      this.setPos(this.x, this.y, this.z);
+      this.setPos(this.position.x, this.position.y, this.position.z);
    }
 
    public void turn(double var1, double var3) {
       double var5 = var3 * 0.15D;
       double var7 = var1 * 0.15D;
@@ -379,12 +385,17 @@
 
       this.walkDistO = this.walkDist;
       this.xRotO = this.xRot;
       this.yRotO = this.yRot;
       this.handleNetherPortal();
-      this.updateSprintingState();
-      this.updateWaterState();
+      if (this.canSpawnSprintParticle()) {
+         this.spawnSprintParticle();
+      }
+
+      this.updateInWaterStateAndDoFluidPushing();
+      this.updateFluidOnEyes();
+      this.updateSwimming();
       if (this.level.isClientSide) {
          this.clearFire();
       } else if (this.remainingFireTicks > 0) {
          if (this.fireImmune()) {
             this.remainingFireTicks -= 4;
@@ -469,10 +480,18 @@
 
    private boolean isFree(AABB var1) {
       return this.level.noCollision(this, var1) && !this.level.containsAnyLiquid(var1);
    }
 
+   public void setOnGround(boolean var1) {
+      this.onGround = var1;
+   }
+
+   public boolean isOnGround() {
+      return this.onGround;
+   }
+
    public void move(MoverType var1, Vec3 var2) {
       if (this.noPhysics) {
          this.setBoundingBox(this.getBoundingBox().move(var2));
          this.setLocationFromBoundingbox();
       } else {
@@ -500,11 +519,10 @@
          this.level.getProfiler().pop();
          this.level.getProfiler().push("rest");
          this.horizontalCollision = !Mth.equal(var2.x, var3.x) || !Mth.equal(var2.z, var3.z);
          this.verticalCollision = var2.y != var3.y;
          this.onGround = this.verticalCollision && var2.y < 0.0D;
-         this.collision = this.horizontalCollision || this.verticalCollision;
          BlockPos var4 = this.getOnPos();
          BlockState var5 = this.level.getBlockState(var4);
          this.checkFallDamage(var3.y, this.onGround, var5, var4);
          Vec3 var6 = this.getDeltaMovement();
          if (var2.x != var3.x) {
@@ -526,11 +544,11 @@
 
          if (this.isMovementNoisy() && !this.isPassenger()) {
             double var8 = var3.x;
             double var10 = var3.y;
             double var12 = var3.z;
-            if (var7 != Blocks.LADDER && var7 != Blocks.SCAFFOLDING) {
+            if (!var7.is((Tag)BlockTags.CLIMBABLE)) {
                var10 = 0.0D;
             }
 
             this.walkDist = (float)((double)this.walkDist + (double)Mth.sqrt(getHorizontalDistanceSqr(var3)) * 0.6D);
             this.moveDist = (float)((double)this.moveDist + (double)Mth.sqrt(var8 * var8 + var10 * var10 + var12 * var12) * 0.6D);
@@ -553,78 +571,71 @@
                this.nextFlap = this.playFlySound(this.moveDist);
             }
          }
 
          try {
-            this.isInLava = false;
+            this.isTouchingLava = false;
             this.checkInsideBlocks();
          } catch (Throwable var18) {
             CrashReport var9 = CrashReport.forThrowable(var18, "Checking entity block collision");
             CrashReportCategory var20 = var9.addCategory("Entity being checked for collision");
             this.fillCrashReportCategory(var20);
             throw new ReportedException(var9);
          }
 
-         this.setDeltaMovement(this.getDeltaMovement().multiply((double)this.getBlockSpeedFactor(), 1.0D, (double)this.getBlockSpeedFactor()));
-         boolean var19 = this.isInWaterRainOrBubble();
-         if (this.level.containsFireBlock(this.getBoundingBox().deflate(0.001D))) {
-            if (!var19) {
-               ++this.remainingFireTicks;
-               if (this.remainingFireTicks == 0) {
-                  this.setSecondsOnFire(8);
-               }
-            }
-
-            this.burn(1);
-         } else if (this.remainingFireTicks <= 0) {
+         float var19 = this.getBlockSpeedFactor();
+         this.setDeltaMovement(this.getDeltaMovement().multiply((double)var19, 1.0D, (double)var19));
+         if (this.level.getBlockStatesIfLoaded(this.getBoundingBox().deflate(0.001D)).noneMatch((var0) -> {
+            return var0.is(BlockTags.FIRE) || var0.is(Blocks.LAVA);
+         }) && this.remainingFireTicks <= 0) {
             this.remainingFireTicks = -this.getFireImmuneTicks();
          }
 
-         if (var19 && this.isOnFire()) {
+         if (this.isInWaterRainOrBubble() && this.isOnFire()) {
             this.playSound(SoundEvents.GENERIC_EXTINGUISH_FIRE, 0.7F, 1.6F + (this.random.nextFloat() - this.random.nextFloat()) * 0.4F);
             this.remainingFireTicks = -this.getFireImmuneTicks();
          }
 
          this.level.getProfiler().pop();
       }
    }
 
    protected BlockPos getOnPos() {
-      int var1 = Mth.floor(this.x);
-      int var2 = Mth.floor(this.y - 0.20000000298023224D);
-      int var3 = Mth.floor(this.z);
+      int var1 = Mth.floor(this.position.x);
+      int var2 = Mth.floor(this.position.y - 0.20000000298023224D);
+      int var3 = Mth.floor(this.position.z);
       BlockPos var4 = new BlockPos(var1, var2, var3);
       if (this.level.getBlockState(var4).isAir()) {
          BlockPos var5 = var4.below();
          BlockState var6 = this.level.getBlockState(var5);
          Block var7 = var6.getBlock();
-         if (var7.is(BlockTags.FENCES) || var7.is(BlockTags.WALLS) || var7 instanceof FenceGateBlock) {
+         if (var7.is((Tag)BlockTags.FENCES) || var7.is((Tag)BlockTags.WALLS) || var7 instanceof FenceGateBlock) {
             return var5;
          }
       }
 
       return var4;
    }
 
    protected float getBlockJumpFactor() {
-      float var1 = this.level.getBlockState(new BlockPos(this)).getBlock().getJumpFactor();
+      float var1 = this.level.getBlockState(this.blockPosition()).getBlock().getJumpFactor();
       float var2 = this.level.getBlockState(this.getBlockPosBelowThatAffectsMyMovement()).getBlock().getJumpFactor();
       return (double)var1 == 1.0D ? var2 : var1;
    }
 
    protected float getBlockSpeedFactor() {
-      Block var1 = this.level.getBlockState(new BlockPos(this)).getBlock();
+      Block var1 = this.level.getBlockState(this.blockPosition()).getBlock();
       float var2 = var1.getSpeedFactor();
       if (var1 != Blocks.WATER && var1 != Blocks.BUBBLE_COLUMN) {
          return (double)var2 == 1.0D ? this.level.getBlockState(this.getBlockPosBelowThatAffectsMyMovement()).getBlock().getSpeedFactor() : var2;
       } else {
          return var2;
       }
    }
 
    protected BlockPos getBlockPosBelowThatAffectsMyMovement() {
-      return new BlockPos(this.x, this.getBoundingBox().minY - 0.5000001D, this.z);
+      return new BlockPos(this.position.x, this.getBoundingBox().minY - 0.5000001D, this.position.z);
    }
 
    protected Vec3 maybeBackOffFromEdge(Vec3 var1, MoverType var2) {
       return var1;
    }
@@ -666,11 +677,13 @@
    private Vec3 collide(Vec3 var1) {
       AABB var2 = this.getBoundingBox();
       CollisionContext var3 = CollisionContext.of(this);
       VoxelShape var4 = this.level.getWorldBorder().getCollisionShape();
       Stream var5 = Shapes.joinIsNotEmpty(var4, Shapes.create(var2.deflate(1.0E-7D)), BooleanOp.AND) ? Stream.empty() : Stream.of(var4);
-      Stream var6 = this.level.getEntityCollisions(this, var2.expandTowards(var1), ImmutableSet.of());
+      Stream var6 = this.level.getEntityCollisions(this, var2.expandTowards(var1), (var0) -> {
+         return true;
+      });
       RewindableStream var7 = new RewindableStream(Stream.concat(var6, var5));
       Vec3 var8 = var1.lengthSqr() == 0.0D ? var1 : collideBoundingBoxHeuristically(this, var1, var2, this.level, var3, var7);
       boolean var9 = var1.x != var8.x;
       boolean var10 = var1.y != var8.y;
       boolean var11 = var1.z != var8.z;
@@ -796,103 +809,43 @@
       return SoundEvents.GENERIC_SPLASH;
    }
 
    protected void checkInsideBlocks() {
       AABB var1 = this.getBoundingBox();
-      BlockPos.PooledMutableBlockPos var2 = BlockPos.PooledMutableBlockPos.acquire(var1.minX + 0.001D, var1.minY + 0.001D, var1.minZ + 0.001D);
-      Throwable var3 = null;
+      BlockPos var2 = new BlockPos(var1.minX + 0.001D, var1.minY + 0.001D, var1.minZ + 0.001D);
+      BlockPos var3 = new BlockPos(var1.maxX - 0.001D, var1.maxY - 0.001D, var1.maxZ - 0.001D);
+      BlockPos.MutableBlockPos var4 = new BlockPos.MutableBlockPos();
+      if (this.level.hasChunksAt(var2, var3)) {
+         for(int var5 = var2.getX(); var5 <= var3.getX(); ++var5) {
+            for(int var6 = var2.getY(); var6 <= var3.getY(); ++var6) {
+               for(int var7 = var2.getZ(); var7 <= var3.getZ(); ++var7) {
+                  var4.set(var5, var6, var7);
+                  BlockState var8 = this.level.getBlockState(var4);
 
-      try {
-         BlockPos.PooledMutableBlockPos var4 = BlockPos.PooledMutableBlockPos.acquire(var1.maxX - 0.001D, var1.maxY - 0.001D, var1.maxZ - 0.001D);
-         Throwable var5 = null;
-
-         try {
-            BlockPos.PooledMutableBlockPos var6 = BlockPos.PooledMutableBlockPos.acquire();
-            Throwable var7 = null;
-
-            try {
-               if (this.level.hasChunksAt(var2, var4)) {
-                  for(int var8 = var2.getX(); var8 <= var4.getX(); ++var8) {
-                     for(int var9 = var2.getY(); var9 <= var4.getY(); ++var9) {
-                        for(int var10 = var2.getZ(); var10 <= var4.getZ(); ++var10) {
-                           var6.set(var8, var9, var10);
-                           BlockState var11 = this.level.getBlockState(var6);
-
-                           try {
-                              var11.entityInside(this.level, var6, this);
-                              this.onInsideBlock(var11);
-                           } catch (Throwable var60) {
-                              CrashReport var13 = CrashReport.forThrowable(var60, "Colliding entity with block");
-                              CrashReportCategory var14 = var13.addCategory("Block being collided with");
-                              CrashReportCategory.populateBlockDetails(var14, var6, var11);
-                              throw new ReportedException(var13);
-                           }
-                        }
-                     }
-                  }
-               }
-            } catch (Throwable var61) {
-               var7 = var61;
-               throw var61;
-            } finally {
-               if (var6 != null) {
-                  if (var7 != null) {
-                     try {
-                        var6.close();
-                     } catch (Throwable var59) {
-                        var7.addSuppressed(var59);
-                     }
-                  } else {
-                     var6.close();
-                  }
-               }
-
-            }
-         } catch (Throwable var63) {
-            var5 = var63;
-            throw var63;
-         } finally {
-            if (var4 != null) {
-               if (var5 != null) {
                   try {
-                     var4.close();
-                  } catch (Throwable var58) {
-                     var5.addSuppressed(var58);
+                     var8.entityInside(this.level, var4, this);
+                     this.onInsideBlock(var8);
+                  } catch (Throwable var12) {
+                     CrashReport var10 = CrashReport.forThrowable(var12, "Colliding entity with block");
+                     CrashReportCategory var11 = var10.addCategory("Block being collided with");
+                     CrashReportCategory.populateBlockDetails(var11, var4, var8);
+                     throw new ReportedException(var10);
                   }
-               } else {
-                  var4.close();
                }
             }
-
          }
-      } catch (Throwable var65) {
-         var3 = var65;
-         throw var65;
-      } finally {
-         if (var2 != null) {
-            if (var3 != null) {
-               try {
-                  var2.close();
-               } catch (Throwable var57) {
-                  var3.addSuppressed(var57);
-               }
-            } else {
-               var2.close();
-            }
-         }
-
       }
 
    }
 
    protected void onInsideBlock(BlockState var1) {
    }
 
    protected void playStepSound(BlockPos var1, BlockState var2) {
       if (!var2.getMaterial().isLiquid()) {
          BlockState var3 = this.level.getBlockState(var1.above());
-         SoundType var4 = var3.getBlock() == Blocks.SNOW ? var3.getSoundType() : var2.getSoundType();
+         SoundType var4 = var3.is(Blocks.SNOW) ? var3.getSoundType() : var2.getSoundType();
          this.playSound(var4.getStepSound(), var4.getVolume() * 0.15F, var4.getPitch());
       }
    }
 
    protected void playSwimSound(float var1) {
@@ -950,18 +903,11 @@
    @Nullable
    public AABB getCollideBox() {
       return null;
    }
 
-   protected void burn(int var1) {
-      if (!this.fireImmune()) {
-         this.hurt(DamageSource.IN_FIRE, (float)var1);
-      }
-
-   }
-
-   public final boolean fireImmune() {
+   public boolean fireImmune() {
       return this.getType().fireImmune();
    }
 
    public boolean causeFallDamage(float var1, float var2) {
       if (this.isVehicle()) {
@@ -975,43 +921,20 @@
 
       return false;
    }
 
    public boolean isInWater() {
-      return this.wasInWater;
+      return this.wasTouchingWater;
    }
 
    private boolean isInRain() {
-      BlockPos.PooledMutableBlockPos var1 = BlockPos.PooledMutableBlockPos.acquire(this);
-      Throwable var2 = null;
-
-      boolean var3;
-      try {
-         var3 = this.level.isRainingAt(var1) || this.level.isRainingAt(var1.set(this.getX(), this.getY() + (double)this.dimensions.height, this.getZ()));
-      } catch (Throwable var12) {
-         var2 = var12;
-         throw var12;
-      } finally {
-         if (var1 != null) {
-            if (var2 != null) {
-               try {
-                  var1.close();
-               } catch (Throwable var11) {
-                  var2.addSuppressed(var11);
-               }
-            } else {
-               var1.close();
-            }
-         }
-
-      }
-
-      return var3;
+      BlockPos var1 = this.blockPosition();
+      return this.level.isRainingAt(var1) || this.level.isRainingAt(var1.offset(0.0D, (double)this.dimensions.height, 0.0D));
    }
 
    private boolean isInBubbleColumn() {
-      return this.level.getBlockState(new BlockPos(this)).getBlock() == Blocks.BUBBLE_COLUMN;
+      return this.level.getBlockState(this.blockPosition()).is(Blocks.BUBBLE_COLUMN);
    }
 
    public boolean isInWaterOrRain() {
       return this.isInWater() || this.isInRain();
    }
@@ -1023,48 +946,81 @@
    public boolean isInWaterOrBubble() {
       return this.isInWater() || this.isInBubbleColumn();
    }
 
    public boolean isUnderWater() {
-      return this.wasUnderWater && this.isInWater();
+      return this.wasEyeInWater && this.isInWater();
    }
 
-   private void updateWaterState() {
-      this.updateInWaterState();
-      this.updateUnderWaterState();
-      this.updateSwimming();
-   }
-
    public void updateSwimming() {
       if (this.isSwimming()) {
          this.setSwimming(this.isSprinting() && this.isInWater() && !this.isPassenger());
       } else {
          this.setSwimming(this.isSprinting() && this.isUnderWater() && !this.isPassenger());
       }
 
    }
 
-   public boolean updateInWaterState() {
+   protected boolean updateInWaterStateAndDoFluidPushing() {
+      this.fluidHeight.clear();
+      this.updateInWaterStateAndDoWaterCurrentPushing();
+      if (this.isInWater()) {
+         return true;
+      } else {
+         double var1 = this.level.dimensionType().ultraWarm() ? 0.007D : 0.0023333333333333335D;
+         return this.updateFluidHeightAndDoFluidPushing(FluidTags.LAVA, var1);
+      }
+   }
+
+   void updateInWaterStateAndDoWaterCurrentPushing() {
       if (this.getVehicle() instanceof Boat) {
-         this.wasInWater = false;
-      } else if (this.checkAndHandleWater(FluidTags.WATER)) {
-         if (!this.wasInWater && !this.firstTick) {
+         this.wasTouchingWater = false;
+      } else if (this.updateFluidHeightAndDoFluidPushing(FluidTags.WATER, 0.014D)) {
+         if (!this.wasTouchingWater && !this.firstTick) {
             this.doWaterSplashEffect();
          }
 
          this.fallDistance = 0.0F;
-         this.wasInWater = true;
+         this.wasTouchingWater = true;
          this.clearFire();
       } else {
-         this.wasInWater = false;
+         this.wasTouchingWater = false;
       }
 
-      return this.wasInWater;
    }
 
-   private void updateUnderWaterState() {
-      this.wasUnderWater = this.isUnderLiquid(FluidTags.WATER, true);
+   private void updateFluidOnEyes() {
+      this.wasEyeInWater = this.isEyeInFluid(FluidTags.WATER);
+      this.fluidOnEyes = null;
+      double var1 = this.getEyeY() - 0.1111111119389534D;
+      Vec3 var3 = new Vec3(this.getX(), var1, this.getZ());
+      Entity var4 = this.getVehicle();
+      if (var4 instanceof Boat) {
+         Boat var5 = (Boat)var4;
+         if (!var5.isUnderWater() && var5.getBoundingBox().contains(var3)) {
+            return;
+         }
+      }
+
+      BlockPos var11 = new BlockPos(var3);
+      FluidState var6 = this.level.getFluidState(var11);
+      Iterator var7 = FluidTags.getWrappers().iterator();
+
+      Tag var8;
+      do {
+         if (!var7.hasNext()) {
+            return;
+         }
+
+         var8 = (Tag)var7.next();
+      } while(!var6.is(var8));
+
+      double var9 = (double)((float)var11.getY() + var6.getHeight(this.level, var11));
+      if (var9 > var1) {
+         this.fluidOnEyes = var8;
+      }
+
    }
 
    protected void doWaterSplashEffect() {
       Entity var1 = this.isVehicle() && this.getControllingPassenger() != null ? this.getControllingPassenger() : this;
       float var2 = var1 == this ? 0.2F : 0.9F;
@@ -1081,71 +1037,57 @@
       }
 
       float var5 = (float)Mth.floor(this.getY());
 
       int var6;
-      float var7;
-      float var8;
+      double var7;
+      double var9;
       for(var6 = 0; (float)var6 < 1.0F + this.dimensions.width * 20.0F; ++var6) {
-         var7 = (this.random.nextFloat() * 2.0F - 1.0F) * this.dimensions.width;
-         var8 = (this.random.nextFloat() * 2.0F - 1.0F) * this.dimensions.width;
-         this.level.addParticle(ParticleTypes.BUBBLE, this.getX() + (double)var7, (double)(var5 + 1.0F), this.getZ() + (double)var8, var3.x, var3.y - (double)(this.random.nextFloat() * 0.2F), var3.z);
+         var7 = (this.random.nextDouble() * 2.0D - 1.0D) * (double)this.dimensions.width;
+         var9 = (this.random.nextDouble() * 2.0D - 1.0D) * (double)this.dimensions.width;
+         this.level.addParticle(ParticleTypes.BUBBLE, this.getX() + var7, (double)(var5 + 1.0F), this.getZ() + var9, var3.x, var3.y - this.random.nextDouble() * 0.20000000298023224D, var3.z);
       }
 
       for(var6 = 0; (float)var6 < 1.0F + this.dimensions.width * 20.0F; ++var6) {
-         var7 = (this.random.nextFloat() * 2.0F - 1.0F) * this.dimensions.width;
-         var8 = (this.random.nextFloat() * 2.0F - 1.0F) * this.dimensions.width;
-         this.level.addParticle(ParticleTypes.SPLASH, this.getX() + (double)var7, (double)(var5 + 1.0F), this.getZ() + (double)var8, var3.x, var3.y, var3.z);
+         var7 = (this.random.nextDouble() * 2.0D - 1.0D) * (double)this.dimensions.width;
+         var9 = (this.random.nextDouble() * 2.0D - 1.0D) * (double)this.dimensions.width;
+         this.level.addParticle(ParticleTypes.SPLASH, this.getX() + var7, (double)(var5 + 1.0F), this.getZ() + var9, var3.x, var3.y, var3.z);
       }
 
    }
 
-   public void updateSprintingState() {
-      if (this.isSprinting() && !this.isInWater()) {
-         this.doSprintParticleEffect();
-      }
+   protected BlockState getBlockStateOn() {
+      return this.level.getBlockState(this.getOnPos());
+   }
 
+   public boolean canSpawnSprintParticle() {
+      return this.isSprinting() && !this.isInWater() && !this.isSpectator() && !this.isCrouching() && !this.isInLava() && this.isAlive();
    }
 
-   protected void doSprintParticleEffect() {
+   protected void spawnSprintParticle() {
       int var1 = Mth.floor(this.getX());
       int var2 = Mth.floor(this.getY() - 0.20000000298023224D);
       int var3 = Mth.floor(this.getZ());
       BlockPos var4 = new BlockPos(var1, var2, var3);
       BlockState var5 = this.level.getBlockState(var4);
       if (var5.getRenderShape() != RenderShape.INVISIBLE) {
          Vec3 var6 = this.getDeltaMovement();
-         this.level.addParticle(new BlockParticleOption(ParticleTypes.BLOCK, var5), this.getX() + ((double)this.random.nextFloat() - 0.5D) * (double)this.dimensions.width, this.getY() + 0.1D, this.getZ() + ((double)this.random.nextFloat() - 0.5D) * (double)this.dimensions.width, var6.x * -4.0D, 1.5D, var6.z * -4.0D);
+         this.level.addParticle(new BlockParticleOption(ParticleTypes.BLOCK, var5), this.getX() + (this.random.nextDouble() - 0.5D) * (double)this.dimensions.width, this.getY() + 0.1D, this.getZ() + (this.random.nextDouble() - 0.5D) * (double)this.dimensions.width, var6.x * -4.0D, 1.5D, var6.z * -4.0D);
       }
 
    }
 
-   public boolean isUnderLiquid(Tag<Fluid> var1) {
-      return this.isUnderLiquid(var1, false);
+   public boolean isEyeInFluid(Tag<Fluid> var1) {
+      return this.fluidOnEyes == var1;
    }
 
-   public boolean isUnderLiquid(Tag<Fluid> var1, boolean var2) {
-      if (this.getVehicle() instanceof Boat) {
-         return false;
-      } else {
-         double var3 = this.getEyeY();
-         BlockPos var5 = new BlockPos(this.getX(), var3, this.getZ());
-         if (var2 && !this.level.hasChunk(var5.getX() >> 4, var5.getZ() >> 4)) {
-            return false;
-         } else {
-            FluidState var6 = this.level.getFluidState(var5);
-            return var6.is(var1) && var3 < (double)((float)var5.getY() + var6.getHeight(this.level, var5) + 0.11111111F);
-         }
-      }
-   }
-
    public void setInLava() {
-      this.isInLava = true;
+      this.isTouchingLava = true;
    }
 
    public boolean isInLava() {
-      return this.isInLava;
+      return this.isTouchingLava;
    }
 
    public void moveRelative(float var1, Vec3 var2) {
       Vec3 var3 = getInputVector(var2, var1, this.yRot);
       this.setDeltaMovement(this.getDeltaMovement().add(var3));
@@ -1188,10 +1130,18 @@
       this.xRot = Mth.clamp(var8, -90.0F, 90.0F) % 360.0F;
       this.yRotO = this.yRot;
       this.xRotO = this.xRot;
    }
 
+   public void moveTo(Vec3 var1) {
+      this.moveTo(var1.x, var1.y, var1.z);
+   }
+
+   public void moveTo(double var1, double var3, double var5) {
+      this.moveTo(var1, var3, var5, this.yRot, this.xRot);
+   }
+
    public void moveTo(BlockPos var1, float var2, float var3) {
       this.moveTo((double)var1.getX() + 0.5D, (double)var1.getY(), (double)var1.getZ() + 0.5D, var2, var3);
    }
 
    public void moveTo(double var1, double var3, double var5, float var7, float var8) {
@@ -1387,19 +1337,23 @@
       return this.isPassenger() ? false : this.saveAsPassenger(var1);
    }
 
    public CompoundTag saveWithoutId(CompoundTag var1) {
       try {
-         var1.put("Pos", this.newDoubleList(this.getX(), this.getY(), this.getZ()));
+         if (this.vehicle != null) {
+            var1.put("Pos", this.newDoubleList(this.vehicle.getX(), this.vehicle.getY(), this.vehicle.getZ()));
+         } else {
+            var1.put("Pos", this.newDoubleList(this.getX(), this.getY(), this.getZ()));
+         }
+
          Vec3 var2 = this.getDeltaMovement();
          var1.put("Motion", this.newDoubleList(var2.x, var2.y, var2.z));
          var1.put("Rotation", this.newFloatList(this.yRot, this.xRot));
          var1.putFloat("FallDistance", this.fallDistance);
          var1.putShort("Fire", (short)this.remainingFireTicks);
          var1.putShort("Air", (short)this.getAirSupply());
          var1.putBoolean("OnGround", this.onGround);
-         var1.putInt("Dimension", this.dimension.getId());
          var1.putBoolean("Invulnerable", this.invulnerable);
          var1.putInt("PortalCooldown", this.changingDimensionDelay);
          var1.putUUID("UUID", this.getUUID());
          Component var9 = this.getCustomName();
          if (var9 != null) {
@@ -1464,31 +1418,27 @@
    }
 
    public void load(CompoundTag var1) {
       try {
          ListTag var2 = var1.getList("Pos", 6);
-         ListTag var15 = var1.getList("Motion", 6);
-         ListTag var16 = var1.getList("Rotation", 5);
-         double var5 = var15.getDouble(0);
-         double var7 = var15.getDouble(1);
-         double var9 = var15.getDouble(2);
+         ListTag var16 = var1.getList("Motion", 6);
+         ListTag var17 = var1.getList("Rotation", 5);
+         double var5 = var16.getDouble(0);
+         double var7 = var16.getDouble(1);
+         double var9 = var16.getDouble(2);
          this.setDeltaMovement(Math.abs(var5) > 10.0D ? 0.0D : var5, Math.abs(var7) > 10.0D ? 0.0D : var7, Math.abs(var9) > 10.0D ? 0.0D : var9);
          this.setPosAndOldPos(var2.getDouble(0), var2.getDouble(1), var2.getDouble(2));
-         this.yRot = var16.getFloat(0);
-         this.xRot = var16.getFloat(1);
+         this.yRot = var17.getFloat(0);
+         this.xRot = var17.getFloat(1);
          this.yRotO = this.yRot;
          this.xRotO = this.xRot;
          this.setYHeadRot(this.yRot);
          this.setYBodyRot(this.yRot);
          this.fallDistance = var1.getFloat("FallDistance");
          this.remainingFireTicks = var1.getShort("Fire");
          this.setAirSupply(var1.getShort("Air"));
          this.onGround = var1.getBoolean("OnGround");
-         if (var1.contains("Dimension")) {
-            this.dimension = DimensionType.getById(var1.getInt("Dimension"));
-         }
-
          this.invulnerable = var1.getBoolean("Invulnerable");
          this.changingDimensionDelay = var1.getInt("PortalCooldown");
          if (var1.hasUUID("UUID")) {
             this.uuid = var1.getUUID("UUID");
             this.stringUUID = this.uuid.toString();
@@ -1497,24 +1447,30 @@
          if (Double.isFinite(this.getX()) && Double.isFinite(this.getY()) && Double.isFinite(this.getZ())) {
             if (Double.isFinite((double)this.yRot) && Double.isFinite((double)this.xRot)) {
                this.reapplyPosition();
                this.setRot(this.yRot, this.xRot);
                if (var1.contains("CustomName", 8)) {
-                  this.setCustomName(Component.Serializer.fromJson(var1.getString("CustomName")));
+                  String var11 = var1.getString("CustomName");
+
+                  try {
+                     this.setCustomName(Component.Serializer.fromJson(var11));
+                  } catch (Exception var14) {
+                     LOGGER.warn("Failed to parse entity custom name {}", var11, var14);
+                  }
                }
 
                this.setCustomNameVisible(var1.getBoolean("CustomNameVisible"));
                this.setSilent(var1.getBoolean("Silent"));
                this.setNoGravity(var1.getBoolean("NoGravity"));
                this.setGlowing(var1.getBoolean("Glowing"));
                if (var1.contains("Tags", 9)) {
                   this.tags.clear();
-                  ListTag var11 = var1.getList("Tags", 8);
-                  int var12 = Math.min(var11.size(), 1024);
+                  ListTag var18 = var1.getList("Tags", 8);
+                  int var12 = Math.min(var18.size(), 1024);
 
                   for(int var13 = 0; var13 < var12; ++var13) {
-                     this.tags.add(var11.getString(var13));
+                     this.tags.add(var18.getString(var13));
                   }
                }
 
                this.readAdditionalSaveData(var1);
                if (this.repositionEntityAfterLoad()) {
@@ -1525,12 +1481,12 @@
                throw new IllegalStateException("Entity has invalid rotation");
             }
          } else {
             throw new IllegalStateException("Entity has invalid position");
          }
-      } catch (Throwable var14) {
-         CrashReport var3 = CrashReport.forThrowable(var14, "Loading entity NBT");
+      } catch (Throwable var15) {
+         CrashReport var3 = CrashReport.forThrowable(var15, "Loading entity NBT");
          CrashReportCategory var4 = var3.addCategory("Entity being loaded");
          this.fillCrashReportCategory(var4);
          throw new ReportedException(var3);
       }
    }
@@ -1611,50 +1567,21 @@
 
    public boolean isInWall() {
       if (this.noPhysics) {
          return false;
       } else {
-         BlockPos.PooledMutableBlockPos var1 = BlockPos.PooledMutableBlockPos.acquire();
-         Throwable var2 = null;
-
-         try {
-            for(int var3 = 0; var3 < 8; ++var3) {
-               int var4 = Mth.floor(this.getY() + (double)(((float)((var3 >> 0) % 2) - 0.5F) * 0.1F) + (double)this.eyeHeight);
-               int var5 = Mth.floor(this.getX() + (double)(((float)((var3 >> 1) % 2) - 0.5F) * this.dimensions.width * 0.8F));
-               int var6 = Mth.floor(this.getZ() + (double)(((float)((var3 >> 2) % 2) - 0.5F) * this.dimensions.width * 0.8F));
-               if (var1.getX() != var5 || var1.getY() != var4 || var1.getZ() != var6) {
-                  var1.set(var5, var4, var6);
-                  if (this.level.getBlockState(var1).isSuffocating(this.level, var1)) {
-                     boolean var7 = true;
-                     return var7;
-                  }
-               }
-            }
-         } catch (Throwable var17) {
-            var2 = var17;
-            throw var17;
-         } finally {
-            if (var1 != null) {
-               if (var2 != null) {
-                  try {
-                     var1.close();
-                  } catch (Throwable var16) {
-                     var2.addSuppressed(var16);
-                  }
-               } else {
-                  var1.close();
-               }
-            }
-
-         }
-
-         return false;
+         float var1 = 0.1F;
+         float var2 = this.dimensions.width * 0.8F;
+         AABB var3 = AABB.ofSize((double)var2, 0.10000000149011612D, (double)var2).move(this.getX(), this.getEyeY(), this.getZ());
+         return this.level.getBlockCollisions(this, var3, (var1x, var2x) -> {
+            return var1x.isSuffocating(this.level, var2x);
+         }).findAny().isPresent();
       }
    }
 
-   public boolean interact(Player var1, InteractionHand var2) {
-      return false;
+   public InteractionResult interact(Player var1, InteractionHand var2) {
+      return InteractionResult.PASS;
    }
 
    @Nullable
    public AABB getCollideAgainstBox(Entity var1) {
       return null;
@@ -1670,24 +1597,25 @@
 
    public void positionRider(Entity var1) {
       this.positionRider(var1, Entity::setPos);
    }
 
-   public void positionRider(Entity var1, Entity.MoveCallback var2) {
+   private void positionRider(Entity var1, Entity.MoveFunction var2) {
       if (this.hasPassenger(var1)) {
-         var2.accept(var1, this.getX(), this.getY() + this.getRideHeight() + var1.getRidingHeight(), this.getZ());
+         double var3 = this.getY() + this.getPassengersRidingOffset() + var1.getMyRidingOffset();
+         var2.accept(var1, this.getX(), var3, this.getZ());
       }
    }
 
    public void onPassengerTurned(Entity var1) {
    }
 
-   public double getRidingHeight() {
+   public double getMyRidingOffset() {
       return 0.0D;
    }
 
-   public double getRideHeight() {
+   public double getPassengersRidingOffset() {
       return (double)this.dimensions.height * 0.75D;
    }
 
    public boolean startRiding(Entity var1) {
       return this.startRiding(var1, false);
@@ -1709,40 +1637,45 @@
       } else {
          if (this.isPassenger()) {
             this.stopRiding();
          }
 
+         this.setPose(Pose.STANDING);
          this.vehicle = var1;
          this.vehicle.addPassenger(this);
          return true;
       }
    }
 
    protected boolean canRide(Entity var1) {
-      return this.boardingCooldown <= 0;
+      return !this.isShiftKeyDown() && this.boardingCooldown <= 0;
    }
 
    protected boolean canEnterPose(Pose var1) {
-      return this.level.noCollision(this, this.getBoundingBoxForPose(var1));
+      return this.level.noCollision(this, this.getBoundingBoxForPose(var1).deflate(1.0E-7D));
    }
 
    public void ejectPassengers() {
       for(int var1 = this.passengers.size() - 1; var1 >= 0; --var1) {
          ((Entity)this.passengers.get(var1)).stopRiding();
       }
 
    }
 
-   public void stopRiding() {
+   public void removeVehicle() {
       if (this.vehicle != null) {
          Entity var1 = this.vehicle;
          this.vehicle = null;
          var1.removePassenger(this);
       }
 
    }
 
+   public void stopRiding() {
+      this.removeVehicle();
+   }
+
    protected void addPassenger(Entity var1) {
       if (var1.getVehicle() != this) {
          throw new IllegalStateException("Use x.startRiding(y), not y.addPassenger(x)");
       } else {
          if (!this.level.isClientSide && var1 instanceof Player && !(this.getControllingPassenger() instanceof Player)) {
@@ -1799,12 +1732,12 @@
          if (!this.level.isClientSide && !var1.equals(this.portalEntranceBlock)) {
             this.portalEntranceBlock = new BlockPos(var1);
             NetherPortalBlock var10000 = (NetherPortalBlock)Blocks.NETHER_PORTAL;
             BlockPattern.BlockPatternMatch var2 = NetherPortalBlock.getPortalShape(this.level, this.portalEntranceBlock);
             double var3 = var2.getForwards().getAxis() == Direction.Axis.X ? (double)var2.getFrontTopLeft().getZ() : (double)var2.getFrontTopLeft().getX();
-            double var5 = Math.abs(Mth.pct((var2.getForwards().getAxis() == Direction.Axis.X ? this.getZ() : this.getX()) - (double)(var2.getForwards().getClockWise().getAxisDirection() == Direction.AxisDirection.NEGATIVE ? 1 : 0), var3, var3 - (double)var2.getWidth()));
-            double var7 = Mth.pct(this.getY() - 1.0D, (double)var2.getFrontTopLeft().getY(), (double)(var2.getFrontTopLeft().getY() - var2.getHeight()));
+            double var5 = Mth.clamp(Math.abs(Mth.inverseLerp((var2.getForwards().getAxis() == Direction.Axis.X ? this.getZ() : this.getX()) - (double)(var2.getForwards().getClockWise().getAxisDirection() == Direction.AxisDirection.NEGATIVE ? 1 : 0), var3, var3 - (double)var2.getWidth())), 0.0D, 1.0D);
+            double var7 = Mth.clamp(Mth.inverseLerp(this.getY() - 1.0D, (double)var2.getFrontTopLeft().getY(), (double)(var2.getFrontTopLeft().getY() - var2.getHeight())), 0.0D, 1.0D);
             this.portalEntranceOffset = new Vec3(var5, var7, 0.0D);
             this.portalEntranceForwards = var2.getForwards();
          }
 
          this.isInsidePortal = true;
@@ -1812,16 +1745,20 @@
    }
 
    protected void handleNetherPortal() {
       if (this.level instanceof ServerLevel) {
          int var1 = this.getPortalWaitTime();
+         ServerLevel var2 = (ServerLevel)this.level;
          if (this.isInsidePortal) {
-            if (this.level.getServer().isNetherEnabled() && !this.isPassenger() && this.portalTime++ >= var1) {
+            MinecraftServer var3 = var2.getServer();
+            ResourceKey var4 = this.level.dimension() == Level.NETHER ? Level.OVERWORLD : Level.NETHER;
+            ServerLevel var5 = var3.getLevel(var4);
+            if (var5 != null && var3.isNetherEnabled() && !this.isPassenger() && this.portalTime++ >= var1) {
                this.level.getProfiler().push("portal");
                this.portalTime = var1;
                this.changingDimensionDelay = this.getDimensionChangingDelay();
-               this.changeDimension(this.level.dimension.getType() == DimensionType.NETHER ? DimensionType.OVERWORLD : DimensionType.NETHER);
+               this.changeDimension(var5);
                this.level.getProfiler().pop();
             }
 
             this.isInsidePortal = false;
          } else {
@@ -2055,11 +1992,11 @@
       Direction[] var13 = new Direction[]{Direction.NORTH, Direction.SOUTH, Direction.WEST, Direction.EAST, Direction.UP};
       int var14 = var13.length;
 
       for(int var15 = 0; var15 < var14; ++var15) {
          Direction var16 = var13[var15];
-         var9.set((Vec3i)var7).move(var16);
+         var9.setWithOffset(var7, var16);
          if (!this.level.getBlockState(var9).isCollisionShapeFullBlock(this.level, var9)) {
             double var17 = var8.get(var16.getAxis());
             double var19 = var16.getAxisDirection() == Direction.AxisDirection.POSITIVE ? 1.0D - var17 : var17;
             if (var19 < var11) {
                var11 = var19;
@@ -2084,25 +2021,25 @@
    public void makeStuckInBlock(BlockState var1, Vec3 var2) {
       this.fallDistance = 0.0F;
       this.stuckSpeedMultiplier = var2;
    }
 
-   private static void removeAction(Component var0) {
-      var0.withStyle((var0x) -> {
-         var0x.setClickEvent((ClickEvent)null);
-      }).getSiblings().forEach(Entity::removeAction);
+   private static Component removeAction(Component var0) {
+      MutableComponent var1 = var0.plainCopy().setStyle(var0.getStyle().withClickEvent((ClickEvent)null));
+      Iterator var2 = var0.getSiblings().iterator();
+
+      while(var2.hasNext()) {
+         Component var3 = (Component)var2.next();
+         var1.append(removeAction(var3));
+      }
+
+      return var1;
    }
 
    public Component getName() {
       Component var1 = this.getCustomName();
-      if (var1 != null) {
-         Component var2 = var1.deepCopy();
-         removeAction(var2);
-         return var2;
-      } else {
-         return this.getTypeName();
-      }
+      return var1 != null ? removeAction(var1) : this.getTypeName();
    }
 
    protected Component getTypeName() {
       return this.type.getDescription();
    }
@@ -2128,11 +2065,11 @@
    public boolean skipAttackInteraction(Entity var1) {
       return false;
    }
 
    public String toString() {
-      return String.format(Locale.ROOT, "%s['%s'/%d, l='%s', x=%.2f, y=%.2f, z=%.2f]", this.getClass().getSimpleName(), this.getName().getContents(), this.id, this.level == null ? "~NULL~" : this.level.getLevelData().getLevelName(), this.getX(), this.getY(), this.getZ());
+      return String.format(Locale.ROOT, "%s['%s'/%d, l='%s', x=%.2f, y=%.2f, z=%.2f]", this.getClass().getSimpleName(), this.getName().getString(), this.id, this.level == null ? "~NULL~" : this.level.toString(), this.getX(), this.getY(), this.getZ());
    }
 
    public boolean isInvulnerableTo(DamageSource var1) {
       return this.invulnerable && var1 != DamageSource.OUT_OF_WORLD && !var1.isCreativePlayer();
    }
@@ -2158,72 +2095,72 @@
       this.portalEntranceOffset = var1.portalEntranceOffset;
       this.portalEntranceForwards = var1.portalEntranceForwards;
    }
 
    @Nullable
-   public Entity changeDimension(DimensionType var1) {
-      if (!this.level.isClientSide && !this.removed) {
+   public Entity changeDimension(ServerLevel var1) {
+      if (this.level instanceof ServerLevel && !this.removed) {
          this.level.getProfiler().push("changeDimension");
-         MinecraftServer var2 = this.getServer();
-         DimensionType var3 = this.dimension;
-         ServerLevel var4 = var2.getLevel(var3);
-         ServerLevel var5 = var2.getLevel(var1);
-         this.dimension = var1;
          this.unRide();
          this.level.getProfiler().push("reposition");
-         Vec3 var7 = this.getDeltaMovement();
-         float var8 = 0.0F;
-         BlockPos var6;
-         if (var3 == DimensionType.THE_END && var1 == DimensionType.OVERWORLD) {
-            var6 = var5.getHeightmapPos(Heightmap.Types.MOTION_BLOCKING_NO_LEAVES, var5.getSharedSpawnPos());
-         } else if (var1 == DimensionType.THE_END) {
-            var6 = var5.getDimensionSpecificSpawn();
+         Vec3 var3 = this.getDeltaMovement();
+         float var4 = 0.0F;
+         BlockPos var2;
+         if (this.level.dimension() == Level.END && var1.dimension() == Level.OVERWORLD) {
+            var2 = var1.getHeightmapPos(Heightmap.Types.MOTION_BLOCKING_NO_LEAVES, var1.getSharedSpawnPos());
+         } else if (var1.dimension() == Level.END) {
+            var2 = ServerLevel.END_SPAWN_POINT;
          } else {
-            double var9 = this.getX();
-            double var11 = this.getZ();
-            double var13 = 8.0D;
-            if (var3 == DimensionType.OVERWORLD && var1 == DimensionType.NETHER) {
-               var9 /= 8.0D;
-               var11 /= 8.0D;
-            } else if (var3 == DimensionType.NETHER && var1 == DimensionType.OVERWORLD) {
-               var9 *= 8.0D;
-               var11 *= 8.0D;
+            double var5 = this.getX();
+            double var7 = this.getZ();
+            DimensionType var9 = this.level.dimensionType();
+            DimensionType var10 = var1.dimensionType();
+            double var11 = 8.0D;
+            if (!var9.shrunk() && var10.shrunk()) {
+               var5 /= 8.0D;
+               var7 /= 8.0D;
+            } else if (var9.shrunk() && !var10.shrunk()) {
+               var5 *= 8.0D;
+               var7 *= 8.0D;
             }
 
-            double var15 = Math.min(-2.9999872E7D, var5.getWorldBorder().getMinX() + 16.0D);
-            double var17 = Math.min(-2.9999872E7D, var5.getWorldBorder().getMinZ() + 16.0D);
-            double var19 = Math.min(2.9999872E7D, var5.getWorldBorder().getMaxX() - 16.0D);
-            double var21 = Math.min(2.9999872E7D, var5.getWorldBorder().getMaxZ() - 16.0D);
-            var9 = Mth.clamp(var9, var15, var19);
-            var11 = Mth.clamp(var11, var17, var21);
-            Vec3 var23 = this.getPortalEntranceOffset();
-            var6 = new BlockPos(var9, this.getY(), var11);
-            BlockPattern.PortalInfo var24 = var5.getPortalForcer().findPortal(var6, var7, this.getPortalEntranceForwards(), var23.x, var23.y, this instanceof Player);
-            if (var24 == null) {
+            double var13 = Math.min(-2.9999872E7D, var1.getWorldBorder().getMinX() + 16.0D);
+            double var15 = Math.min(-2.9999872E7D, var1.getWorldBorder().getMinZ() + 16.0D);
+            double var17 = Math.min(2.9999872E7D, var1.getWorldBorder().getMaxX() - 16.0D);
+            double var19 = Math.min(2.9999872E7D, var1.getWorldBorder().getMaxZ() - 16.0D);
+            var5 = Mth.clamp(var5, var13, var17);
+            var7 = Mth.clamp(var7, var15, var19);
+            Vec3 var21 = this.getPortalEntranceOffset();
+            var2 = new BlockPos(var5, this.getY(), var7);
+            BlockPattern.PortalInfo var22 = var1.getPortalForcer().findPortal(var2, var3, this.getPortalEntranceForwards(), var21.x, var21.y, this instanceof Player);
+            if (var22 == null) {
                return null;
             }
 
-            var6 = new BlockPos(var24.pos);
-            var7 = var24.speed;
-            var8 = (float)var24.angle;
+            var2 = new BlockPos(var22.pos);
+            var3 = var22.speed;
+            var4 = (float)var22.angle;
          }
 
          this.level.getProfiler().popPush("reloading");
-         Entity var25 = this.getType().create(var5);
-         if (var25 != null) {
-            var25.restoreFrom(this);
-            var25.moveTo(var6, var25.yRot + var8, var25.xRot);
-            var25.setDeltaMovement(var7);
-            var5.addFromAnotherDimension(var25);
+         Entity var23 = this.getType().create(var1);
+         if (var23 != null) {
+            var23.restoreFrom(this);
+            var23.moveTo(var2, var23.yRot + var4, var23.xRot);
+            var23.setDeltaMovement(var3);
+            var1.addFromAnotherDimension(var23);
+            if (var1.dimension() == Level.END) {
+               ServerLevel.makeObsidianPlatform(var1);
+            }
          }
 
          this.removed = true;
          this.level.getProfiler().pop();
-         var4.resetEmptyTime();
-         var5.resetEmptyTime();
+         ((ServerLevel)this.level).resetEmptyTime();
+         var1.resetEmptyTime();
          this.level.getProfiler().pop();
-         return var25;
+         return var23;
       } else {
          return null;
       }
    }
 
@@ -2294,11 +2231,11 @@
 
    public String getScoreboardName() {
       return this.stringUUID;
    }
 
-   public boolean isPushedByWater() {
+   public boolean isPushedByFluid() {
       return true;
    }
 
    public static double getViewScale() {
       return viewScale;
@@ -2308,11 +2245,11 @@
       viewScale = var0;
    }
 
    public Component getDisplayName() {
       return PlayerTeam.formatNameForTeam(this.getTeam(), this.getName()).withStyle((var1) -> {
-         var1.setHoverEvent(this.createHoverEvent()).setInsertion(this.getStringUUID());
+         return var1.withHoverEvent(this.createHoverEvent()).withInsertion(this.getStringUUID());
       });
    }
 
    public void setCustomName(@Nullable Component var1) {
       this.entityData.set(DATA_CUSTOM_NAME, Optional.ofNullable(var1));
@@ -2348,12 +2285,18 @@
       if (this.level instanceof ServerLevel) {
          ServerLevel var7 = (ServerLevel)this.level;
          this.moveTo(var1, var3, var5, this.yRot, this.xRot);
          this.getSelfAndPassengers().forEach((var1x) -> {
             var7.updateChunkPos(var1x);
-            var1x.teleported = true;
-            var1x.repositionDirectPassengers(Entity::forceMove);
+            var1x.forceChunkAddition = true;
+            Iterator var2 = var1x.passengers.iterator();
+
+            while(var2.hasNext()) {
+               Entity var3 = (Entity)var2.next();
+               var1x.positionRider(var3, Entity::moveTo);
+            }
+
          });
       }
    }
 
    public boolean shouldShowName() {
@@ -2394,19 +2337,11 @@
    public Direction getMotionDirection() {
       return this.getDirection();
    }
 
    protected HoverEvent createHoverEvent() {
-      CompoundTag var1 = new CompoundTag();
-      ResourceLocation var2 = EntityType.getKey(this.getType());
-      var1.putString("id", this.getStringUUID());
-      if (var2 != null) {
-         var1.putString("type", var2.toString());
-      }
-
-      var1.putString("name", Component.Serializer.toJson(this.getName()));
-      return new HoverEvent(HoverEvent.Action.SHOW_ENTITY, new TextComponent(var1.toString()));
+      return new HoverEvent(HoverEvent.Action.SHOW_ENTITY, new HoverEvent.EntityTooltipInfo(this.getType(), this.getUUID(), this.getName()));
    }
 
    public boolean broadcastToPlayer(ServerPlayer var1) {
       return true;
    }
@@ -2441,25 +2376,21 @@
 
    public final float getEyeHeight() {
       return this.eyeHeight;
    }
 
+   public Vec3 getLeashOffset() {
+      return new Vec3(0.0D, (double)this.getEyeHeight(), (double)(this.getBbWidth() * 0.4F));
+   }
+
    public boolean setSlot(int var1, ItemStack var2) {
       return false;
    }
 
-   public void sendMessage(Component var1) {
+   public void sendMessage(Component var1, UUID var2) {
    }
 
-   public BlockPos getCommandSenderBlockPosition() {
-      return new BlockPos(this);
-   }
-
-   public Vec3 getCommandSenderWorldPosition() {
-      return this.position();
-   }
-
    public Level getCommandSenderWorld() {
       return this.level;
    }
 
    @Nullable
@@ -2473,11 +2404,11 @@
 
    public boolean ignoreExplosion() {
       return false;
    }
 
-   protected void doEnchantDamageEffects(LivingEntity var1, Entity var2) {
+   public void doEnchantDamageEffects(LivingEntity var1, Entity var2) {
       if (var2 instanceof LivingEntity) {
          EnchantmentHelper.doPostHurtEffects((LivingEntity)var2, var1);
       }
 
       EnchantmentHelper.doPostDamageEffects(var1, var2);
@@ -2517,16 +2448,22 @@
 
    public boolean onlyOpCanSetNbt() {
       return false;
    }
 
-   public boolean checkAndResetTeleportedFlag() {
-      boolean var1 = this.teleported;
-      this.teleported = false;
+   public boolean checkAndResetForcedChunkAdditionFlag() {
+      boolean var1 = this.forceChunkAddition;
+      this.forceChunkAddition = false;
       return var1;
    }
 
+   public boolean checkAndResetUpdateChunkPos() {
+      boolean var1 = this.movedSinceLastChunkCheck;
+      this.movedSinceLastChunkCheck = false;
+      return var1;
+   }
+
    @Nullable
    public Entity getControllingPassenger() {
       return null;
    }
 
@@ -2626,29 +2563,31 @@
       } while(!var3.hasIndirectPassenger(var1));
 
       return true;
    }
 
-   public void repositionDirectPassengers(Entity.MoveCallback var1) {
-      Iterator var2 = this.passengers.iterator();
-
-      while(var2.hasNext()) {
-         Entity var3 = (Entity)var2.next();
-         this.positionRider(var3, var1);
-      }
-
-   }
-
    public boolean isControlledByLocalInstance() {
       Entity var1 = this.getControllingPassenger();
       if (var1 instanceof Player) {
          return ((Player)var1).isLocalPlayer();
       } else {
          return !this.level.isClientSide;
       }
    }
 
+   protected static Vec3 getCollisionHorizontalEscapeVector(double var0, double var2, float var4) {
+      double var5 = (var0 + var2 + 9.999999747378752E-6D) / 2.0D;
+      float var7 = -Mth.sin(var4 * 0.017453292F);
+      float var8 = Mth.cos(var4 * 0.017453292F);
+      float var9 = Math.max(Math.abs(var7), Math.abs(var8));
+      return new Vec3((double)var7 * var5 / (double)var9, 0.0D, (double)var8 * var5 / (double)var9);
+   }
+
+   public Vec3 getDismountLocationForPassenger(LivingEntity var1) {
+      return new Vec3(this.getX(), this.getBoundingBox().maxY, this.getZ());
+   }
+
    @Nullable
    public Entity getVehicle() {
       return this.vehicle;
    }
 
@@ -2699,93 +2638,78 @@
       this.setYHeadRot(this.yRot);
       this.xRotO = this.xRot;
       this.yRotO = this.yRot;
    }
 
-   public boolean checkAndHandleWater(Tag<Fluid> var1) {
-      AABB var2 = this.getBoundingBox().deflate(0.001D);
-      int var3 = Mth.floor(var2.minX);
-      int var4 = Mth.ceil(var2.maxX);
-      int var5 = Mth.floor(var2.minY);
-      int var6 = Mth.ceil(var2.maxY);
-      int var7 = Mth.floor(var2.minZ);
-      int var8 = Mth.ceil(var2.maxZ);
-      if (!this.level.hasChunksAt(var3, var5, var7, var4, var6, var8)) {
+   public boolean updateFluidHeightAndDoFluidPushing(Tag<Fluid> var1, double var2) {
+      AABB var4 = this.getBoundingBox().deflate(0.001D);
+      int var5 = Mth.floor(var4.minX);
+      int var6 = Mth.ceil(var4.maxX);
+      int var7 = Mth.floor(var4.minY);
+      int var8 = Mth.ceil(var4.maxY);
+      int var9 = Mth.floor(var4.minZ);
+      int var10 = Mth.ceil(var4.maxZ);
+      if (!this.level.hasChunksAt(var5, var7, var9, var6, var8, var10)) {
          return false;
       } else {
-         double var9 = 0.0D;
-         boolean var11 = this.isPushedByWater();
-         boolean var12 = false;
-         Vec3 var13 = Vec3.ZERO;
-         int var14 = 0;
-         BlockPos.PooledMutableBlockPos var15 = BlockPos.PooledMutableBlockPos.acquire();
-         Throwable var16 = null;
+         double var11 = 0.0D;
+         boolean var13 = this.isPushedByFluid();
+         boolean var14 = false;
+         Vec3 var15 = Vec3.ZERO;
+         int var16 = 0;
+         BlockPos.MutableBlockPos var17 = new BlockPos.MutableBlockPos();
 
-         try {
-            for(int var17 = var3; var17 < var4; ++var17) {
-               for(int var18 = var5; var18 < var6; ++var18) {
-                  for(int var19 = var7; var19 < var8; ++var19) {
-                     var15.set(var17, var18, var19);
-                     FluidState var20 = this.level.getFluidState(var15);
-                     if (var20.is(var1)) {
-                        double var21 = (double)((float)var18 + var20.getHeight(this.level, var15));
-                        if (var21 >= var2.minY) {
-                           var12 = true;
-                           var9 = Math.max(var21 - var2.minY, var9);
-                           if (var11) {
-                              Vec3 var23 = var20.getFlow(this.level, var15);
-                              if (var9 < 0.4D) {
-                                 var23 = var23.scale(var9);
-                              }
-
-                              var13 = var13.add(var23);
-                              ++var14;
+         for(int var18 = var5; var18 < var6; ++var18) {
+            for(int var19 = var7; var19 < var8; ++var19) {
+               for(int var20 = var9; var20 < var10; ++var20) {
+                  var17.set(var18, var19, var20);
+                  FluidState var21 = this.level.getFluidState(var17);
+                  if (var21.is(var1)) {
+                     double var22 = (double)((float)var19 + var21.getHeight(this.level, var17));
+                     if (var22 >= var4.minY) {
+                        var14 = true;
+                        var11 = Math.max(var22 - var4.minY, var11);
+                        if (var13) {
+                           Vec3 var24 = var21.getFlow(this.level, var17);
+                           if (var11 < 0.4D) {
+                              var24 = var24.scale(var11);
                            }
+
+                           var15 = var15.add(var24);
+                           ++var16;
                         }
                      }
                   }
                }
             }
-         } catch (Throwable var31) {
-            var16 = var31;
-            throw var31;
-         } finally {
-            if (var15 != null) {
-               if (var16 != null) {
-                  try {
-                     var15.close();
-                  } catch (Throwable var30) {
-                     var16.addSuppressed(var30);
-                  }
-               } else {
-                  var15.close();
-               }
-            }
-
          }
 
-         if (var13.length() > 0.0D) {
-            if (var14 > 0) {
-               var13 = var13.scale(1.0D / (double)var14);
+         if (var15.length() > 0.0D) {
+            if (var16 > 0) {
+               var15 = var15.scale(1.0D / (double)var16);
             }
 
             if (!(this instanceof Player)) {
-               var13 = var13.normalize();
+               var15 = var15.normalize();
             }
 
-            this.setDeltaMovement(this.getDeltaMovement().add(var13.scale(0.014D)));
+            this.setDeltaMovement(this.getDeltaMovement().add(var15.scale(var2)));
          }
 
-         this.waterHeight = var9;
-         return var12;
+         this.fluidHeight.put(var1, var11);
+         return var14;
       }
    }
 
-   public double getWaterHeight() {
-      return this.waterHeight;
+   public double getFluidHeight(Tag<Fluid> var1) {
+      return this.fluidHeight.getDouble(var1);
    }
 
+   public double getFluidJumpThreshold() {
+      return (double)this.getEyeHeight() < 0.4D ? 0.0D : 0.4D;
+   }
+
    public final float getBbWidth() {
       return this.dimensions.width;
    }
 
    public final float getBbHeight() {
@@ -2797,13 +2721,17 @@
    public EntityDimensions getDimensions(Pose var1) {
       return this.type.getDimensions();
    }
 
    public Vec3 position() {
-      return new Vec3(this.x, this.y, this.z);
+      return this.position;
    }
 
+   public BlockPos blockPosition() {
+      return this.blockPosition;
+   }
+
    public Vec3 getDeltaMovement() {
       return this.deltaMovement;
    }
 
    public void setDeltaMovement(Vec3 var1) {
@@ -2813,62 +2741,67 @@
    public void setDeltaMovement(double var1, double var3, double var5) {
       this.setDeltaMovement(new Vec3(var1, var3, var5));
    }
 
    public final double getX() {
-      return this.x;
+      return this.position.x;
    }
 
    public double getX(double var1) {
-      return this.x + (double)this.getBbWidth() * var1;
+      return this.position.x + (double)this.getBbWidth() * var1;
    }
 
    public double getRandomX(double var1) {
       return this.getX((2.0D * this.random.nextDouble() - 1.0D) * var1);
    }
 
    public final double getY() {
-      return this.y;
+      return this.position.y;
    }
 
    public double getY(double var1) {
-      return this.y + (double)this.getBbHeight() * var1;
+      return this.position.y + (double)this.getBbHeight() * var1;
    }
 
    public double getRandomY() {
       return this.getY(this.random.nextDouble());
    }
 
    public double getEyeY() {
-      return this.y + (double)this.eyeHeight;
+      return this.position.y + (double)this.eyeHeight;
    }
 
    public final double getZ() {
-      return this.z;
+      return this.position.z;
    }
 
    public double getZ(double var1) {
-      return this.z + (double)this.getBbWidth() * var1;
+      return this.position.z + (double)this.getBbWidth() * var1;
    }
 
    public double getRandomZ(double var1) {
       return this.getZ((2.0D * this.random.nextDouble() - 1.0D) * var1);
    }
 
    public void setPosRaw(double var1, double var3, double var5) {
-      this.x = var1;
-      this.y = var3;
-      this.z = var5;
+      if (this.position.x != var1 || this.position.y != var3 || this.position.z != var5) {
+         this.position = new Vec3(var1, var3, var5);
+         int var7 = Mth.floor(var1);
+         int var8 = Mth.floor(var3);
+         int var9 = Mth.floor(var5);
+         if (var7 != this.blockPosition.getX() || var8 != this.blockPosition.getY() || var9 != this.blockPosition.getZ()) {
+            this.blockPosition = new BlockPos(var7, var8, var9);
+         }
+
+         this.movedSinceLastChunkCheck = true;
+      }
+
    }
 
    public void checkDespawn() {
    }
 
-   public void forceMove(double var1, double var3, double var5) {
-      this.moveTo(var1, var3, var5, this.yRot, this.xRot);
-   }
-
    static {
       DATA_SHARED_FLAGS_ID = SynchedEntityData.defineId(Entity.class, EntityDataSerializers.BYTE);
       DATA_AIR_SUPPLY_ID = SynchedEntityData.defineId(Entity.class, EntityDataSerializers.INT);
       DATA_CUSTOM_NAME = SynchedEntityData.defineId(Entity.class, EntityDataSerializers.OPTIONAL_COMPONENT);
       DATA_CUSTOM_NAME_VISIBLE = SynchedEntityData.defineId(Entity.class, EntityDataSerializers.BOOLEAN);
@@ -2876,9 +2809,9 @@
       DATA_NO_GRAVITY = SynchedEntityData.defineId(Entity.class, EntityDataSerializers.BOOLEAN);
       DATA_POSE = SynchedEntityData.defineId(Entity.class, EntityDataSerializers.POSE);
    }
 
    @FunctionalInterface
-   public interface MoveCallback {
+   public interface MoveFunction {
       void accept(Entity var1, double var2, double var4, double var6);
    }
 }
