--- net/minecraft/world/entity/ai/village/poi/PoiType.java
+++ net/minecraft/world/entity/ai/village/poi/PoiType.java
@@ -1,16 +1,18 @@
 package net.minecraft.world.entity.ai.village.poi;
 
+import com.google.common.base.Suppliers;
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableSet;
 import com.google.common.collect.Maps;
+import it.unimi.dsi.fastutil.objects.ObjectOpenHashSet;
 import java.util.Map;
 import java.util.Optional;
 import java.util.Set;
 import java.util.function.Predicate;
+import java.util.function.Supplier;
 import java.util.stream.Collectors;
-import java.util.stream.Stream;
 import net.minecraft.Util;
 import net.minecraft.core.Registry;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.world.entity.npc.VillagerProfession;
 import net.minecraft.world.level.block.BedBlock;
@@ -18,12 +20,15 @@
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.block.state.properties.BedPart;
 
 public class PoiType {
-   private static final Predicate<PoiType> ALL_JOBS = (var0) -> {
-      return ((Set)Registry.VILLAGER_PROFESSION.stream().map(VillagerProfession::getJobPoiType).collect(Collectors.toSet())).contains(var0);
+   private static final Supplier<Set<PoiType>> ALL_JOB_POI_TYPES = Suppliers.memoize(() -> {
+      return (Set)Registry.VILLAGER_PROFESSION.stream().map(VillagerProfession::getJobPoiType).collect(Collectors.toSet());
+   });
+   public static final Predicate<PoiType> ALL_JOBS = (var0) -> {
+      return ((Set)ALL_JOB_POI_TYPES.get()).contains(var0);
    };
    public static final Predicate<PoiType> ALL = (var0) -> {
       return true;
    };
    private static final Set<BlockState> BEDS;
@@ -46,10 +51,12 @@
    public static final PoiType HOME;
    public static final PoiType MEETING;
    public static final PoiType BEEHIVE;
    public static final PoiType BEE_NEST;
    public static final PoiType NETHER_PORTAL;
+   public static final PoiType LODESTONE;
+   protected static final Set<BlockState> ALL_STATES;
    private final String name;
    private final Set<BlockState> matchingStates;
    private final int maxTickets;
    private final Predicate<PoiType> predicate;
    private final int validRange;
@@ -91,15 +98,15 @@
    public String toString() {
       return this.name;
    }
 
    private static PoiType register(String var0, Set<BlockState> var1, int var2, int var3) {
-      return registerBlockStates((PoiType)Registry.POINT_OF_INTEREST_TYPE.register(new ResourceLocation(var0), new PoiType(var0, var1, var2, var3)));
+      return registerBlockStates((PoiType)Registry.register(Registry.POINT_OF_INTEREST_TYPE, (ResourceLocation)(new ResourceLocation(var0)), new PoiType(var0, var1, var2, var3)));
    }
 
    private static PoiType register(String var0, Set<BlockState> var1, int var2, Predicate<PoiType> var3, int var4) {
-      return registerBlockStates((PoiType)Registry.POINT_OF_INTEREST_TYPE.register(new ResourceLocation(var0), new PoiType(var0, var1, var2, var3, var4)));
+      return registerBlockStates((PoiType)Registry.register(Registry.POINT_OF_INTEREST_TYPE, (ResourceLocation)(new ResourceLocation(var0)), new PoiType(var0, var1, var2, var3, var4)));
    }
 
    private static PoiType registerBlockStates(PoiType var0) {
       var0.matchingStates.forEach((var1) -> {
          PoiType var2 = (PoiType)TYPE_BY_STATE.put(var1, var0);
@@ -112,14 +119,10 @@
 
    public static Optional<PoiType> forState(BlockState var0) {
       return Optional.ofNullable(TYPE_BY_STATE.get(var0));
    }
 
-   public static Stream<BlockState> allPoiStates() {
-      return TYPE_BY_STATE.keySet().stream();
-   }
-
    static {
       BEDS = (Set)ImmutableList.of(Blocks.RED_BED, Blocks.BLACK_BED, Blocks.BLUE_BED, Blocks.BROWN_BED, Blocks.CYAN_BED, Blocks.GRAY_BED, Blocks.GREEN_BED, Blocks.LIGHT_BLUE_BED, Blocks.LIGHT_GRAY_BED, Blocks.LIME_BED, Blocks.MAGENTA_BED, Blocks.ORANGE_BED, new Block[]{Blocks.PINK_BED, Blocks.PURPLE_BED, Blocks.WHITE_BED, Blocks.YELLOW_BED}).stream().flatMap((var0) -> {
          return var0.getStateDefinition().getPossibleStates().stream();
       }).filter((var0) -> {
          return var0.getValue(BedBlock.PART) == BedPart.HEAD;
@@ -143,7 +146,9 @@
       HOME = register("home", BEDS, 1, 1);
       MEETING = register("meeting", getBlockStates(Blocks.BELL), 32, 6);
       BEEHIVE = register("beehive", getBlockStates(Blocks.BEEHIVE), 0, 1);
       BEE_NEST = register("bee_nest", getBlockStates(Blocks.BEE_NEST), 0, 1);
       NETHER_PORTAL = register("nether_portal", getBlockStates(Blocks.NETHER_PORTAL), 0, 1);
+      LODESTONE = register("lodestone", getBlockStates(Blocks.LODESTONE), 0, 1);
+      ALL_STATES = new ObjectOpenHashSet(TYPE_BY_STATE.keySet());
    }
 }
