--- net/minecraft/world/entity/ai/memory/MemoryModuleType.java
+++ net/minecraft/world/entity/ai/memory/MemoryModuleType.java
@@ -1,71 +1,167 @@
 package net.minecraft.world.entity.ai.memory;
 
-import com.mojang.datafixers.Dynamic;
+import com.mojang.serialization.Codec;
 import java.util.List;
 import java.util.Optional;
 import java.util.Set;
-import java.util.function.Function;
+import java.util.UUID;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.GlobalPos;
 import net.minecraft.core.Registry;
-import net.minecraft.core.SerializableLong;
+import net.minecraft.core.SerializableUUID;
 import net.minecraft.resources.ResourceLocation;
-import net.minecraft.util.Serializable;
 import net.minecraft.world.damagesource.DamageSource;
+import net.minecraft.world.entity.AgableMob;
+import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.LivingEntity;
-import net.minecraft.world.entity.ai.behavior.PositionWrapper;
-import net.minecraft.world.entity.npc.Villager;
+import net.minecraft.world.entity.Mob;
+import net.minecraft.world.entity.ai.behavior.PositionTracker;
+import net.minecraft.world.entity.item.ItemEntity;
+import net.minecraft.world.entity.monster.hoglin.Hoglin;
+import net.minecraft.world.entity.monster.piglin.Piglin;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.level.pathfinder.Path;
 
 public class MemoryModuleType<U> {
    public static final MemoryModuleType<Void> DUMMY = register("dummy");
-   public static final MemoryModuleType<GlobalPos> HOME = register("home", Optional.of(GlobalPos::of));
-   public static final MemoryModuleType<GlobalPos> JOB_SITE = register("job_site", Optional.of(GlobalPos::of));
-   public static final MemoryModuleType<GlobalPos> MEETING_POINT = register("meeting_point", Optional.of(GlobalPos::of));
-   public static final MemoryModuleType<List<GlobalPos>> SECONDARY_JOB_SITE = register("secondary_job_site");
-   public static final MemoryModuleType<List<LivingEntity>> LIVING_ENTITIES = register("mobs");
-   public static final MemoryModuleType<List<LivingEntity>> VISIBLE_LIVING_ENTITIES = register("visible_mobs");
-   public static final MemoryModuleType<List<LivingEntity>> VISIBLE_VILLAGER_BABIES = register("visible_villager_babies");
-   public static final MemoryModuleType<List<Player>> NEAREST_PLAYERS = register("nearest_players");
-   public static final MemoryModuleType<Player> NEAREST_VISIBLE_PLAYER = register("nearest_visible_player");
-   public static final MemoryModuleType<WalkTarget> WALK_TARGET = register("walk_target");
-   public static final MemoryModuleType<PositionWrapper> LOOK_TARGET = register("look_target");
-   public static final MemoryModuleType<LivingEntity> INTERACTION_TARGET = register("interaction_target");
-   public static final MemoryModuleType<Villager> BREED_TARGET = register("breed_target");
-   public static final MemoryModuleType<Path> PATH = register("path");
-   public static final MemoryModuleType<List<GlobalPos>> INTERACTABLE_DOORS = register("interactable_doors");
-   public static final MemoryModuleType<Set<GlobalPos>> OPENED_DOORS = register("opened_doors");
-   public static final MemoryModuleType<BlockPos> NEAREST_BED = register("nearest_bed");
-   public static final MemoryModuleType<DamageSource> HURT_BY = register("hurt_by");
-   public static final MemoryModuleType<LivingEntity> HURT_BY_ENTITY = register("hurt_by_entity");
-   public static final MemoryModuleType<LivingEntity> NEAREST_HOSTILE = register("nearest_hostile");
-   public static final MemoryModuleType<GlobalPos> HIDING_PLACE = register("hiding_place");
-   public static final MemoryModuleType<Long> HEARD_BELL_TIME = register("heard_bell_time");
-   public static final MemoryModuleType<Long> CANT_REACH_WALK_TARGET_SINCE = register("cant_reach_walk_target_since");
-   public static final MemoryModuleType<Long> GOLEM_LAST_SEEN_TIME = register("golem_last_seen_time");
-   public static final MemoryModuleType<SerializableLong> LAST_SLEPT = register("last_slept", Optional.of(SerializableLong::of));
-   public static final MemoryModuleType<SerializableLong> LAST_WOKEN = register("last_woken", Optional.of(SerializableLong::of));
-   public static final MemoryModuleType<SerializableLong> LAST_WORKED_AT_POI = register("last_worked_at_poi", Optional.of(SerializableLong::of));
-   private final Optional<Function<Dynamic<?>, U>> deserializer;
+   public static final MemoryModuleType<GlobalPos> HOME;
+   public static final MemoryModuleType<GlobalPos> JOB_SITE;
+   public static final MemoryModuleType<GlobalPos> POTENTIAL_JOB_SITE;
+   public static final MemoryModuleType<GlobalPos> MEETING_POINT;
+   public static final MemoryModuleType<List<GlobalPos>> SECONDARY_JOB_SITE;
+   public static final MemoryModuleType<List<LivingEntity>> LIVING_ENTITIES;
+   public static final MemoryModuleType<List<LivingEntity>> VISIBLE_LIVING_ENTITIES;
+   public static final MemoryModuleType<List<LivingEntity>> VISIBLE_VILLAGER_BABIES;
+   public static final MemoryModuleType<List<Player>> NEAREST_PLAYERS;
+   public static final MemoryModuleType<Player> NEAREST_VISIBLE_PLAYER;
+   public static final MemoryModuleType<Player> NEAREST_VISIBLE_TARGETABLE_PLAYER;
+   public static final MemoryModuleType<WalkTarget> WALK_TARGET;
+   public static final MemoryModuleType<PositionTracker> LOOK_TARGET;
+   public static final MemoryModuleType<LivingEntity> ATTACK_TARGET;
+   public static final MemoryModuleType<Boolean> ATTACK_COOLING_DOWN;
+   public static final MemoryModuleType<LivingEntity> INTERACTION_TARGET;
+   public static final MemoryModuleType<AgableMob> BREED_TARGET;
+   public static final MemoryModuleType<Entity> RIDE_TARGET;
+   public static final MemoryModuleType<Path> PATH;
+   public static final MemoryModuleType<List<GlobalPos>> INTERACTABLE_DOORS;
+   public static final MemoryModuleType<Set<GlobalPos>> OPENED_DOORS;
+   public static final MemoryModuleType<BlockPos> NEAREST_BED;
+   public static final MemoryModuleType<DamageSource> HURT_BY;
+   public static final MemoryModuleType<LivingEntity> HURT_BY_ENTITY;
+   public static final MemoryModuleType<LivingEntity> AVOID_TARGET;
+   public static final MemoryModuleType<LivingEntity> NEAREST_HOSTILE;
+   public static final MemoryModuleType<GlobalPos> HIDING_PLACE;
+   public static final MemoryModuleType<Long> HEARD_BELL_TIME;
+   public static final MemoryModuleType<Long> CANT_REACH_WALK_TARGET_SINCE;
+   public static final MemoryModuleType<Long> GOLEM_LAST_SEEN_TIME;
+   public static final MemoryModuleType<Long> LAST_SLEPT;
+   public static final MemoryModuleType<Long> LAST_WOKEN;
+   public static final MemoryModuleType<Long> LAST_WORKED_AT_POI;
+   public static final MemoryModuleType<AgableMob> NEAREST_VISIBLE_ADULT;
+   public static final MemoryModuleType<ItemEntity> NEAREST_VISIBLE_WANTED_ITEM;
+   public static final MemoryModuleType<Mob> NEAREST_VISIBLE_NEMESIS;
+   public static final MemoryModuleType<UUID> ANGRY_AT;
+   public static final MemoryModuleType<Boolean> UNIVERSAL_ANGER;
+   public static final MemoryModuleType<Boolean> ADMIRING_ITEM;
+   public static final MemoryModuleType<Boolean> ADMIRING_DISABLED;
+   public static final MemoryModuleType<Boolean> HUNTED_RECENTLY;
+   public static final MemoryModuleType<BlockPos> CELEBRATE_LOCATION;
+   public static final MemoryModuleType<Boolean> DANCING;
+   public static final MemoryModuleType<Hoglin> NEAREST_VISIBLE_HUNTABLE_HOGLIN;
+   public static final MemoryModuleType<Hoglin> NEAREST_VISIBLE_BABY_HOGLIN;
+   public static final MemoryModuleType<Piglin> NEAREST_VISIBLE_BABY_PIGLIN;
+   public static final MemoryModuleType<Player> NEAREST_TARGETABLE_PLAYER_NOT_WEARING_GOLD;
+   public static final MemoryModuleType<List<Piglin>> NEAREST_ADULT_PIGLINS;
+   public static final MemoryModuleType<List<Piglin>> NEAREST_VISIBLE_ADULT_PIGLINS;
+   public static final MemoryModuleType<List<Hoglin>> NEAREST_VISIBLE_ADULT_HOGLINS;
+   public static final MemoryModuleType<Piglin> NEAREST_VISIBLE_ADULT_PIGLIN;
+   public static final MemoryModuleType<LivingEntity> NEAREST_VISIBLE_ZOMBIFIED;
+   public static final MemoryModuleType<Integer> VISIBLE_ADULT_PIGLIN_COUNT;
+   public static final MemoryModuleType<Integer> VISIBLE_ADULT_HOGLIN_COUNT;
+   public static final MemoryModuleType<Player> NEAREST_PLAYER_HOLDING_WANTED_ITEM;
+   public static final MemoryModuleType<Boolean> ATE_RECENTLY;
+   public static final MemoryModuleType<BlockPos> NEAREST_REPELLENT;
+   public static final MemoryModuleType<Boolean> PACIFIED;
+   private final Optional<Codec<ExpirableValue<U>>> codec;
 
-   private MemoryModuleType(Optional<Function<Dynamic<?>, U>> var1) {
-      this.deserializer = var1;
+   private MemoryModuleType(Optional<Codec<U>> var1) {
+      this.codec = var1.map(ExpirableValue::codec);
    }
 
    public String toString() {
       return Registry.MEMORY_MODULE_TYPE.getKey(this).toString();
    }
 
-   public Optional<Function<Dynamic<?>, U>> getDeserializer() {
-      return this.deserializer;
+   public Optional<Codec<ExpirableValue<U>>> getCodec() {
+      return this.codec;
    }
 
-   private static <U extends Serializable> MemoryModuleType<U> register(String var0, Optional<Function<Dynamic<?>, U>> var1) {
-      return (MemoryModuleType)Registry.register(Registry.MEMORY_MODULE_TYPE, (ResourceLocation)(new ResourceLocation(var0)), new MemoryModuleType(var1));
+   private static <U> MemoryModuleType<U> register(String var0, Codec<U> var1) {
+      return (MemoryModuleType)Registry.register(Registry.MEMORY_MODULE_TYPE, (ResourceLocation)(new ResourceLocation(var0)), new MemoryModuleType(Optional.of(var1)));
    }
 
    private static <U> MemoryModuleType<U> register(String var0) {
       return (MemoryModuleType)Registry.register(Registry.MEMORY_MODULE_TYPE, (ResourceLocation)(new ResourceLocation(var0)), new MemoryModuleType(Optional.empty()));
    }
+
+   static {
+      HOME = register("home", GlobalPos.CODEC);
+      JOB_SITE = register("job_site", GlobalPos.CODEC);
+      POTENTIAL_JOB_SITE = register("potential_job_site", GlobalPos.CODEC);
+      MEETING_POINT = register("meeting_point", GlobalPos.CODEC);
+      SECONDARY_JOB_SITE = register("secondary_job_site");
+      LIVING_ENTITIES = register("mobs");
+      VISIBLE_LIVING_ENTITIES = register("visible_mobs");
+      VISIBLE_VILLAGER_BABIES = register("visible_villager_babies");
+      NEAREST_PLAYERS = register("nearest_players");
+      NEAREST_VISIBLE_PLAYER = register("nearest_visible_player");
+      NEAREST_VISIBLE_TARGETABLE_PLAYER = register("nearest_visible_targetable_player");
+      WALK_TARGET = register("walk_target");
+      LOOK_TARGET = register("look_target");
+      ATTACK_TARGET = register("attack_target");
+      ATTACK_COOLING_DOWN = register("attack_cooling_down");
+      INTERACTION_TARGET = register("interaction_target");
+      BREED_TARGET = register("breed_target");
+      RIDE_TARGET = register("ride_target");
+      PATH = register("path");
+      INTERACTABLE_DOORS = register("interactable_doors");
+      OPENED_DOORS = register("opened_doors");
+      NEAREST_BED = register("nearest_bed");
+      HURT_BY = register("hurt_by");
+      HURT_BY_ENTITY = register("hurt_by_entity");
+      AVOID_TARGET = register("avoid_target");
+      NEAREST_HOSTILE = register("nearest_hostile");
+      HIDING_PLACE = register("hiding_place");
+      HEARD_BELL_TIME = register("heard_bell_time");
+      CANT_REACH_WALK_TARGET_SINCE = register("cant_reach_walk_target_since");
+      GOLEM_LAST_SEEN_TIME = register("golem_last_seen_time");
+      LAST_SLEPT = register("last_slept", Codec.LONG);
+      LAST_WOKEN = register("last_woken", Codec.LONG);
+      LAST_WORKED_AT_POI = register("last_worked_at_poi", Codec.LONG);
+      NEAREST_VISIBLE_ADULT = register("nearest_visible_adult");
+      NEAREST_VISIBLE_WANTED_ITEM = register("nearest_visible_wanted_item");
+      NEAREST_VISIBLE_NEMESIS = register("nearest_visible_nemesis");
+      ANGRY_AT = register("angry_at", SerializableUUID.CODEC);
+      UNIVERSAL_ANGER = register("universal_anger", Codec.BOOL);
+      ADMIRING_ITEM = register("admiring_item", Codec.BOOL);
+      ADMIRING_DISABLED = register("admiring_disabled", Codec.BOOL);
+      HUNTED_RECENTLY = register("hunted_recently", Codec.BOOL);
+      CELEBRATE_LOCATION = register("celebrate_location");
+      DANCING = register("dancing");
+      NEAREST_VISIBLE_HUNTABLE_HOGLIN = register("nearest_visible_huntable_hoglin");
+      NEAREST_VISIBLE_BABY_HOGLIN = register("nearest_visible_baby_hoglin");
+      NEAREST_VISIBLE_BABY_PIGLIN = register("nearest_visible_baby_piglin");
+      NEAREST_TARGETABLE_PLAYER_NOT_WEARING_GOLD = register("nearest_targetable_player_not_wearing_gold");
+      NEAREST_ADULT_PIGLINS = register("nearest_adult_piglins");
+      NEAREST_VISIBLE_ADULT_PIGLINS = register("nearest_visible_adult_piglins");
+      NEAREST_VISIBLE_ADULT_HOGLINS = register("nearest_visible_adult_hoglins");
+      NEAREST_VISIBLE_ADULT_PIGLIN = register("nearest_visible_adult_piglin");
+      NEAREST_VISIBLE_ZOMBIFIED = register("nearest_visible_zombified");
+      VISIBLE_ADULT_PIGLIN_COUNT = register("visible_adult_piglin_count");
+      VISIBLE_ADULT_HOGLIN_COUNT = register("visible_adult_hoglin_count");
+      NEAREST_PLAYER_HOLDING_WANTED_ITEM = register("nearest_player_holding_wanted_item");
+      ATE_RECENTLY = register("ate_recently");
+      NEAREST_REPELLENT = register("nearest_repellent");
+      PACIFIED = register("pacified");
+   }
 }
