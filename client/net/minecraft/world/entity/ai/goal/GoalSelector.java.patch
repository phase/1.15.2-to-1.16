--- net/minecraft/world/entity/ai/goal/GoalSelector.java
+++ net/minecraft/world/entity/ai/goal/GoalSelector.java
@@ -3,10 +3,11 @@
 import com.google.common.collect.Sets;
 import java.util.EnumMap;
 import java.util.EnumSet;
 import java.util.Map;
 import java.util.Set;
+import java.util.function.Supplier;
 import java.util.stream.Stream;
 import net.minecraft.util.profiling.ProfilerFiller;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
@@ -21,15 +22,15 @@
          return false;
       }
    };
    private final Map<Goal.Flag, WrappedGoal> lockedFlags = new EnumMap(Goal.Flag.class);
    private final Set<WrappedGoal> availableGoals = Sets.newLinkedHashSet();
-   private final ProfilerFiller profiler;
+   private final Supplier<ProfilerFiller> profiler;
    private final EnumSet<Goal.Flag> disabledFlags = EnumSet.noneOf(Goal.Flag.class);
    private int newGoalRate = 3;
 
-   public GoalSelector(ProfilerFiller var1) {
+   public GoalSelector(Supplier<ProfilerFiller> var1) {
       this.profiler = var1;
    }
 
    public void addGoal(int var1, Goal var2) {
       this.availableGoals.add(new WrappedGoal(var1, var2));
@@ -43,57 +44,58 @@
          return var1x.getGoal() == var1;
       });
    }
 
    public void tick() {
-      this.profiler.push("goalCleanup");
-      this.getRunningGoals().filter((var1) -> {
+      ProfilerFiller var1 = (ProfilerFiller)this.profiler.get();
+      var1.push("goalCleanup");
+      this.getRunningGoals().filter((var1x) -> {
          boolean var2;
-         if (var1.isRunning()) {
-            Stream var10000 = var1.getFlags().stream();
+         if (var1x.isRunning()) {
+            Stream var10000 = var1x.getFlags().stream();
             EnumSet var10001 = this.disabledFlags;
             var10001.getClass();
-            if (!var10000.anyMatch(var10001::contains) && var1.canContinueToUse()) {
+            if (!var10000.anyMatch(var10001::contains) && var1x.canContinueToUse()) {
                var2 = false;
                return var2;
             }
          }
 
          var2 = true;
          return var2;
       }).forEach(Goal::stop);
-      this.lockedFlags.forEach((var1, var2) -> {
+      this.lockedFlags.forEach((var1x, var2) -> {
          if (!var2.isRunning()) {
-            this.lockedFlags.remove(var1);
+            this.lockedFlags.remove(var1x);
          }
 
       });
-      this.profiler.pop();
-      this.profiler.push("goalUpdate");
+      var1.pop();
+      var1.push("goalUpdate");
       this.availableGoals.stream().filter((var0) -> {
          return !var0.isRunning();
-      }).filter((var1) -> {
-         Stream var10000 = var1.getFlags().stream();
+      }).filter((var1x) -> {
+         Stream var10000 = var1x.getFlags().stream();
          EnumSet var10001 = this.disabledFlags;
          var10001.getClass();
          return var10000.noneMatch(var10001::contains);
-      }).filter((var1) -> {
-         return var1.getFlags().stream().allMatch((var2) -> {
-            return ((WrappedGoal)this.lockedFlags.getOrDefault(var2, NO_GOAL)).canBeReplacedBy(var1);
+      }).filter((var1x) -> {
+         return var1x.getFlags().stream().allMatch((var2) -> {
+            return ((WrappedGoal)this.lockedFlags.getOrDefault(var2, NO_GOAL)).canBeReplacedBy(var1x);
          });
-      }).filter(WrappedGoal::canUse).forEach((var1) -> {
-         var1.getFlags().forEach((var2) -> {
+      }).filter(WrappedGoal::canUse).forEach((var1x) -> {
+         var1x.getFlags().forEach((var2) -> {
             WrappedGoal var3 = (WrappedGoal)this.lockedFlags.getOrDefault(var2, NO_GOAL);
             var3.stop();
-            this.lockedFlags.put(var2, var1);
+            this.lockedFlags.put(var2, var1x);
          });
-         var1.start();
+         var1x.start();
       });
-      this.profiler.pop();
-      this.profiler.push("goalTick");
+      var1.pop();
+      var1.push("goalTick");
       this.getRunningGoals().forEach(WrappedGoal::tick);
-      this.profiler.pop();
+      var1.pop();
    }
 
    public Stream<WrappedGoal> getRunningGoals() {
       return this.availableGoals.stream().filter(WrappedGoal::isRunning);
    }
