--- net/minecraft/world/entity/ai/goal/CatSitOnBlockGoal.java
+++ net/minecraft/world/entity/ai/goal/CatSitOnBlockGoal.java
@@ -3,11 +3,10 @@
 import net.minecraft.core.BlockPos;
 import net.minecraft.tags.BlockTags;
 import net.minecraft.world.entity.animal.Cat;
 import net.minecraft.world.level.LevelReader;
 import net.minecraft.world.level.block.BedBlock;
-import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.FurnaceBlock;
 import net.minecraft.world.level.block.entity.ChestBlockEntity;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.block.state.properties.BedPart;
@@ -19,45 +18,40 @@
       super(var1, var2, 8);
       this.cat = var1;
    }
 
    public boolean canUse() {
-      return this.cat.isTame() && !this.cat.isSitting() && super.canUse();
+      return this.cat.isTame() && !this.cat.isOrderedToSit() && super.canUse();
    }
 
    public void start() {
       super.start();
-      this.cat.getSitGoal().wantToSit(false);
+      this.cat.setInSittingPose(false);
    }
 
    public void stop() {
       super.stop();
-      this.cat.setSitting(false);
+      this.cat.setInSittingPose(false);
    }
 
    public void tick() {
       super.tick();
-      this.cat.getSitGoal().wantToSit(false);
-      if (!this.isReachedTarget()) {
-         this.cat.setSitting(false);
-      } else if (!this.cat.isSitting()) {
-         this.cat.setSitting(true);
-      }
-
+      this.cat.setInSittingPose(this.isReachedTarget());
    }
 
    protected boolean isValidTarget(LevelReader var1, BlockPos var2) {
       if (!var1.isEmptyBlock(var2.above())) {
          return false;
       } else {
          BlockState var3 = var1.getBlockState(var2);
-         Block var4 = var3.getBlock();
-         if (var4 == Blocks.CHEST) {
+         if (var3.is(Blocks.CHEST)) {
             return ChestBlockEntity.getOpenCount(var1, var2) < 1;
-         } else if (var4 == Blocks.FURNACE && (Boolean)var3.getValue(FurnaceBlock.LIT)) {
-            return true;
          } else {
-            return var4.is(BlockTags.BEDS) && var3.getValue(BedBlock.PART) != BedPart.HEAD;
+            return var3.is(Blocks.FURNACE) && (Boolean)var3.getValue(FurnaceBlock.LIT) ? true : var3.is(BlockTags.BEDS, (var0) -> {
+               return (Boolean)var0.getOptionalValue(BedBlock.PART).map((var0x) -> {
+                  return var0x != BedPart.HEAD;
+               }).orElse(true);
+            });
          }
       }
    }
 }
