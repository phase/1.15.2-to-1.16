--- net/minecraft/world/entity/ai/behavior/SetClosestHomeAsWalkTarget.java
+++ net/minecraft/world/entity/ai/behavior/SetClosestHomeAsWalkTarget.java
@@ -17,30 +17,28 @@
 import net.minecraft.world.entity.ai.village.poi.PoiManager;
 import net.minecraft.world.entity.ai.village.poi.PoiType;
 import net.minecraft.world.level.pathfinder.Path;
 
 public class SetClosestHomeAsWalkTarget extends Behavior<LivingEntity> {
-   private final float speed;
+   private final float speedModifier;
    private final Long2LongMap batchCache = new Long2LongOpenHashMap();
    private int triedCount;
    private long lastUpdate;
 
    public SetClosestHomeAsWalkTarget(float var1) {
       super(ImmutableMap.of(MemoryModuleType.WALK_TARGET, MemoryStatus.VALUE_ABSENT, MemoryModuleType.HOME, MemoryStatus.VALUE_ABSENT));
-      this.speed = var1;
+      this.speedModifier = var1;
    }
 
    protected boolean checkExtraStartConditions(ServerLevel var1, LivingEntity var2) {
       if (var1.getGameTime() - this.lastUpdate < 20L) {
          return false;
       } else {
          PathfinderMob var3 = (PathfinderMob)var2;
          PoiManager var4 = var1.getPoiManager();
-         Optional var5 = var4.findClosest(PoiType.HOME.getPredicate(), (var0) -> {
-            return true;
-         }, new BlockPos(var2), 48, PoiManager.Occupancy.ANY);
-         return var5.isPresent() && ((BlockPos)var5.get()).distSqr(new BlockPos(var3)) > 4.0D;
+         Optional var5 = var4.findClosest(PoiType.HOME.getPredicate(), var2.blockPosition(), 48, PoiManager.Occupancy.ANY);
+         return var5.isPresent() && ((BlockPos)var5.get()).distSqr(var3.blockPosition()) > 4.0D;
       }
    }
 
    protected void start(ServerLevel var1, LivingEntity var2, long var3) {
       this.triedCount = 0;
@@ -56,17 +54,17 @@
          } else {
             this.batchCache.put(var2, this.lastUpdate + 40L);
             return true;
          }
       };
-      Stream var8 = var6.findAll(PoiType.HOME.getPredicate(), var7, new BlockPos(var2), 48, PoiManager.Occupancy.ANY);
+      Stream var8 = var6.findAll(PoiType.HOME.getPredicate(), var7, var2.blockPosition(), 48, PoiManager.Occupancy.ANY);
       Path var9 = var5.getNavigation().createPath(var8, PoiType.HOME.getValidRange());
       if (var9 != null && var9.canReach()) {
          BlockPos var10 = var9.getTarget();
          Optional var11 = var6.getType(var10);
          if (var11.isPresent()) {
-            var2.getBrain().setMemory(MemoryModuleType.WALK_TARGET, (Object)(new WalkTarget(var10, this.speed, 1)));
+            var2.getBrain().setMemory(MemoryModuleType.WALK_TARGET, (Object)(new WalkTarget(var10, this.speedModifier, 1)));
             DebugPackets.sendPoiTicketCountPacket(var1, var10);
          }
       } else if (this.triedCount < 5) {
          this.batchCache.long2LongEntrySet().removeIf((var1x) -> {
             return var1x.getLongValue() < this.lastUpdate;
