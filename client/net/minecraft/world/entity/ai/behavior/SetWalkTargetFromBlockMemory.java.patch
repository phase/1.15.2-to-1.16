--- net/minecraft/world/entity/ai/behavior/SetWalkTargetFromBlockMemory.java
+++ net/minecraft/world/entity/ai/behavior/SetWalkTargetFromBlockMemory.java
@@ -13,19 +13,19 @@
 import net.minecraft.world.entity.npc.Villager;
 import net.minecraft.world.phys.Vec3;
 
 public class SetWalkTargetFromBlockMemory extends Behavior<Villager> {
    private final MemoryModuleType<GlobalPos> memoryType;
-   private final float speed;
+   private final float speedModifier;
    private final int closeEnoughDist;
    private final int tooFarDistance;
    private final int tooLongUnreachableDuration;
 
    public SetWalkTargetFromBlockMemory(MemoryModuleType<GlobalPos> var1, float var2, int var3, int var4, int var5) {
       super(ImmutableMap.of(MemoryModuleType.CANT_REACH_WALK_TARGET_SINCE, MemoryStatus.REGISTERED, MemoryModuleType.WALK_TARGET, MemoryStatus.VALUE_ABSENT, var1, MemoryStatus.VALUE_PRESENT));
       this.memoryType = var1;
-      this.speed = var2;
+      this.speedModifier = var2;
       this.closeEnoughDist = var3;
       this.tooFarDistance = var4;
       this.tooLongUnreachableDuration = var5;
    }
 
@@ -43,22 +43,22 @@
             this.dropPOI(var2, var3);
          } else if (this.tooFar(var1, var2, var6)) {
             Vec3 var7 = null;
             int var8 = 0;
 
-            for(boolean var9 = true; var8 < 1000 && (var7 == null || this.tooFar(var1, var2, GlobalPos.of(var2.dimension, new BlockPos(var7)))); ++var8) {
-               var7 = RandomPos.getPosTowards(var2, 15, 7, new Vec3(var6.pos()));
+            for(boolean var9 = true; var8 < 1000 && (var7 == null || this.tooFar(var1, var2, GlobalPos.of(var1.dimension(), new BlockPos(var7)))); ++var8) {
+               var7 = RandomPos.getPosTowards(var2, 15, 7, Vec3.atBottomCenterOf(var6.pos()));
             }
 
             if (var8 == 1000) {
                this.dropPOI(var2, var3);
                return;
             }
 
-            var5.setMemory(MemoryModuleType.WALK_TARGET, (Object)(new WalkTarget(var7, this.speed, this.closeEnoughDist)));
+            var5.setMemory(MemoryModuleType.WALK_TARGET, (Object)(new WalkTarget(var7, this.speedModifier, this.closeEnoughDist)));
          } else if (!this.closeEnough(var1, var2, var6)) {
-            var5.setMemory(MemoryModuleType.WALK_TARGET, (Object)(new WalkTarget(var6.pos(), this.speed, this.closeEnoughDist)));
+            var5.setMemory(MemoryModuleType.WALK_TARGET, (Object)(new WalkTarget(var6.pos(), this.speedModifier, this.closeEnoughDist)));
          }
 
       });
    }
 
@@ -70,12 +70,12 @@
          return false;
       }
    }
 
    private boolean tooFar(ServerLevel var1, Villager var2, GlobalPos var3) {
-      return var3.dimension() != var1.getDimension().getType() || var3.pos().distManhattan(new BlockPos(var2)) > this.tooFarDistance;
+      return var3.dimension() != var1.dimension() || var3.pos().distManhattan(var2.blockPosition()) > this.tooFarDistance;
    }
 
    private boolean closeEnough(ServerLevel var1, Villager var2, GlobalPos var3) {
-      return var3.dimension() == var1.getDimension().getType() && var3.pos().distManhattan(new BlockPos(var2)) <= this.closeEnoughDist;
+      return var3.dimension() == var1.dimension() && var3.pos().distManhattan(var2.blockPosition()) <= this.closeEnoughDist;
    }
 }
