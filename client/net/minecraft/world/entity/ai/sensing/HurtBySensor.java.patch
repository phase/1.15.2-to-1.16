--- net/minecraft/world/entity/ai/sensing/HurtBySensor.java
+++ net/minecraft/world/entity/ai/sensing/HurtBySensor.java
@@ -11,23 +11,30 @@
 
 public class HurtBySensor extends Sensor<LivingEntity> {
    public HurtBySensor() {
    }
 
+   public Set<MemoryModuleType<?>> requires() {
+      return ImmutableSet.of(MemoryModuleType.HURT_BY, MemoryModuleType.HURT_BY_ENTITY);
+   }
+
    protected void doTick(ServerLevel var1, LivingEntity var2) {
       Brain var3 = var2.getBrain();
-      if (var2.getLastDamageSource() != null) {
+      DamageSource var4 = var2.getLastDamageSource();
+      if (var4 != null) {
          var3.setMemory(MemoryModuleType.HURT_BY, (Object)var2.getLastDamageSource());
-         Entity var4 = ((DamageSource)var3.getMemory(MemoryModuleType.HURT_BY).get()).getEntity();
-         if (var4 instanceof LivingEntity) {
-            var3.setMemory(MemoryModuleType.HURT_BY_ENTITY, (Object)((LivingEntity)var4));
+         Entity var5 = var4.getEntity();
+         if (var5 instanceof LivingEntity) {
+            var3.setMemory(MemoryModuleType.HURT_BY_ENTITY, (Object)((LivingEntity)var5));
          }
       } else {
          var3.eraseMemory(MemoryModuleType.HURT_BY);
       }
 
-   }
+      var3.getMemory(MemoryModuleType.HURT_BY_ENTITY).ifPresent((var2x) -> {
+         if (!var2x.isAlive() || var2x.level != var1) {
+            var3.eraseMemory(MemoryModuleType.HURT_BY_ENTITY);
+         }
 
-   public Set<MemoryModuleType<?>> requires() {
-      return ImmutableSet.of(MemoryModuleType.HURT_BY, MemoryModuleType.HURT_BY_ENTITY);
+      });
    }
 }
