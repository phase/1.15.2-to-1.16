--- net/minecraft/world/entity/TamableAnimal.java
+++ net/minecraft/world/entity/TamableAnimal.java
@@ -1,31 +1,31 @@
 package net.minecraft.world.entity;
 
 import java.util.Optional;
 import java.util.UUID;
 import javax.annotation.Nullable;
+import net.minecraft.Util;
 import net.minecraft.advancements.CriteriaTriggers;
 import net.minecraft.core.particles.ParticleTypes;
 import net.minecraft.core.particles.SimpleParticleType;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.network.syncher.EntityDataAccessor;
 import net.minecraft.network.syncher.EntityDataSerializers;
 import net.minecraft.network.syncher.SynchedEntityData;
 import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.server.players.OldUsersConverter;
 import net.minecraft.world.damagesource.DamageSource;
-import net.minecraft.world.entity.ai.goal.SitGoal;
 import net.minecraft.world.entity.animal.Animal;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.level.GameRules;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.scores.Team;
 
 public abstract class TamableAnimal extends Animal {
    protected static final EntityDataAccessor<Byte> DATA_FLAGS_ID;
    protected static final EntityDataAccessor<Optional<UUID>> DATA_OWNERUUID_ID;
-   protected SitGoal sitGoal;
+   private boolean orderedToSit;
 
    protected TamableAnimal(EntityType<? extends TamableAnimal> var1, Level var2) {
       super(var1, var2);
       this.reassessTameGoals();
    }
@@ -36,43 +36,38 @@
       this.entityData.define(DATA_OWNERUUID_ID, Optional.empty());
    }
 
    public void addAdditionalSaveData(CompoundTag var1) {
       super.addAdditionalSaveData(var1);
-      if (this.getOwnerUUID() == null) {
-         var1.putString("OwnerUUID", "");
-      } else {
-         var1.putString("OwnerUUID", this.getOwnerUUID().toString());
+      if (this.getOwnerUUID() != null) {
+         var1.putUUID("Owner", this.getOwnerUUID());
       }
 
-      var1.putBoolean("Sitting", this.isSitting());
+      var1.putBoolean("Sitting", this.orderedToSit);
    }
 
    public void readAdditionalSaveData(CompoundTag var1) {
       super.readAdditionalSaveData(var1);
-      String var2;
-      if (var1.contains("OwnerUUID", 8)) {
-         var2 = var1.getString("OwnerUUID");
+      UUID var2;
+      if (var1.hasUUID("Owner")) {
+         var2 = var1.getUUID("Owner");
       } else {
          String var3 = var1.getString("Owner");
          var2 = OldUsersConverter.convertMobOwnerIfNecessary(this.getServer(), var3);
       }
 
-      if (!var2.isEmpty()) {
+      if (var2 != null) {
          try {
-            this.setOwnerUUID(UUID.fromString(var2));
+            this.setOwnerUUID(var2);
             this.setTame(true);
          } catch (Throwable var4) {
             this.setTame(false);
          }
       }
 
-      if (this.sitGoal != null) {
-         this.sitGoal.wantToSit(var1.getBoolean("Sitting"));
-      }
-
-      this.setSitting(var1.getBoolean("Sitting"));
+      this.orderedToSit = var1.getBoolean("Sitting");
+      this.setInSittingPose(this.orderedToSit);
    }
 
    public boolean canBeLeashed(Player var1) {
       return !this.isLeashed();
    }
@@ -119,15 +114,15 @@
    }
 
    protected void reassessTameGoals() {
    }
 
-   public boolean isSitting() {
+   public boolean isInSittingPose() {
       return ((Byte)this.entityData.get(DATA_FLAGS_ID) & 1) != 0;
    }
 
-   public void setSitting(boolean var1) {
+   public void setInSittingPose(boolean var1) {
       byte var2 = (Byte)this.entityData.get(DATA_FLAGS_ID);
       if (var1) {
          this.entityData.set(DATA_FLAGS_ID, (byte)(var2 | 1));
       } else {
          this.entityData.set(DATA_FLAGS_ID, (byte)(var2 & -2));
@@ -169,14 +164,10 @@
 
    public boolean isOwnedBy(LivingEntity var1) {
       return var1 == this.getOwner();
    }
 
-   public SitGoal getSitGoal() {
-      return this.sitGoal;
-   }
-
    public boolean wantsToAttack(LivingEntity var1, LivingEntity var2) {
       return true;
    }
 
    public Team getTeam() {
@@ -205,16 +196,24 @@
       return super.isAlliedTo(var1);
    }
 
    public void die(DamageSource var1) {
       if (!this.level.isClientSide && this.level.getGameRules().getBoolean(GameRules.RULE_SHOWDEATHMESSAGES) && this.getOwner() instanceof ServerPlayer) {
-         this.getOwner().sendMessage(this.getCombatTracker().getDeathMessage());
+         this.getOwner().sendMessage(this.getCombatTracker().getDeathMessage(), Util.NIL_UUID);
       }
 
       super.die(var1);
    }
 
+   public boolean isOrderedToSit() {
+      return this.orderedToSit;
+   }
+
+   public void setOrderedToSit(boolean var1) {
+      this.orderedToSit = var1;
+   }
+
    static {
       DATA_FLAGS_ID = SynchedEntityData.defineId(TamableAnimal.class, EntityDataSerializers.BYTE);
       DATA_OWNERUUID_ID = SynchedEntityData.defineId(TamableAnimal.class, EntityDataSerializers.OPTIONAL_UUID);
    }
 }
