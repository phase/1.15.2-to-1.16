--- net/minecraft/world/entity/item/ItemEntity.java
+++ net/minecraft/world/entity/item/ItemEntity.java
@@ -5,18 +5,18 @@
 import java.util.Objects;
 import java.util.UUID;
 import javax.annotation.Nullable;
 import net.minecraft.core.BlockPos;
 import net.minecraft.nbt.CompoundTag;
-import net.minecraft.nbt.NbtUtils;
 import net.minecraft.network.chat.Component;
 import net.minecraft.network.chat.TranslatableComponent;
 import net.minecraft.network.protocol.Packet;
 import net.minecraft.network.protocol.game.ClientboundAddEntityPacket;
 import net.minecraft.network.syncher.EntityDataAccessor;
 import net.minecraft.network.syncher.EntityDataSerializers;
 import net.minecraft.network.syncher.SynchedEntityData;
+import net.minecraft.resources.ResourceKey;
 import net.minecraft.sounds.SoundEvents;
 import net.minecraft.stats.Stats;
 import net.minecraft.tags.FluidTags;
 import net.minecraft.util.Mth;
 import net.minecraft.world.damagesource.DamageSource;
@@ -26,11 +26,10 @@
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.item.Item;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.Items;
 import net.minecraft.world.level.Level;
-import net.minecraft.world.level.dimension.DimensionType;
 import net.minecraft.world.phys.Vec3;
 
 public class ItemEntity extends Entity {
    private static final EntityDataAccessor<ItemStack> DATA_ITEM;
    private int age;
@@ -56,10 +55,19 @@
    public ItemEntity(Level var1, double var2, double var4, double var6, ItemStack var8) {
       this(var1, var2, var4, var6);
       this.setItem(var8);
    }
 
+   private ItemEntity(ItemEntity var1) {
+      super(var1.getType(), var1.level);
+      this.health = 5;
+      this.setItem(var1.getItem().copy());
+      this.copyPosition(var1);
+      this.age = var1.age;
+      this.bobOffs = var1.bobOffs;
+   }
+
    protected boolean isMovementNoisy() {
       return false;
    }
 
    protected void defineSynchedData() {
@@ -79,10 +87,12 @@
          this.yo = this.getY();
          this.zo = this.getZ();
          Vec3 var1 = this.getDeltaMovement();
          if (this.isUnderLiquid(FluidTags.WATER)) {
             this.setUnderwaterMovement();
+         } else if (this.isUnderLiquid(FluidTags.LAVA)) {
+            this.setUnderLavaMovement();
          } else if (!this.isNoGravity()) {
             this.setDeltaMovement(this.getDeltaMovement().add(0.0D, -0.04D, 0.0D));
          }
 
          if (this.level.isClientSide) {
@@ -108,12 +118,11 @@
          }
 
          boolean var6 = Mth.floor(this.xo) != Mth.floor(this.getX()) || Mth.floor(this.yo) != Mth.floor(this.getY()) || Mth.floor(this.zo) != Mth.floor(this.getZ());
          int var3 = var6 ? 2 : 40;
          if (this.tickCount % var3 == 0) {
-            if (this.level.getFluidState(new BlockPos(this)).is(FluidTags.LAVA)) {
-               this.setDeltaMovement((double)((this.random.nextFloat() - this.random.nextFloat()) * 0.2F), 0.20000000298023224D, (double)((this.random.nextFloat() - this.random.nextFloat()) * 0.2F));
+            if (this.level.getFluidState(this.blockPosition()).is(FluidTags.LAVA) && !this.fireImmune()) {
                this.playSound(SoundEvents.GENERIC_BURN, 0.4F, 2.0F + this.random.nextFloat() * 0.4F);
             }
 
             if (!this.level.isClientSide && this.isMergable()) {
                this.mergeWithNeighbours();
@@ -122,11 +131,11 @@
 
          if (this.age != -32768) {
             ++this.age;
          }
 
-         this.hasImpulse |= this.updateInWaterState();
+         this.hasImpulse |= this.updateInWaterStateAndDoFluidPushing();
          if (!this.level.isClientSide) {
             double var4 = this.getDeltaMovement().subtract(var1).lengthSqr();
             if (var4 > 0.01D) {
                this.hasImpulse = true;
             }
@@ -142,10 +151,15 @@
    private void setUnderwaterMovement() {
       Vec3 var1 = this.getDeltaMovement();
       this.setDeltaMovement(var1.x * 0.9900000095367432D, var1.y + (double)(var1.y < 0.05999999865889549D ? 5.0E-4F : 0.0F), var1.z * 0.9900000095367432D);
    }
 
+   private void setUnderLavaMovement() {
+      Vec3 var1 = this.getDeltaMovement();
+      this.setDeltaMovement(var1.x * 0.949999988079071D, var1.y + (double)(var1.y < 0.05999999865889549D ? 5.0E-4F : 0.0F), var1.z * 0.949999988079071D);
+   }
+
    private void mergeWithNeighbours() {
       if (this.isMergable()) {
          List var1 = this.level.getEntitiesOfClass(ItemEntity.class, this.getBoundingBox().inflate(0.5D, 0.0D, 0.5D), (var1x) -> {
             return var1x != this && var1x.isMergable();
          });
@@ -215,19 +229,21 @@
          var2.remove();
       }
 
    }
 
-   protected void burn(int var1) {
-      this.hurt(DamageSource.IN_FIRE, (float)var1);
+   public boolean fireImmune() {
+      return this.getItem().getItem().isFireResistant() || super.fireImmune();
    }
 
    public boolean hurt(DamageSource var1, float var2) {
       if (this.isInvulnerableTo(var1)) {
          return false;
       } else if (!this.getItem().isEmpty() && this.getItem().getItem() == Items.NETHER_STAR && var1.isExplosion()) {
          return false;
+      } else if (!this.getItem().getItem().canBeHurtBy(var1)) {
+         return false;
       } else {
          this.markHurt();
          this.health = (int)((float)this.health - var2);
          if (this.health <= 0) {
             this.remove();
@@ -240,15 +256,15 @@
    public void addAdditionalSaveData(CompoundTag var1) {
       var1.putShort("Health", (short)this.health);
       var1.putShort("Age", (short)this.age);
       var1.putShort("PickupDelay", (short)this.pickupDelay);
       if (this.getThrower() != null) {
-         var1.put("Thrower", NbtUtils.createUUIDTag(this.getThrower()));
+         var1.putUUID("Thrower", this.getThrower());
       }
 
       if (this.getOwner() != null) {
-         var1.put("Owner", NbtUtils.createUUIDTag(this.getOwner()));
+         var1.putUUID("Owner", this.getOwner());
       }
 
       if (!this.getItem().isEmpty()) {
          var1.put("Item", this.getItem().save(new CompoundTag()));
       }
@@ -260,16 +276,16 @@
       this.age = var1.getShort("Age");
       if (var1.contains("PickupDelay")) {
          this.pickupDelay = var1.getShort("PickupDelay");
       }
 
-      if (var1.contains("Owner", 10)) {
-         this.owner = NbtUtils.loadUUIDTag(var1.getCompound("Owner"));
+      if (var1.hasUUID("Owner")) {
+         this.owner = var1.getUUID("Owner");
       }
 
-      if (var1.contains("Thrower", 10)) {
-         this.thrower = NbtUtils.loadUUIDTag(var1.getCompound("Thrower"));
+      if (var1.hasUUID("Thrower")) {
+         this.thrower = var1.getUUID("Thrower");
       }
 
       CompoundTag var2 = var1.getCompound("Item");
       this.setItem(ItemStack.of(var2));
       if (this.getItem().isEmpty()) {
@@ -296,19 +312,19 @@
       }
    }
 
    public Component getName() {
       Component var1 = this.getCustomName();
-      return (Component)(var1 != null ? var1 : new TranslatableComponent(this.getItem().getDescriptionId(), new Object[0]));
+      return (Component)(var1 != null ? var1 : new TranslatableComponent(this.getItem().getDescriptionId()));
    }
 
    public boolean isAttackable() {
       return false;
    }
 
    @Nullable
-   public Entity changeDimension(DimensionType var1) {
+   public Entity changeDimension(ResourceKey<Level> var1) {
       Entity var2 = super.changeDimension(var1);
       if (!this.level.isClientSide && var2 instanceof ItemEntity) {
          ((ItemEntity)var2).mergeWithNeighbours();
       }
 
@@ -321,10 +337,18 @@
 
    public void setItem(ItemStack var1) {
       this.getEntityData().set(DATA_ITEM, var1);
    }
 
+   public void onSyncedDataUpdated(EntityDataAccessor<?> var1) {
+      super.onSyncedDataUpdated(var1);
+      if (DATA_ITEM.equals(var1)) {
+         this.getItem().setEntityRepresentation(this);
+      }
+
+   }
+
    @Nullable
    public UUID getOwner() {
       return this.owner;
    }
 
@@ -372,13 +396,21 @@
    public void makeFakeItem() {
       this.setNeverPickUp();
       this.age = 5999;
    }
 
+   public float getSpin(float var1) {
+      return ((float)this.getAge() + var1) / 20.0F + this.bobOffs;
+   }
+
    public Packet<?> getAddEntityPacket() {
       return new ClientboundAddEntityPacket(this);
    }
 
+   public ItemEntity copy() {
+      return new ItemEntity(this);
+   }
+
    static {
       DATA_ITEM = SynchedEntityData.defineId(ItemEntity.class, EntityDataSerializers.ITEM_STACK);
    }
 }
