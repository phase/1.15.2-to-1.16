--- net/minecraft/world/entity/npc/VillagerData.java
+++ net/minecraft/world/entity/npc/VillagerData.java
@@ -1,29 +1,32 @@
 package net.minecraft.world.entity.npc;
 
-import com.google.common.collect.ImmutableMap;
-import com.mojang.datafixers.Dynamic;
-import com.mojang.datafixers.types.DynamicOps;
+import com.mojang.serialization.Codec;
+import com.mojang.serialization.codecs.RecordCodecBuilder;
 import net.minecraft.core.Registry;
-import net.minecraft.resources.ResourceLocation;
 
 public class VillagerData {
    private static final int[] NEXT_LEVEL_XP_THRESHOLDS = new int[]{0, 10, 70, 150, 250};
+   public static final Codec<VillagerData> CODEC = RecordCodecBuilder.create((var0) -> {
+      return var0.group(Registry.VILLAGER_TYPE.fieldOf("type").forGetter((var0x) -> {
+         return var0x.type;
+      }), Registry.VILLAGER_PROFESSION.fieldOf("profession").forGetter((var0x) -> {
+         return var0x.profession;
+      }), Codec.INT.fieldOf("level").withDefault(1).forGetter((var0x) -> {
+         return var0x.level;
+      })).apply(var0, VillagerData::new);
+   });
    private final VillagerType type;
    private final VillagerProfession profession;
    private final int level;
 
    public VillagerData(VillagerType var1, VillagerProfession var2, int var3) {
       this.type = var1;
       this.profession = var2;
       this.level = Math.max(1, var3);
    }
 
-   public VillagerData(Dynamic<?> var1) {
-      this((VillagerType)Registry.VILLAGER_TYPE.get(ResourceLocation.tryParse(var1.get("type").asString(""))), (VillagerProfession)Registry.VILLAGER_PROFESSION.get(ResourceLocation.tryParse(var1.get("profession").asString(""))), var1.get("level").asInt(1));
-   }
-
    public VillagerType getType() {
       return this.type;
    }
 
    public VillagerProfession getProfession() {
@@ -44,14 +47,10 @@
 
    public VillagerData setLevel(int var1) {
       return new VillagerData(this.type, this.profession, var1);
    }
 
-   public <T> T serialize(DynamicOps<T> var1) {
-      return var1.createMap(ImmutableMap.of(var1.createString("type"), var1.createString(Registry.VILLAGER_TYPE.getKey(this.type).toString()), var1.createString("profession"), var1.createString(Registry.VILLAGER_PROFESSION.getKey(this.profession).toString()), var1.createString("level"), var1.createInt(this.level)));
-   }
-
    public static int getMinXpPerLevel(int var0) {
       return canLevelUp(var0) ? NEXT_LEVEL_XP_THRESHOLDS[var0 - 1] : 0;
    }
 
    public static int getMaxXpPerLevel(int var0) {
