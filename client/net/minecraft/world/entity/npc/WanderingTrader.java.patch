--- net/minecraft/world/entity/npc/WanderingTrader.java
+++ net/minecraft/world/entity/npc/WanderingTrader.java
@@ -3,14 +3,16 @@
 import java.util.EnumSet;
 import javax.annotation.Nullable;
 import net.minecraft.core.BlockPos;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.NbtUtils;
+import net.minecraft.server.level.ServerLevel;
 import net.minecraft.sounds.SoundEvent;
 import net.minecraft.sounds.SoundEvents;
 import net.minecraft.stats.Stats;
 import net.minecraft.world.InteractionHand;
+import net.minecraft.world.InteractionResult;
 import net.minecraft.world.damagesource.DamageSource;
 import net.minecraft.world.entity.AgableMob;
 import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.entity.ExperienceOrb;
 import net.minecraft.world.entity.Mob;
@@ -28,10 +30,11 @@
 import net.minecraft.world.entity.monster.Evoker;
 import net.minecraft.world.entity.monster.Illusioner;
 import net.minecraft.world.entity.monster.Pillager;
 import net.minecraft.world.entity.monster.Vex;
 import net.minecraft.world.entity.monster.Vindicator;
+import net.minecraft.world.entity.monster.Zoglin;
 import net.minecraft.world.entity.monster.Zombie;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.item.Item;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.Items;
@@ -53,11 +56,11 @@
    }
 
    protected void registerGoals() {
       this.goalSelector.addGoal(0, new FloatGoal(this));
       this.goalSelector.addGoal(0, new UseItemGoal(this, PotionUtils.setPotion(new ItemStack(Items.POTION), Potions.INVISIBILITY), SoundEvents.WANDERING_TRADER_DISAPPEARED, (var1) -> {
-         return !this.level.isDay() && !var1.isInvisible();
+         return this.level.isNight() && !var1.isInvisible();
       }));
       this.goalSelector.addGoal(0, new UseItemGoal(this, new ItemStack(Items.MILK_BUCKET), SoundEvents.WANDERING_TRADER_REAPPEARED, (var1) -> {
          return this.level.isDay() && var1.isInvisible();
       }));
       this.goalSelector.addGoal(1, new TradeWithPlayerGoal(this));
@@ -65,48 +68,45 @@
       this.goalSelector.addGoal(1, new AvoidEntityGoal(this, Evoker.class, 12.0F, 0.5D, 0.5D));
       this.goalSelector.addGoal(1, new AvoidEntityGoal(this, Vindicator.class, 8.0F, 0.5D, 0.5D));
       this.goalSelector.addGoal(1, new AvoidEntityGoal(this, Vex.class, 8.0F, 0.5D, 0.5D));
       this.goalSelector.addGoal(1, new AvoidEntityGoal(this, Pillager.class, 15.0F, 0.5D, 0.5D));
       this.goalSelector.addGoal(1, new AvoidEntityGoal(this, Illusioner.class, 12.0F, 0.5D, 0.5D));
+      this.goalSelector.addGoal(1, new AvoidEntityGoal(this, Zoglin.class, 10.0F, 0.5D, 0.5D));
       this.goalSelector.addGoal(1, new PanicGoal(this, 0.5D));
       this.goalSelector.addGoal(1, new LookAtTradingPlayerGoal(this));
       this.goalSelector.addGoal(2, new WanderingTrader.WanderToPositionGoal(this, 2.0D, 0.35D));
       this.goalSelector.addGoal(4, new MoveTowardsRestrictionGoal(this, 0.35D));
       this.goalSelector.addGoal(8, new WaterAvoidingRandomStrollGoal(this, 0.35D));
       this.goalSelector.addGoal(9, new InteractGoal(this, Player.class, 3.0F, 1.0F));
       this.goalSelector.addGoal(10, new LookAtPlayerGoal(this, Mob.class, 8.0F));
    }
 
    @Nullable
-   public AgableMob getBreedOffspring(AgableMob var1) {
+   public AgableMob getBreedOffspring(ServerLevel var1, AgableMob var2) {
       return null;
    }
 
    public boolean showProgressBar() {
       return false;
    }
 
-   public boolean mobInteract(Player var1, InteractionHand var2) {
+   public InteractionResult mobInteract(Player var1, InteractionHand var2) {
       ItemStack var3 = var1.getItemInHand(var2);
-      boolean var4 = var3.getItem() == Items.NAME_TAG;
-      if (var4) {
-         var3.interactEnemy(var1, this, var2);
-         return true;
-      } else if (var3.getItem() != Items.VILLAGER_SPAWN_EGG && this.isAlive() && !this.isTrading() && !this.isBaby()) {
+      if (var3.getItem() != Items.VILLAGER_SPAWN_EGG && this.isAlive() && !this.isTrading() && !this.isBaby()) {
          if (var2 == InteractionHand.MAIN_HAND) {
             var1.awardStat(Stats.TALKED_TO_VILLAGER);
          }
 
          if (this.getOffers().isEmpty()) {
-            return super.mobInteract(var1, var2);
+            return InteractionResult.sidedSuccess(this.level.isClientSide);
          } else {
             if (!this.level.isClientSide) {
                this.setTradingPlayer(var1);
                this.openTradingScreen(var1, this.getDisplayName(), 1);
             }
 
-            return true;
+            return InteractionResult.sidedSuccess(this.level.isClientSide);
          }
       } else {
          return super.mobInteract(var1, var2);
       }
    }
