--- net/minecraft/world/entity/npc/Villager.java
+++ net/minecraft/world/entity/npc/Villager.java
@@ -1,12 +1,13 @@
 package net.minecraft.world.entity.npc;
 
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableMap;
 import com.google.common.collect.ImmutableSet;
-import com.mojang.datafixers.Dynamic;
 import com.mojang.datafixers.util.Pair;
+import com.mojang.serialization.DataResult;
+import com.mojang.serialization.Dynamic;
 import it.unimi.dsi.fastutil.ints.Int2ObjectMap;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
 import java.util.Optional;
@@ -33,10 +34,11 @@
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.sounds.SoundEvent;
 import net.minecraft.sounds.SoundEvents;
 import net.minecraft.stats.Stats;
 import net.minecraft.util.Mth;
+import net.minecraft.world.Difficulty;
 import net.minecraft.world.DifficultyInstance;
 import net.minecraft.world.InteractionHand;
 import net.minecraft.world.SimpleContainer;
 import net.minecraft.world.damagesource.DamageSource;
 import net.minecraft.world.effect.MobEffectInstance;
@@ -44,14 +46,17 @@
 import net.minecraft.world.entity.AgableMob;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.entity.ExperienceOrb;
 import net.minecraft.world.entity.LivingEntity;
+import net.minecraft.world.entity.Mob;
 import net.minecraft.world.entity.MobSpawnType;
 import net.minecraft.world.entity.ReputationEventHandler;
 import net.minecraft.world.entity.SpawnGroupData;
 import net.minecraft.world.entity.ai.Brain;
+import net.minecraft.world.entity.ai.attributes.AttributeSupplier;
+import net.minecraft.world.entity.ai.attributes.Attributes;
 import net.minecraft.world.entity.ai.behavior.VillagerGoalPackages;
 import net.minecraft.world.entity.ai.gossip.GossipContainer;
 import net.minecraft.world.entity.ai.gossip.GossipType;
 import net.minecraft.world.entity.ai.memory.MemoryModuleType;
 import net.minecraft.world.entity.ai.memory.MemoryStatus;
@@ -62,11 +67,10 @@
 import net.minecraft.world.entity.ai.village.poi.PoiManager;
 import net.minecraft.world.entity.ai.village.poi.PoiType;
 import net.minecraft.world.entity.animal.IronGolem;
 import net.minecraft.world.entity.global.LightningBolt;
 import net.minecraft.world.entity.item.ItemEntity;
-import net.minecraft.world.entity.monster.SharedMonsterAttributes;
 import net.minecraft.world.entity.monster.Witch;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.entity.raid.Raid;
 import net.minecraft.world.entity.schedule.Activity;
 import net.minecraft.world.entity.schedule.Schedule;
@@ -76,10 +80,11 @@
 import net.minecraft.world.item.trading.MerchantOffer;
 import net.minecraft.world.item.trading.MerchantOffers;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.LevelAccessor;
 import net.minecraft.world.phys.AABB;
+import org.apache.logging.log4j.Logger;
 
 public class Villager extends AbstractVillager implements ReputationEventHandler, VillagerDataHolder {
    private static final EntityDataAccessor<VillagerData> DATA_VILLAGER_DATA;
    public static final Map<Item, Integer> FOOD_POINTS;
    private static final Set<Item> WANTED_ITEMS;
@@ -93,10 +98,11 @@
    private long lastGossipDecayTime;
    private int villagerXp;
    private long lastRestockGameTime;
    private int numberOfRestocksToday;
    private long lastRestockCheckDayTime;
+   private boolean assignProfessionWhenSpawned;
    private static final ImmutableList<MemoryModuleType<?>> MEMORY_TYPES;
    private static final ImmutableList<SensorType<? extends Sensor<? super Villager>>> SENSOR_TYPES;
    public static final Map<MemoryModuleType<GlobalPos>, BiPredicate<Villager, PoiType>> POI_MEMORIES;
 
    public Villager(EntityType<? extends Villager> var1, Level var2) {
@@ -108,73 +114,81 @@
       this.gossips = new GossipContainer();
       ((GroundPathNavigation)this.getNavigation()).setCanOpenDoors(true);
       this.getNavigation().setCanFloat(true);
       this.setCanPickUpLoot(true);
       this.setVillagerData(this.getVillagerData().setType(var3).setProfession(VillagerProfession.NONE));
-      this.brain = this.makeBrain(new Dynamic(NbtOps.INSTANCE, new CompoundTag()));
    }
 
    public Brain<Villager> getBrain() {
       return super.getBrain();
    }
 
+   protected Brain.Provider<Villager> brainProvider() {
+      return Brain.provider(MEMORY_TYPES, SENSOR_TYPES);
+   }
+
    protected Brain<?> makeBrain(Dynamic<?> var1) {
-      Brain var2 = new Brain(MEMORY_TYPES, SENSOR_TYPES, var1);
+      Brain var2 = this.brainProvider().makeBrain(var1);
       this.registerBrainGoals(var2);
       return var2;
    }
 
    public void refreshBrain(ServerLevel var1) {
       Brain var2 = this.getBrain();
       var2.stopAll(var1, this);
-      this.brain = var2.copyWithoutGoals();
+      this.brain = var2.copyWithoutBehaviors();
       this.registerBrainGoals(this.getBrain());
    }
 
    private void registerBrainGoals(Brain<Villager> var1) {
       VillagerProfession var2 = this.getVillagerData().getProfession();
-      float var3 = (float)this.getAttribute(SharedMonsterAttributes.MOVEMENT_SPEED).getValue();
       if (this.isBaby()) {
          var1.setSchedule(Schedule.VILLAGER_BABY);
-         var1.addActivity(Activity.PLAY, VillagerGoalPackages.getPlayPackage(var3));
+         var1.addActivity(Activity.PLAY, VillagerGoalPackages.getPlayPackage(0.5F));
       } else {
          var1.setSchedule(Schedule.VILLAGER_DEFAULT);
-         var1.addActivity(Activity.WORK, VillagerGoalPackages.getWorkPackage(var2, var3), ImmutableSet.of(Pair.of(MemoryModuleType.JOB_SITE, MemoryStatus.VALUE_PRESENT)));
+         var1.addActivityWithConditions(Activity.WORK, VillagerGoalPackages.getWorkPackage(var2, 0.5F), ImmutableSet.of(Pair.of(MemoryModuleType.JOB_SITE, MemoryStatus.VALUE_PRESENT)));
       }
 
-      var1.addActivity(Activity.CORE, VillagerGoalPackages.getCorePackage(var2, var3));
-      var1.addActivity(Activity.MEET, VillagerGoalPackages.getMeetPackage(var2, var3), ImmutableSet.of(Pair.of(MemoryModuleType.MEETING_POINT, MemoryStatus.VALUE_PRESENT)));
-      var1.addActivity(Activity.REST, VillagerGoalPackages.getRestPackage(var2, var3));
-      var1.addActivity(Activity.IDLE, VillagerGoalPackages.getIdlePackage(var2, var3));
-      var1.addActivity(Activity.PANIC, VillagerGoalPackages.getPanicPackage(var2, var3));
-      var1.addActivity(Activity.PRE_RAID, VillagerGoalPackages.getPreRaidPackage(var2, var3));
-      var1.addActivity(Activity.RAID, VillagerGoalPackages.getRaidPackage(var2, var3));
-      var1.addActivity(Activity.HIDE, VillagerGoalPackages.getHidePackage(var2, var3));
+      var1.addActivity(Activity.CORE, VillagerGoalPackages.getCorePackage(var2, 0.5F));
+      var1.addActivityWithConditions(Activity.MEET, VillagerGoalPackages.getMeetPackage(var2, 0.5F), ImmutableSet.of(Pair.of(MemoryModuleType.MEETING_POINT, MemoryStatus.VALUE_PRESENT)));
+      var1.addActivity(Activity.REST, VillagerGoalPackages.getRestPackage(var2, 0.5F));
+      var1.addActivity(Activity.IDLE, VillagerGoalPackages.getIdlePackage(var2, 0.5F));
+      var1.addActivity(Activity.PANIC, VillagerGoalPackages.getPanicPackage(var2, 0.5F));
+      var1.addActivity(Activity.PRE_RAID, VillagerGoalPackages.getPreRaidPackage(var2, 0.5F));
+      var1.addActivity(Activity.RAID, VillagerGoalPackages.getRaidPackage(var2, 0.5F));
+      var1.addActivity(Activity.HIDE, VillagerGoalPackages.getHidePackage(var2, 0.5F));
       var1.setCoreActivities(ImmutableSet.of(Activity.CORE));
       var1.setDefaultActivity(Activity.IDLE);
-      var1.setActivity(Activity.IDLE);
-      var1.updateActivity(this.level.getDayTime(), this.level.getGameTime());
+      var1.setActiveActivityIfPossible(Activity.IDLE);
+      var1.updateActivityFromSchedule(this.level.getDayTime(), this.level.getGameTime());
    }
 
    protected void ageBoundaryReached() {
       super.ageBoundaryReached();
       if (this.level instanceof ServerLevel) {
          this.refreshBrain((ServerLevel)this.level);
       }
 
    }
 
-   protected void registerAttributes() {
-      super.registerAttributes();
-      this.getAttribute(SharedMonsterAttributes.MOVEMENT_SPEED).setBaseValue(0.5D);
-      this.getAttribute(SharedMonsterAttributes.FOLLOW_RANGE).setBaseValue(48.0D);
+   public static AttributeSupplier.Builder createAttributes() {
+      return Mob.createMobAttributes().add(Attributes.MOVEMENT_SPEED, 0.5D).add(Attributes.FOLLOW_RANGE, 48.0D);
    }
 
+   public boolean assignProfessionWhenSpawned() {
+      return this.assignProfessionWhenSpawned;
+   }
+
    protected void customServerAiStep() {
-      this.level.getProfiler().push("brain");
+      this.level.getProfiler().push("villagerBrain");
       this.getBrain().tick((ServerLevel)this.level, this);
       this.level.getProfiler().pop();
+      if (this.assignProfessionWhenSpawned) {
+         this.assignProfessionWhenSpawned = false;
+      }
+
       if (!this.isTrading() && this.updateMerchantTimer > 0) {
          --this.updateMerchantTimer;
          if (this.updateMerchantTimer <= 0) {
             if (this.increaseProfessionLevelOnUpdate) {
                this.increaseMerchantCareer();
@@ -190,11 +204,11 @@
          this.level.broadcastEntityEvent(this, (byte)14);
          this.lastTradedPlayer = null;
       }
 
       if (!this.isNoAi() && this.random.nextInt(100) == 0) {
-         Raid var1 = ((ServerLevel)this.level).getRaidAt(new BlockPos(this));
+         Raid var1 = ((ServerLevel)this.level).getRaidAt(this.blockPosition());
          if (var1 != null && var1.isActive() && !var1.isOver()) {
             this.level.broadcastEntityEvent(this, (byte)42);
          }
       }
 
@@ -214,29 +228,25 @@
       this.maybeDecayGossip();
    }
 
    public boolean mobInteract(Player var1, InteractionHand var2) {
       ItemStack var3 = var1.getItemInHand(var2);
-      boolean var4 = var3.getItem() == Items.NAME_TAG;
-      if (var4) {
-         var3.interactEnemy(var1, this, var2);
-         return true;
-      } else if (var3.getItem() != Items.VILLAGER_SPAWN_EGG && this.isAlive() && !this.isTrading() && !this.isSleeping()) {
+      if (var3.getItem() != Items.VILLAGER_SPAWN_EGG && this.isAlive() && !this.isTrading() && !this.isSleeping()) {
          if (this.isBaby()) {
             this.setUnhappy();
             return super.mobInteract(var1, var2);
          } else {
-            boolean var5 = this.getOffers().isEmpty();
+            boolean var4 = this.getOffers().isEmpty();
             if (var2 == InteractionHand.MAIN_HAND) {
-               if (var5 && !this.level.isClientSide) {
+               if (var4 && !this.level.isClientSide) {
                   this.setUnhappy();
                }
 
                var1.awardStat(Stats.TALKED_TO_VILLAGER);
             }
 
-            if (var5) {
+            if (var4) {
                return super.mobInteract(var1, var2);
             } else {
                if (!this.level.isClientSide && !this.offers.isEmpty()) {
                   this.startTrading(var1);
                }
@@ -298,14 +308,10 @@
       while(var1.hasNext()) {
          MerchantOffer var2 = (MerchantOffer)var1.next();
          var2.resetUses();
       }
 
-      if (this.getVillagerData().getProfession() == VillagerProfession.FARMER) {
-         this.makeBread();
-      }
-
       this.lastRestockGameTime = this.level.getGameTime();
       ++this.numberOfRestocksToday;
    }
 
    private boolean needsToRestock() {
@@ -405,35 +411,47 @@
       this.entityData.define(DATA_VILLAGER_DATA, new VillagerData(VillagerType.PLAINS, VillagerProfession.NONE, 1));
    }
 
    public void addAdditionalSaveData(CompoundTag var1) {
       super.addAdditionalSaveData(var1);
-      var1.put("VillagerData", (Tag)this.getVillagerData().serialize(NbtOps.INSTANCE));
+      DataResult var10000 = VillagerData.CODEC.encodeStart(NbtOps.INSTANCE, this.getVillagerData());
+      Logger var10001 = LOGGER;
+      var10001.getClass();
+      var10000.resultOrPartial(var10001::error).ifPresent((var1x) -> {
+         var1.put("VillagerData", var1x);
+      });
       var1.putByte("FoodLevel", this.foodLevel);
       var1.put("Gossips", (Tag)this.gossips.store(NbtOps.INSTANCE).getValue());
       var1.putInt("Xp", this.villagerXp);
       var1.putLong("LastRestock", this.lastRestockGameTime);
       var1.putLong("LastGossipDecay", this.lastGossipDecayTime);
       var1.putInt("RestocksToday", this.numberOfRestocksToday);
+      if (this.assignProfessionWhenSpawned) {
+         var1.putBoolean("AssignProfessionWhenSpawned", true);
+      }
+
    }
 
    public void readAdditionalSaveData(CompoundTag var1) {
       super.readAdditionalSaveData(var1);
       if (var1.contains("VillagerData", 10)) {
-         this.setVillagerData(new VillagerData(new Dynamic(NbtOps.INSTANCE, var1.get("VillagerData"))));
+         DataResult var2 = VillagerData.CODEC.parse(new Dynamic(NbtOps.INSTANCE, var1.get("VillagerData")));
+         Logger var10001 = LOGGER;
+         var10001.getClass();
+         var2.resultOrPartial(var10001::error).ifPresent(this::setVillagerData);
       }
 
       if (var1.contains("Offers", 10)) {
          this.offers = new MerchantOffers(var1.getCompound("Offers"));
       }
 
       if (var1.contains("FoodLevel", 1)) {
          this.foodLevel = var1.getByte("FoodLevel");
       }
 
-      ListTag var2 = var1.getList("Gossips", 10);
-      this.gossips.update(new Dynamic(NbtOps.INSTANCE, var2));
+      ListTag var3 = var1.getList("Gossips", 10);
+      this.gossips.update(new Dynamic(NbtOps.INSTANCE, var3));
       if (var1.contains("Xp", 3)) {
          this.villagerXp = var1.getInt("Xp");
       }
 
       this.lastRestockGameTime = var1.getLong("LastRestock");
@@ -442,10 +460,14 @@
       if (this.level instanceof ServerLevel) {
          this.refreshBrain((ServerLevel)this.level);
       }
 
       this.numberOfRestocksToday = var1.getInt("RestocksToday");
+      if (var1.contains("AssignProfessionWhenSpawned")) {
+         this.assignProfessionWhenSpawned = var1.getBoolean("AssignProfessionWhenSpawned");
+      }
+
    }
 
    public boolean removeWhenFarAway(double var1) {
       return false;
    }
@@ -618,11 +640,11 @@
       this.setVillagerData(this.getVillagerData().setLevel(this.getVillagerData().getLevel() + 1));
       this.updateTrades();
    }
 
    protected Component getTypeName() {
-      return new TranslatableComponent(this.getType().getDescriptionId() + '.' + Registry.VILLAGER_PROFESSION.getKey(this.getVillagerData().getProfession()).getPath(), new Object[0]);
+      return new TranslatableComponent(this.getType().getDescriptionId() + '.' + Registry.VILLAGER_PROFESSION.getKey(this.getVillagerData().getProfession()).getPath());
    }
 
    public void handleEntityEvent(byte var1) {
       if (var1 == 12) {
          this.addParticlesAroundSelf(ParticleTypes.HEART);
@@ -643,90 +665,84 @@
       if (var3 == MobSpawnType.BREEDING) {
          this.setVillagerData(this.getVillagerData().setProfession(VillagerProfession.NONE));
       }
 
       if (var3 == MobSpawnType.COMMAND || var3 == MobSpawnType.SPAWN_EGG || var3 == MobSpawnType.SPAWNER || var3 == MobSpawnType.DISPENSER) {
-         this.setVillagerData(this.getVillagerData().setType(VillagerType.byBiome(var1.getBiome(new BlockPos(this)))));
+         this.setVillagerData(this.getVillagerData().setType(VillagerType.byBiome(var1.getBiome(this.blockPosition()))));
       }
 
+      if (var3 == MobSpawnType.STRUCTURE) {
+         this.assignProfessionWhenSpawned = true;
+      }
+
       return super.finalizeSpawn(var1, var2, var3, var4, var5);
    }
 
    public Villager getBreedOffspring(AgableMob var1) {
       double var3 = this.random.nextDouble();
       VillagerType var2;
       if (var3 < 0.5D) {
-         var2 = VillagerType.byBiome(this.level.getBiome(new BlockPos(this)));
+         var2 = VillagerType.byBiome(this.level.getBiome(this.blockPosition()));
       } else if (var3 < 0.75D) {
          var2 = this.getVillagerData().getType();
       } else {
          var2 = ((Villager)var1).getVillagerData().getType();
       }
 
       Villager var5 = new Villager(EntityType.VILLAGER, this.level, var2);
-      var5.finalizeSpawn(this.level, this.level.getCurrentDifficultyAt(new BlockPos(var5)), MobSpawnType.BREEDING, (SpawnGroupData)null, (CompoundTag)null);
+      var5.finalizeSpawn(this.level, this.level.getCurrentDifficultyAt(var5.blockPosition()), MobSpawnType.BREEDING, (SpawnGroupData)null, (CompoundTag)null);
       return var5;
    }
 
    public void thunderHit(LightningBolt var1) {
-      Witch var2 = (Witch)EntityType.WITCH.create(this.level);
-      var2.moveTo(this.getX(), this.getY(), this.getZ(), this.yRot, this.xRot);
-      var2.finalizeSpawn(this.level, this.level.getCurrentDifficultyAt(new BlockPos(var2)), MobSpawnType.CONVERSION, (SpawnGroupData)null, (CompoundTag)null);
-      var2.setNoAi(this.isNoAi());
-      if (this.hasCustomName()) {
-         var2.setCustomName(this.getCustomName());
-         var2.setCustomNameVisible(this.isCustomNameVisible());
+      if (this.level.getDifficulty() != Difficulty.PEACEFUL) {
+         LOGGER.info("Villager {} was struck by lightning {}.", this, var1);
+         Witch var2 = (Witch)EntityType.WITCH.create(this.level);
+         var2.moveTo(this.getX(), this.getY(), this.getZ(), this.yRot, this.xRot);
+         var2.finalizeSpawn(this.level, this.level.getCurrentDifficultyAt(var2.blockPosition()), MobSpawnType.CONVERSION, (SpawnGroupData)null, (CompoundTag)null);
+         var2.setNoAi(this.isNoAi());
+         if (this.hasCustomName()) {
+            var2.setCustomName(this.getCustomName());
+            var2.setCustomNameVisible(this.isCustomNameVisible());
+         }
+
+         if (this.getVillagerXp() > 0) {
+            var2.setPersistenceRequired();
+         }
+
+         this.level.addFreshEntity(var2);
+         this.remove();
+      } else {
+         super.thunderHit(var1);
       }
 
-      this.level.addFreshEntity(var2);
-      this.remove();
    }
 
    protected void pickUpItem(ItemEntity var1) {
       ItemStack var2 = var1.getItem();
-      Item var3 = var2.getItem();
-      if (this.wantToPickUp(var3)) {
-         SimpleContainer var4 = this.getInventory();
-         boolean var5 = false;
-
-         int var6;
-         ItemStack var7;
-         for(var6 = 0; var6 < var4.getContainerSize(); ++var6) {
-            var7 = var4.getItem(var6);
-            if (var7.isEmpty() || var7.getItem() == var3 && var7.getCount() < var7.getMaxStackSize()) {
-               var5 = true;
-               break;
-            }
-         }
-
-         if (!var5) {
+      if (this.wantsToPickUp(var2)) {
+         SimpleContainer var3 = this.getInventory();
+         boolean var4 = var3.canAddItem(var2);
+         if (!var4) {
             return;
          }
 
-         var6 = var4.countItem(var3);
-         if (var6 == 256) {
-            return;
-         }
-
-         if (var6 > 256) {
-            var4.removeItemType(var3, var6 - 256);
-            return;
-         }
-
+         this.onItemPickup(var1);
          this.take(var1, var2.getCount());
-         var7 = var4.addItem(var2);
-         if (var7.isEmpty()) {
+         ItemStack var5 = var3.addItem(var2);
+         if (var5.isEmpty()) {
             var1.remove();
          } else {
-            var2.setCount(var7.getCount());
+            var2.setCount(var5.getCount());
          }
       }
 
    }
 
-   public boolean wantToPickUp(Item var1) {
-      return WANTED_ITEMS.contains(var1) || this.getVillagerData().getProfession().getRequestedItems().contains(var1);
+   public boolean wantsToPickUp(ItemStack var1) {
+      Item var2 = var1.getItem();
+      return (WANTED_ITEMS.contains(var2) || this.getVillagerData().getProfession().getRequestedItems().contains(var2)) && this.getInventory().canAddItem(var1);
    }
 
    public boolean hasExcessFood() {
       return this.countFoodPointsInInventory() >= 24;
    }
@@ -740,28 +756,12 @@
       return FOOD_POINTS.entrySet().stream().mapToInt((var1x) -> {
          return var1.countItem((Item)var1x.getKey()) * (Integer)var1x.getValue();
       }).sum();
    }
 
-   private void makeBread() {
-      SimpleContainer var1 = this.getInventory();
-      int var2 = var1.countItem(Items.WHEAT);
-      int var3 = var2 / 3;
-      if (var3 != 0) {
-         int var4 = var3 * 3;
-         var1.removeItemType(Items.WHEAT, var4);
-         ItemStack var5 = var1.addItem(new ItemStack(Items.BREAD, var3));
-         if (!var5.isEmpty()) {
-            this.spawnAtLocation(var5, 0.5F);
-         }
-
-      }
-   }
-
    public boolean hasFarmSeeds() {
-      SimpleContainer var1 = this.getInventory();
-      return var1.hasAnyOf(ImmutableSet.of(Items.WHEAT_SEEDS, Items.POTATO, Items.CARROT, Items.BEETROOT_SEEDS));
+      return this.getInventory().hasAnyOf(ImmutableSet.of(Items.WHEAT_SEEDS, Items.POTATO, Items.CARROT, Items.BEETROOT_SEEDS));
    }
 
    protected void updateTrades() {
       VillagerData var1 = this.getVillagerData();
       Int2ObjectMap var2 = (Int2ObjectMap)VillagerTrades.TRADES.get(var1.getProfession());
@@ -824,25 +824,20 @@
          return var1 - var4 <= 600L;
       }
    }
 
    public boolean wantsToSpawnGolem(long var1) {
-      VillagerData var3 = this.getVillagerData();
-      if (var3.getProfession() != VillagerProfession.NONE && var3.getProfession() != VillagerProfession.NITWIT) {
-         if (!this.golemSpawnConditionsMet(this.level.getGameTime())) {
-            return false;
-         } else {
-            return !this.hasSeenGolemRecently(var1);
-         }
-      } else {
+      if (!this.golemSpawnConditionsMet(this.level.getGameTime())) {
          return false;
+      } else {
+         return !this.hasSeenGolemRecently(var1);
       }
    }
 
    @Nullable
    private IronGolem trySpawnGolem() {
-      BlockPos var1 = new BlockPos(this);
+      BlockPos var1 = this.blockPosition();
 
       for(int var2 = 0; var2 < 10; ++var2) {
          double var3 = (double)(this.level.random.nextInt(16) - 8);
          double var5 = (double)(this.level.random.nextInt(16) - 8);
          double var7 = 6.0D;
@@ -911,37 +906,40 @@
    }
 
    public void startSleeping(BlockPos var1) {
       super.startSleeping(var1);
       this.brain.setMemory(MemoryModuleType.LAST_SLEPT, (Object)SerializableLong.of(this.level.getGameTime()));
+      this.brain.eraseMemory(MemoryModuleType.WALK_TARGET);
+      this.brain.eraseMemory(MemoryModuleType.CANT_REACH_WALK_TARGET_SINCE);
    }
 
    public void stopSleeping() {
       super.stopSleeping();
       this.brain.setMemory(MemoryModuleType.LAST_WOKEN, (Object)SerializableLong.of(this.level.getGameTime()));
    }
 
    private boolean golemSpawnConditionsMet(long var1) {
       Optional var3 = this.brain.getMemory(MemoryModuleType.LAST_SLEPT);
-      Optional var4 = this.brain.getMemory(MemoryModuleType.LAST_WORKED_AT_POI);
-      if (var3.isPresent() && var4.isPresent()) {
-         return var1 - ((SerializableLong)var3.get()).value() < 24000L && var1 - ((SerializableLong)var4.get()).value() < 36000L;
+      if (var3.isPresent()) {
+         return var1 - ((SerializableLong)var3.get()).value() < 24000L;
       } else {
          return false;
       }
    }
 
    static {
       DATA_VILLAGER_DATA = SynchedEntityData.defineId(Villager.class, EntityDataSerializers.VILLAGER_DATA);
       FOOD_POINTS = ImmutableMap.of(Items.BREAD, 4, Items.POTATO, 1, Items.CARROT, 1, Items.BEETROOT, 1);
       WANTED_ITEMS = ImmutableSet.of(Items.BREAD, Items.POTATO, Items.CARROT, Items.WHEAT, Items.WHEAT_SEEDS, Items.BEETROOT, new Item[]{Items.BEETROOT_SEEDS});
-      MEMORY_TYPES = ImmutableList.of(MemoryModuleType.HOME, MemoryModuleType.JOB_SITE, MemoryModuleType.MEETING_POINT, MemoryModuleType.LIVING_ENTITIES, MemoryModuleType.VISIBLE_LIVING_ENTITIES, MemoryModuleType.VISIBLE_VILLAGER_BABIES, MemoryModuleType.NEAREST_PLAYERS, MemoryModuleType.NEAREST_VISIBLE_PLAYER, MemoryModuleType.WALK_TARGET, MemoryModuleType.LOOK_TARGET, MemoryModuleType.INTERACTION_TARGET, MemoryModuleType.BREED_TARGET, new MemoryModuleType[]{MemoryModuleType.PATH, MemoryModuleType.INTERACTABLE_DOORS, MemoryModuleType.OPENED_DOORS, MemoryModuleType.NEAREST_BED, MemoryModuleType.HURT_BY, MemoryModuleType.HURT_BY_ENTITY, MemoryModuleType.NEAREST_HOSTILE, MemoryModuleType.SECONDARY_JOB_SITE, MemoryModuleType.HIDING_PLACE, MemoryModuleType.HEARD_BELL_TIME, MemoryModuleType.CANT_REACH_WALK_TARGET_SINCE, MemoryModuleType.LAST_SLEPT, MemoryModuleType.LAST_WOKEN, MemoryModuleType.LAST_WORKED_AT_POI, MemoryModuleType.GOLEM_LAST_SEEN_TIME});
-      SENSOR_TYPES = ImmutableList.of(SensorType.NEAREST_LIVING_ENTITIES, SensorType.NEAREST_PLAYERS, SensorType.INTERACTABLE_DOORS, SensorType.NEAREST_BED, SensorType.HURT_BY, SensorType.VILLAGER_HOSTILES, SensorType.VILLAGER_BABIES, SensorType.SECONDARY_POIS, SensorType.GOLEM_LAST_SEEN);
+      MEMORY_TYPES = ImmutableList.of(MemoryModuleType.HOME, MemoryModuleType.JOB_SITE, MemoryModuleType.POTENTIAL_JOB_SITE, MemoryModuleType.MEETING_POINT, MemoryModuleType.LIVING_ENTITIES, MemoryModuleType.VISIBLE_LIVING_ENTITIES, MemoryModuleType.VISIBLE_VILLAGER_BABIES, MemoryModuleType.NEAREST_PLAYERS, MemoryModuleType.NEAREST_VISIBLE_PLAYER, MemoryModuleType.NEAREST_VISIBLE_TARGETABLE_PLAYER, MemoryModuleType.NEAREST_VISIBLE_WANTED_ITEM, MemoryModuleType.WALK_TARGET, new MemoryModuleType[]{MemoryModuleType.LOOK_TARGET, MemoryModuleType.INTERACTION_TARGET, MemoryModuleType.BREED_TARGET, MemoryModuleType.PATH, MemoryModuleType.INTERACTABLE_DOORS, MemoryModuleType.OPENED_DOORS, MemoryModuleType.NEAREST_BED, MemoryModuleType.HURT_BY, MemoryModuleType.HURT_BY_ENTITY, MemoryModuleType.NEAREST_HOSTILE, MemoryModuleType.SECONDARY_JOB_SITE, MemoryModuleType.HIDING_PLACE, MemoryModuleType.HEARD_BELL_TIME, MemoryModuleType.CANT_REACH_WALK_TARGET_SINCE, MemoryModuleType.LAST_SLEPT, MemoryModuleType.LAST_WOKEN, MemoryModuleType.LAST_WORKED_AT_POI, MemoryModuleType.GOLEM_LAST_SEEN_TIME});
+      SENSOR_TYPES = ImmutableList.of(SensorType.NEAREST_LIVING_ENTITIES, SensorType.NEAREST_PLAYERS, SensorType.NEAREST_ITEMS, SensorType.INTERACTABLE_DOORS, SensorType.NEAREST_BED, SensorType.HURT_BY, SensorType.VILLAGER_HOSTILES, SensorType.VILLAGER_BABIES, SensorType.SECONDARY_POIS, SensorType.GOLEM_LAST_SEEN);
       POI_MEMORIES = ImmutableMap.of(MemoryModuleType.HOME, (var0, var1) -> {
          return var1 == PoiType.HOME;
       }, MemoryModuleType.JOB_SITE, (var0, var1) -> {
          return var0.getVillagerData().getProfession().getJobPoiType() == var1;
+      }, MemoryModuleType.POTENTIAL_JOB_SITE, (var0, var1) -> {
+         return PoiType.ALL_JOBS.test(var1);
       }, MemoryModuleType.MEETING_POINT, (var0, var1) -> {
          return var1 == PoiType.MEETING;
       });
    }
 }
