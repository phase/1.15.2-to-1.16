--- net/minecraft/world/entity/decoration/ArmorStand.java
+++ net/minecraft/world/entity/decoration/ArmorStand.java
@@ -2,11 +2,10 @@
 
 import java.util.Iterator;
 import java.util.List;
 import java.util.function.Predicate;
 import javax.annotation.Nullable;
-import net.minecraft.core.BlockPos;
 import net.minecraft.core.NonNullList;
 import net.minecraft.core.Rotations;
 import net.minecraft.core.particles.BlockParticleOption;
 import net.minecraft.core.particles.ParticleTypes;
 import net.minecraft.nbt.CompoundTag;
@@ -23,14 +22,14 @@
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EntityDimensions;
 import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.entity.EquipmentSlot;
 import net.minecraft.world.entity.HumanoidArm;
+import net.minecraft.world.entity.LightningBolt;
 import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.Mob;
 import net.minecraft.world.entity.Pose;
-import net.minecraft.world.entity.global.LightningBolt;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.entity.projectile.AbstractArrow;
 import net.minecraft.world.entity.vehicle.AbstractMinecart;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.Items;
@@ -496,11 +495,11 @@
       }
 
    }
 
    private void brokenByPlayer(DamageSource var1) {
-      Block.popResource(this.level, new BlockPos(this), new ItemStack(Items.ARMOR_STAND));
+      Block.popResource(this.level, this.blockPosition(), new ItemStack(Items.ARMOR_STAND));
       this.brokenByAnything(var1);
    }
 
    private void brokenByAnything(DamageSource var1) {
       this.playBrokenSound();
@@ -509,19 +508,19 @@
       int var2;
       ItemStack var3;
       for(var2 = 0; var2 < this.handItems.size(); ++var2) {
          var3 = (ItemStack)this.handItems.get(var2);
          if (!var3.isEmpty()) {
-            Block.popResource(this.level, (new BlockPos(this)).above(), var3);
+            Block.popResource(this.level, this.blockPosition().above(), var3);
             this.handItems.set(var2, ItemStack.EMPTY);
          }
       }
 
       for(var2 = 0; var2 < this.armorItems.size(); ++var2) {
          var3 = (ItemStack)this.armorItems.get(var2);
          if (!var3.isEmpty()) {
-            Block.popResource(this.level, (new BlockPos(this)).above(), var3);
+            Block.popResource(this.level, this.blockPosition().above(), var3);
             this.armorItems.set(var2, ItemStack.EMPTY);
          }
       }
 
    }
@@ -538,11 +537,11 @@
 
    protected float getStandingEyeHeight(Pose var1, EntityDimensions var2) {
       return var2.height * (this.isBaby() ? 0.5F : 0.9F);
    }
 
-   public double getRidingHeight() {
+   public double getMyRidingOffset() {
       return this.isMarker() ? 0.0D : 0.10000000149011612D;
    }
 
    public void travel(Vec3 var1) {
       if (this.hasPhysics()) {
@@ -718,11 +717,11 @@
    public boolean isPickable() {
       return super.isPickable() && !this.isMarker();
    }
 
    public boolean skipAttackInteraction(Entity var1) {
-      return var1 instanceof Player && !this.level.mayInteract((Player)var1, new BlockPos(this));
+      return var1 instanceof Player && !this.level.mayInteract((Player)var1, this.blockPosition());
    }
 
    public HumanoidArm getMainArm() {
       return HumanoidArm.RIGHT;
    }
