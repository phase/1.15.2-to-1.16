--- net/minecraft/world/entity/Mob.java
+++ net/minecraft/world/entity/Mob.java
@@ -3,10 +3,11 @@
 import com.google.common.collect.Maps;
 import java.util.Arrays;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
+import java.util.Optional;
 import java.util.Random;
 import java.util.UUID;
 import javax.annotation.Nullable;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.NonNullList;
@@ -25,12 +26,15 @@
 import net.minecraft.tags.Tag;
 import net.minecraft.util.Mth;
 import net.minecraft.world.Difficulty;
 import net.minecraft.world.DifficultyInstance;
 import net.minecraft.world.InteractionHand;
+import net.minecraft.world.InteractionResult;
 import net.minecraft.world.damagesource.DamageSource;
 import net.minecraft.world.entity.ai.attributes.AttributeModifier;
+import net.minecraft.world.entity.ai.attributes.AttributeSupplier;
+import net.minecraft.world.entity.ai.attributes.Attributes;
 import net.minecraft.world.entity.ai.control.BodyRotationControl;
 import net.minecraft.world.entity.ai.control.JumpControl;
 import net.minecraft.world.entity.ai.control.LookControl;
 import net.minecraft.world.entity.ai.control.MoveControl;
 import net.minecraft.world.entity.ai.goal.Goal;
@@ -40,20 +44,23 @@
 import net.minecraft.world.entity.ai.sensing.Sensing;
 import net.minecraft.world.entity.decoration.HangingEntity;
 import net.minecraft.world.entity.decoration.LeashFenceKnotEntity;
 import net.minecraft.world.entity.item.ItemEntity;
 import net.minecraft.world.entity.monster.Enemy;
-import net.minecraft.world.entity.monster.SharedMonsterAttributes;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.entity.vehicle.Boat;
 import net.minecraft.world.item.ArmorItem;
 import net.minecraft.world.item.AxeItem;
 import net.minecraft.world.item.BlockItem;
 import net.minecraft.world.item.BowItem;
+import net.minecraft.world.item.CrossbowItem;
+import net.minecraft.world.item.DiggerItem;
 import net.minecraft.world.item.Item;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.Items;
+import net.minecraft.world.item.ProjectileWeaponItem;
+import net.minecraft.world.item.SpawnEggItem;
 import net.minecraft.world.item.SwordItem;
 import net.minecraft.world.item.enchantment.EnchantmentHelper;
 import net.minecraft.world.level.GameRules;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.LevelAccessor;
@@ -101,12 +108,12 @@
       this.armorItems = NonNullList.withSize(4, ItemStack.EMPTY);
       this.armorDropChances = new float[4];
       this.pathfindingMalus = Maps.newEnumMap(BlockPathTypes.class);
       this.restrictCenter = BlockPos.ZERO;
       this.restrictRadius = -1.0F;
-      this.goalSelector = new GoalSelector(var2 != null && var2.getProfiler() != null ? var2.getProfiler() : null);
-      this.targetSelector = new GoalSelector(var2 != null && var2.getProfiler() != null ? var2.getProfiler() : null);
+      this.goalSelector = new GoalSelector(var2.getProfilerSupplier());
+      this.targetSelector = new GoalSelector(var2.getProfilerSupplier());
       this.lookControl = new LookControl(this);
       this.moveControl = new MoveControl(this);
       this.jumpControl = new JumpControl(this);
       this.bodyRotationControl = this.createBodyControl();
       this.navigation = this.createNavigation(var2);
@@ -120,29 +127,42 @@
    }
 
    protected void registerGoals() {
    }
 
-   protected void registerAttributes() {
-      super.registerAttributes();
-      this.getAttributes().registerAttribute(SharedMonsterAttributes.FOLLOW_RANGE).setBaseValue(16.0D);
-      this.getAttributes().registerAttribute(SharedMonsterAttributes.ATTACK_KNOCKBACK);
+   public static AttributeSupplier.Builder createMobAttributes() {
+      return LivingEntity.createLivingAttributes().add(Attributes.FOLLOW_RANGE, 16.0D).add(Attributes.ATTACK_KNOCKBACK);
    }
 
    protected PathNavigation createNavigation(Level var1) {
       return new GroundPathNavigation(this, var1);
    }
 
+   protected boolean shouldPassengersInheritMalus() {
+      return false;
+   }
+
    public float getPathfindingMalus(BlockPathTypes var1) {
-      Float var2 = (Float)this.pathfindingMalus.get(var1);
-      return var2 == null ? var1.getMalus() : var2;
+      Mob var2;
+      if (this.getVehicle() instanceof Mob && ((Mob)this.getVehicle()).shouldPassengersInheritMalus()) {
+         var2 = (Mob)this.getVehicle();
+      } else {
+         var2 = this;
+      }
+
+      Float var3 = (Float)var2.pathfindingMalus.get(var1);
+      return var3 == null ? var1.getMalus() : var3;
    }
 
    public void setPathfindingMalus(BlockPathTypes var1, float var2) {
       this.pathfindingMalus.put(var1, var2);
    }
 
+   public boolean canCutCorner(BlockPathTypes var1) {
+      return var1 != BlockPathTypes.DANGER_FIRE && var1 != BlockPathTypes.DANGER_CACTUS && var1 != BlockPathTypes.DANGER_OTHER;
+   }
+
    protected BodyRotationControl createBodyControl() {
       return new BodyRotationControl(this);
    }
 
    public LookControl getLookControl() {
@@ -186,10 +206,14 @@
 
    public boolean canAttackType(EntityType<?> var1) {
       return var1 != EntityType.GHAST;
    }
 
+   public boolean canFireProjectileWeapon(ProjectileWeaponItem var1) {
+      return false;
+   }
+
    public void ate() {
    }
 
    protected void defineSynchedData() {
       super.defineSynchedData();
@@ -479,93 +503,150 @@
          List var1 = this.level.getEntitiesOfClass(ItemEntity.class, this.getBoundingBox().inflate(1.0D, 0.0D, 1.0D));
          Iterator var2 = var1.iterator();
 
          while(var2.hasNext()) {
             ItemEntity var3 = (ItemEntity)var2.next();
-            if (!var3.removed && !var3.getItem().isEmpty() && !var3.hasPickUpDelay()) {
+            if (!var3.removed && !var3.getItem().isEmpty() && !var3.hasPickUpDelay() && this.wantsToPickUp(var3.getItem())) {
                this.pickUpItem(var3);
             }
          }
       }
 
       this.level.getProfiler().pop();
    }
 
    protected void pickUpItem(ItemEntity var1) {
       ItemStack var2 = var1.getItem();
-      EquipmentSlot var3 = getEquipmentSlotForItem(var2);
-      ItemStack var4 = this.getItemBySlot(var3);
-      boolean var5 = this.canReplaceCurrentItem(var2, var4, var3);
-      if (var5 && this.canHoldItem(var2)) {
-         double var6 = (double)this.getEquipmentDropChance(var3);
-         if (!var4.isEmpty() && (double)Math.max(this.random.nextFloat() - 0.1F, 0.0F) < var6) {
-            this.spawnAtLocation(var4);
-         }
+      if (this.equipItemIfPossible(var2)) {
+         this.onItemPickup(var1);
+         this.take(var1, var2.getCount());
+         var1.remove();
+      }
 
-         this.setItemSlot(var3, var2);
-         switch(var3.getType()) {
-         case HAND:
-            this.handDropChances[var3.getIndex()] = 2.0F;
-            break;
-         case ARMOR:
-            this.armorDropChances[var3.getIndex()] = 2.0F;
+   }
+
+   public boolean equipItemIfPossible(ItemStack var1) {
+      EquipmentSlot var2 = getEquipmentSlotForItem(var1);
+      ItemStack var3 = this.getItemBySlot(var2);
+      boolean var4 = this.canReplaceCurrentItem(var1, var3);
+      if (var4 && this.canHoldItem(var1)) {
+         double var5 = (double)this.getEquipmentDropChance(var2);
+         if (!var3.isEmpty() && (double)Math.max(this.random.nextFloat() - 0.1F, 0.0F) < var5) {
+            this.spawnAtLocation(var3);
          }
 
-         this.persistenceRequired = true;
-         this.take(var1, var2.getCount());
-         var1.remove();
+         this.setItemSlotAndDropWhenKilled(var2, var1);
+         this.playEquipSound(var1);
+         return true;
+      } else {
+         return false;
       }
+   }
 
+   protected void setItemSlotAndDropWhenKilled(EquipmentSlot var1, ItemStack var2) {
+      this.setItemSlot(var1, var2);
+      this.setGuaranteedDrop(var1);
+      this.persistenceRequired = true;
    }
 
-   protected boolean canReplaceCurrentItem(ItemStack var1, ItemStack var2, EquipmentSlot var3) {
-      boolean var4 = true;
-      if (!var2.isEmpty()) {
-         if (var3.getType() == EquipmentSlot.Type.HAND) {
-            if (var1.getItem() instanceof SwordItem && !(var2.getItem() instanceof SwordItem)) {
-               var4 = true;
-            } else if (var1.getItem() instanceof SwordItem && var2.getItem() instanceof SwordItem) {
-               SwordItem var5 = (SwordItem)var1.getItem();
-               SwordItem var6 = (SwordItem)var2.getItem();
-               if (var5.getDamage() == var6.getDamage()) {
-                  var4 = var1.getDamageValue() < var2.getDamageValue() || var1.hasTag() && !var2.hasTag();
-               } else {
-                  var4 = var5.getDamage() > var6.getDamage();
-               }
-            } else if (var1.getItem() instanceof BowItem && var2.getItem() instanceof BowItem) {
-               var4 = var1.hasTag() && !var2.hasTag();
+   public void setGuaranteedDrop(EquipmentSlot var1) {
+      switch(var1.getType()) {
+      case HAND:
+         this.handDropChances[var1.getIndex()] = 2.0F;
+         break;
+      case ARMOR:
+         this.armorDropChances[var1.getIndex()] = 2.0F;
+      }
+
+   }
+
+   protected boolean canReplaceCurrentItem(ItemStack var1, ItemStack var2) {
+      if (var2.isEmpty()) {
+         return true;
+      } else if (var1.getItem() instanceof SwordItem) {
+         if (!(var2.getItem() instanceof SwordItem)) {
+            return true;
+         } else {
+            SwordItem var6 = (SwordItem)var1.getItem();
+            SwordItem var8 = (SwordItem)var2.getItem();
+            if (var6.getDamage() != var8.getDamage()) {
+               return var6.getDamage() > var8.getDamage();
             } else {
-               var4 = false;
+               return this.canReplaceEqualItem(var1, var2);
             }
-         } else if (var1.getItem() instanceof ArmorItem && !(var2.getItem() instanceof ArmorItem)) {
-            var4 = true;
-         } else if (var1.getItem() instanceof ArmorItem && var2.getItem() instanceof ArmorItem && !EnchantmentHelper.hasBindingCurse(var2)) {
-            ArmorItem var7 = (ArmorItem)var1.getItem();
-            ArmorItem var8 = (ArmorItem)var2.getItem();
-            if (var7.getDefense() == var8.getDefense()) {
-               var4 = var1.getDamageValue() < var2.getDamageValue() || var1.hasTag() && !var2.hasTag();
+         }
+      } else if (var1.getItem() instanceof BowItem && var2.getItem() instanceof BowItem) {
+         return this.canReplaceEqualItem(var1, var2);
+      } else if (var1.getItem() instanceof CrossbowItem && var2.getItem() instanceof CrossbowItem) {
+         return this.canReplaceEqualItem(var1, var2);
+      } else if (var1.getItem() instanceof ArmorItem) {
+         if (EnchantmentHelper.hasBindingCurse(var2)) {
+            return false;
+         } else if (!(var2.getItem() instanceof ArmorItem)) {
+            return true;
+         } else {
+            ArmorItem var5 = (ArmorItem)var1.getItem();
+            ArmorItem var7 = (ArmorItem)var2.getItem();
+            if (var5.getDefense() != var7.getDefense()) {
+               return var5.getDefense() > var7.getDefense();
+            } else if (var5.getToughness() != var7.getToughness()) {
+               return var5.getToughness() > var7.getToughness();
             } else {
-               var4 = var7.getDefense() > var8.getDefense();
+               return this.canReplaceEqualItem(var1, var2);
             }
-         } else {
-            var4 = false;
          }
+      } else {
+         if (var1.getItem() instanceof DiggerItem) {
+            if (var2.getItem() instanceof BlockItem) {
+               return true;
+            }
+
+            if (var2.getItem() instanceof DiggerItem) {
+               DiggerItem var3 = (DiggerItem)var1.getItem();
+               DiggerItem var4 = (DiggerItem)var2.getItem();
+               if (var3.getAttackDamage() != var4.getAttackDamage()) {
+                  return var3.getAttackDamage() > var4.getAttackDamage();
+               }
+
+               return this.canReplaceEqualItem(var1, var2);
+            }
+         }
+
+         return false;
       }
+   }
 
-      return var4;
+   public boolean canReplaceEqualItem(ItemStack var1, ItemStack var2) {
+      if (var1.getDamageValue() >= var2.getDamageValue() && (!var1.hasTag() || var2.hasTag())) {
+         if (var1.hasTag() && var2.hasTag()) {
+            return var1.getTag().getAllKeys().stream().anyMatch((var0) -> {
+               return !var0.equals("Damage");
+            }) && !var2.getTag().getAllKeys().stream().anyMatch((var0) -> {
+               return !var0.equals("Damage");
+            });
+         } else {
+            return false;
+         }
+      } else {
+         return true;
+      }
    }
 
-   protected boolean canHoldItem(ItemStack var1) {
+   public boolean canHoldItem(ItemStack var1) {
       return true;
    }
 
+   public boolean wantsToPickUp(ItemStack var1) {
+      return this.canHoldItem(var1);
+   }
+
    public boolean removeWhenFarAway(double var1) {
       return true;
    }
 
    public boolean requiresCustomPersistence() {
-      return false;
+      return this.isPassenger();
    }
 
    protected boolean shouldDespawnInPeaceful() {
       return false;
    }
@@ -575,17 +656,21 @@
          this.remove();
       } else if (!this.isPersistenceRequired() && !this.requiresCustomPersistence()) {
          Player var1 = this.level.getNearestPlayer(this, -1.0D);
          if (var1 != null) {
             double var2 = var1.distanceToSqr((Entity)this);
-            if (var2 > 16384.0D && this.removeWhenFarAway(var2)) {
+            int var4 = this.getType().getCategory().getDespawnDistance();
+            int var5 = var4 * var4;
+            if (var2 > (double)var5 && this.removeWhenFarAway(var2)) {
                this.remove();
             }
 
-            if (this.noActionTime > 600 && this.random.nextInt(800) == 0 && var2 > 1024.0D && this.removeWhenFarAway(var2)) {
+            int var6 = this.getType().getCategory().getNoDespawnDistance();
+            int var7 = var6 * var6;
+            if (this.noActionTime > 600 && this.random.nextInt(800) == 0 && var2 > (double)var7 && this.removeWhenFarAway(var2)) {
                this.remove();
-            } else if (var2 < 1024.0D) {
+            } else if (var2 < (double)var7) {
                this.noActionTime = 0;
             }
          }
 
       } else {
@@ -907,11 +992,11 @@
 
    }
 
    @Nullable
    public SpawnGroupData finalizeSpawn(LevelAccessor var1, DifficultyInstance var2, MobSpawnType var3, @Nullable SpawnGroupData var4, @Nullable CompoundTag var5) {
-      this.getAttribute(SharedMonsterAttributes.FOLLOW_RANGE).addModifier(new AttributeModifier("Random spawn bonus", this.random.nextGaussian() * 0.05D, AttributeModifier.Operation.MULTIPLY_BASE));
+      this.getAttribute(Attributes.FOLLOW_RANGE).addPermanentModifier(new AttributeModifier("Random spawn bonus", this.random.nextGaussian() * 0.05D, AttributeModifier.Operation.MULTIPLY_BASE));
       if (this.random.nextFloat() < 0.05F) {
          this.setLeftHanded(true);
       } else {
          this.setLeftHanded(false);
       }
@@ -953,34 +1038,67 @@
 
    public boolean isPersistenceRequired() {
       return this.persistenceRequired;
    }
 
-   public final boolean interact(Player var1, InteractionHand var2) {
+   public final InteractionResult interact(Player var1, InteractionHand var2) {
       if (!this.isAlive()) {
-         return false;
+         return InteractionResult.PASS;
       } else if (this.getLeashHolder() == var1) {
          this.dropLeash(true, !var1.abilities.instabuild);
-         return true;
+         return InteractionResult.sidedSuccess(this.level.isClientSide);
       } else {
-         ItemStack var3 = var1.getItemInHand(var2);
-         if (var3.getItem() == Items.LEAD && this.canBeLeashed(var1)) {
-            this.setLeashedTo(var1, true);
-            var3.shrink(1);
-            return true;
+         InteractionResult var3 = this.checkAndHandleImportantInteractions(var1, var2);
+         if (var3.consumesAction()) {
+            return var3;
          } else {
-            return this.mobInteract(var1, var2) ? true : super.interact(var1, var2);
+            var3 = this.mobInteract(var1, var2);
+            return var3.consumesAction() ? var3 : super.interact(var1, var2);
          }
       }
    }
 
-   protected boolean mobInteract(Player var1, InteractionHand var2) {
-      return false;
+   private InteractionResult checkAndHandleImportantInteractions(Player var1, InteractionHand var2) {
+      ItemStack var3 = var1.getItemInHand(var2);
+      if (var3.getItem() == Items.LEAD && this.canBeLeashed(var1)) {
+         this.setLeashedTo(var1, true);
+         var3.shrink(1);
+         return InteractionResult.sidedSuccess(this.level.isClientSide);
+      } else {
+         if (var3.getItem() == Items.NAME_TAG) {
+            InteractionResult var4 = var3.interactLivingEntity(var1, this, var2);
+            if (var4.consumesAction()) {
+               return var4;
+            }
+         }
+
+         if (var3.getItem() instanceof SpawnEggItem) {
+            if (!this.level.isClientSide) {
+               SpawnEggItem var6 = (SpawnEggItem)var3.getItem();
+               Optional var5 = var6.spawnOffspringFromSpawnEgg(var1, this, this.getType(), this.level, this.position(), var3);
+               var5.ifPresent((var2x) -> {
+                  this.onOffspringSpawnedFromEgg(var1, var2x);
+               });
+               return var5.isPresent() ? InteractionResult.SUCCESS : InteractionResult.PASS;
+            } else {
+               return InteractionResult.CONSUME;
+            }
+         } else {
+            return InteractionResult.PASS;
+         }
+      }
    }
 
+   protected void onOffspringSpawnedFromEgg(Player var1, Mob var2) {
+   }
+
+   protected InteractionResult mobInteract(Player var1, InteractionHand var2) {
+      return InteractionResult.PASS;
+   }
+
    public boolean isWithinRestriction() {
-      return this.isWithinRestriction(new BlockPos(this));
+      return this.isWithinRestriction(this.blockPosition());
    }
 
    public boolean isWithinRestriction(BlockPos var1) {
       if (this.restrictRadius == -1.0F) {
          return true;
@@ -1004,10 +1122,49 @@
 
    public boolean hasRestriction() {
       return this.restrictRadius != -1.0F;
    }
 
+   @Nullable
+   protected <T extends Mob> T convertTo(EntityType<T> var1) {
+      if (this.removed) {
+         return null;
+      } else {
+         Mob var2 = (Mob)var1.create(this.level);
+         var2.copyPosition(this);
+         var2.setCanPickUpLoot(this.canPickUpLoot());
+         var2.setBaby(this.isBaby());
+         var2.setNoAi(this.isNoAi());
+         if (this.hasCustomName()) {
+            var2.setCustomName(this.getCustomName());
+            var2.setCustomNameVisible(this.isCustomNameVisible());
+         }
+
+         if (this.isPersistenceRequired()) {
+            var2.setPersistenceRequired();
+         }
+
+         var2.setInvulnerable(this.isInvulnerable());
+         EquipmentSlot[] var3 = EquipmentSlot.values();
+         int var4 = var3.length;
+
+         for(int var5 = 0; var5 < var4; ++var5) {
+            EquipmentSlot var6 = var3[var5];
+            ItemStack var7 = this.getItemBySlot(var6);
+            if (!var7.isEmpty()) {
+               var2.setItemSlot(var6, var7.copy());
+               var2.setDropChance(var6, this.getEquipmentDropChance(var6));
+               var7.setCount(0);
+            }
+         }
+
+         this.level.addFreshEntity(var2);
+         this.remove();
+         return var2;
+      }
+   }
+
    protected void tickLeash() {
       if (this.leashInfoTag != null) {
          this.restoreLeashFromSave();
       }
 
@@ -1025,10 +1182,11 @@
          if (!(this.leashHolder instanceof Player)) {
             this.leashHolder.forcedLoading = false;
          }
 
          this.leashHolder = null;
+         this.leashInfoTag = null;
          if (!this.level.isClientSide && var2) {
             this.spawnAtLocation(Items.LEAD);
          }
 
          if (!this.level.isClientSide && var1 && this.level instanceof ServerLevel) {
@@ -1055,10 +1213,11 @@
       return this.leashHolder;
    }
 
    public void setLeashedTo(Entity var1, boolean var2) {
       this.leashHolder = var1;
+      this.leashInfoTag = null;
       this.forcedLoading = true;
       if (!(this.leashHolder instanceof Player)) {
          this.leashHolder.forcedLoading = true;
       }
 
@@ -1087,23 +1246,26 @@
    }
 
    private void restoreLeashFromSave() {
       if (this.leashInfoTag != null && this.level instanceof ServerLevel) {
          if (this.leashInfoTag.hasUUID("UUID")) {
-            UUID var3 = this.leashInfoTag.getUUID("UUID");
-            Entity var2 = ((ServerLevel)this.level).getEntity(var3);
+            UUID var1 = this.leashInfoTag.getUUID("UUID");
+            Entity var2 = ((ServerLevel)this.level).getEntity(var1);
             if (var2 != null) {
                this.setLeashedTo(var2, true);
+               return;
             }
          } else if (this.leashInfoTag.contains("X", 99) && this.leashInfoTag.contains("Y", 99) && this.leashInfoTag.contains("Z", 99)) {
-            BlockPos var1 = new BlockPos(this.leashInfoTag.getInt("X"), this.leashInfoTag.getInt("Y"), this.leashInfoTag.getInt("Z"));
-            this.setLeashedTo(LeashFenceKnotEntity.getOrCreateKnot(this.level, var1), true);
-         } else {
-            this.dropLeash(false, true);
+            BlockPos var3 = new BlockPos(this.leashInfoTag.getInt("X"), this.leashInfoTag.getInt("Y"), this.leashInfoTag.getInt("Z"));
+            this.setLeashedTo(LeashFenceKnotEntity.getOrCreateKnot(this.level, var3), true);
+            return;
          }
 
-         this.leashInfoTag = null;
+         if (this.tickCount > 100) {
+            this.spawnAtLocation(Items.LEAD);
+            this.leashInfoTag = null;
+         }
       }
 
    }
 
    public boolean setSlot(int var1, ItemStack var2) {
@@ -1172,21 +1334,24 @@
 
    public boolean isAggressive() {
       return ((Byte)this.entityData.get(DATA_MOB_FLAGS_ID) & 4) != 0;
    }
 
+   public void setBaby(boolean var1) {
+   }
+
    public HumanoidArm getMainArm() {
       return this.isLeftHanded() ? HumanoidArm.LEFT : HumanoidArm.RIGHT;
    }
 
    public boolean canAttack(LivingEntity var1) {
       return var1.getType() == EntityType.PLAYER && ((Player)var1).abilities.invulnerable ? false : super.canAttack(var1);
    }
 
    public boolean doHurtTarget(Entity var1) {
-      float var2 = (float)this.getAttribute(SharedMonsterAttributes.ATTACK_DAMAGE).getValue();
-      float var3 = (float)this.getAttribute(SharedMonsterAttributes.ATTACK_KNOCKBACK).getValue();
+      float var2 = (float)this.getAttributeValue(Attributes.ATTACK_DAMAGE);
+      float var3 = (float)this.getAttributeValue(Attributes.ATTACK_KNOCKBACK);
       if (var1 instanceof LivingEntity) {
          var2 += EnchantmentHelper.getDamageBonus(this.getMainHandItem(), ((LivingEntity)var1).getMobType());
          var3 += (float)EnchantmentHelper.getKnockbackBonus(this);
       }
 
@@ -1196,34 +1361,37 @@
       }
 
       boolean var5 = var1.hurt(DamageSource.mobAttack(this), var2);
       if (var5) {
          if (var3 > 0.0F && var1 instanceof LivingEntity) {
-            ((LivingEntity)var1).knockback(this, var3 * 0.5F, (double)Mth.sin(this.yRot * 0.017453292F), (double)(-Mth.cos(this.yRot * 0.017453292F)));
+            ((LivingEntity)var1).knockback(var3 * 0.5F, (double)Mth.sin(this.yRot * 0.017453292F), (double)(-Mth.cos(this.yRot * 0.017453292F)));
             this.setDeltaMovement(this.getDeltaMovement().multiply(0.6D, 1.0D, 0.6D));
          }
 
          if (var1 instanceof Player) {
             Player var6 = (Player)var1;
-            ItemStack var7 = this.getMainHandItem();
-            ItemStack var8 = var6.isUsingItem() ? var6.getUseItem() : ItemStack.EMPTY;
-            if (!var7.isEmpty() && !var8.isEmpty() && var7.getItem() instanceof AxeItem && var8.getItem() == Items.SHIELD) {
-               float var9 = 0.25F + (float)EnchantmentHelper.getBlockEfficiency(this) * 0.05F;
-               if (this.random.nextFloat() < var9) {
-                  var6.getCooldowns().addCooldown(Items.SHIELD, 100);
-                  this.level.broadcastEntityEvent(var6, (byte)30);
-               }
-            }
+            this.maybeDisableShield(var6, this.getMainHandItem(), var6.isUsingItem() ? var6.getUseItem() : ItemStack.EMPTY);
          }
 
          this.doEnchantDamageEffects(this, var1);
          this.setLastHurtMob(var1);
       }
 
       return var5;
    }
 
+   private void maybeDisableShield(Player var1, ItemStack var2, ItemStack var3) {
+      if (!var2.isEmpty() && !var3.isEmpty() && var2.getItem() instanceof AxeItem && var3.getItem() == Items.SHIELD) {
+         float var4 = 0.25F + (float)EnchantmentHelper.getBlockEfficiency(this) * 0.05F;
+         if (this.random.nextFloat() < var4) {
+            var1.getCooldowns().addCooldown(Items.SHIELD, 100);
+            this.level.broadcastEntityEvent(var1, (byte)30);
+         }
+      }
+
+   }
+
    protected boolean isSunBurnTick() {
       if (this.level.isDay() && !this.level.isClientSide) {
          float var1 = this.getBrightness();
          BlockPos var2 = this.getVehicle() instanceof Boat ? (new BlockPos(this.getX(), (double)Math.round(this.getY()), this.getZ())).above() : new BlockPos(this.getX(), (double)Math.round(this.getY()), this.getZ());
          if (var1 > 0.5F && this.random.nextFloat() * 30.0F < (var1 - 0.4F) * 2.0F && this.level.canSeeSky(var2)) {
@@ -1241,12 +1409,13 @@
          this.setDeltaMovement(this.getDeltaMovement().add(0.0D, 0.3D, 0.0D));
       }
 
    }
 
-   public boolean isHolding(Item var1) {
-      return this.getMainHandItem().getItem() == var1 || this.getOffhandItem().getItem() == var1;
+   protected void removeAfterChangingDimensions() {
+      super.removeAfterChangingDimensions();
+      this.dropLeash(true, false);
    }
 
    static {
       DATA_MOB_FLAGS_ID = SynchedEntityData.defineId(Mob.class, EntityDataSerializers.BYTE);
    }
