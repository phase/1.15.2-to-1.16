--- net/minecraft/world/entity/animal/Animal.java
+++ net/minecraft/world/entity/animal/Animal.java
@@ -1,33 +1,41 @@
 package net.minecraft.world.entity.animal;
 
 import java.util.Random;
 import java.util.UUID;
 import javax.annotation.Nullable;
+import net.minecraft.advancements.CriteriaTriggers;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.particles.ParticleTypes;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.server.level.ServerPlayer;
+import net.minecraft.stats.Stats;
 import net.minecraft.world.InteractionHand;
+import net.minecraft.world.InteractionResult;
 import net.minecraft.world.damagesource.DamageSource;
 import net.minecraft.world.entity.AgableMob;
 import net.minecraft.world.entity.EntityType;
+import net.minecraft.world.entity.ExperienceOrb;
 import net.minecraft.world.entity.MobSpawnType;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.Items;
+import net.minecraft.world.level.GameRules;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.LevelAccessor;
 import net.minecraft.world.level.LevelReader;
 import net.minecraft.world.level.block.Blocks;
+import net.minecraft.world.level.pathfinder.BlockPathTypes;
 
 public abstract class Animal extends AgableMob {
    private int inLove;
    private UUID loveCause;
 
    protected Animal(EntityType<? extends Animal> var1, Level var2) {
       super(var1, var2);
+      this.setPathfindingMalus(BlockPathTypes.DANGER_FIRE, 16.0F);
+      this.setPathfindingMalus(BlockPathTypes.DAMAGE_FIRE, -1.0F);
    }
 
    protected void customServerAiStep() {
       if (this.getAge() != 0) {
          this.inLove = 0;
@@ -62,11 +70,11 @@
          return super.hurt(var1, var2);
       }
    }
 
    public float getWalkTargetValue(BlockPos var1, LevelReader var2) {
-      return var2.getBlockState(var1.below()).getBlock() == Blocks.GRASS_BLOCK ? 10.0F : var2.getBrightness(var1) - 0.5F;
+      return var2.getBlockState(var1.below()).is(Blocks.GRASS_BLOCK) ? 10.0F : var2.getBrightness(var1) - 0.5F;
    }
 
    public void addAdditionalSaveData(CompoundTag var1) {
       super.addAdditionalSaveData(var1);
       var1.putInt("InLove", this.inLove);
@@ -74,22 +82,22 @@
          var1.putUUID("LoveCause", this.loveCause);
       }
 
    }
 
-   public double getRidingHeight() {
+   public double getMyRidingOffset() {
       return 0.14D;
    }
 
    public void readAdditionalSaveData(CompoundTag var1) {
       super.readAdditionalSaveData(var1);
       this.inLove = var1.getInt("InLove");
       this.loveCause = var1.hasUUID("LoveCause") ? var1.getUUID("LoveCause") : null;
    }
 
    public static boolean checkAnimalSpawnRules(EntityType<? extends Animal> var0, LevelAccessor var1, MobSpawnType var2, BlockPos var3, Random var4) {
-      return var1.getBlockState(var3.below()).getBlock() == Blocks.GRASS_BLOCK && var1.getRawBrightness(var3, 0) > 8;
+      return var1.getBlockState(var3.below()).is(Blocks.GRASS_BLOCK) && var1.getRawBrightness(var3, 0) > 8;
    }
 
    public int getAmbientSoundInterval() {
       return 120;
    }
@@ -104,25 +112,29 @@
 
    public boolean isFood(ItemStack var1) {
       return var1.getItem() == Items.WHEAT;
    }
 
-   public boolean mobInteract(Player var1, InteractionHand var2) {
+   public InteractionResult mobInteract(Player var1, InteractionHand var2) {
       ItemStack var3 = var1.getItemInHand(var2);
       if (this.isFood(var3)) {
-         if (!this.level.isClientSide && this.getAge() == 0 && this.canFallInLove()) {
+         int var4 = this.getAge();
+         if (!this.level.isClientSide && var4 == 0 && this.canFallInLove()) {
             this.usePlayerItem(var1, var3);
             this.setInLove(var1);
-            var1.swing(var2, true);
-            return true;
+            return InteractionResult.SUCCESS;
          }
 
          if (this.isBaby()) {
             this.usePlayerItem(var1, var3);
-            this.ageUp((int)((float)(-this.getAge() / 20) * 0.1F), true);
-            return true;
+            this.ageUp((int)((float)(-var4 / 20) * 0.1F), true);
+            return InteractionResult.sidedSuccess(this.level.isClientSide);
          }
+
+         if (this.level.isClientSide) {
+            return InteractionResult.CONSUME;
+         }
       }
 
       return super.mobInteract(var1, var2);
    }
 
@@ -148,10 +160,14 @@
 
    public void setInLoveTime(int var1) {
       this.inLove = var1;
    }
 
+   public int getInLoveTime() {
+      return this.inLove;
+   }
+
    @Nullable
    public ServerPlayer getLoveCause() {
       if (this.loveCause == null) {
          return null;
       } else {
@@ -176,10 +192,38 @@
       } else {
          return this.isInLove() && var1.isInLove();
       }
    }
 
+   public void spawnChildFromBreeding(Level var1, Animal var2) {
+      AgableMob var3 = this.getBreedOffspring(var2);
+      if (var3 != null) {
+         ServerPlayer var4 = this.getLoveCause();
+         if (var4 == null && var2.getLoveCause() != null) {
+            var4 = var2.getLoveCause();
+         }
+
+         if (var4 != null) {
+            var4.awardStat(Stats.ANIMALS_BRED);
+            CriteriaTriggers.BRED_ANIMALS.trigger(var4, this, var2, var3);
+         }
+
+         this.setAge(6000);
+         var2.setAge(6000);
+         this.resetLove();
+         var2.resetLove();
+         var3.setBaby(true);
+         var3.moveTo(this.getX(), this.getY(), this.getZ(), 0.0F, 0.0F);
+         var1.addFreshEntity(var3);
+         var1.broadcastEntityEvent(this, (byte)18);
+         if (var1.getGameRules().getBoolean(GameRules.RULE_DOMOBLOOT)) {
+            var1.addFreshEntity(new ExperienceOrb(var1, this.getX(), this.getY(), this.getZ(), this.getRandom().nextInt(7) + 1));
+         }
+
+      }
+   }
+
    public void handleEntityEvent(byte var1) {
       if (var1 == 18) {
          for(int var2 = 0; var2 < 7; ++var2) {
             double var3 = this.random.nextGaussian() * 0.02D;
             double var5 = this.random.nextGaussian() * 0.02D;
