--- net/minecraft/world/entity/animal/MushroomCow.java
+++ net/minecraft/world/entity/animal/MushroomCow.java
@@ -6,18 +6,22 @@
 import net.minecraft.core.particles.ParticleTypes;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.network.syncher.EntityDataAccessor;
 import net.minecraft.network.syncher.EntityDataSerializers;
 import net.minecraft.network.syncher.SynchedEntityData;
+import net.minecraft.server.level.ServerLevel;
 import net.minecraft.sounds.SoundEvent;
 import net.minecraft.sounds.SoundEvents;
+import net.minecraft.sounds.SoundSource;
 import net.minecraft.tags.ItemTags;
 import net.minecraft.world.InteractionHand;
 import net.minecraft.world.effect.MobEffect;
 import net.minecraft.world.entity.AgableMob;
+import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.entity.MobSpawnType;
+import net.minecraft.world.entity.Shearable;
 import net.minecraft.world.entity.global.LightningBolt;
 import net.minecraft.world.entity.item.ItemEntity;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.item.BlockItem;
 import net.minecraft.world.item.ItemStack;
@@ -29,26 +33,26 @@
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.FlowerBlock;
 import net.minecraft.world.level.block.state.BlockState;
 import org.apache.commons.lang3.tuple.Pair;
 
-public class MushroomCow extends Cow {
+public class MushroomCow extends Cow implements Shearable {
    private static final EntityDataAccessor<String> DATA_TYPE;
    private MobEffect effect;
    private int effectDuration;
    private UUID lastLightningBoltUUID;
 
    public MushroomCow(EntityType<? extends MushroomCow> var1, Level var2) {
       super(var1, var2);
    }
 
    public float getWalkTargetValue(BlockPos var1, LevelReader var2) {
-      return var2.getBlockState(var1.below()).getBlock() == Blocks.MYCELIUM ? 10.0F : var2.getBrightness(var1) - 0.5F;
+      return var2.getBlockState(var1.below()).is(Blocks.MYCELIUM) ? 10.0F : var2.getBrightness(var1) - 0.5F;
    }
 
    public static boolean checkMushroomSpawnRules(EntityType<MushroomCow> var0, LevelAccessor var1, MobSpawnType var2, BlockPos var3, Random var4) {
-      return var1.getBlockState(var3.below()).getBlock() == Blocks.MYCELIUM && var1.getRawBrightness(var3, 0) > 8;
+      return var1.getBlockState(var3.below()).is(Blocks.MYCELIUM) && var1.getRawBrightness(var3, 0) > 8;
    }
 
    public void thunderHit(LightningBolt var1) {
       UUID var2 = var1.getUUID();
       if (!var2.equals(this.lastLightningBoltUUID)) {
@@ -66,97 +70,104 @@
 
    public boolean mobInteract(Player var1, InteractionHand var2) {
       ItemStack var3 = var1.getItemInHand(var2);
       if (var3.getItem() == Items.BOWL && !this.isBaby() && !var1.abilities.instabuild) {
          var3.shrink(1);
-         boolean var10 = false;
-         ItemStack var9;
+         boolean var9 = false;
+         ItemStack var8;
          if (this.effect != null) {
-            var10 = true;
-            var9 = new ItemStack(Items.SUSPICIOUS_STEW);
-            SuspiciousStewItem.saveMobEffect(var9, this.effect, this.effectDuration);
+            var9 = true;
+            var8 = new ItemStack(Items.SUSPICIOUS_STEW);
+            SuspiciousStewItem.saveMobEffect(var8, this.effect, this.effectDuration);
             this.effect = null;
             this.effectDuration = 0;
          } else {
-            var9 = new ItemStack(Items.MUSHROOM_STEW);
+            var8 = new ItemStack(Items.MUSHROOM_STEW);
          }
 
          if (var3.isEmpty()) {
-            var1.setItemInHand(var2, var9);
-         } else if (!var1.inventory.add(var9)) {
-            var1.drop(var9, false);
+            var1.setItemInHand(var2, var8);
+         } else if (!var1.inventory.add(var8)) {
+            var1.drop(var8, false);
          }
 
          SoundEvent var6;
-         if (var10) {
+         if (var9) {
             var6 = SoundEvents.MOOSHROOM_MILK_SUSPICIOUSLY;
          } else {
             var6 = SoundEvents.MOOSHROOM_MILK;
          }
 
          this.playSound(var6, 1.0F, 1.0F);
          return true;
+      } else if (var3.getItem() == Items.SHEARS && this.readyForShearing()) {
+         this.shear(SoundSource.PLAYERS);
+         if (!this.level.isClientSide) {
+            var3.hurtAndBreak(1, var1, (var1x) -> {
+               var1x.broadcastBreakEvent(var2);
+            });
+         }
+
+         return true;
       } else {
-         int var5;
-         if (var3.getItem() == Items.SHEARS && !this.isBaby()) {
-            this.level.addParticle(ParticleTypes.EXPLOSION, this.getX(), this.getY(0.5D), this.getZ(), 0.0D, 0.0D, 0.0D);
-            if (!this.level.isClientSide) {
-               this.remove();
-               Cow var8 = (Cow)EntityType.COW.create(this.level);
-               var8.moveTo(this.getX(), this.getY(), this.getZ(), this.yRot, this.xRot);
-               var8.setHealth(this.getHealth());
-               var8.yBodyRot = this.yBodyRot;
-               if (this.hasCustomName()) {
-                  var8.setCustomName(this.getCustomName());
-                  var8.setCustomNameVisible(this.isCustomNameVisible());
+         if (this.getMushroomType() == MushroomCow.MushroomType.BROWN && var3.getItem().is(ItemTags.SMALL_FLOWERS)) {
+            if (this.effect != null) {
+               for(int var4 = 0; var4 < 2; ++var4) {
+                  this.level.addParticle(ParticleTypes.SMOKE, this.getX() + (double)(this.random.nextFloat() / 2.0F), this.getY(0.5D), this.getZ() + (double)(this.random.nextFloat() / 2.0F), 0.0D, (double)(this.random.nextFloat() / 5.0F), 0.0D);
                }
-
-               if (this.isPersistenceRequired()) {
-                  var8.setPersistenceRequired();
+            } else {
+               Pair var7 = this.getEffectFromItemStack(var3);
+               if (!var1.abilities.instabuild) {
+                  var3.shrink(1);
                }
 
-               var8.setInvulnerable(this.isInvulnerable());
-               this.level.addFreshEntity(var8);
-
-               for(var5 = 0; var5 < 5; ++var5) {
-                  this.level.addFreshEntity(new ItemEntity(this.level, this.getX(), this.getY(1.0D), this.getZ(), new ItemStack(this.getMushroomType().blockState.getBlock())));
+               for(int var5 = 0; var5 < 4; ++var5) {
+                  this.level.addParticle(ParticleTypes.EFFECT, this.getX() + (double)(this.random.nextFloat() / 2.0F), this.getY(0.5D), this.getZ() + (double)(this.random.nextFloat() / 2.0F), 0.0D, (double)(this.random.nextFloat() / 5.0F), 0.0D);
                }
 
-               var3.hurtAndBreak(1, var1, (var1x) -> {
-                  var1x.broadcastBreakEvent(var2);
-               });
-               this.playSound(SoundEvents.MOOSHROOM_SHEAR, 1.0F, 1.0F);
+               this.effect = (MobEffect)var7.getLeft();
+               this.effectDuration = (Integer)var7.getRight();
+               this.playSound(SoundEvents.MOOSHROOM_EAT, 2.0F, 1.0F);
             }
+         }
 
-            return true;
-         } else {
-            if (this.getMushroomType() == MushroomCow.MushroomType.BROWN && var3.getItem().is(ItemTags.SMALL_FLOWERS)) {
-               if (this.effect != null) {
-                  for(int var4 = 0; var4 < 2; ++var4) {
-                     this.level.addParticle(ParticleTypes.SMOKE, this.getX() + (double)(this.random.nextFloat() / 2.0F), this.getY(0.5D), this.getZ() + (double)(this.random.nextFloat() / 2.0F), 0.0D, (double)(this.random.nextFloat() / 5.0F), 0.0D);
-                  }
-               } else {
-                  Pair var7 = this.getEffectFromItemStack(var3);
-                  if (!var1.abilities.instabuild) {
-                     var3.shrink(1);
-                  }
+         return super.mobInteract(var1, var2);
+      }
+   }
 
-                  for(var5 = 0; var5 < 4; ++var5) {
-                     this.level.addParticle(ParticleTypes.EFFECT, this.getX() + (double)(this.random.nextFloat() / 2.0F), this.getY(0.5D), this.getZ() + (double)(this.random.nextFloat() / 2.0F), 0.0D, (double)(this.random.nextFloat() / 5.0F), 0.0D);
-                  }
+   public void shear(SoundSource var1) {
+      this.level.playSound((Player)null, (Entity)this, SoundEvents.MOOSHROOM_SHEAR, var1, 1.0F, 1.0F);
+      if (!this.level.isClientSide()) {
+         ((ServerLevel)this.level).sendParticles(ParticleTypes.EXPLOSION, this.getX(), this.getY(0.5D), this.getZ(), 1, 0.0D, 0.0D, 0.0D, 0.0D);
+         this.remove();
+         Cow var2 = (Cow)EntityType.COW.create(this.level);
+         var2.moveTo(this.getX(), this.getY(), this.getZ(), this.yRot, this.xRot);
+         var2.setHealth(this.getHealth());
+         var2.yBodyRot = this.yBodyRot;
+         if (this.hasCustomName()) {
+            var2.setCustomName(this.getCustomName());
+            var2.setCustomNameVisible(this.isCustomNameVisible());
+         }
 
-                  this.effect = (MobEffect)var7.getLeft();
-                  this.effectDuration = (Integer)var7.getRight();
-                  this.playSound(SoundEvents.MOOSHROOM_EAT, 2.0F, 1.0F);
-               }
-            }
+         if (this.isPersistenceRequired()) {
+            var2.setPersistenceRequired();
+         }
 
-            return super.mobInteract(var1, var2);
+         var2.setInvulnerable(this.isInvulnerable());
+         this.level.addFreshEntity(var2);
+
+         for(int var3 = 0; var3 < 5; ++var3) {
+            this.level.addFreshEntity(new ItemEntity(this.level, this.getX(), this.getY(1.0D), this.getZ(), new ItemStack(this.getMushroomType().blockState.getBlock())));
          }
       }
+
    }
 
+   public boolean readyForShearing() {
+      return this.isAlive() && !this.isBaby();
+   }
+
    public void addAdditionalSaveData(CompoundTag var1) {
       super.addAdditionalSaveData(var1);
       var1.putString("Type", this.getMushroomType().type);
       if (this.effect != null) {
          var1.putByte("EffectId", (byte)MobEffect.getId(this.effect));
