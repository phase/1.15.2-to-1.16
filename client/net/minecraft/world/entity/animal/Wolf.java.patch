--- net/minecraft/world/entity/animal/Wolf.java
+++ net/minecraft/world/entity/animal/Wolf.java
@@ -7,76 +7,85 @@
 import net.minecraft.core.particles.ParticleTypes;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.network.syncher.EntityDataAccessor;
 import net.minecraft.network.syncher.EntityDataSerializers;
 import net.minecraft.network.syncher.SynchedEntityData;
+import net.minecraft.server.level.ServerLevel;
 import net.minecraft.sounds.SoundEvent;
 import net.minecraft.sounds.SoundEvents;
+import net.minecraft.util.IntRange;
 import net.minecraft.util.Mth;
+import net.minecraft.util.TimeUtil;
 import net.minecraft.world.InteractionHand;
+import net.minecraft.world.InteractionResult;
 import net.minecraft.world.damagesource.DamageSource;
 import net.minecraft.world.entity.AgableMob;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EntityDimensions;
 import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.entity.LivingEntity;
+import net.minecraft.world.entity.Mob;
+import net.minecraft.world.entity.NeutralMob;
 import net.minecraft.world.entity.Pose;
 import net.minecraft.world.entity.TamableAnimal;
+import net.minecraft.world.entity.ai.attributes.AttributeSupplier;
+import net.minecraft.world.entity.ai.attributes.Attributes;
 import net.minecraft.world.entity.ai.goal.AvoidEntityGoal;
 import net.minecraft.world.entity.ai.goal.BegGoal;
 import net.minecraft.world.entity.ai.goal.BreedGoal;
 import net.minecraft.world.entity.ai.goal.FloatGoal;
 import net.minecraft.world.entity.ai.goal.FollowOwnerGoal;
 import net.minecraft.world.entity.ai.goal.LeapAtTargetGoal;
 import net.minecraft.world.entity.ai.goal.LookAtPlayerGoal;
 import net.minecraft.world.entity.ai.goal.MeleeAttackGoal;
 import net.minecraft.world.entity.ai.goal.RandomLookAroundGoal;
-import net.minecraft.world.entity.ai.goal.SitGoal;
+import net.minecraft.world.entity.ai.goal.SitWhenOrderedToGoal;
 import net.minecraft.world.entity.ai.goal.WaterAvoidingRandomStrollGoal;
 import net.minecraft.world.entity.ai.goal.target.HurtByTargetGoal;
 import net.minecraft.world.entity.ai.goal.target.NearestAttackableTargetGoal;
 import net.minecraft.world.entity.ai.goal.target.NonTameRandomTargetGoal;
 import net.minecraft.world.entity.ai.goal.target.OwnerHurtByTargetGoal;
 import net.minecraft.world.entity.ai.goal.target.OwnerHurtTargetGoal;
+import net.minecraft.world.entity.ai.goal.target.ResetUniversalAngerTargetGoal;
 import net.minecraft.world.entity.animal.horse.AbstractHorse;
 import net.minecraft.world.entity.animal.horse.Llama;
 import net.minecraft.world.entity.monster.AbstractSkeleton;
 import net.minecraft.world.entity.monster.Creeper;
 import net.minecraft.world.entity.monster.Ghast;
-import net.minecraft.world.entity.monster.SharedMonsterAttributes;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.entity.projectile.AbstractArrow;
 import net.minecraft.world.item.DyeColor;
 import net.minecraft.world.item.DyeItem;
 import net.minecraft.world.item.Item;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.Items;
-import net.minecraft.world.item.SpawnEggItem;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.phys.Vec3;
 
-public class Wolf extends TamableAnimal {
+public class Wolf extends TamableAnimal implements NeutralMob {
    private static final EntityDataAccessor<Boolean> DATA_INTERESTED_ID;
    private static final EntityDataAccessor<Integer> DATA_COLLAR_COLOR;
+   private static final EntityDataAccessor<Integer> DATA_REMAINING_ANGER_TIME;
    public static final Predicate<LivingEntity> PREY_SELECTOR;
    private float interestedAngle;
    private float interestedAngleO;
    private boolean isWet;
    private boolean isShaking;
    private float shakeAnim;
    private float shakeAnimO;
+   private static final IntRange PERSISTENT_ANGER_TIME;
+   private UUID persistentAngerTarget;
 
    public Wolf(EntityType<? extends Wolf> var1, Level var2) {
       super(var1, var2);
       this.setTame(false);
    }
 
    protected void registerGoals() {
-      this.sitGoal = new SitGoal(this);
       this.goalSelector.addGoal(1, new FloatGoal(this));
-      this.goalSelector.addGoal(2, this.sitGoal);
+      this.goalSelector.addGoal(2, new SitWhenOrderedToGoal(this));
       this.goalSelector.addGoal(3, new Wolf.WolfAvoidEntityGoal(this, Llama.class, 24.0F, 1.5D, 1.5D));
       this.goalSelector.addGoal(4, new LeapAtTargetGoal(this, 0.4F));
       this.goalSelector.addGoal(5, new MeleeAttackGoal(this, 1.0D, true));
       this.goalSelector.addGoal(6, new FollowOwnerGoal(this, 1.0D, 10.0F, 2.0F, false));
       this.goalSelector.addGoal(7, new BreedGoal(this, 1.0D));
@@ -85,60 +94,45 @@
       this.goalSelector.addGoal(10, new LookAtPlayerGoal(this, Player.class, 8.0F));
       this.goalSelector.addGoal(10, new RandomLookAroundGoal(this));
       this.targetSelector.addGoal(1, new OwnerHurtByTargetGoal(this));
       this.targetSelector.addGoal(2, new OwnerHurtTargetGoal(this));
       this.targetSelector.addGoal(3, (new HurtByTargetGoal(this, new Class[0])).setAlertOthers());
-      this.targetSelector.addGoal(4, new NonTameRandomTargetGoal(this, Animal.class, false, PREY_SELECTOR));
-      this.targetSelector.addGoal(4, new NonTameRandomTargetGoal(this, Turtle.class, false, Turtle.BABY_ON_LAND_SELECTOR));
-      this.targetSelector.addGoal(5, new NearestAttackableTargetGoal(this, AbstractSkeleton.class, false));
+      this.targetSelector.addGoal(4, new NearestAttackableTargetGoal(this, Player.class, 10, true, false, this::isAngryAt));
+      this.targetSelector.addGoal(5, new NonTameRandomTargetGoal(this, Animal.class, false, PREY_SELECTOR));
+      this.targetSelector.addGoal(6, new NonTameRandomTargetGoal(this, Turtle.class, false, Turtle.BABY_ON_LAND_SELECTOR));
+      this.targetSelector.addGoal(7, new NearestAttackableTargetGoal(this, AbstractSkeleton.class, false));
+      this.targetSelector.addGoal(8, new ResetUniversalAngerTargetGoal(this, true));
    }
 
-   protected void registerAttributes() {
-      super.registerAttributes();
-      this.getAttribute(SharedMonsterAttributes.MOVEMENT_SPEED).setBaseValue(0.30000001192092896D);
-      if (this.isTame()) {
-         this.getAttribute(SharedMonsterAttributes.MAX_HEALTH).setBaseValue(20.0D);
-      } else {
-         this.getAttribute(SharedMonsterAttributes.MAX_HEALTH).setBaseValue(8.0D);
-      }
-
-      this.getAttributes().registerAttribute(SharedMonsterAttributes.ATTACK_DAMAGE).setBaseValue(2.0D);
+   public static AttributeSupplier.Builder createAttributes() {
+      return Mob.createMobAttributes().add(Attributes.MOVEMENT_SPEED, 0.30000001192092896D).add(Attributes.MAX_HEALTH, 8.0D).add(Attributes.ATTACK_DAMAGE, 2.0D);
    }
 
-   public void setTarget(@Nullable LivingEntity var1) {
-      super.setTarget(var1);
-      if (var1 == null) {
-         this.setAngry(false);
-      } else if (!this.isTame()) {
-         this.setAngry(true);
-      }
-
-   }
-
    protected void defineSynchedData() {
       super.defineSynchedData();
       this.entityData.define(DATA_INTERESTED_ID, false);
       this.entityData.define(DATA_COLLAR_COLOR, DyeColor.RED.getId());
+      this.entityData.define(DATA_REMAINING_ANGER_TIME, 0);
    }
 
    protected void playStepSound(BlockPos var1, BlockState var2) {
       this.playSound(SoundEvents.WOLF_STEP, 0.15F, 1.0F);
    }
 
    public void addAdditionalSaveData(CompoundTag var1) {
       super.addAdditionalSaveData(var1);
-      var1.putBoolean("Angry", this.isAngry());
       var1.putByte("CollarColor", (byte)this.getCollarColor().getId());
+      this.addPersistentAngerSaveData(var1);
    }
 
    public void readAdditionalSaveData(CompoundTag var1) {
       super.readAdditionalSaveData(var1);
-      this.setAngry(var1.getBoolean("Angry"));
       if (var1.contains("CollarColor", 99)) {
          this.setCollarColor(DyeColor.byId(var1.getInt("CollarColor")));
       }
 
+      this.readPersistentAngerSaveData((ServerLevel)this.level, var1);
    }
 
    protected SoundEvent getAmbientSound() {
       if (this.isAngry()) {
          return SoundEvents.WOLF_GROWL;
@@ -168,12 +162,12 @@
          this.shakeAnim = 0.0F;
          this.shakeAnimO = 0.0F;
          this.level.broadcastEntityEvent(this, (byte)8);
       }
 
-      if (!this.level.isClientSide && this.getTarget() == null && this.isAngry()) {
-         this.setAngry(false);
+      if (!this.level.isClientSide) {
+         this.updatePersistentAnger((ServerLevel)this.level, true);
       }
 
    }
 
    public void tick() {
@@ -255,73 +249,73 @@
    protected float getStandingEyeHeight(Pose var1, EntityDimensions var2) {
       return var2.height * 0.8F;
    }
 
    public int getMaxHeadXRot() {
-      return this.isSitting() ? 20 : super.getMaxHeadXRot();
+      return this.isInSittingPose() ? 20 : super.getMaxHeadXRot();
    }
 
    public boolean hurt(DamageSource var1, float var2) {
       if (this.isInvulnerableTo(var1)) {
          return false;
       } else {
          Entity var3 = var1.getEntity();
-         if (this.sitGoal != null) {
-            this.sitGoal.wantToSit(false);
-         }
-
+         this.setOrderedToSit(false);
          if (var3 != null && !(var3 instanceof Player) && !(var3 instanceof AbstractArrow)) {
             var2 = (var2 + 1.0F) / 2.0F;
          }
 
          return super.hurt(var1, var2);
       }
    }
 
    public boolean doHurtTarget(Entity var1) {
-      boolean var2 = var1.hurt(DamageSource.mobAttack(this), (float)((int)this.getAttribute(SharedMonsterAttributes.ATTACK_DAMAGE).getValue()));
+      boolean var2 = var1.hurt(DamageSource.mobAttack(this), (float)((int)this.getAttributeValue(Attributes.ATTACK_DAMAGE)));
       if (var2) {
          this.doEnchantDamageEffects(this, var1);
       }
 
       return var2;
    }
 
    public void setTame(boolean var1) {
       super.setTame(var1);
       if (var1) {
-         this.getAttribute(SharedMonsterAttributes.MAX_HEALTH).setBaseValue(20.0D);
+         this.getAttribute(Attributes.MAX_HEALTH).setBaseValue(20.0D);
          this.setHealth(20.0F);
       } else {
-         this.getAttribute(SharedMonsterAttributes.MAX_HEALTH).setBaseValue(8.0D);
+         this.getAttribute(Attributes.MAX_HEALTH).setBaseValue(8.0D);
       }
 
-      this.getAttribute(SharedMonsterAttributes.ATTACK_DAMAGE).setBaseValue(4.0D);
+      this.getAttribute(Attributes.ATTACK_DAMAGE).setBaseValue(4.0D);
    }
 
-   public boolean mobInteract(Player var1, InteractionHand var2) {
+   public InteractionResult mobInteract(Player var1, InteractionHand var2) {
       ItemStack var3 = var1.getItemInHand(var2);
       Item var4 = var3.getItem();
-      if (var3.getItem() instanceof SpawnEggItem) {
-         return super.mobInteract(var1, var2);
-      } else if (this.level.isClientSide) {
-         return this.isOwnedBy(var1) || var4 == Items.BONE && !this.isAngry();
+      if (this.level.isClientSide) {
+         boolean var7 = this.isOwnedBy(var1) || this.isTame() || var4 == Items.BONE && !this.isTame() && !this.isAngry();
+         return var7 ? InteractionResult.CONSUME : InteractionResult.PASS;
       } else {
          if (this.isTame()) {
-            if (var4.isEdible() && var4.getFoodProperties().isMeat() && this.getHealth() < this.getMaxHealth()) {
+            if (this.isFood(var3) && this.getHealth() < this.getMaxHealth()) {
                if (!var1.abilities.instabuild) {
                   var3.shrink(1);
                }
 
                this.heal((float)var4.getFoodProperties().getNutrition());
-               return true;
+               return InteractionResult.SUCCESS;
             }
 
             if (!(var4 instanceof DyeItem)) {
-               boolean var6 = super.mobInteract(var1, var2);
-               if (!var6 || this.isBaby()) {
-                  this.sitGoal.wantToSit(!this.isSitting());
+               InteractionResult var6 = super.mobInteract(var1, var2);
+               if ((!var6.consumesAction() || this.isBaby()) && this.isOwnedBy(var1)) {
+                  this.setOrderedToSit(!this.isOrderedToSit());
+                  this.jumping = false;
+                  this.navigation.stop();
+                  this.setTarget((LivingEntity)null);
+                  return InteractionResult.SUCCESS;
                }
 
                return var6;
             }
 
@@ -330,35 +324,28 @@
                this.setCollarColor(var5);
                if (!var1.abilities.instabuild) {
                   var3.shrink(1);
                }
 
-               return true;
+               return InteractionResult.SUCCESS;
             }
-
-            if (this.isOwnedBy(var1) && !this.isFood(var3)) {
-               this.sitGoal.wantToSit(!this.isSitting());
-               this.jumping = false;
-               this.navigation.stop();
-               this.setTarget((LivingEntity)null);
-            }
          } else if (var4 == Items.BONE && !this.isAngry()) {
             if (!var1.abilities.instabuild) {
                var3.shrink(1);
             }
 
             if (this.random.nextInt(3) == 0) {
                this.tame(var1);
                this.navigation.stop();
                this.setTarget((LivingEntity)null);
-               this.sitGoal.wantToSit(true);
+               this.setOrderedToSit(true);
                this.level.broadcastEntityEvent(this, (byte)7);
             } else {
                this.level.broadcastEntityEvent(this, (byte)6);
             }
 
-            return true;
+            return InteractionResult.SUCCESS;
          }
 
          return super.mobInteract(var1, var2);
       }
    }
@@ -389,41 +376,48 @@
 
    public int getMaxSpawnClusterSize() {
       return 8;
    }
 
-   public boolean isAngry() {
-      return ((Byte)this.entityData.get(DATA_FLAGS_ID) & 2) != 0;
+   public int getRemainingPersistentAngerTime() {
+      return (Integer)this.entityData.get(DATA_REMAINING_ANGER_TIME);
    }
 
-   public void setAngry(boolean var1) {
-      byte var2 = (Byte)this.entityData.get(DATA_FLAGS_ID);
-      if (var1) {
-         this.entityData.set(DATA_FLAGS_ID, (byte)(var2 | 2));
-      } else {
-         this.entityData.set(DATA_FLAGS_ID, (byte)(var2 & -3));
-      }
+   public void setRemainingPersistentAngerTime(int var1) {
+      this.entityData.set(DATA_REMAINING_ANGER_TIME, var1);
+   }
 
+   public void startPersistentAngerTimer() {
+      this.setRemainingPersistentAngerTime(PERSISTENT_ANGER_TIME.randomValue(this.random));
    }
 
+   @Nullable
+   public UUID getPersistentAngerTarget() {
+      return this.persistentAngerTarget;
+   }
+
+   public void setPersistentAngerTarget(@Nullable UUID var1) {
+      this.persistentAngerTarget = var1;
+   }
+
    public DyeColor getCollarColor() {
       return DyeColor.byId((Integer)this.entityData.get(DATA_COLLAR_COLOR));
    }
 
    public void setCollarColor(DyeColor var1) {
       this.entityData.set(DATA_COLLAR_COLOR, var1.getId());
    }
 
-   public Wolf getBreedOffspring(AgableMob var1) {
-      Wolf var2 = (Wolf)EntityType.WOLF.create(this.level);
-      UUID var3 = this.getOwnerUUID();
-      if (var3 != null) {
-         var2.setOwnerUUID(var3);
-         var2.setTame(true);
+   public Wolf getBreedOffspring(ServerLevel var1, AgableMob var2) {
+      Wolf var3 = (Wolf)EntityType.WOLF.create(var1);
+      UUID var4 = this.getOwnerUUID();
+      if (var4 != null) {
+         var3.setOwnerUUID(var4);
+         var3.setTame(true);
       }
 
-      return var2;
+      return var3;
    }
 
    public void setIsInterested(boolean var1) {
       this.entityData.set(DATA_INTERESTED_ID, var1);
    }
@@ -437,11 +431,11 @@
          return false;
       } else {
          Wolf var2 = (Wolf)var1;
          if (!var2.isTame()) {
             return false;
-         } else if (var2.isSitting()) {
+         } else if (var2.isInSittingPose()) {
             return false;
          } else {
             return this.isInLove() && var2.isInLove();
          }
       }
@@ -470,17 +464,23 @@
 
    public boolean canBeLeashed(Player var1) {
       return !this.isAngry() && super.canBeLeashed(var1);
    }
 
+   public Vec3 getLeashOffset() {
+      return new Vec3(0.0D, (double)(0.6F * this.getEyeHeight()), (double)(this.getBbWidth() * 0.4F));
+   }
+
    static {
       DATA_INTERESTED_ID = SynchedEntityData.defineId(Wolf.class, EntityDataSerializers.BOOLEAN);
       DATA_COLLAR_COLOR = SynchedEntityData.defineId(Wolf.class, EntityDataSerializers.INT);
+      DATA_REMAINING_ANGER_TIME = SynchedEntityData.defineId(Wolf.class, EntityDataSerializers.INT);
       PREY_SELECTOR = (var0) -> {
          EntityType var1 = var0.getType();
          return var1 == EntityType.SHEEP || var1 == EntityType.RABBIT || var1 == EntityType.FOX;
       };
+      PERSISTENT_ANGER_TIME = TimeUtil.rangeOfSeconds(20, 39);
    }
 
    class WolfAvoidEntityGoal<T extends LivingEntity> extends AvoidEntityGoal<T> {
       private final Wolf wolf;
 
