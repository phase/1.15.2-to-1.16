--- net/minecraft/world/entity/animal/horse/AbstractHorse.java
+++ net/minecraft/world/entity/animal/horse/AbstractHorse.java
@@ -1,24 +1,27 @@
 package net.minecraft.world.entity.animal.horse;
 
+import com.google.common.collect.UnmodifiableIterator;
 import java.util.Iterator;
 import java.util.Optional;
 import java.util.UUID;
 import java.util.function.Predicate;
 import javax.annotation.Nullable;
 import net.minecraft.advancements.CriteriaTriggers;
 import net.minecraft.core.BlockPos;
+import net.minecraft.core.Direction;
 import net.minecraft.core.particles.ParticleTypes;
 import net.minecraft.core.particles.SimpleParticleType;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.network.syncher.EntityDataAccessor;
 import net.minecraft.network.syncher.EntityDataSerializers;
 import net.minecraft.network.syncher.SynchedEntityData;
 import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.server.players.OldUsersConverter;
 import net.minecraft.sounds.SoundEvent;
 import net.minecraft.sounds.SoundEvents;
+import net.minecraft.sounds.SoundSource;
 import net.minecraft.util.Mth;
 import net.minecraft.world.Container;
 import net.minecraft.world.ContainerListener;
 import net.minecraft.world.DifficultyInstance;
 import net.minecraft.world.SimpleContainer;
@@ -26,49 +29,50 @@
 import net.minecraft.world.effect.MobEffects;
 import net.minecraft.world.entity.AgableMob;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EntityDimensions;
 import net.minecraft.world.entity.EntityType;
+import net.minecraft.world.entity.EquipmentSlot;
+import net.minecraft.world.entity.HumanoidArm;
 import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.Mob;
 import net.minecraft.world.entity.MobSpawnType;
-import net.minecraft.world.entity.MobType;
 import net.minecraft.world.entity.PlayerRideableJumping;
 import net.minecraft.world.entity.Pose;
+import net.minecraft.world.entity.Saddleable;
 import net.minecraft.world.entity.SpawnGroupData;
-import net.minecraft.world.entity.ai.attributes.Attribute;
-import net.minecraft.world.entity.ai.attributes.AttributeInstance;
-import net.minecraft.world.entity.ai.attributes.RangedAttribute;
+import net.minecraft.world.entity.ai.attributes.AttributeSupplier;
+import net.minecraft.world.entity.ai.attributes.Attributes;
 import net.minecraft.world.entity.ai.goal.BreedGoal;
 import net.minecraft.world.entity.ai.goal.FloatGoal;
 import net.minecraft.world.entity.ai.goal.FollowParentGoal;
 import net.minecraft.world.entity.ai.goal.LookAtPlayerGoal;
 import net.minecraft.world.entity.ai.goal.PanicGoal;
 import net.minecraft.world.entity.ai.goal.RandomLookAroundGoal;
 import net.minecraft.world.entity.ai.goal.RunAroundLikeCrazyGoal;
 import net.minecraft.world.entity.ai.goal.WaterAvoidingRandomStrollGoal;
 import net.minecraft.world.entity.ai.targeting.TargetingConditions;
 import net.minecraft.world.entity.animal.Animal;
-import net.minecraft.world.entity.monster.SharedMonsterAttributes;
 import net.minecraft.world.entity.player.Player;
+import net.minecraft.world.entity.vehicle.DismountHelper;
 import net.minecraft.world.item.Item;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.Items;
 import net.minecraft.world.item.enchantment.EnchantmentHelper;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.LevelAccessor;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.SoundType;
 import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.phys.AABB;
 import net.minecraft.world.phys.Vec3;
 
-public abstract class AbstractHorse extends Animal implements ContainerListener, PlayerRideableJumping {
+public abstract class AbstractHorse extends Animal implements ContainerListener, PlayerRideableJumping, Saddleable {
    private static final Predicate<LivingEntity> PARENT_HORSE_SELECTOR = (var0) -> {
       return var0 instanceof AbstractHorse && ((AbstractHorse)var0).isBred();
    };
    private static final TargetingConditions MOMMY_TARGETING;
-   protected static final Attribute JUMP_STRENGTH;
    private static final EntityDataAccessor<Byte> DATA_ID_FLAGS;
    private static final EntityDataAccessor<Optional<UUID>> DATA_ID_OWNER_UUID;
    private int eatingCounter;
    private int mouthCounter;
    private int standCounter;
@@ -152,14 +156,10 @@
 
    public void setIsJumping(boolean var1) {
       this.isJumping = var1;
    }
 
-   public boolean canBeLeashed(Player var1) {
-      return super.canBeLeashed(var1) && this.getMobType() != MobType.UNDEAD;
-   }
-
    protected void onLeashDistance(float var1) {
       if (var1 > 6.0F && this.isEating()) {
          this.setEating(false);
       }
 
@@ -179,14 +179,26 @@
 
    public void setBred(boolean var1) {
       this.setFlag(8, var1);
    }
 
-   public void setSaddled(boolean var1) {
-      this.setFlag(4, var1);
+   public boolean isSaddleable() {
+      return this.isAlive() && !this.isBaby() && this.isTamed();
    }
 
+   public void equipSaddle(@Nullable SoundSource var1) {
+      this.inventory.setItem(0, new ItemStack(Items.SADDLE));
+      if (var1 != null) {
+         this.level.playSound((Player)null, (Entity)this, SoundEvents.HORSE_SADDLE, var1, 0.5F, 1.0F);
+      }
+
+   }
+
+   public boolean isSaddled() {
+      return this.getFlag(4);
+   }
+
    public int getTemper() {
       return this.temper;
    }
 
    public void setTemper(int var1) {
@@ -197,23 +209,21 @@
       int var2 = Mth.clamp(this.getTemper() + var1, 0, this.getMaxTemper());
       this.setTemper(var2);
       return var2;
    }
 
-   public boolean hurt(DamageSource var1, float var2) {
-      Entity var3 = var1.getEntity();
-      return this.isVehicle() && var3 != null && this.hasIndirectPassenger(var3) ? false : super.hurt(var1, var2);
-   }
-
    public boolean isPushable() {
       return !this.isVehicle();
    }
 
    private void eating() {
       this.openMouth();
       if (!this.isSilent()) {
-         this.level.playSound((Player)null, this.getX(), this.getY(), this.getZ(), SoundEvents.HORSE_EAT, this.getSoundSource(), 1.0F, 1.0F + (this.random.nextFloat() - this.random.nextFloat()) * 0.2F);
+         SoundEvent var1 = this.getEatingSound();
+         if (var1 != null) {
+            this.level.playSound((Player)null, this.getX(), this.getY(), this.getZ(), var1, this.getSoundSource(), 1.0F, 1.0F + (this.random.nextFloat() - this.random.nextFloat()) * 0.2F);
+         }
       }
 
    }
 
    public boolean causeFallDamage(float var1, float var2) {
@@ -262,33 +272,38 @@
             }
          }
       }
 
       this.inventory.addListener(this);
-      this.updateEquipment();
+      this.updateContainerEquipment();
    }
 
-   protected void updateEquipment() {
+   protected void updateContainerEquipment() {
       if (!this.level.isClientSide) {
-         this.setSaddled(!this.inventory.getItem(0).isEmpty() && this.canBeSaddled());
+         this.setFlag(4, !this.inventory.getItem(0).isEmpty());
       }
    }
 
    public void containerChanged(Container var1) {
       boolean var2 = this.isSaddled();
-      this.updateEquipment();
+      this.updateContainerEquipment();
       if (this.tickCount > 20 && !var2 && this.isSaddled()) {
          this.playSound(SoundEvents.HORSE_SADDLE, 0.5F, 1.0F);
       }
 
    }
 
    public double getCustomJump() {
-      return this.getAttribute(JUMP_STRENGTH).getValue();
+      return this.getAttributeValue(Attributes.JUMP_STRENGTH);
    }
 
    @Nullable
+   protected SoundEvent getEatingSound() {
+      return null;
+   }
+
+   @Nullable
    protected SoundEvent getDeathSound() {
       return null;
    }
 
    @Nullable
@@ -307,29 +322,21 @@
       }
 
       return null;
    }
 
-   public boolean canBeSaddled() {
-      return true;
-   }
-
-   public boolean isSaddled() {
-      return this.getFlag(4);
-   }
-
    @Nullable
    protected SoundEvent getAngrySound() {
       this.stand();
       return null;
    }
 
    protected void playStepSound(BlockPos var1, BlockState var2) {
       if (!var2.getMaterial().isLiquid()) {
          BlockState var3 = this.level.getBlockState(var1.above());
          SoundType var4 = var2.getSoundType();
-         if (var3.getBlock() == Blocks.SNOW) {
+         if (var3.is(Blocks.SNOW)) {
             var4 = var3.getSoundType();
          }
 
          if (this.isVehicle() && this.canGallop) {
             ++this.gallopSoundCounter;
@@ -349,15 +356,12 @@
 
    protected void playGallopSound(SoundType var1) {
       this.playSound(SoundEvents.HORSE_GALLOP, var1.getVolume() * 0.15F, var1.getPitch());
    }
 
-   protected void registerAttributes() {
-      super.registerAttributes();
-      this.getAttributes().registerAttribute(JUMP_STRENGTH);
-      this.getAttribute(SharedMonsterAttributes.MAX_HEALTH).setBaseValue(53.0D);
-      this.getAttribute(SharedMonsterAttributes.MOVEMENT_SPEED).setBaseValue(0.22499999403953552D);
+   public static AttributeSupplier.Builder createBaseHorseAttributes() {
+      return Mob.createMobAttributes().add(Attributes.JUMP_STRENGTH).add(Attributes.MAX_HEALTH, 53.0D).add(Attributes.MOVEMENT_SPEED, 0.22499999403953552D);
    }
 
    public int getMaxSpawnClusterSize() {
       return 6;
    }
@@ -494,11 +498,11 @@
          if (this.random.nextInt(900) == 0 && this.deathTime == 0) {
             this.heal(1.0F);
          }
 
          if (this.canEatGrass()) {
-            if (!this.isEating() && !this.isVehicle() && this.random.nextInt(300) == 0 && this.level.getBlockState((new BlockPos(this)).below()).getBlock() == Blocks.GRASS_BLOCK) {
+            if (!this.isEating() && !this.isVehicle() && this.random.nextInt(300) == 0 && this.level.getBlockState(this.blockPosition().below()).is(Blocks.GRASS_BLOCK)) {
                this.setEating(true);
             }
 
             if (this.isEating() && ++this.eatingCounter > 50) {
                this.eatingCounter = 0;
@@ -659,14 +663,13 @@
             if (this.onGround && this.playerJumpPendingScale == 0.0F && this.isStanding() && !this.allowStandSliding) {
                var3 = 0.0F;
                var4 = 0.0F;
             }
 
-            double var5;
-            double var7;
             if (this.playerJumpPendingScale > 0.0F && !this.isJumping() && this.onGround) {
-               var5 = this.getCustomJump() * (double)this.playerJumpPendingScale * (double)this.getBlockJumpFactor();
+               double var5 = this.getCustomJump() * (double)this.playerJumpPendingScale * (double)this.getBlockJumpFactor();
+               double var7;
                if (this.hasEffect(MobEffects.JUMP)) {
                   var7 = var5 + (double)((float)(this.getEffect(MobEffects.JUMP).getAmplifier() + 1) * 0.1F);
                } else {
                   var7 = var5;
                }
@@ -685,31 +688,22 @@
                this.playerJumpPendingScale = 0.0F;
             }
 
             this.flyingSpeed = this.getSpeed() * 0.1F;
             if (this.isControlledByLocalInstance()) {
-               this.setSpeed((float)this.getAttribute(SharedMonsterAttributes.MOVEMENT_SPEED).getValue());
+               this.setSpeed((float)this.getAttributeValue(Attributes.MOVEMENT_SPEED));
                super.travel(new Vec3((double)var3, var1.y, (double)var4));
             } else if (var2 instanceof Player) {
                this.setDeltaMovement(Vec3.ZERO);
             }
 
             if (this.onGround) {
                this.playerJumpPendingScale = 0.0F;
                this.setIsJumping(false);
             }
 
-            this.animationSpeedOld = this.animationSpeed;
-            var5 = this.getX() - this.xo;
-            var7 = this.getZ() - this.zo;
-            float var12 = Mth.sqrt(var5 * var5 + var7 * var7) * 4.0F;
-            if (var12 > 1.0F) {
-               var12 = 1.0F;
-            }
-
-            this.animationSpeed += (var12 - this.animationSpeed) * 0.4F;
-            this.animationPosition += this.animationSpeed;
+            this.calculateEntityAnimation(this, false);
          } else {
             this.flyingSpeed = 0.02F;
             super.travel(var1);
          }
       }
@@ -724,11 +718,11 @@
       var1.putBoolean("EatingHaystack", this.isEating());
       var1.putBoolean("Bred", this.isBred());
       var1.putInt("Temper", this.getTemper());
       var1.putBoolean("Tame", this.isTamed());
       if (this.getOwnerUUID() != null) {
-         var1.putString("OwnerUUID", this.getOwnerUUID().toString());
+         var1.putUUID("Owner", this.getOwnerUUID());
       }
 
       if (!this.inventory.getItem(0).isEmpty()) {
          var1.put("SaddleItem", this.inventory.getItem(0).save(new CompoundTag()));
       }
@@ -739,35 +733,30 @@
       super.readAdditionalSaveData(var1);
       this.setEating(var1.getBoolean("EatingHaystack"));
       this.setBred(var1.getBoolean("Bred"));
       this.setTemper(var1.getInt("Temper"));
       this.setTamed(var1.getBoolean("Tame"));
-      String var2;
-      if (var1.contains("OwnerUUID", 8)) {
-         var2 = var1.getString("OwnerUUID");
+      UUID var2;
+      if (var1.hasUUID("Owner")) {
+         var2 = var1.getUUID("Owner");
       } else {
          String var3 = var1.getString("Owner");
          var2 = OldUsersConverter.convertMobOwnerIfNecessary(this.getServer(), var3);
       }
 
-      if (!var2.isEmpty()) {
-         this.setOwnerUUID(UUID.fromString(var2));
+      if (var2 != null) {
+         this.setOwnerUUID(var2);
       }
 
-      AttributeInstance var5 = this.getAttributes().getInstance("Speed");
-      if (var5 != null) {
-         this.getAttribute(SharedMonsterAttributes.MOVEMENT_SPEED).setBaseValue(var5.getBaseValue() * 0.25D);
-      }
-
       if (var1.contains("SaddleItem", 10)) {
          ItemStack var4 = ItemStack.of(var1.getCompound("SaddleItem"));
          if (var4.getItem() == Items.SADDLE) {
             this.inventory.setItem(0, var4);
          }
       }
 
-      this.updateEquipment();
+      this.updateContainerEquipment();
    }
 
    public boolean canMate(Animal var1) {
       return false;
    }
@@ -780,16 +769,16 @@
    public AgableMob getBreedOffspring(AgableMob var1) {
       return null;
    }
 
    protected void setOffspringAttributes(AgableMob var1, AbstractHorse var2) {
-      double var3 = this.getAttribute(SharedMonsterAttributes.MAX_HEALTH).getBaseValue() + var1.getAttribute(SharedMonsterAttributes.MAX_HEALTH).getBaseValue() + (double)this.generateRandomMaxHealth();
-      var2.getAttribute(SharedMonsterAttributes.MAX_HEALTH).setBaseValue(var3 / 3.0D);
-      double var5 = this.getAttribute(JUMP_STRENGTH).getBaseValue() + var1.getAttribute(JUMP_STRENGTH).getBaseValue() + this.generateRandomJumpStrength();
-      var2.getAttribute(JUMP_STRENGTH).setBaseValue(var5 / 3.0D);
-      double var7 = this.getAttribute(SharedMonsterAttributes.MOVEMENT_SPEED).getBaseValue() + var1.getAttribute(SharedMonsterAttributes.MOVEMENT_SPEED).getBaseValue() + this.generateRandomSpeed();
-      var2.getAttribute(SharedMonsterAttributes.MOVEMENT_SPEED).setBaseValue(var7 / 3.0D);
+      double var3 = this.getAttributeBaseValue(Attributes.MAX_HEALTH) + var1.getAttributeBaseValue(Attributes.MAX_HEALTH) + (double)this.generateRandomMaxHealth();
+      var2.getAttribute(Attributes.MAX_HEALTH).setBaseValue(var3 / 3.0D);
+      double var5 = this.getAttributeBaseValue(Attributes.JUMP_STRENGTH) + var1.getAttributeBaseValue(Attributes.JUMP_STRENGTH) + this.generateRandomJumpStrength();
+      var2.getAttribute(Attributes.JUMP_STRENGTH).setBaseValue(var5 / 3.0D);
+      double var7 = this.getAttributeBaseValue(Attributes.MOVEMENT_SPEED) + var1.getAttributeBaseValue(Attributes.MOVEMENT_SPEED) + this.generateRandomSpeed();
+      var2.getAttribute(Attributes.MOVEMENT_SPEED).setBaseValue(var7 / 3.0D);
    }
 
    public boolean canBeControlledByRider() {
       return this.getControllingPassenger() instanceof LivingEntity;
    }
@@ -869,11 +858,11 @@
       if (this.standAnimO > 0.0F) {
          float var6 = Mth.sin(this.yBodyRot * 0.017453292F);
          float var3 = Mth.cos(this.yBodyRot * 0.017453292F);
          float var4 = 0.7F * this.standAnimO;
          float var5 = 0.15F * this.standAnimO;
-         var1.setPos(this.getX() + (double)(var4 * var6), this.getY() + this.getRideHeight() + var1.getRidingHeight() + (double)var5, this.getZ() - (double)(var4 * var3));
+         var1.setPos(this.getX() + (double)(var4 * var6), this.getY() + this.getPassengersRidingOffset() + var1.getMyRidingOffset() + (double)var5, this.getZ() - (double)(var4 * var3));
          if (var1 instanceof LivingEntity) {
             ((LivingEntity)var1).yBodyRot = this.yBodyRot;
          }
       }
 
@@ -889,34 +878,38 @@
 
    protected double generateRandomSpeed() {
       return (0.44999998807907104D + this.random.nextDouble() * 0.3D + this.random.nextDouble() * 0.3D + this.random.nextDouble() * 0.3D) * 0.25D;
    }
 
-   public boolean onLadder() {
+   public boolean onClimbable() {
       return false;
    }
 
    protected float getStandingEyeHeight(Pose var1, EntityDimensions var2) {
       return var2.height * 0.95F;
    }
 
-   public boolean wearsArmor() {
+   public boolean canWearArmor() {
       return false;
    }
 
+   public boolean isWearingArmor() {
+      return !this.getItemBySlot(EquipmentSlot.CHEST).isEmpty();
+   }
+
    public boolean isArmor(ItemStack var1) {
       return false;
    }
 
    public boolean setSlot(int var1, ItemStack var2) {
       int var3 = var1 - 400;
       if (var3 >= 0 && var3 < 2 && var3 < this.inventory.getContainerSize()) {
          if (var3 == 0 && var2.getItem() != Items.SADDLE) {
             return false;
-         } else if (var3 != 1 || this.wearsArmor() && this.isArmor(var2)) {
+         } else if (var3 != 1 || this.canWearArmor() && this.isArmor(var2)) {
             this.inventory.setItem(var3, var2);
-            this.updateEquipment();
+            this.updateContainerEquipment();
             return true;
          } else {
             return false;
          }
       } else {
@@ -934,21 +927,74 @@
    public Entity getControllingPassenger() {
       return this.getPassengers().isEmpty() ? null : (Entity)this.getPassengers().get(0);
    }
 
    @Nullable
+   private Vec3 getDismountLocationInDirection(Vec3 var1, LivingEntity var2) {
+      double var3 = this.getX() + var1.x;
+      double var5 = this.getBoundingBox().minY;
+      double var7 = this.getZ() + var1.z;
+      BlockPos.MutableBlockPos var9 = new BlockPos.MutableBlockPos();
+      UnmodifiableIterator var10 = var2.getDismountPoses().iterator();
+
+      while(var10.hasNext()) {
+         Pose var11 = (Pose)var10.next();
+         var9.set(var3, var5, var7);
+         double var12 = this.getBoundingBox().maxY + 0.75D;
+
+         while(true) {
+            double var14 = this.level.getRelativeFloorHeight(var9);
+            if ((double)var9.getY() + var14 > var12) {
+               break;
+            }
+
+            if (DismountHelper.isFloorValid(var14)) {
+               AABB var16 = var2.getLocalBoundsForPose(var11);
+               Vec3 var17 = new Vec3(var3, (double)var9.getY() + var14, var7);
+               if (DismountHelper.canDismountTo(this.level, var2, var16.move(var17))) {
+                  var2.setPose(var11);
+                  return var17;
+               }
+            }
+
+            var9.move(Direction.UP);
+            if ((double)var9.getY() >= var12) {
+               break;
+            }
+         }
+      }
+
+      return null;
+   }
+
+   public Vec3 getDismountLocationForPassenger(LivingEntity var1) {
+      Vec3 var2 = getCollisionHorizontalEscapeVector((double)this.getBbWidth(), (double)var1.getBbWidth(), this.yRot + (var1.getMainArm() == HumanoidArm.RIGHT ? 90.0F : -90.0F));
+      Vec3 var3 = this.getDismountLocationInDirection(var2, var1);
+      if (var3 != null) {
+         return var3;
+      } else {
+         Vec3 var4 = getCollisionHorizontalEscapeVector((double)this.getBbWidth(), (double)var1.getBbWidth(), this.yRot + (var1.getMainArm() == HumanoidArm.LEFT ? 90.0F : -90.0F));
+         Vec3 var5 = this.getDismountLocationInDirection(var4, var1);
+         return var5 != null ? var5 : this.position();
+      }
+   }
+
+   protected void randomizeAttributes() {
+   }
+
+   @Nullable
    public SpawnGroupData finalizeSpawn(LevelAccessor var1, DifficultyInstance var2, MobSpawnType var3, @Nullable SpawnGroupData var4, @Nullable CompoundTag var5) {
       if (var4 == null) {
          var4 = new AgableMob.AgableMobGroupData();
          ((AgableMob.AgableMobGroupData)var4).setBabySpawnChance(0.2F);
       }
 
+      this.randomizeAttributes();
       return super.finalizeSpawn(var1, var2, var3, (SpawnGroupData)var4, var5);
    }
 
    static {
       MOMMY_TARGETING = (new TargetingConditions()).range(16.0D).allowInvulnerable().allowSameTeam().allowUnseeable().selector(PARENT_HORSE_SELECTOR);
-      JUMP_STRENGTH = (new RangedAttribute((Attribute)null, "horse.jumpStrength", 0.7D, 0.0D, 2.0D)).importLegacyName("Jump Strength").setSyncable(true);
       DATA_ID_FLAGS = SynchedEntityData.defineId(AbstractHorse.class, EntityDataSerializers.BYTE);
       DATA_ID_OWNER_UUID = SynchedEntityData.defineId(AbstractHorse.class, EntityDataSerializers.OPTIONAL_UUID);
    }
 }
