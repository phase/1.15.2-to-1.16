--- net/minecraft/world/entity/animal/horse/SkeletonTrapGoal.java
+++ net/minecraft/world/entity/animal/horse/SkeletonTrapGoal.java
@@ -1,17 +1,15 @@
 package net.minecraft.world.entity.animal.horse;
 
-import net.minecraft.core.BlockPos;
 import net.minecraft.nbt.CompoundTag;
-import net.minecraft.server.level.ServerLevel;
 import net.minecraft.world.DifficultyInstance;
 import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.entity.EquipmentSlot;
+import net.minecraft.world.entity.LightningBolt;
 import net.minecraft.world.entity.MobSpawnType;
 import net.minecraft.world.entity.SpawnGroupData;
 import net.minecraft.world.entity.ai.goal.Goal;
-import net.minecraft.world.entity.global.LightningBolt;
 import net.minecraft.world.entity.monster.Skeleton;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.Items;
 import net.minecraft.world.item.enchantment.EnchantmentHelper;
 
@@ -25,23 +23,26 @@
    public boolean canUse() {
       return this.horse.level.hasNearbyAlivePlayer(this.horse.getX(), this.horse.getY(), this.horse.getZ(), 10.0D);
    }
 
    public void tick() {
-      DifficultyInstance var1 = this.horse.level.getCurrentDifficultyAt(new BlockPos(this.horse));
+      DifficultyInstance var1 = this.horse.level.getCurrentDifficultyAt(this.horse.blockPosition());
       this.horse.setTrap(false);
       this.horse.setTamed(true);
       this.horse.setAge(0);
-      ((ServerLevel)this.horse.level).addGlobalEntity(new LightningBolt(this.horse.level, this.horse.getX(), this.horse.getY(), this.horse.getZ(), true));
-      Skeleton var2 = this.createSkeleton(var1, this.horse);
-      var2.startRiding(this.horse);
+      LightningBolt var2 = (LightningBolt)EntityType.LIGHTNING_BOLT.create(this.horse.level);
+      var2.moveTo(this.horse.getX(), this.horse.getY(), this.horse.getZ());
+      var2.setVisualOnly(true);
+      this.horse.level.addFreshEntity(var2);
+      Skeleton var3 = this.createSkeleton(var1, this.horse);
+      var3.startRiding(this.horse);
 
-      for(int var3 = 0; var3 < 3; ++var3) {
-         AbstractHorse var4 = this.createHorse(var1);
-         Skeleton var5 = this.createSkeleton(var1, var4);
-         var5.startRiding(var4);
-         var4.push(this.horse.getRandom().nextGaussian() * 0.5D, 0.0D, this.horse.getRandom().nextGaussian() * 0.5D);
+      for(int var4 = 0; var4 < 3; ++var4) {
+         AbstractHorse var5 = this.createHorse(var1);
+         Skeleton var6 = this.createSkeleton(var1, var5);
+         var6.startRiding(var5);
+         var5.push(this.horse.getRandom().nextGaussian() * 0.5D, 0.0D, this.horse.getRandom().nextGaussian() * 0.5D);
       }
 
    }
 
    private AbstractHorse createHorse(DifficultyInstance var1) {
