--- net/minecraft/world/entity/animal/Ocelot.java
+++ net/minecraft/world/entity/animal/Ocelot.java
@@ -8,44 +8,49 @@
 import net.minecraft.core.particles.SimpleParticleType;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.network.syncher.EntityDataAccessor;
 import net.minecraft.network.syncher.EntityDataSerializers;
 import net.minecraft.network.syncher.SynchedEntityData;
+import net.minecraft.server.level.ServerLevel;
 import net.minecraft.sounds.SoundEvent;
 import net.minecraft.sounds.SoundEvents;
 import net.minecraft.tags.BlockTags;
 import net.minecraft.world.DifficultyInstance;
 import net.minecraft.world.InteractionHand;
+import net.minecraft.world.InteractionResult;
 import net.minecraft.world.damagesource.DamageSource;
 import net.minecraft.world.entity.AgableMob;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EntitySelector;
 import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.entity.LivingEntity;
+import net.minecraft.world.entity.Mob;
 import net.minecraft.world.entity.MobSpawnType;
 import net.minecraft.world.entity.Pose;
 import net.minecraft.world.entity.SpawnGroupData;
+import net.minecraft.world.entity.ai.attributes.AttributeSupplier;
+import net.minecraft.world.entity.ai.attributes.Attributes;
 import net.minecraft.world.entity.ai.goal.AvoidEntityGoal;
 import net.minecraft.world.entity.ai.goal.BreedGoal;
 import net.minecraft.world.entity.ai.goal.FloatGoal;
 import net.minecraft.world.entity.ai.goal.LeapAtTargetGoal;
 import net.minecraft.world.entity.ai.goal.LookAtPlayerGoal;
 import net.minecraft.world.entity.ai.goal.OcelotAttackGoal;
 import net.minecraft.world.entity.ai.goal.TemptGoal;
 import net.minecraft.world.entity.ai.goal.WaterAvoidingRandomStrollGoal;
 import net.minecraft.world.entity.ai.goal.target.NearestAttackableTargetGoal;
-import net.minecraft.world.entity.monster.SharedMonsterAttributes;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.Items;
 import net.minecraft.world.item.crafting.Ingredient;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.LevelAccessor;
 import net.minecraft.world.level.LevelReader;
-import net.minecraft.world.level.block.Block;
+import net.minecraft.world.level.ServerLevelAccessor;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.phys.Vec3;
 
 public class Ocelot extends Animal {
    private static final Ingredient TEMPT_INGREDIENT;
    private static final EntityDataAccessor<Boolean> DATA_TRUSTING;
    private Ocelot.OcelotAvoidEntityGoal<Player> ocelotAvoidPlayersGoal;
@@ -115,15 +120,12 @@
 
    public boolean removeWhenFarAway(double var1) {
       return !this.isTrusting() && this.tickCount > 2400;
    }
 
-   protected void registerAttributes() {
-      super.registerAttributes();
-      this.getAttribute(SharedMonsterAttributes.MAX_HEALTH).setBaseValue(10.0D);
-      this.getAttribute(SharedMonsterAttributes.MOVEMENT_SPEED).setBaseValue(0.30000001192092896D);
-      this.getAttributes().registerAttribute(SharedMonsterAttributes.ATTACK_DAMAGE).setBaseValue(3.0D);
+   public static AttributeSupplier.Builder createAttributes() {
+      return Mob.createMobAttributes().add(Attributes.MAX_HEALTH, 10.0D).add(Attributes.MOVEMENT_SPEED, 0.30000001192092896D).add(Attributes.ATTACK_DAMAGE, 3.0D);
    }
 
    public boolean causeFallDamage(float var1, float var2) {
       return false;
    }
@@ -144,22 +146,22 @@
    protected SoundEvent getDeathSound() {
       return SoundEvents.OCELOT_DEATH;
    }
 
    private float getAttackDamage() {
-      return (float)this.getAttribute(SharedMonsterAttributes.ATTACK_DAMAGE).getValue();
+      return (float)this.getAttributeValue(Attributes.ATTACK_DAMAGE);
    }
 
    public boolean doHurtTarget(Entity var1) {
       return var1.hurt(DamageSource.mobAttack(this), this.getAttackDamage());
    }
 
    public boolean hurt(DamageSource var1, float var2) {
       return this.isInvulnerableTo(var1) ? false : super.hurt(var1, var2);
    }
 
-   public boolean mobInteract(Player var1, InteractionHand var2) {
+   public InteractionResult mobInteract(Player var1, InteractionHand var2) {
       ItemStack var3 = var1.getItemInHand(var2);
       if ((this.temptGoal == null || this.temptGoal.isRunning()) && !this.isTrusting() && this.isFood(var3) && var1.distanceToSqr(this) < 9.0D) {
          this.usePlayerItem(var1, var3);
          if (!this.level.isClientSide) {
             if (this.random.nextInt(3) == 0) {
@@ -170,11 +172,11 @@
                this.spawnTrustingParticles(false);
                this.level.broadcastEntityEvent(this, (byte)40);
             }
          }
 
-         return true;
+         return InteractionResult.sidedSuccess(this.level.isClientSide);
       } else {
          return super.mobInteract(var1, var2);
       }
    }
 
@@ -214,12 +216,12 @@
          this.goalSelector.addGoal(4, this.ocelotAvoidPlayersGoal);
       }
 
    }
 
-   public Ocelot getBreedOffspring(AgableMob var1) {
-      return (Ocelot)EntityType.OCELOT.create(this.level);
+   public Ocelot getBreedOffspring(ServerLevel var1, AgableMob var2) {
+      return (Ocelot)EntityType.OCELOT.create(var1);
    }
 
    public boolean isFood(ItemStack var1) {
       return TEMPT_INGREDIENT.test(var1);
    }
@@ -228,35 +230,37 @@
       return var4.nextInt(3) != 0;
    }
 
    public boolean checkSpawnObstruction(LevelReader var1) {
       if (var1.isUnobstructed(this) && !var1.containsAnyLiquid(this.getBoundingBox())) {
-         BlockPos var2 = new BlockPos(this);
+         BlockPos var2 = this.blockPosition();
          if (var2.getY() < var1.getSeaLevel()) {
             return false;
          }
 
          BlockState var3 = var1.getBlockState(var2.below());
-         Block var4 = var3.getBlock();
-         if (var4 == Blocks.GRASS_BLOCK || var3.is(BlockTags.LEAVES)) {
+         if (var3.is(Blocks.GRASS_BLOCK) || var3.is(BlockTags.LEAVES)) {
             return true;
          }
       }
 
       return false;
    }
 
    @Nullable
-   public SpawnGroupData finalizeSpawn(LevelAccessor var1, DifficultyInstance var2, MobSpawnType var3, @Nullable SpawnGroupData var4, @Nullable CompoundTag var5) {
+   public SpawnGroupData finalizeSpawn(ServerLevelAccessor var1, DifficultyInstance var2, MobSpawnType var3, @Nullable SpawnGroupData var4, @Nullable CompoundTag var5) {
       if (var4 == null) {
-         var4 = new AgableMob.AgableMobGroupData();
-         ((AgableMob.AgableMobGroupData)var4).setBabySpawnChance(1.0F);
+         var4 = new AgableMob.AgableMobGroupData(1.0F);
       }
 
       return super.finalizeSpawn(var1, var2, var3, (SpawnGroupData)var4, var5);
    }
 
+   public Vec3 getLeashOffset() {
+      return new Vec3(0.0D, (double)(0.5F * this.getEyeHeight()), (double)(this.getBbWidth() * 0.4F));
+   }
+
    static {
       TEMPT_INGREDIENT = Ingredient.of(Items.COD, Items.SALMON);
       DATA_TRUSTING = SynchedEntityData.defineId(Ocelot.class, EntityDataSerializers.BOOLEAN);
    }
 
