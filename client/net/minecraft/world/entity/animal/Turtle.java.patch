--- net/minecraft/world/entity/animal/Turtle.java
+++ net/minecraft/world/entity/animal/Turtle.java
@@ -23,15 +23,19 @@
 import net.minecraft.world.damagesource.DamageSource;
 import net.minecraft.world.entity.AgableMob;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.entity.ExperienceOrb;
+import net.minecraft.world.entity.LightningBolt;
 import net.minecraft.world.entity.LivingEntity;
+import net.minecraft.world.entity.Mob;
 import net.minecraft.world.entity.MobSpawnType;
 import net.minecraft.world.entity.MobType;
 import net.minecraft.world.entity.MoverType;
 import net.minecraft.world.entity.SpawnGroupData;
+import net.minecraft.world.entity.ai.attributes.AttributeSupplier;
+import net.minecraft.world.entity.ai.attributes.Attributes;
 import net.minecraft.world.entity.ai.control.MoveControl;
 import net.minecraft.world.entity.ai.goal.BreedGoal;
 import net.minecraft.world.entity.ai.goal.Goal;
 import net.minecraft.world.entity.ai.goal.LookAtPlayerGoal;
 import net.minecraft.world.entity.ai.goal.MoveToBlockGoal;
@@ -39,12 +43,10 @@
 import net.minecraft.world.entity.ai.goal.RandomStrollGoal;
 import net.minecraft.world.entity.ai.navigation.PathNavigation;
 import net.minecraft.world.entity.ai.navigation.WaterBoundPathNavigation;
 import net.minecraft.world.entity.ai.targeting.TargetingConditions;
 import net.minecraft.world.entity.ai.util.RandomPos;
-import net.minecraft.world.entity.global.LightningBolt;
-import net.minecraft.world.entity.monster.SharedMonsterAttributes;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.item.Item;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.Items;
 import net.minecraft.world.level.GameRules;
@@ -160,17 +162,17 @@
       this.setTravelPos(new BlockPos(var5, var6, var7));
    }
 
    @Nullable
    public SpawnGroupData finalizeSpawn(LevelAccessor var1, DifficultyInstance var2, MobSpawnType var3, @Nullable SpawnGroupData var4, @Nullable CompoundTag var5) {
-      this.setHomePos(new BlockPos(this));
+      this.setHomePos(this.blockPosition());
       this.setTravelPos(BlockPos.ZERO);
       return super.finalizeSpawn(var1, var2, var3, var4, var5);
    }
 
    public static boolean checkTurtleSpawnRules(EntityType<Turtle> var0, LevelAccessor var1, MobSpawnType var2, BlockPos var3, Random var4) {
-      return var3.getY() < var1.getSeaLevel() + 4 && var1.getBlockState(var3.below()).getBlock() == Blocks.SAND && var1.getRawBrightness(var3, 0) > 8;
+      return var3.getY() < var1.getSeaLevel() + 4 && TurtleEggBlock.onSand(var1, var3) && var1.getRawBrightness(var3, 0) > 8;
    }
 
    protected void registerGoals() {
       this.goalSelector.addGoal(0, new Turtle.TurtlePanicGoal(this, 1.2D));
       this.goalSelector.addGoal(1, new Turtle.TurtleBreedGoal(this, 1.0D));
@@ -181,17 +183,15 @@
       this.goalSelector.addGoal(7, new Turtle.TurtleTravelGoal(this, 1.0D));
       this.goalSelector.addGoal(8, new LookAtPlayerGoal(this, Player.class, 8.0F));
       this.goalSelector.addGoal(9, new Turtle.TurtleRandomStrollGoal(this, 1.0D, 100));
    }
 
-   protected void registerAttributes() {
-      super.registerAttributes();
-      this.getAttribute(SharedMonsterAttributes.MAX_HEALTH).setBaseValue(30.0D);
-      this.getAttribute(SharedMonsterAttributes.MOVEMENT_SPEED).setBaseValue(0.25D);
+   public static AttributeSupplier.Builder createAttributes() {
+      return Mob.createMobAttributes().add(Attributes.MAX_HEALTH, 30.0D).add(Attributes.MOVEMENT_SPEED, 0.25D);
    }
 
-   public boolean isPushedByWater() {
+   public boolean isPushedByFluid() {
       return false;
    }
 
    public boolean canBreatheUnderwater() {
       return true;
@@ -260,19 +260,19 @@
 
    public float getWalkTargetValue(BlockPos var1, LevelReader var2) {
       if (!this.isGoingHome() && var2.getFluidState(var1).is(FluidTags.WATER)) {
          return 10.0F;
       } else {
-         return var2.getBlockState(var1.below()).getBlock() == Blocks.SAND ? 10.0F : var2.getBrightness(var1) - 0.5F;
+         return TurtleEggBlock.onSand(var2, var1) ? 10.0F : var2.getBrightness(var1) - 0.5F;
       }
    }
 
    public void aiStep() {
       super.aiStep();
       if (this.isAlive() && this.isLayingEgg() && this.layEggCounter >= 1 && this.layEggCounter % 5 == 0) {
-         BlockPos var1 = new BlockPos(this);
-         if (this.level.getBlockState(var1.below()).getBlock() == Blocks.SAND) {
+         BlockPos var1 = this.blockPosition();
+         if (TurtleEggBlock.onSand(this.level, var1)) {
             this.level.levelEvent(2001, var1, Block.getId(Blocks.SAND.defaultBlockState()));
          }
       }
 
    }
@@ -335,11 +335,11 @@
 
       public boolean isStableDestination(BlockPos var1) {
          if (this.mob instanceof Turtle) {
             Turtle var2 = (Turtle)this.mob;
             if (var2.isTravelling()) {
-               return this.level.getBlockState(var1).getBlock() == Blocks.WATER;
+               return this.level.getBlockState(var1).is(Blocks.WATER);
             }
          }
 
          return !this.level.getBlockState(var1.below()).isAir();
       }
@@ -378,11 +378,11 @@
             double var7 = (double)Mth.sqrt(var1 * var1 + var3 * var3 + var5 * var5);
             var3 /= var7;
             float var9 = (float)(Mth.atan2(var5, var1) * 57.2957763671875D) - 90.0F;
             this.turtle.yRot = this.rotlerp(this.turtle.yRot, var9, 90.0F);
             this.turtle.yBodyRot = this.turtle.yRot;
-            float var10 = (float)(this.speedModifier * this.turtle.getAttribute(SharedMonsterAttributes.MOVEMENT_SPEED).getValue());
+            float var10 = (float)(this.speedModifier * this.turtle.getAttributeValue(Attributes.MOVEMENT_SPEED));
             this.turtle.setSpeed(Mth.lerp(0.125F, this.turtle.getSpeed(), var10));
             this.turtle.setDeltaMovement(this.turtle.getDeltaMovement().add(0.0D, (double)this.turtle.getSpeed() * var3 * 0.1D, 0.0D));
          } else {
             this.turtle.setSpeed(0.0F);
          }
@@ -413,12 +413,11 @@
       public boolean shouldRecalculatePath() {
          return this.tryTicks % 160 == 0;
       }
 
       protected boolean isValidTarget(LevelReader var1, BlockPos var2) {
-         Block var3 = var1.getBlockState(var2).getBlock();
-         return var3 == Blocks.WATER;
+         return var1.getBlockState(var2).is(Blocks.WATER);
       }
    }
 
    static class TurtleRandomStrollGoal extends RandomStrollGoal {
       private final Turtle turtle;
@@ -449,11 +448,11 @@
          return super.canContinueToUse() && this.turtle.hasEgg() && this.turtle.getHomePos().closerThan(this.turtle.position(), 9.0D);
       }
 
       public void tick() {
          super.tick();
-         BlockPos var1 = new BlockPos(this.turtle);
+         BlockPos var1 = this.turtle.blockPosition();
          if (!this.turtle.isInWater() && this.isReachedTarget()) {
             if (this.turtle.layEggCounter < 1) {
                this.turtle.setLayingEgg(true);
             } else if (this.turtle.layEggCounter > 200) {
                Level var2 = this.turtle.level;
@@ -470,16 +469,11 @@
          }
 
       }
 
       protected boolean isValidTarget(LevelReader var1, BlockPos var2) {
-         if (!var1.isEmptyBlock(var2.above())) {
-            return false;
-         } else {
-            Block var3 = var1.getBlockState(var2).getBlock();
-            return var3 == Blocks.SAND;
-         }
+         return !var1.isEmptyBlock(var2.above()) ? false : TurtleEggBlock.isSand(var1, var2);
       }
    }
 
    static class TurtleBreedGoal extends BreedGoal {
       private final Turtle turtle;
@@ -612,17 +606,17 @@
          if (var2) {
             ++this.closeToHomeTryTicks;
          }
 
          if (this.turtle.getNavigation().isDone()) {
-            Vec3 var3 = new Vec3(var1);
+            Vec3 var3 = Vec3.atBottomCenterOf(var1);
             Vec3 var4 = RandomPos.getPosTowards(this.turtle, 16, 3, var3, 0.3141592741012573D);
             if (var4 == null) {
                var4 = RandomPos.getPosTowards(this.turtle, 8, 7, var3);
             }
 
-            if (var4 != null && !var2 && this.turtle.level.getBlockState(new BlockPos(var4)).getBlock() != Blocks.WATER) {
+            if (var4 != null && !var2 && !this.turtle.level.getBlockState(new BlockPos(var4)).is(Blocks.WATER)) {
                var4 = RandomPos.getPosTowards(this.turtle, 16, 5, var3);
             }
 
             if (var4 == null) {
                this.stuck = true;
@@ -666,11 +660,11 @@
          this.stuck = false;
       }
 
       public void tick() {
          if (this.turtle.getNavigation().isDone()) {
-            Vec3 var1 = new Vec3(this.turtle.getTravelPos());
+            Vec3 var1 = Vec3.atBottomCenterOf(this.turtle.getTravelPos());
             Vec3 var2 = RandomPos.getPosTowards(this.turtle, 16, 3, var1, 0.3141592741012573D);
             if (var2 == null) {
                var2 = RandomPos.getPosTowards(this.turtle, 8, 7, var1);
             }
 
