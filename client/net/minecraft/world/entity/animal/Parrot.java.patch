--- net/minecraft/world/entity/animal/Parrot.java
+++ net/minecraft/world/entity/animal/Parrot.java
@@ -19,10 +19,11 @@
 import net.minecraft.sounds.SoundEvent;
 import net.minecraft.sounds.SoundEvents;
 import net.minecraft.sounds.SoundSource;
 import net.minecraft.tags.BlockTags;
 import net.minecraft.util.Mth;
+import net.minecraft.world.Difficulty;
 import net.minecraft.world.DifficultyInstance;
 import net.minecraft.world.InteractionHand;
 import net.minecraft.world.damagesource.DamageSource;
 import net.minecraft.world.effect.MobEffectInstance;
 import net.minecraft.world.effect.MobEffects;
@@ -32,32 +33,31 @@
 import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.entity.Mob;
 import net.minecraft.world.entity.MobSpawnType;
 import net.minecraft.world.entity.Pose;
 import net.minecraft.world.entity.SpawnGroupData;
+import net.minecraft.world.entity.ai.attributes.AttributeSupplier;
+import net.minecraft.world.entity.ai.attributes.Attributes;
 import net.minecraft.world.entity.ai.control.FlyingMoveControl;
 import net.minecraft.world.entity.ai.goal.FloatGoal;
 import net.minecraft.world.entity.ai.goal.FollowMobGoal;
 import net.minecraft.world.entity.ai.goal.FollowOwnerGoal;
 import net.minecraft.world.entity.ai.goal.LandOnOwnersShoulderGoal;
 import net.minecraft.world.entity.ai.goal.LookAtPlayerGoal;
 import net.minecraft.world.entity.ai.goal.PanicGoal;
-import net.minecraft.world.entity.ai.goal.SitGoal;
+import net.minecraft.world.entity.ai.goal.SitWhenOrderedToGoal;
 import net.minecraft.world.entity.ai.goal.WaterAvoidingRandomFlyingGoal;
 import net.minecraft.world.entity.ai.navigation.FlyingPathNavigation;
 import net.minecraft.world.entity.ai.navigation.PathNavigation;
-import net.minecraft.world.entity.monster.SharedMonsterAttributes;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.item.Item;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.Items;
 import net.minecraft.world.item.SpawnEggItem;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.LevelAccessor;
-import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.Blocks;
-import net.minecraft.world.level.block.LogBlock;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.pathfinder.BlockPathTypes;
 import net.minecraft.world.phys.Vec3;
 
 public class Parrot extends ShoulderRidingEntity implements FlyingAnimal {
@@ -91,28 +91,27 @@
       }
 
       return super.finalizeSpawn(var1, var2, var3, (SpawnGroupData)var4, var5);
    }
 
+   public boolean isBaby() {
+      return false;
+   }
+
    protected void registerGoals() {
-      this.sitGoal = new SitGoal(this);
       this.goalSelector.addGoal(0, new PanicGoal(this, 1.25D));
       this.goalSelector.addGoal(0, new FloatGoal(this));
       this.goalSelector.addGoal(1, new LookAtPlayerGoal(this, Player.class, 8.0F));
-      this.goalSelector.addGoal(2, this.sitGoal);
+      this.goalSelector.addGoal(2, new SitWhenOrderedToGoal(this));
       this.goalSelector.addGoal(2, new FollowOwnerGoal(this, 1.0D, 5.0F, 1.0F, true));
       this.goalSelector.addGoal(2, new WaterAvoidingRandomFlyingGoal(this, 1.0D));
       this.goalSelector.addGoal(3, new LandOnOwnersShoulderGoal(this));
       this.goalSelector.addGoal(3, new FollowMobGoal(this, 1.0D, 3.0F, 7.0F));
    }
 
-   protected void registerAttributes() {
-      super.registerAttributes();
-      this.getAttributes().registerAttribute(SharedMonsterAttributes.FLYING_SPEED);
-      this.getAttribute(SharedMonsterAttributes.MAX_HEALTH).setBaseValue(6.0D);
-      this.getAttribute(SharedMonsterAttributes.FLYING_SPEED).setBaseValue(0.4000000059604645D);
-      this.getAttribute(SharedMonsterAttributes.MOVEMENT_SPEED).setBaseValue(0.20000000298023224D);
+   public static AttributeSupplier.Builder createAttributes() {
+      return Mob.createMobAttributes().add(Attributes.MAX_HEALTH, 6.0D).add(Attributes.FLYING_SPEED, 0.4000000059604645D).add(Attributes.MOVEMENT_SPEED, 0.20000000298023224D);
    }
 
    protected PathNavigation createNavigation(Level var1) {
       FlyingPathNavigation var2 = new FlyingPathNavigation(this, var1);
       var2.setCanOpenDoors(false);
@@ -124,16 +123,19 @@
    protected float getStandingEyeHeight(Pose var1, EntityDimensions var2) {
       return var2.height * 0.6F;
    }
 
    public void aiStep() {
-      imitateNearbyMobs(this.level, this);
-      if (this.jukebox == null || !this.jukebox.closerThan(this.position(), 3.46D) || this.level.getBlockState(this.jukebox).getBlock() != Blocks.JUKEBOX) {
+      if (this.jukebox == null || !this.jukebox.closerThan(this.position(), 3.46D) || !this.level.getBlockState(this.jukebox).is(Blocks.JUKEBOX)) {
          this.partyParrot = false;
          this.jukebox = null;
       }
 
+      if (this.level.random.nextInt(400) == 0) {
+         imitateNearbyMobs(this.level, this);
+      }
+
       super.aiStep();
       this.calculateFlapping();
    }
 
    public void setRecordPlayingNearby(BlockPos var1, boolean var2) {
@@ -161,12 +163,12 @@
       }
 
       this.flap += this.flapping * 2.0F;
    }
 
-   private static boolean imitateNearbyMobs(Level var0, Entity var1) {
-      if (var1.isAlive() && !var1.isSilent() && var0.random.nextInt(50) == 0) {
+   public static boolean imitateNearbyMobs(Level var0, Entity var1) {
+      if (var1.isAlive() && !var1.isSilent() && var0.random.nextInt(2) == 0) {
          List var2 = var0.getEntitiesOfClass(Mob.class, var1.getBoundingBox().inflate(20.0D), NOT_PARROT_PREDICATE);
          if (!var2.isEmpty()) {
             Mob var3 = (Mob)var2.get(var0.random.nextInt(var2.size()));
             if (!var3.isSilent()) {
                SoundEvent var4 = getImitatedSound(var3.getType());
@@ -215,11 +217,11 @@
          }
 
          return true;
       } else if (!this.isFlying() && this.isTame() && this.isOwnedBy(var1)) {
          if (!this.level.isClientSide) {
-            this.sitGoal.wantToSit(!this.isSitting());
+            this.setOrderedToSit(!this.isOrderedToSit());
          }
 
          return true;
       } else {
          return super.mobInteract(var1, var2);
@@ -229,12 +231,12 @@
    public boolean isFood(ItemStack var1) {
       return false;
    }
 
    public static boolean checkParrotSpawnRules(EntityType<Parrot> var0, LevelAccessor var1, MobSpawnType var2, BlockPos var3, Random var4) {
-      Block var5 = var1.getBlockState(var3.below()).getBlock();
-      return (var5.is(BlockTags.LEAVES) || var5 == Blocks.GRASS_BLOCK || var5 instanceof LogBlock || var5 == Blocks.AIR) && var1.getRawBrightness(var3, 0) > 8;
+      BlockState var5 = var1.getBlockState(var3.below());
+      return (var5.is(BlockTags.LEAVES) || var5.is(Blocks.GRASS_BLOCK) || var5.is(BlockTags.LOGS) || var5.is(Blocks.AIR)) && var1.getRawBrightness(var3, 0) > 8;
    }
 
    public boolean causeFallDamage(float var1, float var2) {
       return false;
    }
@@ -249,30 +251,23 @@
    @Nullable
    public AgableMob getBreedOffspring(AgableMob var1) {
       return null;
    }
 
-   public static void playAmbientSound(Level var0, Entity var1) {
-      if (!var1.isSilent() && !imitateNearbyMobs(var0, var1) && var0.random.nextInt(200) == 0) {
-         var0.playSound((Player)null, var1.getX(), var1.getY(), var1.getZ(), getAmbient(var0.random), var1.getSoundSource(), 1.0F, getPitch(var0.random));
-      }
-
-   }
-
    public boolean doHurtTarget(Entity var1) {
       return var1.hurt(DamageSource.mobAttack(this), 3.0F);
    }
 
    @Nullable
    public SoundEvent getAmbientSound() {
-      return getAmbient(this.random);
+      return getAmbient(this.level, this.level.random);
    }
 
-   private static SoundEvent getAmbient(Random var0) {
-      if (var0.nextInt(1000) == 0) {
-         ArrayList var1 = Lists.newArrayList(MOB_SOUND_MAP.keySet());
-         return getImitatedSound((EntityType)var1.get(var0.nextInt(var1.size())));
+   public static SoundEvent getAmbient(Level var0, Random var1) {
+      if (var0.getDifficulty() != Difficulty.PEACEFUL && var1.nextInt(1000) == 0) {
+         ArrayList var2 = Lists.newArrayList(MOB_SOUND_MAP.keySet());
+         return getImitatedSound((EntityType)var2.get(var1.nextInt(var2.size())));
       } else {
          return SoundEvents.PARROT_AMBIENT;
       }
    }
 
@@ -303,11 +298,11 @@
 
    protected float getVoicePitch() {
       return getPitch(this.random);
    }
 
-   private static float getPitch(Random var0) {
+   public static float getPitch(Random var0) {
       return (var0.nextFloat() - var0.nextFloat()) * 0.2F + 1.0F;
    }
 
    public SoundSource getSoundSource() {
       return SoundSource.NEUTRAL;
@@ -325,14 +320,11 @@
 
    public boolean hurt(DamageSource var1, float var2) {
       if (this.isInvulnerableTo(var1)) {
          return false;
       } else {
-         if (this.sitGoal != null) {
-            this.sitGoal.wantToSit(false);
-         }
-
+         this.setOrderedToSit(false);
          return super.hurt(var1, var2);
       }
    }
 
    public int getVariant() {
@@ -380,14 +372,16 @@
          var0.put(EntityType.ENDER_DRAGON, SoundEvents.PARROT_IMITATE_ENDER_DRAGON);
          var0.put(EntityType.ENDERMITE, SoundEvents.PARROT_IMITATE_ENDERMITE);
          var0.put(EntityType.EVOKER, SoundEvents.PARROT_IMITATE_EVOKER);
          var0.put(EntityType.GHAST, SoundEvents.PARROT_IMITATE_GHAST);
          var0.put(EntityType.GUARDIAN, SoundEvents.PARROT_IMITATE_GUARDIAN);
+         var0.put(EntityType.HOGLIN, SoundEvents.PARROT_IMITATE_HOGLIN);
          var0.put(EntityType.HUSK, SoundEvents.PARROT_IMITATE_HUSK);
          var0.put(EntityType.ILLUSIONER, SoundEvents.PARROT_IMITATE_ILLUSIONER);
          var0.put(EntityType.MAGMA_CUBE, SoundEvents.PARROT_IMITATE_MAGMA_CUBE);
          var0.put(EntityType.PHANTOM, SoundEvents.PARROT_IMITATE_PHANTOM);
+         var0.put(EntityType.PIGLIN, SoundEvents.PARROT_IMITATE_PIGLIN);
          var0.put(EntityType.PILLAGER, SoundEvents.PARROT_IMITATE_PILLAGER);
          var0.put(EntityType.RAVAGER, SoundEvents.PARROT_IMITATE_RAVAGER);
          var0.put(EntityType.SHULKER, SoundEvents.PARROT_IMITATE_SHULKER);
          var0.put(EntityType.SILVERFISH, SoundEvents.PARROT_IMITATE_SILVERFISH);
          var0.put(EntityType.SKELETON, SoundEvents.PARROT_IMITATE_SKELETON);
@@ -397,10 +391,11 @@
          var0.put(EntityType.VEX, SoundEvents.PARROT_IMITATE_VEX);
          var0.put(EntityType.VINDICATOR, SoundEvents.PARROT_IMITATE_VINDICATOR);
          var0.put(EntityType.WITCH, SoundEvents.PARROT_IMITATE_WITCH);
          var0.put(EntityType.WITHER, SoundEvents.PARROT_IMITATE_WITHER);
          var0.put(EntityType.WITHER_SKELETON, SoundEvents.PARROT_IMITATE_WITHER_SKELETON);
+         var0.put(EntityType.ZOGLIN, SoundEvents.PARROT_IMITATE_ZOGLIN);
          var0.put(EntityType.ZOMBIE, SoundEvents.PARROT_IMITATE_ZOMBIE);
          var0.put(EntityType.ZOMBIE_VILLAGER, SoundEvents.PARROT_IMITATE_ZOMBIE_VILLAGER);
       });
    }
 }
