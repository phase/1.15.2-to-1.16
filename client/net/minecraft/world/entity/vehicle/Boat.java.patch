--- net/minecraft/world/entity/vehicle/Boat.java
+++ net/minecraft/world/entity/vehicle/Boat.java
@@ -1,7 +1,8 @@
 package net.minecraft.world.entity.vehicle;
 
+import com.google.common.collect.UnmodifiableIterator;
 import java.util.List;
 import javax.annotation.Nullable;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.core.particles.ParticleTypes;
@@ -16,16 +17,17 @@
 import net.minecraft.sounds.SoundEvents;
 import net.minecraft.tags.FluidTags;
 import net.minecraft.util.Mth;
 import net.minecraft.world.InteractionHand;
 import net.minecraft.world.damagesource.DamageSource;
-import net.minecraft.world.damagesource.IndirectEntityDamageSource;
 import net.minecraft.world.entity.Entity;
+import net.minecraft.world.entity.EntityDimensions;
 import net.minecraft.world.entity.EntitySelector;
 import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.MoverType;
+import net.minecraft.world.entity.Pose;
 import net.minecraft.world.entity.animal.Animal;
 import net.minecraft.world.entity.animal.WaterAnimal;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.item.Item;
 import net.minecraft.world.item.Items;
@@ -88,10 +90,14 @@
       this.xo = var2;
       this.yo = var4;
       this.zo = var6;
    }
 
+   protected float getEyeHeight(Pose var1, EntityDimensions var2) {
+      return var2.height;
+   }
+
    protected boolean isMovementNoisy() {
       return false;
    }
 
    protected void defineSynchedData() {
@@ -116,36 +122,32 @@
 
    public boolean isPushable() {
       return true;
    }
 
-   public double getRideHeight() {
+   public double getPassengersRidingOffset() {
       return -0.1D;
    }
 
    public boolean hurt(DamageSource var1, float var2) {
       if (this.isInvulnerableTo(var1)) {
          return false;
       } else if (!this.level.isClientSide && !this.removed) {
-         if (var1 instanceof IndirectEntityDamageSource && var1.getEntity() != null && this.hasPassenger(var1.getEntity())) {
-            return false;
-         } else {
-            this.setHurtDir(-this.getHurtDir());
-            this.setHurtTime(10);
-            this.setDamage(this.getDamage() + var2 * 10.0F);
-            this.markHurt();
-            boolean var3 = var1.getEntity() instanceof Player && ((Player)var1.getEntity()).abilities.instabuild;
-            if (var3 || this.getDamage() > 40.0F) {
-               if (!var3 && this.level.getGameRules().getBoolean(GameRules.RULE_DOENTITYDROPS)) {
-                  this.spawnAtLocation(this.getDropItem());
-               }
-
-               this.remove();
+         this.setHurtDir(-this.getHurtDir());
+         this.setHurtTime(10);
+         this.setDamage(this.getDamage() + var2 * 10.0F);
+         this.markHurt();
+         boolean var3 = var1.getEntity() instanceof Player && ((Player)var1.getEntity()).abilities.instabuild;
+         if (var3 || this.getDamage() > 40.0F) {
+            if (!var3 && this.level.getGameRules().getBoolean(GameRules.RULE_DOENTITYDROPS)) {
+               this.spawnAtLocation(this.getDropItem());
             }
 
-            return true;
+            this.remove();
          }
+
+         return true;
       } else {
          return true;
       }
    }
 
@@ -403,57 +405,36 @@
       int var3 = Mth.ceil(var1.maxX);
       int var4 = Mth.floor(var1.maxY);
       int var5 = Mth.ceil(var1.maxY - this.lastYd);
       int var6 = Mth.floor(var1.minZ);
       int var7 = Mth.ceil(var1.maxZ);
-      BlockPos.PooledMutableBlockPos var8 = BlockPos.PooledMutableBlockPos.acquire();
-      Throwable var9 = null;
+      BlockPos.MutableBlockPos var8 = new BlockPos.MutableBlockPos();
 
-      try {
-         label160:
-         for(int var10 = var4; var10 < var5; ++var10) {
-            float var11 = 0.0F;
+      label39:
+      for(int var9 = var4; var9 < var5; ++var9) {
+         float var10 = 0.0F;
 
-            for(int var12 = var2; var12 < var3; ++var12) {
-               for(int var13 = var6; var13 < var7; ++var13) {
-                  var8.set(var12, var10, var13);
-                  FluidState var14 = this.level.getFluidState(var8);
-                  if (var14.is(FluidTags.WATER)) {
-                     var11 = Math.max(var11, var14.getHeight(this.level, var8));
-                  }
-
-                  if (var11 >= 1.0F) {
-                     continue label160;
-                  }
+         for(int var11 = var2; var11 < var3; ++var11) {
+            for(int var12 = var6; var12 < var7; ++var12) {
+               var8.set(var11, var9, var12);
+               FluidState var13 = this.level.getFluidState(var8);
+               if (var13.is(FluidTags.WATER)) {
+                  var10 = Math.max(var10, var13.getHeight(this.level, var8));
                }
-            }
 
-            if (var11 < 1.0F) {
-               float var26 = (float)var8.getY() + var11;
-               return var26;
-            }
-         }
-
-         float var25 = (float)(var5 + 1);
-         return var25;
-      } catch (Throwable var23) {
-         var9 = var23;
-         throw var23;
-      } finally {
-         if (var8 != null) {
-            if (var9 != null) {
-               try {
-                  var8.close();
-               } catch (Throwable var22) {
-                  var9.addSuppressed(var22);
+               if (var10 >= 1.0F) {
+                  continue label39;
                }
-            } else {
-               var8.close();
             }
          }
 
+         if (var10 < 1.0F) {
+            return (float)var8.getY() + var10;
+         }
       }
+
+      return (float)(var5 + 1);
    }
 
    public float getGroundFriction() {
       AABB var1 = this.getBoundingBox();
       AABB var2 = new AABB(var1.minX, var1.minY - 0.001D, var1.minZ, var1.maxX, var1.minY, var1.maxZ);
@@ -464,47 +445,28 @@
       int var7 = Mth.floor(var2.minZ) - 1;
       int var8 = Mth.ceil(var2.maxZ) + 1;
       VoxelShape var9 = Shapes.create(var2);
       float var10 = 0.0F;
       int var11 = 0;
-      BlockPos.PooledMutableBlockPos var12 = BlockPos.PooledMutableBlockPos.acquire();
-      Throwable var13 = null;
+      BlockPos.MutableBlockPos var12 = new BlockPos.MutableBlockPos();
 
-      try {
-         for(int var14 = var3; var14 < var4; ++var14) {
-            for(int var15 = var7; var15 < var8; ++var15) {
-               int var16 = (var14 != var3 && var14 != var4 - 1 ? 0 : 1) + (var15 != var7 && var15 != var8 - 1 ? 0 : 1);
-               if (var16 != 2) {
-                  for(int var17 = var5; var17 < var6; ++var17) {
-                     if (var16 <= 0 || var17 != var5 && var17 != var6 - 1) {
-                        var12.set(var14, var17, var15);
-                        BlockState var18 = this.level.getBlockState(var12);
-                        if (!(var18.getBlock() instanceof WaterlilyBlock) && Shapes.joinIsNotEmpty(var18.getCollisionShape(this.level, var12).move((double)var14, (double)var17, (double)var15), var9, BooleanOp.AND)) {
-                           var10 += var18.getBlock().getFriction();
-                           ++var11;
-                        }
+      for(int var13 = var3; var13 < var4; ++var13) {
+         for(int var14 = var7; var14 < var8; ++var14) {
+            int var15 = (var13 != var3 && var13 != var4 - 1 ? 0 : 1) + (var14 != var7 && var14 != var8 - 1 ? 0 : 1);
+            if (var15 != 2) {
+               for(int var16 = var5; var16 < var6; ++var16) {
+                  if (var15 <= 0 || var16 != var5 && var16 != var6 - 1) {
+                     var12.set(var13, var16, var14);
+                     BlockState var17 = this.level.getBlockState(var12);
+                     if (!(var17.getBlock() instanceof WaterlilyBlock) && Shapes.joinIsNotEmpty(var17.getCollisionShape(this.level, var12).move((double)var13, (double)var16, (double)var14), var9, BooleanOp.AND)) {
+                        var10 += var17.getBlock().getFriction();
+                        ++var11;
                      }
                   }
                }
             }
          }
-      } catch (Throwable var26) {
-         var13 = var26;
-         throw var26;
-      } finally {
-         if (var12 != null) {
-            if (var13 != null) {
-               try {
-                  var12.close();
-               } catch (Throwable var25) {
-                  var13.addSuppressed(var25);
-               }
-            } else {
-               var12.close();
-            }
-         }
-
       }
 
       return var10 / (float)var11;
    }
 
@@ -516,43 +478,24 @@
       int var5 = Mth.ceil(var1.minY + 0.001D);
       int var6 = Mth.floor(var1.minZ);
       int var7 = Mth.ceil(var1.maxZ);
       boolean var8 = false;
       this.waterLevel = Double.MIN_VALUE;
-      BlockPos.PooledMutableBlockPos var9 = BlockPos.PooledMutableBlockPos.acquire();
-      Throwable var10 = null;
+      BlockPos.MutableBlockPos var9 = new BlockPos.MutableBlockPos();
 
-      try {
-         for(int var11 = var2; var11 < var3; ++var11) {
-            for(int var12 = var4; var12 < var5; ++var12) {
-               for(int var13 = var6; var13 < var7; ++var13) {
-                  var9.set(var11, var12, var13);
-                  FluidState var14 = this.level.getFluidState(var9);
-                  if (var14.is(FluidTags.WATER)) {
-                     float var15 = (float)var12 + var14.getHeight(this.level, var9);
-                     this.waterLevel = Math.max((double)var15, this.waterLevel);
-                     var8 |= var1.minY < (double)var15;
-                  }
+      for(int var10 = var2; var10 < var3; ++var10) {
+         for(int var11 = var4; var11 < var5; ++var11) {
+            for(int var12 = var6; var12 < var7; ++var12) {
+               var9.set(var10, var11, var12);
+               FluidState var13 = this.level.getFluidState(var9);
+               if (var13.is(FluidTags.WATER)) {
+                  float var14 = (float)var11 + var13.getHeight(this.level, var9);
+                  this.waterLevel = Math.max((double)var14, this.waterLevel);
+                  var8 |= var1.minY < (double)var14;
                }
             }
          }
-      } catch (Throwable var23) {
-         var10 = var23;
-         throw var23;
-      } finally {
-         if (var9 != null) {
-            if (var10 != null) {
-               try {
-                  var9.close();
-               } catch (Throwable var22) {
-                  var10.addSuppressed(var22);
-               }
-            } else {
-               var9.close();
-            }
-         }
-
       }
 
       return var8;
    }
 
@@ -565,46 +508,26 @@
       int var6 = Mth.floor(var1.maxY);
       int var7 = Mth.ceil(var2);
       int var8 = Mth.floor(var1.minZ);
       int var9 = Mth.ceil(var1.maxZ);
       boolean var10 = false;
-      BlockPos.PooledMutableBlockPos var11 = BlockPos.PooledMutableBlockPos.acquire();
-      Throwable var12 = null;
+      BlockPos.MutableBlockPos var11 = new BlockPos.MutableBlockPos();
 
-      try {
-         for(int var13 = var4; var13 < var5; ++var13) {
-            for(int var14 = var6; var14 < var7; ++var14) {
-               for(int var15 = var8; var15 < var9; ++var15) {
-                  var11.set(var13, var14, var15);
-                  FluidState var16 = this.level.getFluidState(var11);
-                  if (var16.is(FluidTags.WATER) && var2 < (double)((float)var11.getY() + var16.getHeight(this.level, var11))) {
-                     if (!var16.isSource()) {
-                        Boat.Status var17 = Boat.Status.UNDER_FLOWING_WATER;
-                        return var17;
-                     }
-
-                     var10 = true;
+      for(int var12 = var4; var12 < var5; ++var12) {
+         for(int var13 = var6; var13 < var7; ++var13) {
+            for(int var14 = var8; var14 < var9; ++var14) {
+               var11.set(var12, var13, var14);
+               FluidState var15 = this.level.getFluidState(var11);
+               if (var15.is(FluidTags.WATER) && var2 < (double)((float)var11.getY() + var15.getHeight(this.level, var11))) {
+                  if (!var15.isSource()) {
+                     return Boat.Status.UNDER_FLOWING_WATER;
                   }
+
+                  var10 = true;
                }
             }
          }
-      } catch (Throwable var27) {
-         var12 = var27;
-         throw var27;
-      } finally {
-         if (var11 != null) {
-            if (var12 != null) {
-               try {
-                  var11.close();
-               } catch (Throwable var26) {
-                  var12.addSuppressed(var26);
-               }
-            } else {
-               var11.close();
-            }
-         }
-
       }
 
       return var10 ? Boat.Status.UNDER_WATER : null;
    }
 
@@ -679,11 +602,11 @@
    }
 
    public void positionRider(Entity var1) {
       if (this.hasPassenger(var1)) {
          float var2 = 0.0F;
-         float var3 = (float)((this.removed ? 0.009999999776482582D : this.getRideHeight()) + var1.getRidingHeight());
+         float var3 = (float)((this.removed ? 0.009999999776482582D : this.getPassengersRidingOffset()) + var1.getMyRidingOffset());
          if (this.getPassengers().size() > 1) {
             int var4 = this.getPassengers().indexOf(var1);
             if (var4 == 0) {
                var2 = 0.2F;
             } else {
@@ -707,10 +630,45 @@
          }
 
       }
    }
 
+   public Vec3 getDismountLocationForPassenger(LivingEntity var1) {
+      Vec3 var2 = getCollisionHorizontalEscapeVector((double)(this.getBbWidth() * Mth.SQRT_OF_TWO), (double)var1.getBbWidth(), this.yRot);
+      double var3 = this.getX() + var2.x;
+      double var5 = this.getZ() + var2.z;
+      BlockPos var7 = new BlockPos(var3, this.getBoundingBox().maxY, var5);
+      BlockPos var8 = var7.below();
+      if (!this.level.isWaterAt(var8)) {
+         UnmodifiableIterator var9 = var1.getDismountPoses().iterator();
+
+         while(var9.hasNext()) {
+            Pose var10 = (Pose)var9.next();
+            AABB var11 = var1.getLocalBoundsForPose(var10);
+            double var12 = this.level.getRelativeFloorHeight(var7);
+            if (DismountHelper.isFloorValid(var12)) {
+               Vec3 var14 = new Vec3(var3, (double)var7.getY() + var12, var5);
+               if (DismountHelper.canDismountTo(this.level, var1, var11.move(var14))) {
+                  var1.setPose(var10);
+                  return var14;
+               }
+            }
+
+            double var17 = this.level.getRelativeFloorHeight(var8);
+            if (DismountHelper.isFloorValid(var17)) {
+               Vec3 var16 = new Vec3(var3, (double)var8.getY() + var17, var5);
+               if (DismountHelper.canDismountTo(this.level, var1, var11.move(var16))) {
+                  var1.setPose(var10);
+                  return var16;
+               }
+            }
+         }
+      }
+
+      return super.getDismountLocationForPassenger(var1);
+   }
+
    protected void clampRotation(Entity var1) {
       var1.setYBodyRot(this.yRot);
       float var2 = Mth.wrapDegrees(var1.yRot - this.yRot);
       float var3 = Mth.clamp(var2, -105.0F, 105.0F);
       var1.yRotO += var3 - var2;
@@ -766,11 +724,11 @@
                   }
                }
             }
 
             this.fallDistance = 0.0F;
-         } else if (!this.level.getFluidState((new BlockPos(this)).below()).is(FluidTags.WATER) && var1 < 0.0D) {
+         } else if (!this.level.getFluidState(this.blockPosition().below()).is(FluidTags.WATER) && var1 < 0.0D) {
             this.fallDistance = (float)((double)this.fallDistance - var1);
          }
 
       }
    }
