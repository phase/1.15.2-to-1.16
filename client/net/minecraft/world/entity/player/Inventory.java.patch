--- net/minecraft/world/entity/player/Inventory.java
+++ net/minecraft/world/entity/player/Inventory.java
@@ -16,10 +16,11 @@
 import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.tags.Tag;
 import net.minecraft.world.Container;
 import net.minecraft.world.ContainerHelper;
 import net.minecraft.world.Nameable;
+import net.minecraft.world.damagesource.DamageSource;
 import net.minecraft.world.entity.EquipmentSlot;
 import net.minecraft.world.item.ArmorItem;
 import net.minecraft.world.item.Item;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.level.Level;
@@ -160,48 +161,21 @@
          this.selected -= 9;
       }
 
    }
 
-   public int clearInventory(Predicate<ItemStack> var1, int var2) {
-      int var3 = 0;
-
-      int var4;
-      for(var4 = 0; var4 < this.getContainerSize(); ++var4) {
-         ItemStack var5 = this.getItem(var4);
-         if (!var5.isEmpty() && var1.test(var5)) {
-            int var6 = var2 <= 0 ? var5.getCount() : Math.min(var2 - var3, var5.getCount());
-            var3 += var6;
-            if (var2 != 0) {
-               var5.shrink(var6);
-               if (var5.isEmpty()) {
-                  this.setItem(var4, ItemStack.EMPTY);
-               }
-
-               if (var2 > 0 && var3 >= var2) {
-                  return var3;
-               }
-            }
-         }
+   public int clearOrCountMatchingItems(Predicate<ItemStack> var1, int var2, Container var3) {
+      byte var4 = 0;
+      boolean var5 = var2 == 0;
+      int var6 = var4 + ContainerHelper.clearOrCountMatchingItems((Container)this, var1, var2 - var4, var5);
+      var6 += ContainerHelper.clearOrCountMatchingItems(var3, var1, var2 - var6, var5);
+      var6 += ContainerHelper.clearOrCountMatchingItems(this.carried, var1, var2 - var6, var5);
+      if (this.carried.isEmpty()) {
+         this.carried = ItemStack.EMPTY;
       }
 
-      if (!this.carried.isEmpty() && var1.test(this.carried)) {
-         var4 = var2 <= 0 ? this.carried.getCount() : Math.min(var2 - var3, this.carried.getCount());
-         var3 += var4;
-         if (var2 != 0) {
-            this.carried.shrink(var4);
-            if (this.carried.isEmpty()) {
-               this.carried = ItemStack.EMPTY;
-            }
-
-            if (var2 > 0 && var3 >= var2) {
-               return var3;
-            }
-         }
-      }
-
-      return var3;
+      return var6;
    }
 
    private int addResource(ItemStack var1) {
       int var2 = this.getSlotWithRemainingSpace(var1);
       if (var2 == -1) {
@@ -537,33 +511,29 @@
 
       return var2 == null ? ItemStack.EMPTY : (ItemStack)var2.get(var1);
    }
 
    public Component getName() {
-      return new TranslatableComponent("container.inventory", new Object[0]);
+      return new TranslatableComponent("container.inventory");
    }
 
-   public boolean canDestroy(BlockState var1) {
-      return this.getItem(this.selected).canDestroySpecial(var1);
-   }
-
    public ItemStack getArmor(int var1) {
       return (ItemStack)this.armor.get(var1);
    }
 
-   public void hurtArmor(float var1) {
-      if (var1 > 0.0F) {
-         var1 /= 4.0F;
-         if (var1 < 1.0F) {
-            var1 = 1.0F;
+   public void hurtArmor(DamageSource var1, float var2) {
+      if (var2 > 0.0F) {
+         var2 /= 4.0F;
+         if (var2 < 1.0F) {
+            var2 = 1.0F;
          }
 
-         for(int var2 = 0; var2 < this.armor.size(); ++var2) {
-            ItemStack var3 = (ItemStack)this.armor.get(var2);
-            if (var3.getItem() instanceof ArmorItem) {
-               var3.hurtAndBreak((int)var1, this.player, (var1x) -> {
-                  var1x.broadcastBreakEvent(EquipmentSlot.byTypeAndIndex(EquipmentSlot.Type.ARMOR, var2));
+         for(int var3 = 0; var3 < this.armor.size(); ++var3) {
+            ItemStack var4 = (ItemStack)this.armor.get(var3);
+            if ((!var1.isFire() || !var4.getItem().isFireResistant()) && var4.getItem() instanceof ArmorItem) {
+               var4.hurtAndBreak((int)var2, this.player, (var1x) -> {
+                  var1x.broadcastBreakEvent(EquipmentSlot.byTypeAndIndex(EquipmentSlot.Type.ARMOR, var3));
                });
             }
          }
 
       }
