--- net/minecraft/world/entity/monster/Guardian.java
+++ net/minecraft/world/entity/monster/Guardian.java
@@ -21,10 +21,12 @@
 import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.MobSpawnType;
 import net.minecraft.world.entity.MobType;
 import net.minecraft.world.entity.MoverType;
 import net.minecraft.world.entity.Pose;
+import net.minecraft.world.entity.ai.attributes.AttributeSupplier;
+import net.minecraft.world.entity.ai.attributes.Attributes;
 import net.minecraft.world.entity.ai.control.LookControl;
 import net.minecraft.world.entity.ai.control.MoveControl;
 import net.minecraft.world.entity.ai.goal.Goal;
 import net.minecraft.world.entity.ai.goal.LookAtPlayerGoal;
 import net.minecraft.world.entity.ai.goal.MoveTowardsRestrictionGoal;
@@ -42,15 +44,15 @@
 import net.minecraft.world.phys.Vec3;
 
 public class Guardian extends Monster {
    private static final EntityDataAccessor<Boolean> DATA_ID_MOVING;
    private static final EntityDataAccessor<Integer> DATA_ID_ATTACK_TARGET;
-   protected float clientSideTailAnimation;
-   protected float clientSideTailAnimationO;
-   protected float clientSideTailAnimationSpeed;
-   protected float clientSideSpikesAnimation;
-   protected float clientSideSpikesAnimationO;
+   private float clientSideTailAnimation;
+   private float clientSideTailAnimationO;
+   private float clientSideTailAnimationSpeed;
+   private float clientSideSpikesAnimation;
+   private float clientSideSpikesAnimationO;
    private LivingEntity clientSideCachedAttackTarget;
    private int clientSideAttackTime;
    private boolean clientSideTouchedGround;
    protected RandomStrollGoal randomStrollGoal;
 
@@ -75,16 +77,12 @@
       this.randomStrollGoal.setFlags(EnumSet.of(Goal.Flag.MOVE, Goal.Flag.LOOK));
       var1.setFlags(EnumSet.of(Goal.Flag.MOVE, Goal.Flag.LOOK));
       this.targetSelector.addGoal(1, new NearestAttackableTargetGoal(this, LivingEntity.class, 10, true, false, new Guardian.GuardianAttackSelector(this)));
    }
 
-   protected void registerAttributes() {
-      super.registerAttributes();
-      this.getAttribute(SharedMonsterAttributes.ATTACK_DAMAGE).setBaseValue(6.0D);
-      this.getAttribute(SharedMonsterAttributes.MOVEMENT_SPEED).setBaseValue(0.5D);
-      this.getAttribute(SharedMonsterAttributes.FOLLOW_RANGE).setBaseValue(16.0D);
-      this.getAttribute(SharedMonsterAttributes.MAX_HEALTH).setBaseValue(30.0D);
+   public static AttributeSupplier.Builder createAttributes() {
+      return Monster.createMonsterAttributes().add(Attributes.ATTACK_DAMAGE, 6.0D).add(Attributes.MOVEMENT_SPEED, 0.5D).add(Attributes.FOLLOW_RANGE, 16.0D).add(Attributes.MAX_HEALTH, 30.0D);
    }
 
    protected PathNavigation createNavigation(Level var1) {
       return new WaterBoundPathNavigation(this, var1);
    }
@@ -191,11 +189,11 @@
                var1 = this.getDeltaMovement();
                if (var1.y > 0.0D && this.clientSideTouchedGround && !this.isSilent()) {
                   this.level.playLocalSound(this.getX(), this.getY(), this.getZ(), this.getFlopSound(), this.getSoundSource(), 1.0F, 1.0F, false);
                }
 
-               this.clientSideTouchedGround = var1.y < 0.0D && this.level.loadedAndEntityCanStandOn((new BlockPos(this)).below(), this);
+               this.clientSideTouchedGround = var1.y < 0.0D && this.level.loadedAndEntityCanStandOn(this.blockPosition().below(), this);
             } else if (this.isMoving()) {
                if (this.clientSideTailAnimationSpeed < 0.5F) {
                   this.clientSideTailAnimationSpeed = 4.0F;
                } else {
                   this.clientSideTailAnimationSpeed += (0.5F - this.clientSideTailAnimationSpeed) * 0.1F;
@@ -344,11 +342,11 @@
             double var6 = var1.y / var2;
             double var8 = var1.z / var2;
             float var10 = (float)(Mth.atan2(var1.z, var1.x) * 57.2957763671875D) - 90.0F;
             this.guardian.yRot = this.rotlerp(this.guardian.yRot, var10, 90.0F);
             this.guardian.yBodyRot = this.guardian.yRot;
-            float var11 = (float)(this.speedModifier * this.guardian.getAttribute(SharedMonsterAttributes.MOVEMENT_SPEED).getValue());
+            float var11 = (float)(this.speedModifier * this.guardian.getAttributeValue(Attributes.MOVEMENT_SPEED));
             float var12 = Mth.lerp(0.125F, this.guardian.getSpeed(), var11);
             this.guardian.setSpeed(var12);
             double var13 = Math.sin((double)(this.guardian.tickCount + this.guardian.getId()) * 0.5D) * 0.05D;
             double var15 = Math.cos((double)(this.guardian.yRot * 0.017453292F));
             double var17 = Math.sin((double)(this.guardian.yRot * 0.017453292F));
@@ -417,11 +415,13 @@
             this.guardian.setTarget((LivingEntity)null);
          } else {
             ++this.attackTime;
             if (this.attackTime == 0) {
                this.guardian.setActiveAttackTarget(this.guardian.getTarget().getId());
-               this.guardian.level.broadcastEntityEvent(this.guardian, (byte)21);
+               if (!this.guardian.isSilent()) {
+                  this.guardian.level.broadcastEntityEvent(this.guardian, (byte)21);
+               }
             } else if (this.attackTime >= this.guardian.getAttackDuration()) {
                float var2 = 1.0F;
                if (this.guardian.level.getDifficulty() == Difficulty.HARD) {
                   var2 += 2.0F;
                }
@@ -429,11 +429,11 @@
                if (this.elder) {
                   var2 += 2.0F;
                }
 
                var1.hurt(DamageSource.indirectMagic(this.guardian, this.guardian), var2);
-               var1.hurt(DamageSource.mobAttack(this.guardian), (float)this.guardian.getAttribute(SharedMonsterAttributes.ATTACK_DAMAGE).getValue());
+               var1.hurt(DamageSource.mobAttack(this.guardian), (float)this.guardian.getAttributeValue(Attributes.ATTACK_DAMAGE));
                this.guardian.setTarget((LivingEntity)null);
             }
 
             super.tick();
          }
