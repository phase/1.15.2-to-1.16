--- net/minecraft/world/entity/monster/Zombie.java
+++ net/minecraft/world/entity/monster/Zombie.java
@@ -1,10 +1,11 @@
 package net.minecraft.world.entity.monster;
 
 import java.time.LocalDate;
 import java.time.temporal.ChronoField;
 import java.util.List;
+import java.util.Random;
 import java.util.UUID;
 import java.util.function.Predicate;
 import javax.annotation.Nullable;
 import net.minecraft.core.BlockPos;
 import net.minecraft.nbt.CompoundTag;
@@ -18,11 +19,10 @@
 import net.minecraft.sounds.SoundSource;
 import net.minecraft.tags.FluidTags;
 import net.minecraft.util.Mth;
 import net.minecraft.world.Difficulty;
 import net.minecraft.world.DifficultyInstance;
-import net.minecraft.world.InteractionHand;
 import net.minecraft.world.damagesource.DamageSource;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EntityDimensions;
 import net.minecraft.world.entity.EntitySelector;
 import net.minecraft.world.entity.EntityType;
@@ -31,14 +31,15 @@
 import net.minecraft.world.entity.MobSpawnType;
 import net.minecraft.world.entity.MobType;
 import net.minecraft.world.entity.PathfinderMob;
 import net.minecraft.world.entity.Pose;
 import net.minecraft.world.entity.SpawnGroupData;
-import net.minecraft.world.entity.ai.attributes.Attribute;
+import net.minecraft.world.entity.SpawnPlacements;
 import net.minecraft.world.entity.ai.attributes.AttributeInstance;
 import net.minecraft.world.entity.ai.attributes.AttributeModifier;
-import net.minecraft.world.entity.ai.attributes.RangedAttribute;
+import net.minecraft.world.entity.ai.attributes.AttributeSupplier;
+import net.minecraft.world.entity.ai.attributes.Attributes;
 import net.minecraft.world.entity.ai.goal.BreakDoorGoal;
 import net.minecraft.world.entity.ai.goal.LookAtPlayerGoal;
 import net.minecraft.world.entity.ai.goal.MoveThroughVillageGoal;
 import net.minecraft.world.entity.ai.goal.RandomLookAroundGoal;
 import net.minecraft.world.entity.ai.goal.RemoveBlockGoal;
@@ -51,22 +52,20 @@
 import net.minecraft.world.entity.animal.IronGolem;
 import net.minecraft.world.entity.animal.Turtle;
 import net.minecraft.world.entity.npc.AbstractVillager;
 import net.minecraft.world.entity.npc.Villager;
 import net.minecraft.world.entity.player.Player;
-import net.minecraft.world.item.Item;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.Items;
-import net.minecraft.world.item.SpawnEggItem;
 import net.minecraft.world.level.GameRules;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.LevelAccessor;
+import net.minecraft.world.level.NaturalSpawner;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.state.BlockState;
 
 public class Zombie extends Monster {
-   protected static final Attribute SPAWN_REINFORCEMENTS_CHANCE = (new RangedAttribute((Attribute)null, "zombie.spawnReinforcements", 0.0D, 0.0D, 1.0D)).importLegacyName("Spawn Reinforcements Chance");
    private static final UUID SPEED_MODIFIER_BABY_UUID = UUID.fromString("B9766B59-9566-4402-BC1F-2EE2A276D836");
    private static final AttributeModifier SPEED_MODIFIER_BABY;
    private static final EntityDataAccessor<Boolean> DATA_BABY_ID;
    private static final EntityDataAccessor<Integer> DATA_SPECIAL_TYPE_ID;
    private static final EntityDataAccessor<Boolean> DATA_DROWNED_CONVERSION_ID;
@@ -94,24 +93,19 @@
 
    protected void addBehaviourGoals() {
       this.goalSelector.addGoal(2, new ZombieAttackGoal(this, 1.0D, false));
       this.goalSelector.addGoal(6, new MoveThroughVillageGoal(this, 1.0D, true, 4, this::canBreakDoors));
       this.goalSelector.addGoal(7, new WaterAvoidingRandomStrollGoal(this, 1.0D));
-      this.targetSelector.addGoal(1, (new HurtByTargetGoal(this, new Class[0])).setAlertOthers(PigZombie.class));
+      this.targetSelector.addGoal(1, (new HurtByTargetGoal(this, new Class[0])).setAlertOthers(ZombifiedPiglin.class));
       this.targetSelector.addGoal(2, new NearestAttackableTargetGoal(this, Player.class, true));
       this.targetSelector.addGoal(3, new NearestAttackableTargetGoal(this, AbstractVillager.class, false));
       this.targetSelector.addGoal(3, new NearestAttackableTargetGoal(this, IronGolem.class, true));
       this.targetSelector.addGoal(5, new NearestAttackableTargetGoal(this, Turtle.class, 10, true, false, Turtle.BABY_ON_LAND_SELECTOR));
    }
 
-   protected void registerAttributes() {
-      super.registerAttributes();
-      this.getAttribute(SharedMonsterAttributes.FOLLOW_RANGE).setBaseValue(35.0D);
-      this.getAttribute(SharedMonsterAttributes.MOVEMENT_SPEED).setBaseValue(0.23000000417232513D);
-      this.getAttribute(SharedMonsterAttributes.ATTACK_DAMAGE).setBaseValue(3.0D);
-      this.getAttribute(SharedMonsterAttributes.ARMOR).setBaseValue(2.0D);
-      this.getAttributes().registerAttribute(SPAWN_REINFORCEMENTS_CHANCE).setBaseValue(this.random.nextDouble() * 0.10000000149011612D);
+   public static AttributeSupplier.Builder createAttributes() {
+      return Monster.createMonsterAttributes().add(Attributes.FOLLOW_RANGE, 35.0D).add(Attributes.MOVEMENT_SPEED, 0.23000000417232513D).add(Attributes.ATTACK_DAMAGE, 3.0D).add(Attributes.ARMOR, 2.0D).add(Attributes.SPAWN_REINFORCEMENTS_CHANCE);
    }
 
    protected void defineSynchedData() {
       super.defineSynchedData();
       this.getEntityData().define(DATA_BABY_ID, false);
@@ -162,14 +156,14 @@
    }
 
    public void setBaby(boolean var1) {
       this.getEntityData().set(DATA_BABY_ID, var1);
       if (this.level != null && !this.level.isClientSide) {
-         AttributeInstance var2 = this.getAttribute(SharedMonsterAttributes.MOVEMENT_SPEED);
+         AttributeInstance var2 = this.getAttribute(Attributes.MOVEMENT_SPEED);
          var2.removeModifier(SPEED_MODIFIER_BABY);
          if (var1) {
-            var2.addModifier(SPEED_MODIFIER_BABY);
+            var2.addTransientModifier(SPEED_MODIFIER_BABY);
          }
       }
 
    }
 
@@ -184,18 +178,18 @@
    protected boolean convertsInWater() {
       return true;
    }
 
    public void tick() {
-      if (!this.level.isClientSide && this.isAlive()) {
+      if (!this.level.isClientSide && this.isAlive() && !this.isNoAi()) {
          if (this.isUnderWaterConverting()) {
             --this.conversionTime;
             if (this.conversionTime < 0) {
                this.doUnderWaterConversion();
             }
          } else if (this.convertsInWater()) {
-            if (this.isUnderLiquid(FluidTags.WATER)) {
+            if (this.isEyeInFluid(FluidTags.WATER)) {
                ++this.inWaterTime;
                if (this.inWaterTime >= 600) {
                   this.startUnderWaterConversion(300);
                }
             } else {
@@ -237,75 +231,24 @@
       this.conversionTime = var1;
       this.getEntityData().set(DATA_DROWNED_CONVERSION_ID, true);
    }
 
    protected void doUnderWaterConversion() {
-      this.convertTo(EntityType.DROWNED);
-      this.level.levelEvent((Player)null, 1040, new BlockPos(this), 0);
+      this.convertToZombieType(EntityType.DROWNED);
+      if (!this.isSilent()) {
+         this.level.levelEvent((Player)null, 1040, this.blockPosition(), 0);
+      }
+
    }
 
-   protected void convertTo(EntityType<? extends Zombie> var1) {
-      if (!this.removed) {
-         Zombie var2 = (Zombie)var1.create(this.level);
-         var2.copyPosition(this);
-         var2.setCanPickUpLoot(this.canPickUpLoot());
+   protected void convertToZombieType(EntityType<? extends Zombie> var1) {
+      Zombie var2 = (Zombie)this.convertTo(var1);
+      if (var2 != null) {
+         var2.handleAttributes(var2.level.getCurrentDifficultyAt(var2.blockPosition()).getSpecialMultiplier());
          var2.setCanBreakDoors(var2.supportsBreakDoorGoal() && this.canBreakDoors());
-         var2.handleAttributes(var2.level.getCurrentDifficultyAt(new BlockPos(var2)).getSpecialMultiplier());
-         var2.setBaby(this.isBaby());
-         var2.setNoAi(this.isNoAi());
-         EquipmentSlot[] var3 = EquipmentSlot.values();
-         int var4 = var3.length;
-
-         for(int var5 = 0; var5 < var4; ++var5) {
-            EquipmentSlot var6 = var3[var5];
-            ItemStack var7 = this.getItemBySlot(var6);
-            if (!var7.isEmpty()) {
-               var2.setItemSlot(var6, var7.copy());
-               var2.setDropChance(var6, this.getEquipmentDropChance(var6));
-               var7.setCount(0);
-            }
-         }
-
-         if (this.hasCustomName()) {
-            var2.setCustomName(this.getCustomName());
-            var2.setCustomNameVisible(this.isCustomNameVisible());
-         }
-
-         if (this.isPersistenceRequired()) {
-            var2.setPersistenceRequired();
-         }
-
-         var2.setInvulnerable(this.isInvulnerable());
-         this.level.addFreshEntity(var2);
-         this.remove();
       }
-   }
 
-   public boolean mobInteract(Player var1, InteractionHand var2) {
-      ItemStack var3 = var1.getItemInHand(var2);
-      Item var4 = var3.getItem();
-      if (var4 instanceof SpawnEggItem && ((SpawnEggItem)var4).spawnsEntity(var3.getTag(), this.getType())) {
-         if (!this.level.isClientSide) {
-            Zombie var5 = (Zombie)this.getType().create(this.level);
-            if (var5 != null) {
-               var5.setBaby(true);
-               var5.moveTo(this.getX(), this.getY(), this.getZ(), 0.0F, 0.0F);
-               this.level.addFreshEntity(var5);
-               if (var3.hasCustomHoverName()) {
-                  var5.setCustomName(var3.getHoverName());
-               }
-
-               if (!var1.abilities.instabuild) {
-                  var3.shrink(1);
-               }
-            }
-         }
-
-         return true;
-      } else {
-         return super.mobInteract(var1, var2);
-      }
    }
 
    protected boolean isSunSensitive() {
       return true;
    }
@@ -315,29 +258,31 @@
          LivingEntity var3 = this.getTarget();
          if (var3 == null && var1.getEntity() instanceof LivingEntity) {
             var3 = (LivingEntity)var1.getEntity();
          }
 
-         if (var3 != null && this.level.getDifficulty() == Difficulty.HARD && (double)this.random.nextFloat() < this.getAttribute(SPAWN_REINFORCEMENTS_CHANCE).getValue() && this.level.getGameRules().getBoolean(GameRules.RULE_DOMOBSPAWNING)) {
+         if (var3 != null && this.level.getDifficulty() == Difficulty.HARD && (double)this.random.nextFloat() < this.getAttributeValue(Attributes.SPAWN_REINFORCEMENTS_CHANCE) && this.level.getGameRules().getBoolean(GameRules.RULE_DOMOBSPAWNING)) {
             int var4 = Mth.floor(this.getX());
             int var5 = Mth.floor(this.getY());
             int var6 = Mth.floor(this.getZ());
             Zombie var7 = new Zombie(this.level);
 
             for(int var8 = 0; var8 < 50; ++var8) {
                int var9 = var4 + Mth.nextInt(this.random, 7, 40) * Mth.nextInt(this.random, -1, 1);
                int var10 = var5 + Mth.nextInt(this.random, 7, 40) * Mth.nextInt(this.random, -1, 1);
                int var11 = var6 + Mth.nextInt(this.random, 7, 40) * Mth.nextInt(this.random, -1, 1);
-               BlockPos var12 = new BlockPos(var9, var10 - 1, var11);
-               if (this.level.getBlockState(var12).entityCanStandOn(this.level, var12, var7) && this.level.getMaxLocalRawBrightness(new BlockPos(var9, var10, var11)) < 10) {
+               BlockPos var12 = new BlockPos(var9, var10, var11);
+               EntityType var13 = var7.getType();
+               SpawnPlacements.Type var14 = SpawnPlacements.getPlacementType(var13);
+               if (NaturalSpawner.isSpawnPositionOk(var14, this.level, var12, var13) && SpawnPlacements.checkSpawnRules(var13, this.level, MobSpawnType.REINFORCEMENT, var12, this.level.random)) {
                   var7.setPos((double)var9, (double)var10, (double)var11);
                   if (!this.level.hasNearbyAlivePlayer((double)var9, (double)var10, (double)var11, 7.0D) && this.level.isUnobstructed(var7) && this.level.noCollision(var7) && !this.level.containsAnyLiquid(var7.getBoundingBox())) {
                      this.level.addFreshEntity(var7);
                      var7.setTarget(var3);
-                     var7.finalizeSpawn(this.level, this.level.getCurrentDifficultyAt(new BlockPos(var7)), MobSpawnType.REINFORCEMENT, (SpawnGroupData)null, (CompoundTag)null);
-                     this.getAttribute(SPAWN_REINFORCEMENTS_CHANCE).addModifier(new AttributeModifier("Zombie reinforcement caller charge", -0.05000000074505806D, AttributeModifier.Operation.ADDITION));
-                     var7.getAttribute(SPAWN_REINFORCEMENTS_CHANCE).addModifier(new AttributeModifier("Zombie reinforcement callee charge", -0.05000000074505806D, AttributeModifier.Operation.ADDITION));
+                     var7.finalizeSpawn(this.level, this.level.getCurrentDifficultyAt(var7.blockPosition()), MobSpawnType.REINFORCEMENT, (SpawnGroupData)null, (CompoundTag)null);
+                     this.getAttribute(Attributes.SPAWN_REINFORCEMENTS_CHANCE).addPermanentModifier(new AttributeModifier("Zombie reinforcement caller charge", -0.05000000074505806D, AttributeModifier.Operation.ADDITION));
+                     var7.getAttribute(Attributes.SPAWN_REINFORCEMENTS_CHANCE).addPermanentModifier(new AttributeModifier("Zombie reinforcement callee charge", -0.05000000074505806D, AttributeModifier.Operation.ADDITION));
                      break;
                   }
                }
             }
          }
@@ -349,11 +294,11 @@
    }
 
    public boolean doHurtTarget(Entity var1) {
       boolean var2 = super.doHurtTarget(var1);
       if (var2) {
-         float var3 = this.level.getCurrentDifficultyAt(new BlockPos(this)).getEffectiveDifficulty();
+         float var3 = this.level.getCurrentDifficultyAt(this.blockPosition()).getEffectiveDifficulty();
          if (this.getMainHandItem().isEmpty() && this.isOnFire() && this.random.nextFloat() < var3 * 0.3F) {
             var1.setSecondsOnFire(2 * (int)var3);
          }
       }
 
@@ -431,11 +376,11 @@
 
          Villager var2 = (Villager)var1;
          ZombieVillager var3 = (ZombieVillager)EntityType.ZOMBIE_VILLAGER.create(this.level);
          var3.copyPosition(var2);
          var2.remove();
-         var3.finalizeSpawn(this.level, this.level.getCurrentDifficultyAt(new BlockPos(var3)), MobSpawnType.CONVERSION, new Zombie.ZombieGroupData(false), (CompoundTag)null);
+         var3.finalizeSpawn(this.level, this.level.getCurrentDifficultyAt(var3.blockPosition()), MobSpawnType.CONVERSION, new Zombie.ZombieGroupData(false, true), (CompoundTag)null);
          var3.setVillagerData(var2.getVillagerData());
          var3.setGossips((Tag)var2.getGossips().store(NbtOps.INSTANCE).getValue());
          var3.setTradeOffers(var2.getOffers().createTag());
          var3.setVillagerXp(var2.getVillagerXp());
          var3.setBaby(var2.isBaby());
@@ -443,56 +388,60 @@
          if (var2.hasCustomName()) {
             var3.setCustomName(var2.getCustomName());
             var3.setCustomNameVisible(var2.isCustomNameVisible());
          }
 
-         if (this.isPersistenceRequired()) {
+         if (var2.isPersistenceRequired()) {
             var3.setPersistenceRequired();
          }
 
          var3.setInvulnerable(this.isInvulnerable());
          this.level.addFreshEntity(var3);
-         this.level.levelEvent((Player)null, 1026, new BlockPos(this), 0);
+         if (!this.isSilent()) {
+            this.level.levelEvent((Player)null, 1026, this.blockPosition(), 0);
+         }
       }
 
    }
 
    protected float getStandingEyeHeight(Pose var1, EntityDimensions var2) {
       return this.isBaby() ? 0.93F : 1.74F;
    }
 
-   protected boolean canHoldItem(ItemStack var1) {
+   public boolean canHoldItem(ItemStack var1) {
       return var1.getItem() == Items.EGG && this.isBaby() && this.isPassenger() ? false : super.canHoldItem(var1);
    }
 
    @Nullable
    public SpawnGroupData finalizeSpawn(LevelAccessor var1, DifficultyInstance var2, MobSpawnType var3, @Nullable SpawnGroupData var4, @Nullable CompoundTag var5) {
       Object var10 = super.finalizeSpawn(var1, var2, var3, var4, var5);
       float var6 = var2.getSpecialMultiplier();
       this.setCanPickUpLoot(this.random.nextFloat() < 0.55F * var6);
       if (var10 == null) {
-         var10 = new Zombie.ZombieGroupData(var1.getRandom().nextFloat() < 0.05F);
+         var10 = new Zombie.ZombieGroupData(getSpawnAsBabyOdds(var1.getRandom()), true);
       }
 
       if (var10 instanceof Zombie.ZombieGroupData) {
          Zombie.ZombieGroupData var7 = (Zombie.ZombieGroupData)var10;
          if (var7.isBaby) {
             this.setBaby(true);
-            if ((double)var1.getRandom().nextFloat() < 0.05D) {
-               List var8 = var1.getEntitiesOfClass(Chicken.class, this.getBoundingBox().inflate(5.0D, 3.0D, 5.0D), EntitySelector.ENTITY_NOT_BEING_RIDDEN);
-               if (!var8.isEmpty()) {
-                  Chicken var9 = (Chicken)var8.get(0);
-                  var9.setChickenJockey(true);
-                  this.startRiding(var9);
+            if (var7.canSpawnJockey) {
+               if ((double)var1.getRandom().nextFloat() < 0.05D) {
+                  List var8 = var1.getEntitiesOfClass(Chicken.class, this.getBoundingBox().inflate(5.0D, 3.0D, 5.0D), EntitySelector.ENTITY_NOT_BEING_RIDDEN);
+                  if (!var8.isEmpty()) {
+                     Chicken var9 = (Chicken)var8.get(0);
+                     var9.setChickenJockey(true);
+                     this.startRiding(var9);
+                  }
+               } else if ((double)var1.getRandom().nextFloat() < 0.05D) {
+                  Chicken var12 = (Chicken)EntityType.CHICKEN.create(this.level);
+                  var12.moveTo(this.getX(), this.getY(), this.getZ(), this.yRot, 0.0F);
+                  var12.finalizeSpawn(var1, var2, MobSpawnType.JOCKEY, (SpawnGroupData)null, (CompoundTag)null);
+                  var12.setChickenJockey(true);
+                  this.startRiding(var12);
+                  var1.addFreshEntity(var12);
                }
-            } else if ((double)var1.getRandom().nextFloat() < 0.05D) {
-               Chicken var12 = (Chicken)EntityType.CHICKEN.create(this.level);
-               var12.moveTo(this.getX(), this.getY(), this.getZ(), this.yRot, 0.0F);
-               var12.finalizeSpawn(var1, var2, MobSpawnType.JOCKEY, (SpawnGroupData)null, (CompoundTag)null);
-               var12.setChickenJockey(true);
-               var1.addFreshEntity(var12);
-               this.startRiding(var12);
             }
          }
 
          this.setCanBreakDoors(this.supportsBreakDoorGoal() && this.random.nextFloat() < var6 * 0.1F);
          this.populateDefaultEquipmentSlots(var2);
@@ -511,26 +460,35 @@
 
       this.handleAttributes(var6);
       return (SpawnGroupData)var10;
    }
 
+   public static boolean getSpawnAsBabyOdds(Random var0) {
+      return var0.nextFloat() < 0.05F;
+   }
+
    protected void handleAttributes(float var1) {
-      this.getAttribute(SharedMonsterAttributes.KNOCKBACK_RESISTANCE).addModifier(new AttributeModifier("Random spawn bonus", this.random.nextDouble() * 0.05000000074505806D, AttributeModifier.Operation.ADDITION));
+      this.randomizeReinforcementsChance();
+      this.getAttribute(Attributes.KNOCKBACK_RESISTANCE).addPermanentModifier(new AttributeModifier("Random spawn bonus", this.random.nextDouble() * 0.05000000074505806D, AttributeModifier.Operation.ADDITION));
       double var2 = this.random.nextDouble() * 1.5D * (double)var1;
       if (var2 > 1.0D) {
-         this.getAttribute(SharedMonsterAttributes.FOLLOW_RANGE).addModifier(new AttributeModifier("Random zombie-spawn bonus", var2, AttributeModifier.Operation.MULTIPLY_TOTAL));
+         this.getAttribute(Attributes.FOLLOW_RANGE).addPermanentModifier(new AttributeModifier("Random zombie-spawn bonus", var2, AttributeModifier.Operation.MULTIPLY_TOTAL));
       }
 
       if (this.random.nextFloat() < var1 * 0.05F) {
-         this.getAttribute(SPAWN_REINFORCEMENTS_CHANCE).addModifier(new AttributeModifier("Leader zombie bonus", this.random.nextDouble() * 0.25D + 0.5D, AttributeModifier.Operation.ADDITION));
-         this.getAttribute(SharedMonsterAttributes.MAX_HEALTH).addModifier(new AttributeModifier("Leader zombie bonus", this.random.nextDouble() * 3.0D + 1.0D, AttributeModifier.Operation.MULTIPLY_TOTAL));
+         this.getAttribute(Attributes.SPAWN_REINFORCEMENTS_CHANCE).addPermanentModifier(new AttributeModifier("Leader zombie bonus", this.random.nextDouble() * 0.25D + 0.5D, AttributeModifier.Operation.ADDITION));
+         this.getAttribute(Attributes.MAX_HEALTH).addPermanentModifier(new AttributeModifier("Leader zombie bonus", this.random.nextDouble() * 3.0D + 1.0D, AttributeModifier.Operation.MULTIPLY_TOTAL));
          this.setCanBreakDoors(this.supportsBreakDoorGoal());
       }
 
    }
 
-   public double getRidingHeight() {
+   protected void randomizeReinforcementsChance() {
+      this.getAttribute(Attributes.SPAWN_REINFORCEMENTS_CHANCE).setBaseValue(this.random.nextDouble() * 0.10000000149011612D);
+   }
+
+   public double getMyRidingOffset() {
       return this.isBaby() ? 0.0D : -0.45D;
    }
 
    protected void dropCustomDeathLoot(DamageSource var1, int var2, boolean var3) {
       super.dropCustomDeathLoot(var1, var2, var3);
@@ -578,13 +536,15 @@
       public double acceptedDistance() {
          return 1.14D;
       }
    }
 
-   public class ZombieGroupData implements SpawnGroupData {
+   public static class ZombieGroupData implements SpawnGroupData {
       public final boolean isBaby;
+      public final boolean canSpawnJockey;
 
-      private ZombieGroupData(boolean var2) {
-         this.isBaby = var2;
+      public ZombieGroupData(boolean var1, boolean var2) {
+         this.isBaby = var1;
+         this.canSpawnJockey = var2;
       }
    }
 }
