--- net/minecraft/world/entity/projectile/ShulkerBullet.java
+++ net/minecraft/world/entity/projectile/ShulkerBullet.java
@@ -1,18 +1,15 @@
 package net.minecraft.world.entity.projectile;
 
 import com.google.common.collect.Lists;
 import java.util.ArrayList;
-import java.util.Iterator;
-import java.util.List;
 import java.util.UUID;
 import javax.annotation.Nullable;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.core.particles.ParticleTypes;
 import net.minecraft.nbt.CompoundTag;
-import net.minecraft.nbt.NbtUtils;
 import net.minecraft.network.protocol.Packet;
 import net.minecraft.network.protocol.game.ClientboundAddEntityPacket;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.sounds.SoundEvents;
 import net.minecraft.sounds.SoundSource;
@@ -25,30 +22,25 @@
 import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.level.ClipContext;
 import net.minecraft.world.level.Level;
-import net.minecraft.world.phys.AABB;
+import net.minecraft.world.phys.BlockHitResult;
 import net.minecraft.world.phys.EntityHitResult;
 import net.minecraft.world.phys.HitResult;
 import net.minecraft.world.phys.Vec3;
 
-public class ShulkerBullet extends Entity {
-   private LivingEntity owner;
+public class ShulkerBullet extends Projectile {
    private Entity finalTarget;
    @Nullable
    private Direction currentMoveDirection;
    private int flightSteps;
    private double targetDeltaX;
    private double targetDeltaY;
    private double targetDeltaZ;
    @Nullable
-   private UUID ownerId;
-   private BlockPos lastKnownOwnerPos;
-   @Nullable
    private UUID targetId;
-   private BlockPos lastKnownTargetPos;
 
    public ShulkerBullet(EntityType<? extends ShulkerBullet> var1, Level var2) {
       super(var1, var2);
       this.noPhysics = true;
    }
@@ -59,12 +51,12 @@
       this.setDeltaMovement(var8, var10, var12);
    }
 
    public ShulkerBullet(Level var1, LivingEntity var2, Entity var3, Direction.Axis var4) {
       this(EntityType.SHULKER_BULLET, var1);
-      this.owner = var2;
-      BlockPos var5 = new BlockPos(var2);
+      this.setOwner(var2);
+      BlockPos var5 = var2.blockPosition();
       double var6 = (double)var5.getX() + 0.5D;
       double var8 = (double)var5.getY() + 0.5D;
       double var10 = (double)var5.getZ() + 0.5D;
       this.moveTo(var6, var8, var10, this.yRot, this.xRot);
       this.finalTarget = var3;
@@ -75,28 +67,13 @@
    public SoundSource getSoundSource() {
       return SoundSource.HOSTILE;
    }
 
    protected void addAdditionalSaveData(CompoundTag var1) {
-      BlockPos var2;
-      CompoundTag var3;
-      if (this.owner != null) {
-         var2 = new BlockPos(this.owner);
-         var3 = NbtUtils.createUUIDTag(this.owner.getUUID());
-         var3.putInt("X", var2.getX());
-         var3.putInt("Y", var2.getY());
-         var3.putInt("Z", var2.getZ());
-         var1.put("Owner", var3);
-      }
-
+      super.addAdditionalSaveData(var1);
       if (this.finalTarget != null) {
-         var2 = new BlockPos(this.finalTarget);
-         var3 = NbtUtils.createUUIDTag(this.finalTarget.getUUID());
-         var3.putInt("X", var2.getX());
-         var3.putInt("Y", var2.getY());
-         var3.putInt("Z", var2.getZ());
-         var1.put("Target", var3);
+         var1.putUUID("Target", this.finalTarget.getUUID());
       }
 
       if (this.currentMoveDirection != null) {
          var1.putInt("Dir", this.currentMoveDirection.get3DDataValue());
       }
@@ -106,31 +83,23 @@
       var1.putDouble("TYD", this.targetDeltaY);
       var1.putDouble("TZD", this.targetDeltaZ);
    }
 
    protected void readAdditionalSaveData(CompoundTag var1) {
+      super.readAdditionalSaveData(var1);
       this.flightSteps = var1.getInt("Steps");
       this.targetDeltaX = var1.getDouble("TXD");
       this.targetDeltaY = var1.getDouble("TYD");
       this.targetDeltaZ = var1.getDouble("TZD");
       if (var1.contains("Dir", 99)) {
          this.currentMoveDirection = Direction.from3DDataValue(var1.getInt("Dir"));
       }
 
-      CompoundTag var2;
-      if (var1.contains("Owner", 10)) {
-         var2 = var1.getCompound("Owner");
-         this.ownerId = NbtUtils.loadUUIDTag(var2);
-         this.lastKnownOwnerPos = new BlockPos(var2.getInt("X"), var2.getInt("Y"), var2.getInt("Z"));
+      if (var1.hasUUID("Target")) {
+         this.targetId = var1.getUUID("Target");
       }
 
-      if (var1.contains("Target", 10)) {
-         var2 = var1.getCompound("Target");
-         this.targetId = NbtUtils.loadUUIDTag(var2);
-         this.lastKnownTargetPos = new BlockPos(var2.getInt("X"), var2.getInt("Y"), var2.getInt("Z"));
-      }
-
    }
 
    protected void defineSynchedData() {
    }
 
@@ -140,22 +109,22 @@
 
    private void selectNextMoveDirection(@Nullable Direction.Axis var1) {
       double var3 = 0.5D;
       BlockPos var2;
       if (this.finalTarget == null) {
-         var2 = (new BlockPos(this)).below();
+         var2 = this.blockPosition().below();
       } else {
          var3 = (double)this.finalTarget.getBbHeight() * 0.5D;
          var2 = new BlockPos(this.finalTarget.getX(), this.finalTarget.getY() + var3, this.finalTarget.getZ());
       }
 
       double var5 = (double)var2.getX() + 0.5D;
       double var7 = (double)var2.getY() + var3;
       double var9 = (double)var2.getZ() + 0.5D;
       Direction var11 = null;
       if (!var2.closerThan(this.position(), 2.0D)) {
-         BlockPos var12 = new BlockPos(this);
+         BlockPos var12 = this.blockPosition();
          ArrayList var13 = Lists.newArrayList();
          if (var1 != Direction.Axis.X) {
             if (var12.getX() < var2.getX() && this.level.isEmptyBlock(var12.east())) {
                var13.add(Direction.EAST);
             } else if (var12.getX() > var2.getX() && this.level.isEmptyBlock(var12.west())) {
@@ -177,14 +146,14 @@
             } else if (var12.getZ() > var2.getZ() && this.level.isEmptyBlock(var12.north())) {
                var13.add(Direction.NORTH);
             }
          }
 
-         var11 = Direction.getRandomFace(this.random);
+         var11 = Direction.getRandom(this.random);
          if (var13.isEmpty()) {
             for(int var14 = 5; !this.level.isEmptyBlock(var12.relative(var11)) && var14 > 0; --var14) {
-               var11 = Direction.getRandomFace(this.random);
+               var11 = Direction.getRandom(this.random);
             }
          } else {
             var11 = (Direction)var13.get(this.random.nextInt(var13.size()));
          }
 
@@ -219,92 +188,70 @@
 
    }
 
    public void tick() {
       super.tick();
-      Vec3 var5;
+      Vec3 var1;
       if (!this.level.isClientSide) {
-         List var1;
-         Iterator var2;
-         LivingEntity var3;
          if (this.finalTarget == null && this.targetId != null) {
-            var1 = this.level.getEntitiesOfClass(LivingEntity.class, new AABB(this.lastKnownTargetPos.offset(-2, -2, -2), this.lastKnownTargetPos.offset(2, 2, 2)));
-            var2 = var1.iterator();
-
-            while(var2.hasNext()) {
-               var3 = (LivingEntity)var2.next();
-               if (var3.getUUID().equals(this.targetId)) {
-                  this.finalTarget = var3;
-                  break;
-               }
+            this.finalTarget = ((ServerLevel)this.level).getEntity(this.targetId);
+            if (this.finalTarget == null) {
+               this.targetId = null;
             }
-
-            this.targetId = null;
          }
 
-         if (this.owner == null && this.ownerId != null) {
-            var1 = this.level.getEntitiesOfClass(LivingEntity.class, new AABB(this.lastKnownOwnerPos.offset(-2, -2, -2), this.lastKnownOwnerPos.offset(2, 2, 2)));
-            var2 = var1.iterator();
-
-            while(var2.hasNext()) {
-               var3 = (LivingEntity)var2.next();
-               if (var3.getUUID().equals(this.ownerId)) {
-                  this.owner = var3;
-                  break;
-               }
-            }
-
-            this.ownerId = null;
-         }
-
          if (this.finalTarget == null || !this.finalTarget.isAlive() || this.finalTarget instanceof Player && ((Player)this.finalTarget).isSpectator()) {
             if (!this.isNoGravity()) {
                this.setDeltaMovement(this.getDeltaMovement().add(0.0D, -0.04D, 0.0D));
             }
          } else {
             this.targetDeltaX = Mth.clamp(this.targetDeltaX * 1.025D, -1.0D, 1.0D);
             this.targetDeltaY = Mth.clamp(this.targetDeltaY * 1.025D, -1.0D, 1.0D);
             this.targetDeltaZ = Mth.clamp(this.targetDeltaZ * 1.025D, -1.0D, 1.0D);
-            var5 = this.getDeltaMovement();
-            this.setDeltaMovement(var5.add((this.targetDeltaX - var5.x) * 0.2D, (this.targetDeltaY - var5.y) * 0.2D, (this.targetDeltaZ - var5.z) * 0.2D));
+            var1 = this.getDeltaMovement();
+            this.setDeltaMovement(var1.add((this.targetDeltaX - var1.x) * 0.2D, (this.targetDeltaY - var1.y) * 0.2D, (this.targetDeltaZ - var1.z) * 0.2D));
          }
 
-         HitResult var6 = ProjectileUtil.forwardsRaycast(this, true, false, this.owner, ClipContext.Block.COLLIDER);
-         if (var6.getType() != HitResult.Type.MISS) {
-            this.onHit(var6);
+         HitResult var5 = ProjectileUtil.getHitResult(this, this::canHitEntity, ClipContext.Block.COLLIDER);
+         if (var5.getType() != HitResult.Type.MISS) {
+            this.onHit(var5);
          }
       }
 
-      var5 = this.getDeltaMovement();
-      this.setPos(this.getX() + var5.x, this.getY() + var5.y, this.getZ() + var5.z);
+      var1 = this.getDeltaMovement();
+      this.setPos(this.getX() + var1.x, this.getY() + var1.y, this.getZ() + var1.z);
       ProjectileUtil.rotateTowardsMovement(this, 0.5F);
       if (this.level.isClientSide) {
-         this.level.addParticle(ParticleTypes.END_ROD, this.getX() - var5.x, this.getY() - var5.y + 0.15D, this.getZ() - var5.z, 0.0D, 0.0D, 0.0D);
+         this.level.addParticle(ParticleTypes.END_ROD, this.getX() - var1.x, this.getY() - var1.y + 0.15D, this.getZ() - var1.z, 0.0D, 0.0D, 0.0D);
       } else if (this.finalTarget != null && !this.finalTarget.removed) {
          if (this.flightSteps > 0) {
             --this.flightSteps;
             if (this.flightSteps == 0) {
                this.selectNextMoveDirection(this.currentMoveDirection == null ? null : this.currentMoveDirection.getAxis());
             }
          }
 
          if (this.currentMoveDirection != null) {
-            BlockPos var7 = new BlockPos(this);
-            Direction.Axis var8 = this.currentMoveDirection.getAxis();
-            if (this.level.loadedAndEntityCanStandOn(var7.relative(this.currentMoveDirection), this)) {
-               this.selectNextMoveDirection(var8);
+            BlockPos var2 = this.blockPosition();
+            Direction.Axis var3 = this.currentMoveDirection.getAxis();
+            if (this.level.loadedAndEntityCanStandOn(var2.relative(this.currentMoveDirection), this)) {
+               this.selectNextMoveDirection(var3);
             } else {
-               BlockPos var4 = new BlockPos(this.finalTarget);
-               if (var8 == Direction.Axis.X && var7.getX() == var4.getX() || var8 == Direction.Axis.Z && var7.getZ() == var4.getZ() || var8 == Direction.Axis.Y && var7.getY() == var4.getY()) {
-                  this.selectNextMoveDirection(var8);
+               BlockPos var4 = this.finalTarget.blockPosition();
+               if (var3 == Direction.Axis.X && var2.getX() == var4.getX() || var3 == Direction.Axis.Z && var2.getZ() == var4.getZ() || var3 == Direction.Axis.Y && var2.getY() == var4.getY()) {
+                  this.selectNextMoveDirection(var3);
                }
             }
          }
       }
 
    }
 
+   protected boolean canHitEntity(Entity var1) {
+      return super.canHitEntity(var1) && !var1.noPhysics;
+   }
+
    public boolean isOnFire() {
       return false;
    }
 
    public boolean shouldRenderAtSqrDistance(double var1) {
@@ -313,25 +260,33 @@
 
    public float getBrightness() {
       return 1.0F;
    }
 
-   protected void onHit(HitResult var1) {
-      if (var1.getType() == HitResult.Type.ENTITY) {
-         Entity var2 = ((EntityHitResult)var1).getEntity();
-         boolean var3 = var2.hurt(DamageSource.indirectMobAttack(this, this.owner).setProjectile(), 4.0F);
-         if (var3) {
-            this.doEnchantDamageEffects(this.owner, var2);
-            if (var2 instanceof LivingEntity) {
-               ((LivingEntity)var2).addEffect(new MobEffectInstance(MobEffects.LEVITATION, 200));
-            }
+   protected void onHitEntity(EntityHitResult var1) {
+      super.onHitEntity(var1);
+      Entity var2 = var1.getEntity();
+      Entity var3 = this.getOwner();
+      LivingEntity var4 = var3 instanceof LivingEntity ? (LivingEntity)var3 : null;
+      boolean var5 = var2.hurt(DamageSource.indirectMobAttack(this, var4).setProjectile(), 4.0F);
+      if (var5) {
+         this.doEnchantDamageEffects(var4, var2);
+         if (var2 instanceof LivingEntity) {
+            ((LivingEntity)var2).addEffect(new MobEffectInstance(MobEffects.LEVITATION, 200));
          }
-      } else {
-         ((ServerLevel)this.level).sendParticles(ParticleTypes.EXPLOSION, this.getX(), this.getY(), this.getZ(), 2, 0.2D, 0.2D, 0.2D, 0.0D);
-         this.playSound(SoundEvents.SHULKER_BULLET_HIT, 1.0F, 1.0F);
       }
 
+   }
+
+   protected void onHitBlock(BlockHitResult var1) {
+      super.onHitBlock(var1);
+      ((ServerLevel)this.level).sendParticles(ParticleTypes.EXPLOSION, this.getX(), this.getY(), this.getZ(), 2, 0.2D, 0.2D, 0.2D, 0.0D);
+      this.playSound(SoundEvents.SHULKER_BULLET_HIT, 1.0F, 1.0F);
+   }
+
+   protected void onHit(HitResult var1) {
+      super.onHit(var1);
       this.remove();
    }
 
    public boolean isPickable() {
       return true;
