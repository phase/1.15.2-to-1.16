--- net/minecraft/world/entity/AgableMob.java
+++ net/minecraft/world/entity/AgableMob.java
@@ -4,18 +4,14 @@
 import net.minecraft.core.particles.ParticleTypes;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.network.syncher.EntityDataAccessor;
 import net.minecraft.network.syncher.EntityDataSerializers;
 import net.minecraft.network.syncher.SynchedEntityData;
+import net.minecraft.server.level.ServerLevel;
 import net.minecraft.world.DifficultyInstance;
-import net.minecraft.world.InteractionHand;
-import net.minecraft.world.entity.player.Player;
-import net.minecraft.world.item.Item;
-import net.minecraft.world.item.ItemStack;
-import net.minecraft.world.item.SpawnEggItem;
 import net.minecraft.world.level.Level;
-import net.minecraft.world.level.LevelAccessor;
+import net.minecraft.world.level.ServerLevelAccessor;
 
 public abstract class AgableMob extends PathfinderMob {
    private static final EntityDataAccessor<Boolean> DATA_BABY_ID;
    protected int age;
    protected int forcedAge;
@@ -23,13 +19,13 @@
 
    protected AgableMob(EntityType<? extends AgableMob> var1, Level var2) {
       super(var1, var2);
    }
 
-   public SpawnGroupData finalizeSpawn(LevelAccessor var1, DifficultyInstance var2, MobSpawnType var3, @Nullable SpawnGroupData var4, @Nullable CompoundTag var5) {
+   public SpawnGroupData finalizeSpawn(ServerLevelAccessor var1, DifficultyInstance var2, MobSpawnType var3, @Nullable SpawnGroupData var4, @Nullable CompoundTag var5) {
       if (var4 == null) {
-         var4 = new AgableMob.AgableMobGroupData();
+         var4 = new AgableMob.AgableMobGroupData(true);
       }
 
       AgableMob.AgableMobGroupData var6 = (AgableMob.AgableMobGroupData)var4;
       if (var6.isShouldSpawnBaby() && var6.getGroupSize() > 0 && this.random.nextFloat() <= var6.getBabySpawnChance()) {
          this.setAge(-24000);
@@ -38,47 +34,21 @@
       var6.increaseGroupSizeByOne();
       return super.finalizeSpawn(var1, var2, var3, (SpawnGroupData)var4, var5);
    }
 
    @Nullable
-   public abstract AgableMob getBreedOffspring(AgableMob var1);
+   public abstract AgableMob getBreedOffspring(ServerLevel var1, AgableMob var2);
 
-   protected void onOffspringSpawnedFromEgg(Player var1, AgableMob var2) {
-   }
-
-   public boolean mobInteract(Player var1, InteractionHand var2) {
-      ItemStack var3 = var1.getItemInHand(var2);
-      Item var4 = var3.getItem();
-      if (var4 instanceof SpawnEggItem && ((SpawnEggItem)var4).spawnsEntity(var3.getTag(), this.getType())) {
-         if (!this.level.isClientSide) {
-            AgableMob var5 = this.getBreedOffspring(this);
-            if (var5 != null) {
-               var5.setAge(-24000);
-               var5.moveTo(this.getX(), this.getY(), this.getZ(), 0.0F, 0.0F);
-               this.level.addFreshEntity(var5);
-               if (var3.hasCustomHoverName()) {
-                  var5.setCustomName(var3.getHoverName());
-               }
-
-               this.onOffspringSpawnedFromEgg(var1, var5);
-               if (!var1.abilities.instabuild) {
-                  var3.shrink(1);
-               }
-            }
-         }
-
-         return true;
-      } else {
-         return false;
-      }
-   }
-
    protected void defineSynchedData() {
       super.defineSynchedData();
       this.entityData.define(DATA_BABY_ID, false);
    }
 
+   public boolean canBreed() {
+      return false;
+   }
+
    public int getAge() {
       if (this.level.isClientSide) {
          return (Boolean)this.entityData.get(DATA_BABY_ID) ? -1 : 1;
       } else {
          return this.age;
@@ -170,22 +140,36 @@
 
    public boolean isBaby() {
       return this.getAge() < 0;
    }
 
+   public void setBaby(boolean var1) {
+      this.setAge(var1 ? -24000 : 0);
+   }
+
    static {
       DATA_BABY_ID = SynchedEntityData.defineId(AgableMob.class, EntityDataSerializers.BOOLEAN);
    }
 
    public static class AgableMobGroupData implements SpawnGroupData {
       private int groupSize;
-      private boolean shouldSpawnBaby = true;
-      private float babySpawnChance = 0.05F;
+      private final boolean shouldSpawnBaby;
+      private final float babySpawnChance;
 
-      public AgableMobGroupData() {
+      private AgableMobGroupData(boolean var1, float var2) {
+         this.shouldSpawnBaby = var1;
+         this.babySpawnChance = var2;
       }
 
+      public AgableMobGroupData(boolean var1) {
+         this(var1, 0.05F);
+      }
+
+      public AgableMobGroupData(float var1) {
+         this(true, var1);
+      }
+
       public int getGroupSize() {
          return this.groupSize;
       }
 
       public void increaseGroupSizeByOne() {
@@ -194,18 +178,10 @@
 
       public boolean isShouldSpawnBaby() {
          return this.shouldSpawnBaby;
       }
 
-      public void setShouldSpawnBaby(boolean var1) {
-         this.shouldSpawnBaby = var1;
-      }
-
       public float getBabySpawnChance() {
          return this.babySpawnChance;
       }
-
-      public void setBabySpawnChance(float var1) {
-         this.babySpawnChance = var1;
-      }
    }
 }
