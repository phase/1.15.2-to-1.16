--- net/minecraft/world/entity/LivingEntity.java
+++ net/minecraft/world/entity/LivingEntity.java
@@ -1,20 +1,22 @@
 package net.minecraft.world.entity;
 
 import com.google.common.base.Objects;
 import com.google.common.collect.ImmutableList;
-import com.google.common.collect.ImmutableSet;
+import com.google.common.collect.ImmutableMap;
 import com.google.common.collect.Maps;
-import com.mojang.datafixers.Dynamic;
+import com.mojang.serialization.DataResult;
+import com.mojang.serialization.Dynamic;
 import java.util.Collection;
 import java.util.ConcurrentModificationException;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
 import java.util.Optional;
 import java.util.Random;
 import java.util.UUID;
+import java.util.function.Predicate;
 import javax.annotation.Nullable;
 import net.minecraft.advancements.CriteriaTriggers;
 import net.minecraft.commands.arguments.EntityAnchorArgument;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
@@ -23,11 +25,10 @@
 import net.minecraft.core.particles.ItemParticleOption;
 import net.minecraft.core.particles.ParticleTypes;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.ListTag;
 import net.minecraft.nbt.NbtOps;
-import net.minecraft.nbt.Tag;
 import net.minecraft.network.protocol.Packet;
 import net.minecraft.network.protocol.game.ClientboundAddMobPacket;
 import net.minecraft.network.protocol.game.ClientboundAnimatePacket;
 import net.minecraft.network.protocol.game.ClientboundSetEquippedItemPacket;
 import net.minecraft.network.protocol.game.ClientboundTakeItemEntityPacket;
@@ -42,10 +43,11 @@
 import net.minecraft.sounds.SoundEvents;
 import net.minecraft.sounds.SoundSource;
 import net.minecraft.stats.Stats;
 import net.minecraft.tags.BlockTags;
 import net.minecraft.tags.FluidTags;
+import net.minecraft.tags.Tag;
 import net.minecraft.util.Mth;
 import net.minecraft.world.InteractionHand;
 import net.minecraft.world.damagesource.CombatRules;
 import net.minecraft.world.damagesource.CombatTracker;
 import net.minecraft.world.damagesource.DamageSource;
@@ -55,23 +57,22 @@
 import net.minecraft.world.effect.MobEffectUtil;
 import net.minecraft.world.effect.MobEffects;
 import net.minecraft.world.entity.ai.Brain;
 import net.minecraft.world.entity.ai.attributes.Attribute;
 import net.minecraft.world.entity.ai.attributes.AttributeInstance;
+import net.minecraft.world.entity.ai.attributes.AttributeMap;
 import net.minecraft.world.entity.ai.attributes.AttributeModifier;
-import net.minecraft.world.entity.ai.attributes.BaseAttributeMap;
-import net.minecraft.world.entity.ai.attributes.ModifiableAttributeMap;
+import net.minecraft.world.entity.ai.attributes.AttributeSupplier;
+import net.minecraft.world.entity.ai.attributes.Attributes;
+import net.minecraft.world.entity.ai.attributes.DefaultAttributes;
 import net.minecraft.world.entity.ai.targeting.TargetingConditions;
 import net.minecraft.world.entity.animal.FlyingAnimal;
 import net.minecraft.world.entity.animal.Wolf;
-import net.minecraft.world.entity.animal.horse.AbstractHorse;
 import net.minecraft.world.entity.boss.wither.WitherBoss;
 import net.minecraft.world.entity.item.ItemEntity;
-import net.minecraft.world.entity.monster.SharedMonsterAttributes;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.entity.projectile.AbstractArrow;
-import net.minecraft.world.entity.vehicle.Boat;
 import net.minecraft.world.food.FoodProperties;
 import net.minecraft.world.item.ArmorItem;
 import net.minecraft.world.item.ElytraItem;
 import net.minecraft.world.item.Item;
 import net.minecraft.world.item.ItemStack;
@@ -91,32 +92,35 @@
 import net.minecraft.world.level.block.LadderBlock;
 import net.minecraft.world.level.block.SoundType;
 import net.minecraft.world.level.block.TrapDoorBlock;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.material.Fluid;
+import net.minecraft.world.level.material.FluidState;
 import net.minecraft.world.level.storage.loot.LootContext;
 import net.minecraft.world.level.storage.loot.LootTable;
 import net.minecraft.world.level.storage.loot.parameters.LootContextParamSets;
 import net.minecraft.world.level.storage.loot.parameters.LootContextParams;
 import net.minecraft.world.phys.AABB;
 import net.minecraft.world.phys.HitResult;
 import net.minecraft.world.phys.Vec3;
 import net.minecraft.world.scores.PlayerTeam;
 import org.apache.commons.lang3.tuple.Pair;
+import org.apache.logging.log4j.Logger;
 
 public abstract class LivingEntity extends Entity {
    private static final UUID SPEED_MODIFIER_SPRINTING_UUID = UUID.fromString("662A6B8D-DA3E-4C1C-8813-96EA6097278D");
+   private static final UUID SPEED_MODIFIER_SOUL_SPEED_UUID = UUID.fromString("87f46a96-686f-4796-b035-22e16ee9e038");
    private static final AttributeModifier SPEED_MODIFIER_SPRINTING;
    protected static final EntityDataAccessor<Byte> DATA_LIVING_ENTITY_FLAGS;
    private static final EntityDataAccessor<Float> DATA_HEALTH_ID;
    private static final EntityDataAccessor<Integer> DATA_EFFECT_COLOR_ID;
    private static final EntityDataAccessor<Boolean> DATA_EFFECT_AMBIENCE_ID;
    private static final EntityDataAccessor<Integer> DATA_ARROW_COUNT_ID;
    private static final EntityDataAccessor<Integer> DATA_STINGER_COUNT_ID;
    private static final EntityDataAccessor<Optional<BlockPos>> SLEEPING_POS_ID;
    protected static final EntityDimensions SLEEPING_DIMENSIONS;
-   private BaseAttributeMap attributes;
+   private final AttributeMap attributes;
    private final CombatTracker combatTracker = new CombatTracker(this);
    private final Map<MobEffect, MobEffectInstance> activeEffects = Maps.newHashMap();
    private final NonNullList<ItemStack> lastHandItemStacks;
    private final NonNullList<ItemStack> lastArmorItemStacks;
    public boolean swinging;
@@ -176,10 +180,11 @@
    private float absorptionAmount;
    protected ItemStack useItem;
    protected int useItemRemaining;
    protected int fallFlyTicks;
    private BlockPos lastPos;
+   private Optional<BlockPos> lastClimbablePos;
    private DamageSource lastDamageSource;
    private long lastDamageStamp;
    protected int autoSpinAttackTicks;
    private float swimAmount;
    private float swimAmountO;
@@ -191,28 +196,34 @@
       this.lastArmorItemStacks = NonNullList.withSize(4, ItemStack.EMPTY);
       this.invulnerableDuration = 20;
       this.flyingSpeed = 0.02F;
       this.effectsDirty = true;
       this.useItem = ItemStack.EMPTY;
-      this.registerAttributes();
+      this.lastClimbablePos = Optional.empty();
+      this.attributes = new AttributeMap(DefaultAttributes.getSupplier(var1));
       this.setHealth(this.getMaxHealth());
       this.blocksBuilding = true;
       this.rotA = (float)((Math.random() + 1.0D) * 0.009999999776482582D);
       this.reapplyPosition();
       this.timeOffs = (float)Math.random() * 12398.0F;
       this.yRot = (float)(Math.random() * 6.2831854820251465D);
       this.yHeadRot = this.yRot;
       this.maxUpStep = 0.6F;
-      this.brain = this.makeBrain(new Dynamic(NbtOps.INSTANCE, new CompoundTag()));
+      NbtOps var3 = NbtOps.INSTANCE;
+      this.brain = this.makeBrain(new Dynamic(var3, var3.createMap((Map)ImmutableMap.of(var3.createString("memories"), var3.emptyMap()))));
    }
 
    public Brain<?> getBrain() {
       return this.brain;
    }
 
+   protected Brain.Provider<?> brainProvider() {
+      return Brain.provider(ImmutableList.of(), ImmutableList.of());
+   }
+
    protected Brain<?> makeBrain(Dynamic<?> var1) {
-      return new Brain(ImmutableList.of(), ImmutableList.of(), var1);
+      return this.brainProvider().makeBrain(var1);
    }
 
    public void kill() {
       this.hurt(DamageSource.OUT_OF_WORLD, Float.MAX_VALUE);
    }
@@ -229,21 +240,17 @@
       this.entityData.define(DATA_STINGER_COUNT_ID, 0);
       this.entityData.define(DATA_HEALTH_ID, 1.0F);
       this.entityData.define(SLEEPING_POS_ID, Optional.empty());
    }
 
-   protected void registerAttributes() {
-      this.getAttributes().registerAttribute(SharedMonsterAttributes.MAX_HEALTH);
-      this.getAttributes().registerAttribute(SharedMonsterAttributes.KNOCKBACK_RESISTANCE);
-      this.getAttributes().registerAttribute(SharedMonsterAttributes.MOVEMENT_SPEED);
-      this.getAttributes().registerAttribute(SharedMonsterAttributes.ARMOR);
-      this.getAttributes().registerAttribute(SharedMonsterAttributes.ARMOR_TOUGHNESS);
+   public static AttributeSupplier.Builder createLivingAttributes() {
+      return AttributeSupplier.builder().add(Attributes.MAX_HEALTH).add(Attributes.KNOCKBACK_RESISTANCE).add(Attributes.MOVEMENT_SPEED).add(Attributes.ARMOR).add(Attributes.ARMOR_TOUGHNESS);
    }
 
    protected void checkFallDamage(double var1, boolean var3, BlockState var4, BlockPos var5) {
       if (!this.isInWater()) {
-         this.updateInWaterState();
+         this.updateInWaterStateAndDoWaterCurrentPushing();
       }
 
       if (!this.level.isClientSide && this.fallDistance > 3.0F && var3) {
          float var6 = (float)Mth.ceil(this.fallDistance - 3.0F);
          if (!var4.isAir()) {
@@ -268,10 +275,14 @@
       this.oAttackAnim = this.attackAnim;
       if (this.firstTick) {
          this.getSleepingPos().ifPresent(this::setPosToBed);
       }
 
+      if (this.canSpawnSoulSpeedParticle()) {
+         this.spawnSoulSpeedParticle();
+      }
+
       super.baseTick();
       this.level.getProfiler().push("livingEntityBaseTick");
       boolean var1 = this instanceof Player;
       if (this.isAlive()) {
          if (this.isInWall()) {
@@ -291,11 +302,11 @@
          this.clearFire();
       }
 
       boolean var8 = var1 && ((Player)this).abilities.invulnerable;
       if (this.isAlive()) {
-         if (this.isUnderLiquid(FluidTags.WATER) && this.level.getBlockState(new BlockPos(this.getX(), this.getEyeY(), this.getZ())).getBlock() != Blocks.BUBBLE_COLUMN) {
+         if (this.isUnderLiquid(FluidTags.WATER) && !this.level.getBlockState(new BlockPos(this.getX(), this.getEyeY(), this.getZ())).is(Blocks.BUBBLE_COLUMN)) {
             if (!this.canBreatheUnderwater() && !MobEffectUtil.hasWaterBreathing(this) && !var8) {
                this.setAirSupply(this.decreaseAirSupply(this.getAirSupply()));
                if (this.getAirSupply() == -20) {
                   this.setAirSupply(0);
                   Vec3 var3 = this.getDeltaMovement();
@@ -317,11 +328,11 @@
          } else if (this.getAirSupply() < this.getMaxAirSupply()) {
             this.setAirSupply(this.increaseAirSupply(this.getAirSupply()));
          }
 
          if (!this.level.isClientSide) {
-            BlockPos var9 = new BlockPos(this);
+            BlockPos var9 = this.blockPosition();
             if (!Objects.equal(this.lastPos, var9)) {
                this.lastPos = var9;
                this.onChangedBlock(var9);
             }
          }
@@ -368,16 +379,53 @@
       this.yRotO = this.yRot;
       this.xRotO = this.xRot;
       this.level.getProfiler().pop();
    }
 
+   public boolean canSpawnSoulSpeedParticle() {
+      return this.tickCount % 5 == 0 && this.getDeltaMovement().x != 0.0D && this.getDeltaMovement().z != 0.0D && !this.isSpectator() && EnchantmentHelper.hasSoulSpeed(this) && this.onSoulSpeedBlock();
+   }
+
+   protected void spawnSoulSpeedParticle() {
+      Vec3 var1 = this.getDeltaMovement();
+      this.level.addParticle(ParticleTypes.SOUL, this.getX() + (this.random.nextDouble() - 0.5D) * (double)this.getBbWidth(), this.getY() + 0.1D, this.getZ() + (this.random.nextDouble() - 0.5D) * (double)this.getBbWidth(), var1.x * -0.2D, 0.1D, var1.z * -0.2D);
+      float var2 = this.random.nextFloat() * 0.4F + this.random.nextFloat() > 0.9F ? 0.6F : 0.0F;
+      this.playSound(SoundEvents.SOUL_ESCAPE, var2, 0.6F + this.random.nextFloat() * 0.4F);
+   }
+
+   protected boolean onSoulSpeedBlock() {
+      return this.getBlockStateOn().is(BlockTags.SOUL_SPEED_BLOCKS);
+   }
+
+   protected float getBlockSpeedFactor() {
+      return this.onSoulSpeedBlock() && EnchantmentHelper.getEnchantmentLevel(Enchantments.SOUL_SPEED, this) > 0 ? 1.0F : super.getBlockSpeedFactor();
+   }
+
    protected void onChangedBlock(BlockPos var1) {
       int var2 = EnchantmentHelper.getEnchantmentLevel(Enchantments.FROST_WALKER, this);
       if (var2 > 0) {
          FrostWalkerEnchantment.onEntityMoved(this, this.level, var1, var2);
       }
 
+      if (!this.getBlockStateOn().isAir()) {
+         AttributeInstance var3 = this.getAttribute(Attributes.MOVEMENT_SPEED);
+         if (var3.getModifier(SPEED_MODIFIER_SOUL_SPEED_UUID) != null) {
+            var3.removeModifier(SPEED_MODIFIER_SOUL_SPEED_UUID);
+         }
+
+         int var4 = EnchantmentHelper.getEnchantmentLevel(Enchantments.SOUL_SPEED, this);
+         if (var4 > 0 && this.onSoulSpeedBlock()) {
+            var3.addTransientModifier(new AttributeModifier(SPEED_MODIFIER_SOUL_SPEED_UUID, "Soul speed boost", (double)(0.03F * (1.0F + (float)var4 * 0.35F)), AttributeModifier.Operation.ADDITION));
+            if (this.getRandom().nextFloat() < 0.04F) {
+               ItemStack var5 = this.getItemBySlot(EquipmentSlot.FEET);
+               var5.hurtAndBreak(1, this, (var0) -> {
+                  var0.broadcastBreakEvent(EquipmentSlot.FEET);
+               });
+            }
+         }
+      }
+
    }
 
    public boolean isBaby() {
       return false;
    }
@@ -407,10 +455,14 @@
 
    protected boolean shouldDropExperience() {
       return !this.isBaby();
    }
 
+   protected boolean shouldDropLoot() {
+      return !this.isBaby();
+   }
+
    protected int decreaseAirSupply(int var1) {
       int var2 = EnchantmentHelper.getRespiration(this);
       return var2 > 0 && this.random.nextInt(var2 + 1) > 0 ? var1 : var1 - 1;
    }
 
@@ -489,11 +541,11 @@
       var1.putFloat("Health", this.getHealth());
       var1.putShort("HurtTime", (short)this.hurtTime);
       var1.putInt("HurtByTimestamp", this.lastHurtByMobTimestamp);
       var1.putShort("DeathTime", (short)this.deathTime);
       var1.putFloat("AbsorptionAmount", this.getAbsorptionAmount());
-      var1.put("Attributes", SharedMonsterAttributes.saveAttributes(this.getAttributes()));
+      var1.put("Attributes", this.getAttributes().save());
       if (!this.activeEffects.isEmpty()) {
          ListTag var2 = new ListTag();
          Iterator var3 = this.activeEffects.values().iterator();
 
          while(var3.hasNext()) {
@@ -508,17 +560,22 @@
       this.getSleepingPos().ifPresent((var1x) -> {
          var1.putInt("SleepingX", var1x.getX());
          var1.putInt("SleepingY", var1x.getY());
          var1.putInt("SleepingZ", var1x.getZ());
       });
-      var1.put("Brain", (Tag)this.brain.serialize(NbtOps.INSTANCE));
+      DataResult var5 = this.brain.serializeStart(NbtOps.INSTANCE);
+      Logger var10001 = LOGGER;
+      var10001.getClass();
+      var5.resultOrPartial(var10001::error).ifPresent((var1x) -> {
+         var1.put("Brain", var1x);
+      });
    }
 
    public void readAdditionalSaveData(CompoundTag var1) {
       this.setAbsorptionAmount(var1.getFloat("AbsorptionAmount"));
       if (var1.contains("Attributes", 9) && this.level != null && !this.level.isClientSide) {
-         SharedMonsterAttributes.loadAttributes(this.getAttributes(), var1.getList("Attributes", 10));
+         this.getAttributes().load(var1.getList("Attributes", 10));
       }
 
       if (var1.contains("ActiveEffects", 9)) {
          ListTag var2 = var1.getList("ActiveEffects", 10);
 
@@ -747,10 +804,22 @@
       }
 
       return true;
    }
 
+   public void forceAddEffect(MobEffectInstance var1) {
+      if (this.canBeAffected(var1)) {
+         MobEffectInstance var2 = (MobEffectInstance)this.activeEffects.put(var1.getEffect(), var1);
+         if (var2 == null) {
+            this.onEffectAdded(var1);
+         } else {
+            this.onEffectUpdated(var1, true);
+         }
+
+      }
+   }
+
    public boolean isInvertedHealAndHarm() {
       return this.getMobType() == MobType.UNDEAD;
    }
 
    @Nullable
@@ -922,11 +991,11 @@
                for(var10 = var7.getZ() - this.getZ(); var14 * var14 + var10 * var10 < 1.0E-4D; var10 = (Math.random() - Math.random()) * 0.01D) {
                   var14 = (Math.random() - Math.random()) * 0.01D;
                }
 
                this.hurtDir = (float)(Mth.atan2(var10, var14) * 57.2957763671875D - (double)this.yRot);
-               this.knockback(var7, 0.4F, var14, var10);
+               this.knockback(0.4F, var14, var10);
             } else {
                this.hurtDir = (float)((int)(Math.random() * 2.0D) * 180);
             }
          }
 
@@ -967,11 +1036,11 @@
    protected void blockUsingShield(LivingEntity var1) {
       var1.blockedByShield(this);
    }
 
    protected void blockedByShield(LivingEntity var1) {
-      var1.knockback(this, 0.5F, var1.getX() - this.getX(), var1.getZ() - this.getZ());
+      var1.knockback(0.5F, var1.getX() - this.getX(), var1.getZ() - this.getZ());
    }
 
    private boolean checkTotemDeathProtection(DamageSource var1) {
       if (var1.isBypassInvul()) {
          return false;
@@ -1092,11 +1161,11 @@
    protected void createWitherRose(@Nullable LivingEntity var1) {
       if (!this.level.isClientSide) {
          boolean var2 = false;
          if (var1 instanceof WitherBoss) {
             if (this.level.getGameRules().getBoolean(GameRules.RULE_MOBGRIEFING)) {
-               BlockPos var3 = new BlockPos(this);
+               BlockPos var3 = this.blockPosition();
                BlockState var4 = Blocks.WITHER_ROSE.defaultBlockState();
                if (this.level.getBlockState(var3).isAir() && var4.canSurvive(this.level, var3)) {
                   this.level.setBlock(var3, var4, 3);
                   var2 = true;
                }
@@ -1119,11 +1188,11 @@
       } else {
          var3 = 0;
       }
 
       boolean var4 = this.lastHurtByPlayerTime > 0;
-      if (this.shouldDropExperience() && this.level.getGameRules().getBoolean(GameRules.RULE_DOMOBLOOT)) {
+      if (this.shouldDropLoot() && this.level.getGameRules().getBoolean(GameRules.RULE_DOMOBLOOT)) {
          this.dropFromLootTable(var1, var4);
          this.dropCustomDeathLoot(var1, var3, var4);
       }
 
       this.dropEquipment();
@@ -1159,24 +1228,25 @@
       LootContext.Builder var5 = this.createLootContext(var2, var1);
       var4.getRandomItems(var5.create(LootContextParamSets.ENTITY), this::spawnAtLocation);
    }
 
    protected LootContext.Builder createLootContext(boolean var1, DamageSource var2) {
-      LootContext.Builder var3 = (new LootContext.Builder((ServerLevel)this.level)).withRandom(this.random).withParameter(LootContextParams.THIS_ENTITY, this).withParameter(LootContextParams.BLOCK_POS, new BlockPos(this)).withParameter(LootContextParams.DAMAGE_SOURCE, var2).withOptionalParameter(LootContextParams.KILLER_ENTITY, var2.getEntity()).withOptionalParameter(LootContextParams.DIRECT_KILLER_ENTITY, var2.getDirectEntity());
+      LootContext.Builder var3 = (new LootContext.Builder((ServerLevel)this.level)).withRandom(this.random).withParameter(LootContextParams.THIS_ENTITY, this).withParameter(LootContextParams.BLOCK_POS, this.blockPosition()).withParameter(LootContextParams.DAMAGE_SOURCE, var2).withOptionalParameter(LootContextParams.KILLER_ENTITY, var2.getEntity()).withOptionalParameter(LootContextParams.DIRECT_KILLER_ENTITY, var2.getDirectEntity());
       if (var1 && this.lastHurtByPlayer != null) {
          var3 = var3.withParameter(LootContextParams.LAST_DAMAGE_PLAYER, this.lastHurtByPlayer).withLuck(this.lastHurtByPlayer.getLuck());
       }
 
       return var3;
    }
 
-   public void knockback(Entity var1, float var2, double var3, double var5) {
-      if (this.random.nextDouble() >= this.getAttribute(SharedMonsterAttributes.KNOCKBACK_RESISTANCE).getValue()) {
+   public void knockback(float var1, double var2, double var4) {
+      var1 = (float)((double)var1 * (1.0D - this.getAttributeValue(Attributes.KNOCKBACK_RESISTANCE)));
+      if (var1 > 0.0F) {
          this.hasImpulse = true;
-         Vec3 var7 = this.getDeltaMovement();
-         Vec3 var8 = (new Vec3(var3, 0.0D, var5)).normalize().scale((double)var2);
-         this.setDeltaMovement(var7.x / 2.0D - var8.x, this.onGround ? Math.min(0.4D, var7.y / 2.0D + (double)var2) : var7.y, var7.z / 2.0D - var8.z);
+         Vec3 var6 = this.getDeltaMovement();
+         Vec3 var7 = (new Vec3(var2, 0.0D, var4)).normalize().scale((double)var1);
+         this.setDeltaMovement(var6.x / 2.0D - var7.x, this.onGround ? Math.min(0.4D, var6.y / 2.0D + (double)var1) : var6.y, var6.z / 2.0D - var7.z);
       }
    }
 
    @Nullable
    protected SoundEvent getHurtSound(DamageSource var1) {
@@ -1198,32 +1268,49 @@
 
    public SoundEvent getEatingSound(ItemStack var1) {
       return var1.getEatingSound();
    }
 
-   public boolean onLadder() {
+   public void setOnGround(boolean var1) {
+      super.setOnGround(var1);
+      if (var1) {
+         this.lastClimbablePos = Optional.empty();
+      }
+
+   }
+
+   public Optional<BlockPos> getLastClimbablePos() {
+      return this.lastClimbablePos;
+   }
+
+   public boolean onClimbable() {
       if (this.isSpectator()) {
          return false;
       } else {
-         BlockState var1 = this.getFeetBlockState();
-         Block var2 = var1.getBlock();
-         if (var2 != Blocks.LADDER && var2 != Blocks.VINE && var2 != Blocks.SCAFFOLDING) {
-            return var2 instanceof TrapDoorBlock && this.trapdoorUsableAsLadder(new BlockPos(this), var1);
-         } else {
+         BlockPos var1 = this.blockPosition();
+         BlockState var2 = this.getFeetBlockState();
+         Block var3 = var2.getBlock();
+         if (var3.is((Tag)BlockTags.CLIMBABLE)) {
+            this.lastClimbablePos = Optional.of(var1);
             return true;
+         } else if (var3 instanceof TrapDoorBlock && this.trapdoorUsableAsLadder(var1, var2)) {
+            this.lastClimbablePos = Optional.of(var1);
+            return true;
+         } else {
+            return false;
          }
       }
    }
 
    public BlockState getFeetBlockState() {
-      return this.level.getBlockState(new BlockPos(this));
+      return this.level.getBlockState(this.blockPosition());
    }
 
    private boolean trapdoorUsableAsLadder(BlockPos var1, BlockState var2) {
       if ((Boolean)var2.getValue(TrapDoorBlock.OPEN)) {
          BlockState var3 = this.level.getBlockState(var1.below());
-         if (var3.getBlock() == Blocks.LADDER && var3.getValue(LadderBlock.FACING) == var2.getValue(TrapDoorBlock.FACING)) {
+         if (var3.is(Blocks.LADDER) && var3.getValue(LadderBlock.FACING) == var2.getValue(TrapDoorBlock.FACING)) {
             return true;
          }
       }
 
       return false;
@@ -1271,24 +1358,23 @@
       this.hurtTime = this.hurtDuration;
       this.hurtDir = 0.0F;
    }
 
    public int getArmorValue() {
-      AttributeInstance var1 = this.getAttribute(SharedMonsterAttributes.ARMOR);
-      return Mth.floor(var1.getValue());
+      return Mth.floor(this.getAttributeValue(Attributes.ARMOR));
    }
 
-   protected void hurtArmor(float var1) {
+   protected void hurtArmor(DamageSource var1, float var2) {
    }
 
    protected void hurtCurrentlyUsedShield(float var1) {
    }
 
    protected float getDamageAfterArmorAbsorb(DamageSource var1, float var2) {
       if (!var1.isBypassArmor()) {
-         this.hurtArmor(var2);
-         var2 = CombatRules.getDamageAfterAbsorb(var2, (float)this.getArmorValue(), (float)this.getAttribute(SharedMonsterAttributes.ARMOR_TOUGHNESS).getValue());
+         this.hurtArmor(var1, var2);
+         var2 = CombatRules.getDamageAfterAbsorb(var2, (float)this.getArmorValue(), (float)this.getAttributeValue(Attributes.ARMOR_TOUGHNESS));
       }
 
       return var2;
    }
 
@@ -1361,11 +1447,11 @@
          return this.lastHurtByMob != null ? this.lastHurtByMob : null;
       }
    }
 
    public final float getMaxHealth() {
-      return (float)this.getAttribute(SharedMonsterAttributes.MAX_HEALTH).getValue();
+      return (float)this.getAttributeValue(Attributes.MAX_HEALTH);
    }
 
    public final int getArrowCount() {
       return (Integer)this.entityData.get(DATA_ARROW_COUNT_ID);
    }
@@ -1564,19 +1650,24 @@
       }
 
       this.attackAnim = (float)this.swingTime / (float)var1;
    }
 
+   @Nullable
    public AttributeInstance getAttribute(Attribute var1) {
       return this.getAttributes().getInstance(var1);
    }
 
-   public BaseAttributeMap getAttributes() {
-      if (this.attributes == null) {
-         this.attributes = new ModifiableAttributeMap();
-      }
+   public double getAttributeValue(Attribute var1) {
+      return this.getAttributes().getValue(var1);
+   }
 
+   public double getAttributeBaseValue(Attribute var1) {
+      return this.getAttributes().getBaseValue(var1);
+   }
+
+   public AttributeMap getAttributes() {
       return this.attributes;
    }
 
    public MobType getMobType() {
       return MobType.UNDEFINED;
@@ -1588,10 +1679,20 @@
 
    public ItemStack getOffhandItem() {
       return this.getItemBySlot(EquipmentSlot.OFFHAND);
    }
 
+   public boolean isHolding(Item var1) {
+      return this.isHolding((var1x) -> {
+         return var1x == var1;
+      });
+   }
+
+   public boolean isHolding(Predicate<Item> var1) {
+      return var1.test(this.getMainHandItem().getItem()) || var1.test(this.getOffhandItem().getItem());
+   }
+
    public ItemStack getItemInHand(InteractionHand var1) {
       if (var1 == InteractionHand.MAIN_HAND) {
          return this.getItemBySlot(EquipmentSlot.MAINHAND);
       } else if (var1 == InteractionHand.OFF_HAND) {
          return this.getItemBySlot(EquipmentSlot.OFFHAND);
@@ -1638,17 +1739,17 @@
       return var2 > 0 ? (float)var3 / (float)var2 : 0.0F;
    }
 
    public void setSprinting(boolean var1) {
       super.setSprinting(var1);
-      AttributeInstance var2 = this.getAttribute(SharedMonsterAttributes.MOVEMENT_SPEED);
+      AttributeInstance var2 = this.getAttribute(Attributes.MOVEMENT_SPEED);
       if (var2.getModifier(SPEED_MODIFIER_SPRINTING_UUID) != null) {
          var2.removeModifier(SPEED_MODIFIER_SPRINTING);
       }
 
       if (var1) {
-         var2.addModifier(SPEED_MODIFIER_SPRINTING);
+         var2.addTransientModifier(SPEED_MODIFIER_SPRINTING);
       }
 
    }
 
    protected float getSoundVolume() {
@@ -1668,106 +1769,19 @@
          super.push(var1);
       }
 
    }
 
-   private void findStandUpPosition(Entity var1) {
-      if (this.level.getBlockState(new BlockPos(var1)).getBlock().is(BlockTags.PORTALS)) {
-         this.setPos(var1.getX(), var1.getY(1.0D) + 0.001D, var1.getZ());
+   private void dismountVehicle(Entity var1) {
+      Vec3 var2;
+      if (!var1.removed && !this.level.getBlockState(var1.blockPosition()).getBlock().is((Tag)BlockTags.PORTALS)) {
+         var2 = var1.getDismountLocationForPassenger(this);
       } else {
-         double var12;
-         double var16;
-         double var18;
-         int var22;
-         if (!(var1 instanceof Boat) && !(var1 instanceof AbstractHorse)) {
-            double var3 = var1.getX();
-            double var36 = var1.getY(1.0D);
-            double var7 = var1.getZ();
-            Direction var37 = var1.getMotionDirection();
-            if (var37 != null && var37.getAxis() != Direction.Axis.Y) {
-               Direction var38 = var37.getClockWise();
-               int[][] var39 = new int[][]{{0, 1}, {0, -1}, {-1, 1}, {-1, -1}, {1, 1}, {1, -1}, {-1, 0}, {1, 0}, {0, 1}};
-               var12 = Math.floor(this.getX()) + 0.5D;
-               double var40 = Math.floor(this.getZ()) + 0.5D;
-               var16 = this.getBoundingBox().maxX - this.getBoundingBox().minX;
-               var18 = this.getBoundingBox().maxZ - this.getBoundingBox().minZ;
-               AABB var41 = new AABB(var12 - var16 / 2.0D, var1.getBoundingBox().minY, var40 - var18 / 2.0D, var12 + var16 / 2.0D, Math.floor(var1.getBoundingBox().minY) + (double)this.getBbHeight(), var40 + var18 / 2.0D);
-               int[][] var21 = var39;
-               var22 = var39.length;
-
-               for(int var42 = 0; var42 < var22; ++var42) {
-                  int[] var24 = var21[var42];
-                  double var25 = (double)(var37.getStepX() * var24[0] + var38.getStepX() * var24[1]);
-                  double var27 = (double)(var37.getStepZ() * var24[0] + var38.getStepZ() * var24[1]);
-                  double var29 = var12 + var25;
-                  double var31 = var40 + var27;
-                  AABB var35 = var41.move(var25, 0.0D, var27);
-                  BlockPos var33;
-                  if (this.level.noCollision(this, var35)) {
-                     var33 = new BlockPos(var29, this.getY(), var31);
-                     if (this.level.getBlockState(var33).entityCanStandOn(this.level, var33, this)) {
-                        this.teleportTo(var29, this.getY() + 1.0D, var31);
-                        return;
-                     }
-
-                     BlockPos var34 = new BlockPos(var29, this.getY() - 1.0D, var31);
-                     if (this.level.getBlockState(var34).entityCanStandOn(this.level, var34, this) || this.level.getFluidState(var34).is(FluidTags.WATER)) {
-                        var3 = var29;
-                        var36 = this.getY() + 1.0D;
-                        var7 = var31;
-                     }
-                  } else {
-                     var33 = new BlockPos(var29, this.getY() + 1.0D, var31);
-                     if (this.level.noCollision(this, var35.move(0.0D, 1.0D, 0.0D)) && this.level.getBlockState(var33).entityCanStandOn(this.level, var33, this)) {
-                        var3 = var29;
-                        var36 = this.getY() + 2.0D;
-                        var7 = var31;
-                     }
-                  }
-               }
-            }
-
-            this.teleportTo(var3, var36, var7);
-         } else {
-            double var2 = (double)(this.getBbWidth() / 2.0F + var1.getBbWidth() / 2.0F) + 0.4D;
-            AABB var4 = var1.getBoundingBox();
-            float var5;
-            double var6;
-            byte var8;
-            if (var1 instanceof Boat) {
-               var6 = var4.maxY;
-               var8 = 2;
-               var5 = 0.0F;
-            } else {
-               var6 = var4.minY;
-               var8 = 3;
-               var5 = 1.5707964F * (float)(this.getMainArm() == HumanoidArm.RIGHT ? -1 : 1);
-            }
-
-            float var9 = -this.yRot * 0.017453292F - 3.1415927F + var5;
-            float var10 = -Mth.sin(var9);
-            float var11 = -Mth.cos(var9);
-            var12 = Math.abs(var10) > Math.abs(var11) ? var2 / (double)Math.abs(var10) : var2 / (double)Math.abs(var11);
-            AABB var14 = this.getBoundingBox().move(-this.getX(), -this.getY(), -this.getZ());
-            ImmutableSet var15 = ImmutableSet.of(this, var1);
-            var16 = this.getX() + (double)var10 * var12;
-            var18 = this.getZ() + (double)var11 * var12;
-            double var20 = 0.001D;
-
-            for(var22 = 0; var22 < var8; ++var22) {
-               double var23 = var6 + var20;
-               if (this.level.noCollision(this, var14.move(var16, var23, var18), var15)) {
-                  this.setPos(var16, var23, var18);
-                  return;
-               }
-
-               ++var20;
-            }
-
-            this.setPos(var1.getX(), var1.getY(1.0D) + 0.001D, var1.getZ());
-         }
+         var2 = new Vec3(var1.getX(), var1.getY() + (double)var1.getBbHeight(), var1.getZ());
       }
+
+      this.teleportTo(var2.x, var2.y, var2.z);
    }
 
    public boolean shouldShowName() {
       return this.isCustomNameVisible();
    }
@@ -1794,188 +1808,201 @@
 
    protected void goDownInWater() {
       this.setDeltaMovement(this.getDeltaMovement().add(0.0D, -0.03999999910593033D, 0.0D));
    }
 
-   protected void jumpInLiquid(net.minecraft.tags.Tag<Fluid> var1) {
+   protected void jumpInLiquid(Tag<Fluid> var1) {
       this.setDeltaMovement(this.getDeltaMovement().add(0.0D, 0.03999999910593033D, 0.0D));
    }
 
    protected float getWaterSlowDown() {
       return 0.8F;
    }
 
+   public boolean canStandOnFluid(Fluid var1) {
+      return false;
+   }
+
    public void travel(Vec3 var1) {
-      double var2;
-      float var8;
       if (this.isEffectiveAi() || this.isControlledByLocalInstance()) {
-         var2 = 0.08D;
+         double var2 = 0.08D;
          boolean var4 = this.getDeltaMovement().y <= 0.0D;
          if (var4 && this.hasEffect(MobEffects.SLOW_FALLING)) {
             var2 = 0.01D;
             this.fallDistance = 0.0F;
          }
 
-         double var5;
-         float var7;
-         double var12;
-         if (!this.isInWater() || this instanceof Player && ((Player)this).abilities.flying) {
-            if (this.isInLava() && (!(this instanceof Player) || !((Player)this).abilities.flying)) {
-               var5 = this.getY();
-               this.moveRelative(0.02F, var1);
-               this.move(MoverType.SELF, this.getDeltaMovement());
-               this.setDeltaMovement(this.getDeltaMovement().scale(0.5D));
-               if (!this.isNoGravity()) {
-                  this.setDeltaMovement(this.getDeltaMovement().add(0.0D, -var2 / 4.0D, 0.0D));
-               }
+         FluidState var5 = this.level.getFluidState(this.blockPosition());
+         float var8;
+         double var24;
+         if (this.isInWater() && (!(this instanceof Player) || !((Player)this).abilities.flying) && !this.canStandOnFluid(var5.getType())) {
+            var24 = this.getY();
+            var8 = this.isSprinting() ? 0.9F : this.getWaterSlowDown();
+            float var26 = 0.02F;
+            float var28 = (float)EnchantmentHelper.getDepthStrider(this);
+            if (var28 > 3.0F) {
+               var28 = 3.0F;
+            }
 
-               Vec3 var25 = this.getDeltaMovement();
-               if (this.horizontalCollision && this.isFree(var25.x, var25.y + 0.6000000238418579D - this.getY() + var5, var25.z)) {
-                  this.setDeltaMovement(var25.x, 0.30000001192092896D, var25.z);
-               }
-            } else if (this.isFallFlying()) {
-               Vec3 var21 = this.getDeltaMovement();
-               if (var21.y > -0.5D) {
-                  this.fallDistance = 1.0F;
-               }
+            if (!this.onGround) {
+               var28 *= 0.5F;
+            }
 
-               Vec3 var6 = this.getLookAngle();
-               var7 = this.xRot * 0.017453292F;
-               double var26 = Math.sqrt(var6.x * var6.x + var6.z * var6.z);
-               double var29 = Math.sqrt(getHorizontalDistanceSqr(var21));
-               var12 = var6.length();
-               float var14 = Mth.cos(var7);
-               var14 = (float)((double)var14 * (double)var14 * Math.min(1.0D, var12 / 0.4D));
-               var21 = this.getDeltaMovement().add(0.0D, var2 * (-1.0D + (double)var14 * 0.75D), 0.0D);
-               double var15;
-               if (var21.y < 0.0D && var26 > 0.0D) {
-                  var15 = var21.y * -0.1D * (double)var14;
-                  var21 = var21.add(var6.x * var15 / var26, var15, var6.z * var15 / var26);
-               }
+            if (var28 > 0.0F) {
+               var8 += (0.54600006F - var8) * var28 / 3.0F;
+               var26 += (this.getSpeed() - var26) * var28 / 3.0F;
+            }
 
-               if (var7 < 0.0F && var26 > 0.0D) {
-                  var15 = var29 * (double)(-Mth.sin(var7)) * 0.04D;
-                  var21 = var21.add(-var6.x * var15 / var26, var15 * 3.2D, -var6.z * var15 / var26);
-               }
+            if (this.hasEffect(MobEffects.DOLPHINS_GRACE)) {
+               var8 = 0.96F;
+            }
 
-               if (var26 > 0.0D) {
-                  var21 = var21.add((var6.x / var26 * var29 - var21.x) * 0.1D, 0.0D, (var6.z / var26 * var29 - var21.z) * 0.1D);
-               }
+            this.moveRelative(var26, var1);
+            this.move(MoverType.SELF, this.getDeltaMovement());
+            Vec3 var27 = this.getDeltaMovement();
+            if (this.horizontalCollision && this.onClimbable()) {
+               var27 = new Vec3(var27.x, 0.2D, var27.z);
+            }
 
-               this.setDeltaMovement(var21.multiply(0.9900000095367432D, 0.9800000190734863D, 0.9900000095367432D));
-               this.move(MoverType.SELF, this.getDeltaMovement());
-               if (this.horizontalCollision && !this.level.isClientSide) {
-                  var15 = Math.sqrt(getHorizontalDistanceSqr(this.getDeltaMovement()));
-                  double var17 = var29 - var15;
-                  float var19 = (float)(var17 * 10.0D - 3.0D);
-                  if (var19 > 0.0F) {
-                     this.playSound(this.getFallDamageSound((int)var19), 1.0F, 1.0F);
-                     this.hurt(DamageSource.FLY_INTO_WALL, var19);
-                  }
-               }
+            this.setDeltaMovement(var27.multiply((double)var8, 0.800000011920929D, (double)var8));
+            Vec3 var12 = this.getFluidFallingAdjustedMovement(var2, var4, this.getDeltaMovement());
+            this.setDeltaMovement(var12);
+            if (this.horizontalCollision && this.isFree(var12.x, var12.y + 0.6000000238418579D - this.getY() + var24, var12.z)) {
+               this.setDeltaMovement(var12.x, 0.30000001192092896D, var12.z);
+            }
+         } else if (this.isInLava() && (!(this instanceof Player) || !((Player)this).abilities.flying) && !this.canStandOnFluid(var5.getType())) {
+            var24 = this.getY();
+            this.moveRelative(0.02F, var1);
+            this.move(MoverType.SELF, this.getDeltaMovement());
+            this.setDeltaMovement(this.getDeltaMovement().scale(0.5D));
+            if (!this.isNoGravity()) {
+               this.setDeltaMovement(this.getDeltaMovement().add(0.0D, -var2 / 4.0D, 0.0D));
+            }
 
-               if (this.onGround && !this.level.isClientSide) {
-                  this.setSharedFlag(7, false);
-               }
-            } else {
-               BlockPos var24 = this.getBlockPosBelowThatAffectsMyMovement();
-               float var22 = this.level.getBlockState(var24).getBlock().getFriction();
-               var7 = this.onGround ? var22 * 0.91F : 0.91F;
-               this.moveRelative(this.getFrictionInfluencedSpeed(var22), var1);
-               this.setDeltaMovement(this.handleOnClimbable(this.getDeltaMovement()));
-               this.move(MoverType.SELF, this.getDeltaMovement());
-               Vec3 var27 = this.getDeltaMovement();
-               if ((this.horizontalCollision || this.jumping) && this.onLadder()) {
-                  var27 = new Vec3(var27.x, 0.2D, var27.z);
-               }
-
-               double var28 = var27.y;
-               if (this.hasEffect(MobEffects.LEVITATION)) {
-                  var28 += (0.05D * (double)(this.getEffect(MobEffects.LEVITATION).getAmplifier() + 1) - var27.y) * 0.2D;
-                  this.fallDistance = 0.0F;
-               } else if (this.level.isClientSide && !this.level.hasChunkAt(var24)) {
-                  if (this.getY() > 0.0D) {
-                     var28 = -0.1D;
-                  } else {
-                     var28 = 0.0D;
-                  }
-               } else if (!this.isNoGravity()) {
-                  var28 -= var2;
-               }
-
-               this.setDeltaMovement(var27.x * (double)var7, var28 * 0.9800000190734863D, var27.z * (double)var7);
+            Vec3 var22 = this.getDeltaMovement();
+            if (this.horizontalCollision && this.isFree(var22.x, var22.y + 0.6000000238418579D - this.getY() + var24, var22.z)) {
+               this.setDeltaMovement(var22.x, 0.30000001192092896D, var22.z);
             }
-         } else {
-            var5 = this.getY();
-            var7 = this.isSprinting() ? 0.9F : this.getWaterSlowDown();
-            var8 = 0.02F;
-            float var9 = (float)EnchantmentHelper.getDepthStrider(this);
-            if (var9 > 3.0F) {
-               var9 = 3.0F;
+         } else if (this.isFallFlying()) {
+            Vec3 var6 = this.getDeltaMovement();
+            if (var6.y > -0.5D) {
+               this.fallDistance = 1.0F;
             }
 
-            if (!this.onGround) {
-               var9 *= 0.5F;
+            Vec3 var7 = this.getLookAngle();
+            var8 = this.xRot * 0.017453292F;
+            double var9 = Math.sqrt(var7.x * var7.x + var7.z * var7.z);
+            double var11 = Math.sqrt(getHorizontalDistanceSqr(var6));
+            double var13 = var7.length();
+            float var15 = Mth.cos(var8);
+            var15 = (float)((double)var15 * (double)var15 * Math.min(1.0D, var13 / 0.4D));
+            var6 = this.getDeltaMovement().add(0.0D, var2 * (-1.0D + (double)var15 * 0.75D), 0.0D);
+            double var16;
+            if (var6.y < 0.0D && var9 > 0.0D) {
+               var16 = var6.y * -0.1D * (double)var15;
+               var6 = var6.add(var7.x * var16 / var9, var16, var7.z * var16 / var9);
             }
 
-            if (var9 > 0.0F) {
-               var7 += (0.54600006F - var7) * var9 / 3.0F;
-               var8 += (this.getSpeed() - var8) * var9 / 3.0F;
+            if (var8 < 0.0F && var9 > 0.0D) {
+               var16 = var11 * (double)(-Mth.sin(var8)) * 0.04D;
+               var6 = var6.add(-var7.x * var16 / var9, var16 * 3.2D, -var7.z * var16 / var9);
             }
 
-            if (this.hasEffect(MobEffects.DOLPHINS_GRACE)) {
-               var7 = 0.96F;
+            if (var9 > 0.0D) {
+               var6 = var6.add((var7.x / var9 * var11 - var6.x) * 0.1D, 0.0D, (var7.z / var9 * var11 - var6.z) * 0.1D);
             }
 
-            this.moveRelative(var8, var1);
+            this.setDeltaMovement(var6.multiply(0.9900000095367432D, 0.9800000190734863D, 0.9900000095367432D));
             this.move(MoverType.SELF, this.getDeltaMovement());
-            Vec3 var10 = this.getDeltaMovement();
-            if (this.horizontalCollision && this.onLadder()) {
-               var10 = new Vec3(var10.x, 0.2D, var10.z);
+            if (this.horizontalCollision && !this.level.isClientSide) {
+               var16 = Math.sqrt(getHorizontalDistanceSqr(this.getDeltaMovement()));
+               double var18 = var11 - var16;
+               float var20 = (float)(var18 * 10.0D - 3.0D);
+               if (var20 > 0.0F) {
+                  this.playSound(this.getFallDamageSound((int)var20), 1.0F, 1.0F);
+                  this.hurt(DamageSource.FLY_INTO_WALL, var20);
+               }
             }
 
-            this.setDeltaMovement(var10.multiply((double)var7, 0.800000011920929D, (double)var7));
-            Vec3 var11;
-            if (!this.isNoGravity() && !this.isSprinting()) {
-               var11 = this.getDeltaMovement();
-               if (var4 && Math.abs(var11.y - 0.005D) >= 0.003D && Math.abs(var11.y - var2 / 16.0D) < 0.003D) {
-                  var12 = -0.003D;
+            if (this.onGround && !this.level.isClientSide) {
+               this.setSharedFlag(7, false);
+            }
+         } else {
+            BlockPos var23 = this.getBlockPosBelowThatAffectsMyMovement();
+            float var21 = this.level.getBlockState(var23).getBlock().getFriction();
+            var8 = this.onGround ? var21 * 0.91F : 0.91F;
+            Vec3 var25 = this.handleRelativeFrictionAndCalculateMovement(var1, var21);
+            double var10 = var25.y;
+            if (this.hasEffect(MobEffects.LEVITATION)) {
+               var10 += (0.05D * (double)(this.getEffect(MobEffects.LEVITATION).getAmplifier() + 1) - var25.y) * 0.2D;
+               this.fallDistance = 0.0F;
+            } else if (this.level.isClientSide && !this.level.hasChunkAt(var23)) {
+               if (this.getY() > 0.0D) {
+                  var10 = -0.1D;
                } else {
-                  var12 = var11.y - var2 / 16.0D;
+                  var10 = 0.0D;
                }
-
-               this.setDeltaMovement(var11.x, var12, var11.z);
+            } else if (!this.isNoGravity()) {
+               var10 -= var2;
             }
 
-            var11 = this.getDeltaMovement();
-            if (this.horizontalCollision && this.isFree(var11.x, var11.y + 0.6000000238418579D - this.getY() + var5, var11.z)) {
-               this.setDeltaMovement(var11.x, 0.30000001192092896D, var11.z);
-            }
+            this.setDeltaMovement(var25.x * (double)var8, var10 * 0.9800000190734863D, var25.z * (double)var8);
          }
       }
 
-      this.animationSpeedOld = this.animationSpeed;
-      var2 = this.getX() - this.xo;
-      double var20 = this.getZ() - this.zo;
-      double var23 = this instanceof FlyingAnimal ? this.getY() - this.yo : 0.0D;
-      var8 = Mth.sqrt(var2 * var2 + var23 * var23 + var20 * var20) * 4.0F;
-      if (var8 > 1.0F) {
-         var8 = 1.0F;
+      this.calculateEntityAnimation(this, this instanceof FlyingAnimal);
+   }
+
+   public void calculateEntityAnimation(LivingEntity var1, boolean var2) {
+      var1.animationSpeedOld = var1.animationSpeed;
+      double var3 = var1.getX() - var1.xo;
+      double var5 = var2 ? var1.getY() - var1.yo : 0.0D;
+      double var7 = var1.getZ() - var1.zo;
+      float var9 = Mth.sqrt(var3 * var3 + var5 * var5 + var7 * var7) * 4.0F;
+      if (var9 > 1.0F) {
+         var9 = 1.0F;
       }
 
-      this.animationSpeed += (var8 - this.animationSpeed) * 0.4F;
-      this.animationPosition += this.animationSpeed;
+      var1.animationSpeed += (var9 - var1.animationSpeed) * 0.4F;
+      var1.animationPosition += var1.animationSpeed;
    }
 
+   public Vec3 handleRelativeFrictionAndCalculateMovement(Vec3 var1, float var2) {
+      this.moveRelative(this.getFrictionInfluencedSpeed(var2), var1);
+      this.setDeltaMovement(this.handleOnClimbable(this.getDeltaMovement()));
+      this.move(MoverType.SELF, this.getDeltaMovement());
+      Vec3 var3 = this.getDeltaMovement();
+      if ((this.horizontalCollision || this.jumping) && this.onClimbable()) {
+         var3 = new Vec3(var3.x, 0.2D, var3.z);
+      }
+
+      return var3;
+   }
+
+   public Vec3 getFluidFallingAdjustedMovement(double var1, boolean var3, Vec3 var4) {
+      if (!this.isNoGravity() && !this.isSprinting()) {
+         double var5;
+         if (var3 && Math.abs(var4.y - 0.005D) >= 0.003D && Math.abs(var4.y - var1 / 16.0D) < 0.003D) {
+            var5 = -0.003D;
+         } else {
+            var5 = var4.y - var1 / 16.0D;
+         }
+
+         return new Vec3(var4.x, var5, var4.z);
+      } else {
+         return var4;
+      }
+   }
+
    private Vec3 handleOnClimbable(Vec3 var1) {
-      if (this.onLadder()) {
+      if (this.onClimbable()) {
          this.fallDistance = 0.0F;
          float var2 = 0.15F;
          double var3 = Mth.clamp(var1.x, -0.15000000596046448D, 0.15000000596046448D);
          double var5 = Mth.clamp(var1.z, -0.15000000596046448D, 0.15000000596046448D);
          double var7 = Math.max(var1.y, -0.15000000596046448D);
-         if (var7 < 0.0D && this.getFeetBlockState().getBlock() != Blocks.SCAFFOLDING && this.isSuppressingSlidingDownLadder() && this instanceof Player) {
+         if (var7 < 0.0D && !this.getFeetBlockState().is(Blocks.SCAFFOLDING) && this.isSuppressingSlidingDownLadder() && this instanceof Player) {
             var7 = 0.0D;
          }
 
          var1 = new Vec3(var3, var7, var5);
       }
@@ -2052,11 +2079,11 @@
                if (!var7.isEmpty()) {
                   this.getAttributes().removeAttributeModifiers(var7.getAttributeModifiers(var6));
                }
 
                if (!var8.isEmpty()) {
-                  this.getAttributes().addAttributeModifiers(var8.getAttributeModifiers(var6));
+                  this.getAttributes().addTransientAttributeModifiers(var8.getAttributeModifiers(var6));
                }
 
                switch(var6.getType()) {
                case HAND:
                   this.lastHandItemStacks.set(var6.getIndex(), var8.copy());
@@ -2215,23 +2242,23 @@
       if (this.lerpHeadSteps > 0) {
          this.yHeadRot = (float)((double)this.yHeadRot + Mth.wrapDegrees(this.lyHeadRot - (double)this.yHeadRot) / (double)this.lerpHeadSteps);
          --this.lerpHeadSteps;
       }
 
-      Vec3 var9 = this.getDeltaMovement();
-      double var2 = var9.x;
-      double var4 = var9.y;
-      double var6 = var9.z;
-      if (Math.abs(var9.x) < 0.003D) {
+      Vec3 var13 = this.getDeltaMovement();
+      double var2 = var13.x;
+      double var4 = var13.y;
+      double var6 = var13.z;
+      if (Math.abs(var13.x) < 0.003D) {
          var2 = 0.0D;
       }
 
-      if (Math.abs(var9.y) < 0.003D) {
+      if (Math.abs(var13.y) < 0.003D) {
          var4 = 0.0D;
       }
 
-      if (Math.abs(var9.z) < 0.003D) {
+      if (Math.abs(var13.z) < 0.003D) {
          var6 = 0.0D;
       }
 
       this.setDeltaMovement(var2, var4, var6);
       this.level.getProfiler().push("ai");
@@ -2246,43 +2273,48 @@
       }
 
       this.level.getProfiler().pop();
       this.level.getProfiler().push("jump");
       if (this.jumping) {
-         if (this.waterHeight > 0.0D && (!this.onGround || this.waterHeight > 0.4D)) {
+         double var8 = this.getFluidHeight(FluidTags.WATER);
+         boolean var10 = this.isInWater() && var8 > 0.0D;
+         double var11 = this.getFluidJumpThreshold();
+         if (!var10 || this.onGround && var8 <= var11) {
+            if (this.isInLava()) {
+               this.jumpInLiquid(FluidTags.LAVA);
+            } else if ((this.onGround || var10 && var8 <= var11) && this.noJumpDelay == 0) {
+               this.jumpFromGround();
+               this.noJumpDelay = 10;
+            }
+         } else {
             this.jumpInLiquid(FluidTags.WATER);
-         } else if (this.isInLava()) {
-            this.jumpInLiquid(FluidTags.LAVA);
-         } else if ((this.onGround || this.waterHeight > 0.0D && this.waterHeight <= 0.4D) && this.noJumpDelay == 0) {
-            this.jumpFromGround();
-            this.noJumpDelay = 10;
          }
       } else {
          this.noJumpDelay = 0;
       }
 
       this.level.getProfiler().pop();
       this.level.getProfiler().push("travel");
       this.xxa *= 0.98F;
       this.zza *= 0.98F;
       this.updateFallFlying();
-      AABB var8 = this.getBoundingBox();
+      AABB var14 = this.getBoundingBox();
       this.travel(new Vec3((double)this.xxa, (double)this.yya, (double)this.zza));
       this.level.getProfiler().pop();
       this.level.getProfiler().push("push");
       if (this.autoSpinAttackTicks > 0) {
          --this.autoSpinAttackTicks;
-         this.checkAutoSpinAttack(var8, this.getBoundingBox());
+         this.checkAutoSpinAttack(var14, this.getBoundingBox());
       }
 
       this.pushEntities();
       this.level.getProfiler().pop();
    }
 
    private void updateFallFlying() {
       boolean var1 = this.getSharedFlag(7);
-      if (var1 && !this.onGround && !this.isPassenger()) {
+      if (var1 && !this.onGround && !this.isPassenger() && !this.hasEffect(MobEffects.LEVITATION)) {
          ItemStack var2 = this.getItemBySlot(EquipmentSlot.CHEST);
          if (var2.getItem() == Items.ELYTRA && ElytraItem.isFlyEnabled(var2)) {
             var1 = true;
             if (!this.level.isClientSide && (this.fallFlyTicks + 1) % 20 == 0) {
                var2.hurtAndBreak(1, this, (var0) -> {
@@ -2376,11 +2408,11 @@
 
    public void stopRiding() {
       Entity var1 = this.getVehicle();
       super.stopRiding();
       if (var1 != null && var1 != this.getVehicle() && !this.level.isClientSide) {
-         this.findStandUpPosition(var1);
+         this.dismountVehicle(var1);
       }
 
    }
 
    public void rideTick() {
@@ -2441,15 +2473,15 @@
    public boolean isPickable() {
       return !this.removed;
    }
 
    public boolean isPushable() {
-      return this.isAlive() && !this.onLadder();
+      return this.isAlive() && !this.onClimbable();
    }
 
    protected void markHurt() {
-      this.hurtMarked = this.random.nextDouble() >= this.getAttribute(SharedMonsterAttributes.KNOCKBACK_RESISTANCE).getValue();
+      this.hurtMarked = this.random.nextDouble() >= this.getAttributeValue(Attributes.KNOCKBACK_RESISTANCE);
    }
 
    public float getYHeadRot() {
       return this.yHeadRot;
    }
@@ -2495,10 +2527,11 @@
    }
 
    private void updatingUsingItem() {
       if (this.isUsingItem()) {
          if (ItemStack.isSameIgnoreDurability(this.getItemInHand(this.getUsedItemHand()), this.useItem)) {
+            this.useItem = this.getItemInHand(this.getUsedItemHand());
             this.useItem.onUseTick(this.level, this, this.getUseItemRemainingTicks());
             if (this.shouldTriggerItemUseEffects()) {
                this.triggerItemUseEffects(this.useItem, 5);
             }
 
@@ -2752,10 +2785,19 @@
 
    public EntityDimensions getDimensions(Pose var1) {
       return var1 == Pose.SLEEPING ? SLEEPING_DIMENSIONS : super.getDimensions(var1).scale(this.getScale());
    }
 
+   public ImmutableList<Pose> getDismountPoses() {
+      return ImmutableList.of(Pose.STANDING);
+   }
+
+   public AABB getLocalBoundsForPose(Pose var1) {
+      EntityDimensions var2 = this.getDimensions(var1);
+      return new AABB((double)(-var2.width / 2.0F), 0.0D, (double)(-var2.width / 2.0F), (double)(var2.width / 2.0F), (double)var2.height, (double)(var2.width / 2.0F));
+   }
+
    public Optional<BlockPos> getSleepingPos() {
       return (Optional)this.entityData.get(SLEEPING_POS_ID);
    }
 
    public void setSleepingPos(BlockPos var1) {
@@ -2893,11 +2935,11 @@
    public void broadcastBreakEvent(InteractionHand var1) {
       this.broadcastBreakEvent(var1 == InteractionHand.MAIN_HAND ? EquipmentSlot.MAINHAND : EquipmentSlot.OFFHAND);
    }
 
    static {
-      SPEED_MODIFIER_SPRINTING = (new AttributeModifier(SPEED_MODIFIER_SPRINTING_UUID, "Sprinting speed boost", 0.30000001192092896D, AttributeModifier.Operation.MULTIPLY_TOTAL)).setSerialize(false);
+      SPEED_MODIFIER_SPRINTING = new AttributeModifier(SPEED_MODIFIER_SPRINTING_UUID, "Sprinting speed boost", 0.30000001192092896D, AttributeModifier.Operation.MULTIPLY_TOTAL);
       DATA_LIVING_ENTITY_FLAGS = SynchedEntityData.defineId(LivingEntity.class, EntityDataSerializers.BYTE);
       DATA_HEALTH_ID = SynchedEntityData.defineId(LivingEntity.class, EntityDataSerializers.FLOAT);
       DATA_EFFECT_COLOR_ID = SynchedEntityData.defineId(LivingEntity.class, EntityDataSerializers.INT);
       DATA_EFFECT_AMBIENCE_ID = SynchedEntityData.defineId(LivingEntity.class, EntityDataSerializers.BOOLEAN);
       DATA_ARROW_COUNT_ID = SynchedEntityData.defineId(LivingEntity.class, EntityDataSerializers.INT);
