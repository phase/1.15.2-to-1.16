--- net/minecraft/world/item/ItemStack.java
+++ net/minecraft/world/item/ItemStack.java
@@ -4,56 +4,63 @@
 import com.google.common.collect.Lists;
 import com.google.common.collect.Multimap;
 import com.google.gson.JsonParseException;
 import com.mojang.brigadier.StringReader;
 import com.mojang.brigadier.exceptions.CommandSyntaxException;
+import com.mojang.serialization.Codec;
+import com.mojang.serialization.codecs.RecordCodecBuilder;
 import java.text.DecimalFormat;
 import java.text.DecimalFormatSymbols;
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Locale;
 import java.util.Objects;
+import java.util.Optional;
 import java.util.Random;
 import java.util.Map.Entry;
 import java.util.function.Consumer;
 import java.util.function.Predicate;
 import java.util.stream.Collectors;
 import javax.annotation.Nullable;
 import net.minecraft.ChatFormatting;
+import net.minecraft.Util;
 import net.minecraft.advancements.CriteriaTriggers;
 import net.minecraft.commands.arguments.blocks.BlockPredicateArgument;
 import net.minecraft.commands.arguments.blocks.BlockStateParser;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Registry;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.ListTag;
 import net.minecraft.network.chat.Component;
 import net.minecraft.network.chat.ComponentUtils;
 import net.minecraft.network.chat.HoverEvent;
+import net.minecraft.network.chat.MutableComponent;
 import net.minecraft.network.chat.Style;
 import net.minecraft.network.chat.TextComponent;
 import net.minecraft.network.chat.TranslatableComponent;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.sounds.SoundEvent;
 import net.minecraft.stats.Stats;
 import net.minecraft.tags.BlockTags;
 import net.minecraft.tags.Tag;
-import net.minecraft.tags.TagManager;
+import net.minecraft.tags.TagContainer;
 import net.minecraft.world.InteractionHand;
 import net.minecraft.world.InteractionResult;
 import net.minecraft.world.InteractionResultHolder;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EquipmentSlot;
 import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.MobType;
+import net.minecraft.world.entity.ai.attributes.Attribute;
 import net.minecraft.world.entity.ai.attributes.AttributeModifier;
+import net.minecraft.world.entity.ai.attributes.Attributes;
 import net.minecraft.world.entity.decoration.ItemFrame;
-import net.minecraft.world.entity.monster.SharedMonsterAttributes;
 import net.minecraft.world.entity.player.Player;
+import net.minecraft.world.item.context.UseOnContext;
 import net.minecraft.world.item.enchantment.DigDurabilityEnchantment;
 import net.minecraft.world.item.enchantment.Enchantment;
 import net.minecraft.world.item.enchantment.EnchantmentHelper;
 import net.minecraft.world.item.enchantment.Enchantments;
 import net.minecraft.world.level.ItemLike;
@@ -63,35 +70,46 @@
 import net.minecraft.world.level.block.state.pattern.BlockInWorld;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
 public final class ItemStack {
+   public static final Codec<ItemStack> CODEC = RecordCodecBuilder.create((var0) -> {
+      return var0.group(Registry.ITEM.fieldOf("id").forGetter((var0x) -> {
+         return var0x.item;
+      }), Codec.INT.fieldOf("Count").forGetter((var0x) -> {
+         return var0x.count;
+      }), CompoundTag.CODEC.optionalFieldOf("tag").forGetter((var0x) -> {
+         return Optional.ofNullable(var0x.tag);
+      })).apply(var0, ItemStack::new);
+   });
    private static final Logger LOGGER = LogManager.getLogger();
    public static final ItemStack EMPTY = new ItemStack((Item)null);
-   public static final DecimalFormat ATTRIBUTE_MODIFIER_FORMAT = getAttributeDecimalFormat();
+   public static final DecimalFormat ATTRIBUTE_MODIFIER_FORMAT = (DecimalFormat)Util.make(new DecimalFormat("#.##"), (var0) -> {
+      var0.setDecimalFormatSymbols(DecimalFormatSymbols.getInstance(Locale.ROOT));
+   });
+   private static final Style LORE_STYLE;
    private int count;
    private int popTime;
    @Deprecated
    private final Item item;
    private CompoundTag tag;
    private boolean emptyCacheFlag;
-   private ItemFrame frame;
+   private Entity entityRepresentation;
    private BlockInWorld cachedBreakBlock;
    private boolean cachedBreakBlockResult;
    private BlockInWorld cachedPlaceBlock;
    private boolean cachedPlaceBlockResult;
 
-   private static DecimalFormat getAttributeDecimalFormat() {
-      DecimalFormat var0 = new DecimalFormat("#.##");
-      var0.setDecimalFormatSymbols(DecimalFormatSymbols.getInstance(Locale.ROOT));
-      return var0;
-   }
-
    public ItemStack(ItemLike var1) {
       this(var1, 1);
    }
 
+   private ItemStack(ItemLike var1, int var2, Optional<CompoundTag> var3) {
+      this(var1, var2);
+      var3.ifPresent(this::setTag);
+   }
+
    public ItemStack(ItemLike var1, int var2) {
       this.item = var1 == null ? null : var1.asItem();
       this.count = var2;
       if (this.item != null && this.item.canBeDepleted()) {
          this.setDamageValue(this.getDamageValue());
@@ -158,11 +176,11 @@
       if (var2 != null && !var2.abilities.mayBuild && !this.hasAdventureModePlaceTagForBlock(var1.getLevel().getTagManager(), var4)) {
          return InteractionResult.PASS;
       } else {
          Item var5 = this.getItem();
          InteractionResult var6 = var5.useOn(var1);
-         if (var2 != null && var6 == InteractionResult.SUCCESS) {
+         if (var2 != null && var6.consumesAction()) {
             var2.awardStat(Stats.ITEM_USED.get(var5));
          }
 
          return var6;
       }
@@ -287,16 +305,16 @@
          var4.awardStat(Stats.ITEM_USED.get(var5));
       }
 
    }
 
-   public boolean canDestroySpecial(BlockState var1) {
-      return this.getItem().canDestroySpecial(var1);
+   public boolean isCorrectToolForDrops(BlockState var1) {
+      return this.getItem().isCorrectToolForDrops(var1);
    }
 
-   public boolean interactEnemy(Player var1, LivingEntity var2, InteractionHand var3) {
-      return this.getItem().interactEnemy(this, var1, var2, var3);
+   public InteractionResult interactLivingEntity(Player var1, LivingEntity var2, InteractionHand var3) {
+      return this.getItem().interactLivingEntity(this, var1, var2, var3);
    }
 
    public ItemStack copy() {
       if (this.isEmpty()) {
          return EMPTY;
@@ -469,11 +487,11 @@
 
    public Component getHoverName() {
       CompoundTag var1 = this.getTagElement("display");
       if (var1 != null && var1.contains("Name", 8)) {
          try {
-            Component var2 = Component.Serializer.fromJson(var1.getString("Name"));
+            MutableComponent var2 = Component.Serializer.fromJson(var1.getString("Name"));
             if (var2 != null) {
                return var2;
             }
 
             var1.remove("Name");
@@ -516,135 +534,140 @@
       return var1 != null && var1.contains("Name", 8);
    }
 
    public List<Component> getTooltipLines(@Nullable Player var1, TooltipFlag var2) {
       ArrayList var3 = Lists.newArrayList();
-      Component var4 = (new TextComponent("")).append(this.getHoverName()).withStyle(this.getRarity().color);
+      MutableComponent var4 = (new TextComponent("")).append(this.getHoverName()).withStyle(this.getRarity().color);
       if (this.hasCustomHoverName()) {
          var4.withStyle(ChatFormatting.ITALIC);
       }
 
       var3.add(var4);
       if (!var2.isAdvanced() && !this.hasCustomHoverName() && this.getItem() == Items.FILLED_MAP) {
          var3.add((new TextComponent("#" + MapItem.getMapId(this))).withStyle(ChatFormatting.GRAY));
       }
 
-      int var5 = 0;
-      if (this.hasTag() && this.tag.contains("HideFlags", 99)) {
-         var5 = this.tag.getInt("HideFlags");
-      }
-
-      if ((var5 & 32) == 0) {
+      int var5 = this.getHideFlags();
+      if (shouldShowInTooltip(var5, ItemStack.TooltipPart.ADDITIONAL)) {
          this.getItem().appendHoverText(this, var1 == null ? null : var1.level, var3, var2);
       }
 
       int var8;
       if (this.hasTag()) {
-         if ((var5 & 1) == 0) {
+         if (shouldShowInTooltip(var5, ItemStack.TooltipPart.ENCHANTMENTS)) {
             appendEnchantmentNames(var3, this.getEnchantmentTags());
          }
 
          if (this.tag.contains("display", 10)) {
             CompoundTag var6 = this.tag.getCompound("display");
-            if (var6.contains("color", 3)) {
+            if (shouldShowInTooltip(var5, ItemStack.TooltipPart.DYE) && var6.contains("color", 99)) {
                if (var2.isAdvanced()) {
                   var3.add((new TranslatableComponent("item.color", new Object[]{String.format("#%06X", var6.getInt("color"))})).withStyle(ChatFormatting.GRAY));
                } else {
-                  var3.add((new TranslatableComponent("item.dyed", new Object[0])).withStyle(new ChatFormatting[]{ChatFormatting.GRAY, ChatFormatting.ITALIC}));
+                  var3.add((new TranslatableComponent("item.dyed")).withStyle(new ChatFormatting[]{ChatFormatting.GRAY, ChatFormatting.ITALIC}));
                }
             }
 
             if (var6.getTagType("Lore") == 9) {
                ListTag var7 = var6.getList("Lore", 8);
 
                for(var8 = 0; var8 < var7.size(); ++var8) {
                   String var9 = var7.getString(var8);
 
                   try {
-                     Component var10 = Component.Serializer.fromJson(var9);
+                     MutableComponent var10 = Component.Serializer.fromJson(var9);
                      if (var10 != null) {
-                        var3.add(ComponentUtils.mergeStyles(var10, (new Style()).setColor(ChatFormatting.DARK_PURPLE).setItalic(true)));
+                        var3.add(ComponentUtils.mergeStyles(var10, LORE_STYLE));
                      }
                   } catch (JsonParseException var19) {
                      var6.remove("Lore");
                   }
                }
             }
          }
       }
 
-      EquipmentSlot[] var20 = EquipmentSlot.values();
-      int var22 = var20.length;
+      int var22;
+      if (shouldShowInTooltip(var5, ItemStack.TooltipPart.MODIFIERS)) {
+         EquipmentSlot[] var20 = EquipmentSlot.values();
+         var22 = var20.length;
 
-      for(var8 = 0; var8 < var22; ++var8) {
-         EquipmentSlot var23 = var20[var8];
-         Multimap var24 = this.getAttributeModifiers(var23);
-         if (!var24.isEmpty() && (var5 & 2) == 0) {
-            var3.add(new TextComponent(""));
-            var3.add((new TranslatableComponent("item.modifiers." + var23.getName(), new Object[0])).withStyle(ChatFormatting.GRAY));
-            Iterator var11 = var24.entries().iterator();
+         for(var8 = 0; var8 < var22; ++var8) {
+            EquipmentSlot var23 = var20[var8];
+            Multimap var24 = this.getAttributeModifiers(var23);
+            if (!var24.isEmpty()) {
+               var3.add(TextComponent.EMPTY);
+               var3.add((new TranslatableComponent("item.modifiers." + var23.getName())).withStyle(ChatFormatting.GRAY));
+               Iterator var11 = var24.entries().iterator();
 
-            while(var11.hasNext()) {
-               Entry var12 = (Entry)var11.next();
-               AttributeModifier var13 = (AttributeModifier)var12.getValue();
-               double var14 = var13.getAmount();
-               boolean var18 = false;
-               if (var1 != null) {
-                  if (var13.getId() == Item.BASE_ATTACK_DAMAGE_UUID) {
-                     var14 += var1.getAttribute(SharedMonsterAttributes.ATTACK_DAMAGE).getBaseValue();
-                     var14 += (double)EnchantmentHelper.getDamageBonus(this, MobType.UNDEFINED);
-                     var18 = true;
-                  } else if (var13.getId() == Item.BASE_ATTACK_SPEED_UUID) {
-                     var14 += var1.getAttribute(SharedMonsterAttributes.ATTACK_SPEED).getBaseValue();
-                     var18 = true;
+               while(var11.hasNext()) {
+                  Entry var12 = (Entry)var11.next();
+                  AttributeModifier var13 = (AttributeModifier)var12.getValue();
+                  double var14 = var13.getAmount();
+                  boolean var18 = false;
+                  if (var1 != null) {
+                     if (var13.getId() == Item.BASE_ATTACK_DAMAGE_UUID) {
+                        var14 += var1.getAttributeBaseValue(Attributes.ATTACK_DAMAGE);
+                        var14 += (double)EnchantmentHelper.getDamageBonus(this, MobType.UNDEFINED);
+                        var18 = true;
+                     } else if (var13.getId() == Item.BASE_ATTACK_SPEED_UUID) {
+                        var14 += var1.getAttributeBaseValue(Attributes.ATTACK_SPEED);
+                        var18 = true;
+                     }
                   }
-               }
 
-               double var16;
-               if (var13.getOperation() != AttributeModifier.Operation.MULTIPLY_BASE && var13.getOperation() != AttributeModifier.Operation.MULTIPLY_TOTAL) {
-                  var16 = var14;
-               } else {
-                  var16 = var14 * 100.0D;
-               }
+                  double var16;
+                  if (var13.getOperation() != AttributeModifier.Operation.MULTIPLY_BASE && var13.getOperation() != AttributeModifier.Operation.MULTIPLY_TOTAL) {
+                     if (((Attribute)var12.getKey()).equals(Attributes.KNOCKBACK_RESISTANCE)) {
+                        var16 = var14 * 10.0D;
+                     } else {
+                        var16 = var14;
+                     }
+                  } else {
+                     var16 = var14 * 100.0D;
+                  }
 
-               if (var18) {
-                  var3.add((new TextComponent(" ")).append(new TranslatableComponent("attribute.modifier.equals." + var13.getOperation().toValue(), new Object[]{ATTRIBUTE_MODIFIER_FORMAT.format(var16), new TranslatableComponent("attribute.name." + (String)var12.getKey(), new Object[0])})).withStyle(ChatFormatting.DARK_GREEN));
-               } else if (var14 > 0.0D) {
-                  var3.add((new TranslatableComponent("attribute.modifier.plus." + var13.getOperation().toValue(), new Object[]{ATTRIBUTE_MODIFIER_FORMAT.format(var16), new TranslatableComponent("attribute.name." + (String)var12.getKey(), new Object[0])})).withStyle(ChatFormatting.BLUE));
-               } else if (var14 < 0.0D) {
-                  var16 *= -1.0D;
-                  var3.add((new TranslatableComponent("attribute.modifier.take." + var13.getOperation().toValue(), new Object[]{ATTRIBUTE_MODIFIER_FORMAT.format(var16), new TranslatableComponent("attribute.name." + (String)var12.getKey(), new Object[0])})).withStyle(ChatFormatting.RED));
+                  if (var18) {
+                     var3.add((new TextComponent(" ")).append(new TranslatableComponent("attribute.modifier.equals." + var13.getOperation().toValue(), new Object[]{ATTRIBUTE_MODIFIER_FORMAT.format(var16), new TranslatableComponent(((Attribute)var12.getKey()).getDescriptionId())})).withStyle(ChatFormatting.DARK_GREEN));
+                  } else if (var14 > 0.0D) {
+                     var3.add((new TranslatableComponent("attribute.modifier.plus." + var13.getOperation().toValue(), new Object[]{ATTRIBUTE_MODIFIER_FORMAT.format(var16), new TranslatableComponent(((Attribute)var12.getKey()).getDescriptionId())})).withStyle(ChatFormatting.BLUE));
+                  } else if (var14 < 0.0D) {
+                     var16 *= -1.0D;
+                     var3.add((new TranslatableComponent("attribute.modifier.take." + var13.getOperation().toValue(), new Object[]{ATTRIBUTE_MODIFIER_FORMAT.format(var16), new TranslatableComponent(((Attribute)var12.getKey()).getDescriptionId())})).withStyle(ChatFormatting.RED));
+                  }
                }
             }
          }
       }
 
-      if (this.hasTag() && this.getTag().getBoolean("Unbreakable") && (var5 & 4) == 0) {
-         var3.add((new TranslatableComponent("item.unbreakable", new Object[0])).withStyle(ChatFormatting.BLUE));
-      }
+      if (this.hasTag()) {
+         if (shouldShowInTooltip(var5, ItemStack.TooltipPart.UNBREAKABLE) && this.tag.getBoolean("Unbreakable")) {
+            var3.add((new TranslatableComponent("item.unbreakable")).withStyle(ChatFormatting.BLUE));
+         }
 
-      ListTag var21;
-      if (this.hasTag() && this.tag.contains("CanDestroy", 9) && (var5 & 8) == 0) {
-         var21 = this.tag.getList("CanDestroy", 8);
-         if (!var21.isEmpty()) {
-            var3.add(new TextComponent(""));
-            var3.add((new TranslatableComponent("item.canBreak", new Object[0])).withStyle(ChatFormatting.GRAY));
+         ListTag var21;
+         if (shouldShowInTooltip(var5, ItemStack.TooltipPart.CAN_DESTROY) && this.tag.contains("CanDestroy", 9)) {
+            var21 = this.tag.getList("CanDestroy", 8);
+            if (!var21.isEmpty()) {
+               var3.add(TextComponent.EMPTY);
+               var3.add((new TranslatableComponent("item.canBreak")).withStyle(ChatFormatting.GRAY));
 
-            for(var22 = 0; var22 < var21.size(); ++var22) {
-               var3.addAll(expandBlockState(var21.getString(var22)));
+               for(var22 = 0; var22 < var21.size(); ++var22) {
+                  var3.addAll(expandBlockState(var21.getString(var22)));
+               }
             }
          }
-      }
 
-      if (this.hasTag() && this.tag.contains("CanPlaceOn", 9) && (var5 & 16) == 0) {
-         var21 = this.tag.getList("CanPlaceOn", 8);
-         if (!var21.isEmpty()) {
-            var3.add(new TextComponent(""));
-            var3.add((new TranslatableComponent("item.canPlace", new Object[0])).withStyle(ChatFormatting.GRAY));
+         if (shouldShowInTooltip(var5, ItemStack.TooltipPart.CAN_PLACE) && this.tag.contains("CanPlaceOn", 9)) {
+            var21 = this.tag.getList("CanPlaceOn", 8);
+            if (!var21.isEmpty()) {
+               var3.add(TextComponent.EMPTY);
+               var3.add((new TranslatableComponent("item.canPlace")).withStyle(ChatFormatting.GRAY));
 
-            for(var22 = 0; var22 < var21.size(); ++var22) {
-               var3.addAll(expandBlockState(var21.getString(var22)));
+               for(var22 = 0; var22 < var21.size(); ++var22) {
+                  var3.addAll(expandBlockState(var21.getString(var22)));
+               }
             }
          }
       }
 
       if (var2.isAdvanced()) {
@@ -652,17 +675,30 @@
             var3.add(new TranslatableComponent("item.durability", new Object[]{this.getMaxDamage() - this.getDamageValue(), this.getMaxDamage()}));
          }
 
          var3.add((new TextComponent(Registry.ITEM.getKey(this.getItem()).toString())).withStyle(ChatFormatting.DARK_GRAY));
          if (this.hasTag()) {
-            var3.add((new TranslatableComponent("item.nbt_tags", new Object[]{this.getTag().getAllKeys().size()})).withStyle(ChatFormatting.DARK_GRAY));
+            var3.add((new TranslatableComponent("item.nbt_tags", new Object[]{this.tag.getAllKeys().size()})).withStyle(ChatFormatting.DARK_GRAY));
          }
       }
 
       return var3;
    }
 
+   private static boolean shouldShowInTooltip(int var0, ItemStack.TooltipPart var1) {
+      return (var0 & var1.getMask()) == 0;
+   }
+
+   private int getHideFlags() {
+      return this.hasTag() && this.tag.contains("HideFlags", 99) ? this.tag.getInt("HideFlags") : 0;
+   }
+
+   public void hideTooltipPart(ItemStack.TooltipPart var1) {
+      CompoundTag var2 = this.getOrCreateTag();
+      var2.putInt("HideFlags", var2.getInt("HideFlags") | var1.getMask());
+   }
+
    public static void appendEnchantmentNames(List<Component> var0, ListTag var1) {
       for(int var2 = 0; var2 < var1.size(); ++var2) {
          CompoundTag var3 = var1.getCompound(var2);
          Registry.ENCHANTMENT.getOptional(ResourceLocation.tryParse(var3.getString("id"))).ifPresent((var2x) -> {
             var0.add(var2x.getFullname(var3.getInt("lvl")));
@@ -678,27 +714,27 @@
          ResourceLocation var3 = var1.getTag();
          boolean var4 = var2 != null;
          boolean var5 = var3 != null;
          if (var4 || var5) {
             if (var4) {
-               return Lists.newArrayList(var2.getBlock().getName().withStyle(ChatFormatting.DARK_GRAY));
+               return Lists.newArrayList(new Component[]{var2.getBlock().getName().withStyle(ChatFormatting.DARK_GRAY)});
             }
 
             Tag var6 = BlockTags.getAllTags().getTag(var3);
             if (var6 != null) {
-               Collection var7 = var6.getValues();
+               List var7 = var6.getValues();
                if (!var7.isEmpty()) {
                   return (Collection)var7.stream().map(Block::getName).map((var0x) -> {
                      return var0x.withStyle(ChatFormatting.DARK_GRAY);
                   }).collect(Collectors.toList());
                }
             }
          }
       } catch (CommandSyntaxException var8) {
       }
 
-      return Lists.newArrayList((new TextComponent("missingno")).withStyle(ChatFormatting.DARK_GRAY));
+      return Lists.newArrayList(new Component[]{(new TextComponent("missingno")).withStyle(ChatFormatting.DARK_GRAY)});
    }
 
    public boolean hasFoil() {
       return this.getItem().isFoil(this);
    }
@@ -739,80 +775,86 @@
    public void addTagElement(String var1, net.minecraft.nbt.Tag var2) {
       this.getOrCreateTag().put(var1, var2);
    }
 
    public boolean isFramed() {
-      return this.frame != null;
+      return this.entityRepresentation instanceof ItemFrame;
    }
 
-   public void setFramed(@Nullable ItemFrame var1) {
-      this.frame = var1;
+   public void setEntityRepresentation(@Nullable Entity var1) {
+      this.entityRepresentation = var1;
    }
 
    @Nullable
    public ItemFrame getFrame() {
-      return this.emptyCacheFlag ? null : this.frame;
+      return this.entityRepresentation instanceof ItemFrame ? (ItemFrame)this.getEntityRepresentation() : null;
    }
 
+   @Nullable
+   public Entity getEntityRepresentation() {
+      return !this.emptyCacheFlag ? this.entityRepresentation : null;
+   }
+
    public int getBaseRepairCost() {
       return this.hasTag() && this.tag.contains("RepairCost", 3) ? this.tag.getInt("RepairCost") : 0;
    }
 
    public void setRepairCost(int var1) {
       this.getOrCreateTag().putInt("RepairCost", var1);
    }
 
-   public Multimap<String, AttributeModifier> getAttributeModifiers(EquipmentSlot var1) {
+   public Multimap<Attribute, AttributeModifier> getAttributeModifiers(EquipmentSlot var1) {
       Object var2;
       if (this.hasTag() && this.tag.contains("AttributeModifiers", 9)) {
          var2 = HashMultimap.create();
          ListTag var3 = this.tag.getList("AttributeModifiers", 10);
 
          for(int var4 = 0; var4 < var3.size(); ++var4) {
             CompoundTag var5 = var3.getCompound(var4);
-            AttributeModifier var6 = SharedMonsterAttributes.loadAttributeModifier(var5);
-            if (var6 != null && (!var5.contains("Slot", 8) || var5.getString("Slot").equals(var1.getName())) && var6.getId().getLeastSignificantBits() != 0L && var6.getId().getMostSignificantBits() != 0L) {
-               ((Multimap)var2).put(var5.getString("AttributeName"), var6);
+            if (!var5.contains("Slot", 8) || var5.getString("Slot").equals(var1.getName())) {
+               Optional var6 = Registry.ATTRIBUTE.getOptional(ResourceLocation.tryParse(var5.getString("AttributeName")));
+               if (var6.isPresent()) {
+                  AttributeModifier var7 = AttributeModifier.load(var5);
+                  if (var7 != null && var7.getId().getLeastSignificantBits() != 0L && var7.getId().getMostSignificantBits() != 0L) {
+                     ((Multimap)var2).put(var6.get(), var7);
+                  }
+               }
             }
          }
       } else {
          var2 = this.getItem().getDefaultAttributeModifiers(var1);
       }
 
-      ((Multimap)var2).values().forEach((var0) -> {
-         var0.setSerialize(false);
-      });
       return (Multimap)var2;
    }
 
-   public void addAttributeModifier(String var1, AttributeModifier var2, @Nullable EquipmentSlot var3) {
+   public void addAttributeModifier(Attribute var1, AttributeModifier var2, @Nullable EquipmentSlot var3) {
       this.getOrCreateTag();
       if (!this.tag.contains("AttributeModifiers", 9)) {
          this.tag.put("AttributeModifiers", new ListTag());
       }
 
       ListTag var4 = this.tag.getList("AttributeModifiers", 10);
-      CompoundTag var5 = SharedMonsterAttributes.saveAttributeModifier(var2);
-      var5.putString("AttributeName", var1);
+      CompoundTag var5 = var2.save();
+      var5.putString("AttributeName", Registry.ATTRIBUTE.getKey(var1).toString());
       if (var3 != null) {
          var5.putString("Slot", var3.getName());
       }
 
       var4.add(var5);
    }
 
    public Component getDisplayName() {
-      Component var1 = (new TextComponent("")).append(this.getHoverName());
+      MutableComponent var1 = (new TextComponent("")).append(this.getHoverName());
       if (this.hasCustomHoverName()) {
          var1.withStyle(ChatFormatting.ITALIC);
       }
 
-      Component var2 = ComponentUtils.wrapInSquareBrackets(var1);
+      MutableComponent var2 = ComponentUtils.wrapInSquareBrackets(var1);
       if (!this.emptyCacheFlag) {
-         CompoundTag var3 = this.save(new CompoundTag());
          var2.withStyle(this.getRarity().color).withStyle((var1x) -> {
-            var1x.setHoverEvent(new HoverEvent(HoverEvent.Action.SHOW_ITEM, new TextComponent(var3.toString())));
+            return var1x.withHoverEvent(new HoverEvent(HoverEvent.Action.SHOW_ITEM, new HoverEvent.ItemStackInfo(this)));
          });
       }
 
       return var2;
    }
@@ -827,11 +869,11 @@
       } else {
          return false;
       }
    }
 
-   public boolean hasAdventureModeBreakTagForBlock(TagManager var1, BlockInWorld var2) {
+   public boolean hasAdventureModeBreakTagForBlock(TagContainer var1, BlockInWorld var2) {
       if (areSameBlocks(var2, this.cachedBreakBlock)) {
          return this.cachedBreakBlockResult;
       } else {
          this.cachedBreakBlock = var2;
          if (this.hasTag() && this.tag.contains("CanDestroy", 9)) {
@@ -854,11 +896,11 @@
          this.cachedBreakBlockResult = false;
          return false;
       }
    }
 
-   public boolean hasAdventureModePlaceTagForBlock(TagManager var1, BlockInWorld var2) {
+   public boolean hasAdventureModePlaceTagForBlock(TagContainer var1, BlockInWorld var2) {
       if (areSameBlocks(var2, this.cachedPlaceBlock)) {
          return this.cachedPlaceBlockResult;
       } else {
          this.cachedPlaceBlock = var2;
          if (this.hasTag() && this.tag.contains("CanPlaceOn", 9)) {
@@ -921,6 +963,29 @@
    }
 
    public SoundEvent getEatingSound() {
       return this.getItem().getEatingSound();
    }
+
+   static {
+      LORE_STYLE = Style.EMPTY.withColor(ChatFormatting.DARK_PURPLE).withItalic(true);
+   }
+
+   public static enum TooltipPart {
+      ENCHANTMENTS,
+      MODIFIERS,
+      UNBREAKABLE,
+      CAN_DESTROY,
+      CAN_PLACE,
+      ADDITIONAL,
+      DYE;
+
+      private int mask = 1 << this.ordinal();
+
+      private TooltipPart() {
+      }
+
+      public int getMask() {
+         return this.mask;
+      }
+   }
 }
