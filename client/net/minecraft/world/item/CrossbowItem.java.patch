--- net/minecraft/world/item/CrossbowItem.java
+++ net/minecraft/world/item/CrossbowItem.java
@@ -13,11 +13,10 @@
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.ListTag;
 import net.minecraft.network.chat.Component;
 import net.minecraft.network.chat.TextComponent;
 import net.minecraft.network.chat.TranslatableComponent;
-import net.minecraft.resources.ResourceLocation;
 import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.sounds.SoundEvent;
 import net.minecraft.sounds.SoundEvents;
 import net.minecraft.sounds.SoundSource;
 import net.minecraft.stats.Stats;
@@ -33,32 +32,16 @@
 import net.minecraft.world.item.enchantment.EnchantmentHelper;
 import net.minecraft.world.item.enchantment.Enchantments;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.phys.Vec3;
 
-public class CrossbowItem extends ProjectileWeaponItem {
+public class CrossbowItem extends ProjectileWeaponItem implements Vanishable {
    private boolean startSoundPlayed = false;
    private boolean midLoadSoundPlayed = false;
 
    public CrossbowItem(Item.Properties var1) {
       super(var1);
-      this.addProperty(new ResourceLocation("pull"), (var1x, var2, var3) -> {
-         if (var3 != null && var1x.getItem() == this) {
-            return isCharged(var1x) ? 0.0F : (float)(var1x.getUseDuration() - var3.getUseItemRemainingTicks()) / (float)getChargeDuration(var1x);
-         } else {
-            return 0.0F;
-         }
-      });
-      this.addProperty(new ResourceLocation("pulling"), (var0, var1x, var2) -> {
-         return var2 != null && var2.isUsingItem() && var2.getUseItem() == var0 && !isCharged(var0) ? 1.0F : 0.0F;
-      });
-      this.addProperty(new ResourceLocation("charged"), (var0, var1x, var2) -> {
-         return var2 != null && isCharged(var0) ? 1.0F : 0.0F;
-      });
-      this.addProperty(new ResourceLocation("firework"), (var0, var1x, var2) -> {
-         return var2 != null && isCharged(var0) && containsChargedProjectile(var0, Items.FIREWORK_ROCKET) ? 1.0F : 0.0F;
-      });
    }
 
    public Predicate<ItemStack> getSupportedHeldProjectiles() {
       return ARROW_OR_FIREWORK;
    }
@@ -191,32 +174,32 @@
          var1.put("ChargedProjectiles", var2);
       }
 
    }
 
-   private static boolean containsChargedProjectile(ItemStack var0, Item var1) {
+   public static boolean containsChargedProjectile(ItemStack var0, Item var1) {
       return getChargedProjectiles(var0).stream().anyMatch((var1x) -> {
          return var1x.getItem() == var1;
       });
    }
 
    private static void shootProjectile(Level var0, LivingEntity var1, InteractionHand var2, ItemStack var3, ItemStack var4, float var5, boolean var6, float var7, float var8, float var9) {
       if (!var0.isClientSide) {
          boolean var10 = var4.getItem() == Items.FIREWORK_ROCKET;
          Object var11;
          if (var10) {
-            var11 = new FireworkRocketEntity(var0, var4, var1.getX(), var1.getEyeY() - 0.15000000596046448D, var1.getZ(), true);
+            var11 = new FireworkRocketEntity(var0, var4, var1, var1.getX(), var1.getEyeY() - 0.15000000596046448D, var1.getZ(), true);
          } else {
             var11 = getArrow(var0, var1, var3, var4);
             if (var6 || var9 != 0.0F) {
                ((AbstractArrow)var11).pickup = AbstractArrow.Pickup.CREATIVE_ONLY;
             }
          }
 
          if (var1 instanceof CrossbowAttackMob) {
             CrossbowAttackMob var12 = (CrossbowAttackMob)var1;
-            var12.shootProjectile(var12.getTarget(), var3, (Projectile)var11, var9);
+            var12.shootCrossbowProjectile(var12.getTarget(), var3, (Projectile)var11, var9);
          } else {
             Vec3 var16 = var1.getUpVector(1.0F);
             Quaternion var13 = new Quaternion(new Vector3f(var16), var9, true);
             Vec3 var14 = var1.getViewVector(1.0F);
             Vector3f var15 = new Vector3f(var14);
@@ -354,11 +337,11 @@
 
    public void appendHoverText(ItemStack var1, @Nullable Level var2, List<Component> var3, TooltipFlag var4) {
       List var5 = getChargedProjectiles(var1);
       if (isCharged(var1) && !var5.isEmpty()) {
          ItemStack var6 = (ItemStack)var5.get(0);
-         var3.add((new TranslatableComponent("item.minecraft.crossbow.projectile", new Object[0])).append(" ").append(var6.getDisplayName()));
+         var3.add((new TranslatableComponent("item.minecraft.crossbow.projectile")).append(" ").append(var6.getDisplayName()));
          if (var4.isAdvanced() && var6.getItem() == Items.FIREWORK_ROCKET) {
             ArrayList var7 = Lists.newArrayList();
             Items.FIREWORK_ROCKET.appendHoverText(var6, var2, var7, var4);
             if (!var7.isEmpty()) {
                for(int var8 = 0; var8 < var7.size(); ++var8) {
@@ -373,6 +356,10 @@
    }
 
    private static float getShootingPower(ItemStack var0) {
       return var0.getItem() == Items.CROSSBOW && containsChargedProjectile(var0, Items.FIREWORK_ROCKET) ? 1.6F : 3.15F;
    }
+
+   public int getDefaultProjectileRange() {
+      return 8;
+   }
 }
