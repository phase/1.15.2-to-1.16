--- net/minecraft/world/item/Item.java
+++ net/minecraft/world/item/Item.java
@@ -1,8 +1,8 @@
 package net.minecraft.world.item;
 
-import com.google.common.collect.HashMultimap;
+import com.google.common.collect.ImmutableMultimap;
 import com.google.common.collect.Maps;
 import com.google.common.collect.Multimap;
 import java.util.List;
 import java.util.Map;
 import java.util.Random;
@@ -13,58 +13,44 @@
 import net.minecraft.core.NonNullList;
 import net.minecraft.core.Registry;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.network.chat.Component;
 import net.minecraft.network.chat.TranslatableComponent;
-import net.minecraft.resources.ResourceLocation;
 import net.minecraft.sounds.SoundEvent;
 import net.minecraft.sounds.SoundEvents;
 import net.minecraft.tags.Tag;
 import net.minecraft.util.Mth;
 import net.minecraft.world.InteractionHand;
 import net.minecraft.world.InteractionResult;
 import net.minecraft.world.InteractionResultHolder;
+import net.minecraft.world.damagesource.DamageSource;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EquipmentSlot;
-import net.minecraft.world.entity.HumanoidArm;
 import net.minecraft.world.entity.LivingEntity;
+import net.minecraft.world.entity.ai.attributes.Attribute;
 import net.minecraft.world.entity.ai.attributes.AttributeModifier;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.food.FoodProperties;
+import net.minecraft.world.item.context.UseOnContext;
 import net.minecraft.world.level.ClipContext;
 import net.minecraft.world.level.ItemLike;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.state.BlockState;
-import net.minecraft.world.phys.HitResult;
+import net.minecraft.world.phys.BlockHitResult;
 import net.minecraft.world.phys.Vec3;
 
 public class Item implements ItemLike {
    public static final Map<Block, Item> BY_BLOCK = Maps.newHashMap();
-   private static final ItemPropertyFunction PROPERTY_DAMAGED = (var0, var1, var2) -> {
-      return var0.isDamaged() ? 1.0F : 0.0F;
-   };
-   private static final ItemPropertyFunction PROPERTY_DAMAGE = (var0, var1, var2) -> {
-      return Mth.clamp((float)var0.getDamageValue() / (float)var0.getMaxDamage(), 0.0F, 1.0F);
-   };
-   private static final ItemPropertyFunction PROPERTY_LEFTHANDED = (var0, var1, var2) -> {
-      return var2 != null && var2.getMainArm() != HumanoidArm.RIGHT ? 1.0F : 0.0F;
-   };
-   private static final ItemPropertyFunction PROPERTY_COOLDOWN = (var0, var1, var2) -> {
-      return var2 instanceof Player ? ((Player)var2).getCooldowns().getCooldownPercent(var0.getItem(), 0.0F) : 0.0F;
-   };
-   private static final ItemPropertyFunction PROPERTY_CUSTOM_MODEL_DATA = (var0, var1, var2) -> {
-      return var0.hasTag() ? (float)var0.getTag().getInt("CustomModelData") : 0.0F;
-   };
    protected static final UUID BASE_ATTACK_DAMAGE_UUID = UUID.fromString("CB3F55D3-645C-4F38-A497-9C13A33DB5CF");
    protected static final UUID BASE_ATTACK_SPEED_UUID = UUID.fromString("FA233E1C-4180-4865-B01B-BCCE9785ACA3");
    protected static final Random random = new Random();
-   private final Map<ResourceLocation, ItemPropertyFunction> properties = Maps.newHashMap();
    protected final CreativeModeTab category;
    private final Rarity rarity;
    private final int maxStackSize;
    private final int maxDamage;
+   private final boolean isFireResistant;
    private final Item craftingRemainingItem;
    @Nullable
    private String descriptionId;
    @Nullable
    private final FoodProperties foodProperties;
@@ -81,38 +67,22 @@
    public static Item byBlock(Block var0) {
       return (Item)BY_BLOCK.getOrDefault(var0, Items.AIR);
    }
 
    public Item(Item.Properties var1) {
-      this.addProperty(new ResourceLocation("lefthanded"), PROPERTY_LEFTHANDED);
-      this.addProperty(new ResourceLocation("cooldown"), PROPERTY_COOLDOWN);
-      this.addProperty(new ResourceLocation("custom_model_data"), PROPERTY_CUSTOM_MODEL_DATA);
       this.category = var1.category;
       this.rarity = var1.rarity;
       this.craftingRemainingItem = var1.craftingRemainingItem;
       this.maxDamage = var1.maxDamage;
       this.maxStackSize = var1.maxStackSize;
       this.foodProperties = var1.foodProperties;
-      if (this.maxDamage > 0) {
-         this.addProperty(new ResourceLocation("damaged"), PROPERTY_DAMAGED);
-         this.addProperty(new ResourceLocation("damage"), PROPERTY_DAMAGE);
-      }
-
+      this.isFireResistant = var1.isFireResistant;
    }
 
    public void onUseTick(Level var1, LivingEntity var2, ItemStack var3, int var4) {
    }
 
-   @Nullable
-   public ItemPropertyFunction getProperty(ResourceLocation var1) {
-      return (ItemPropertyFunction)this.properties.get(var1);
-   }
-
-   public boolean hasProperties() {
-      return !this.properties.isEmpty();
-   }
-
    public boolean verifyTagAfterLoad(CompoundTag var1) {
       return false;
    }
 
    public boolean canAttackBlock(BlockState var1, Level var2, BlockPos var3, Player var4) {
@@ -121,14 +91,10 @@
 
    public Item asItem() {
       return this;
    }
 
-   public final void addProperty(ResourceLocation var1, ItemPropertyFunction var2) {
-      this.properties.put(var1, var2);
-   }
-
    public InteractionResult useOn(UseOnContext var1) {
       return InteractionResult.PASS;
    }
 
    public float getDestroySpeed(ItemStack var1, BlockState var2) {
@@ -171,20 +137,20 @@
 
    public boolean mineBlock(ItemStack var1, Level var2, BlockState var3, BlockPos var4, LivingEntity var5) {
       return false;
    }
 
-   public boolean canDestroySpecial(BlockState var1) {
+   public boolean isCorrectToolForDrops(BlockState var1) {
       return false;
    }
 
-   public boolean interactEnemy(ItemStack var1, Player var2, LivingEntity var3, InteractionHand var4) {
-      return false;
+   public InteractionResult interactLivingEntity(ItemStack var1, Player var2, LivingEntity var3, InteractionHand var4) {
+      return InteractionResult.PASS;
    }
 
    public Component getDescription() {
-      return new TranslatableComponent(this.getDescriptionId(), new Object[0]);
+      return new TranslatableComponent(this.getDescriptionId());
    }
 
    public String toString() {
       return Registry.ITEM.getKey(this).getPath();
    }
@@ -245,11 +211,11 @@
 
    public void appendHoverText(ItemStack var1, @Nullable Level var2, List<Component> var3, TooltipFlag var4) {
    }
 
    public Component getName(ItemStack var1) {
-      return new TranslatableComponent(this.getDescriptionId(var1), new Object[0]);
+      return new TranslatableComponent(this.getDescriptionId(var1));
    }
 
    public boolean isFoil(ItemStack var1) {
       return var1.isEnchanted();
    }
@@ -273,11 +239,11 @@
 
    public boolean isEnchantable(ItemStack var1) {
       return this.getMaxStackSize() == 1 && this.canBeDepleted();
    }
 
-   protected static HitResult getPlayerPOVHitResult(Level var0, Player var1, ClipContext.Fluid var2) {
+   protected static BlockHitResult getPlayerPOVHitResult(Level var0, Player var1, ClipContext.Fluid var2) {
       float var3 = var1.xRot;
       float var4 = var1.yRot;
       Vec3 var5 = var1.getEyePosition(1.0F);
       float var6 = Mth.cos(-var4 * 0.017453292F - 3.1415927F);
       float var7 = Mth.sin(-var4 * 0.017453292F - 3.1415927F);
@@ -313,12 +279,12 @@
 
    public boolean isValidRepairItem(ItemStack var1, ItemStack var2) {
       return false;
    }
 
-   public Multimap<String, AttributeModifier> getDefaultAttributeModifiers(EquipmentSlot var1) {
-      return HashMultimap.create();
+   public Multimap<Attribute, AttributeModifier> getDefaultAttributeModifiers(EquipmentSlot var1) {
+      return ImmutableMultimap.of();
    }
 
    public boolean useOnRelease(ItemStack var1) {
       return var1.getItem() == Items.CROSSBOW;
    }
@@ -346,17 +312,26 @@
 
    public SoundEvent getEatingSound() {
       return SoundEvents.GENERIC_EAT;
    }
 
+   public boolean isFireResistant() {
+      return this.isFireResistant;
+   }
+
+   public boolean canBeHurtBy(DamageSource var1) {
+      return !this.isFireResistant || !var1.isFire();
+   }
+
    public static class Properties {
       private int maxStackSize = 64;
       private int maxDamage;
       private Item craftingRemainingItem;
       private CreativeModeTab category;
       private Rarity rarity;
       private FoodProperties foodProperties;
+      private boolean isFireResistant;
 
       public Properties() {
          this.rarity = Rarity.COMMON;
       }
 
@@ -396,7 +371,12 @@
 
       public Item.Properties rarity(Rarity var1) {
          this.rarity = var1;
          return this;
       }
+
+      public Item.Properties fireResistant() {
+         this.isFireResistant = true;
+         return this;
+      }
    }
 }
