--- net/minecraft/world/item/SpawnEggItem.java
+++ net/minecraft/world/item/SpawnEggItem.java
@@ -2,32 +2,38 @@
 
 import com.google.common.collect.Iterables;
 import com.google.common.collect.Maps;
 import java.util.Map;
 import java.util.Objects;
+import java.util.Optional;
 import javax.annotation.Nullable;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.nbt.CompoundTag;
+import net.minecraft.server.level.ServerLevel;
 import net.minecraft.stats.Stats;
 import net.minecraft.world.InteractionHand;
 import net.minecraft.world.InteractionResult;
 import net.minecraft.world.InteractionResultHolder;
+import net.minecraft.world.entity.AgableMob;
+import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EntityType;
+import net.minecraft.world.entity.Mob;
 import net.minecraft.world.entity.MobSpawnType;
 import net.minecraft.world.entity.player.Player;
+import net.minecraft.world.item.context.UseOnContext;
 import net.minecraft.world.level.BaseSpawner;
 import net.minecraft.world.level.ClipContext;
 import net.minecraft.world.level.Level;
-import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.LiquidBlock;
 import net.minecraft.world.level.block.entity.BlockEntity;
 import net.minecraft.world.level.block.entity.SpawnerBlockEntity;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.phys.BlockHitResult;
 import net.minecraft.world.phys.HitResult;
+import net.minecraft.world.phys.Vec3;
 
 public class SpawnEggItem extends Item {
    private static final Map<EntityType<?>, SpawnEggItem> BY_ID = Maps.newIdentityHashMap();
    private final int color1;
    private final int color2;
@@ -41,70 +47,69 @@
       BY_ID.put(var1, this);
    }
 
    public InteractionResult useOn(UseOnContext var1) {
       Level var2 = var1.getLevel();
-      if (var2.isClientSide) {
+      if (!(var2 instanceof ServerLevel)) {
          return InteractionResult.SUCCESS;
       } else {
          ItemStack var3 = var1.getItemInHand();
          BlockPos var4 = var1.getClickedPos();
          Direction var5 = var1.getClickedFace();
          BlockState var6 = var2.getBlockState(var4);
-         Block var7 = var6.getBlock();
-         if (var7 == Blocks.SPAWNER) {
-            BlockEntity var8 = var2.getBlockEntity(var4);
-            if (var8 instanceof SpawnerBlockEntity) {
-               BaseSpawner var12 = ((SpawnerBlockEntity)var8).getSpawner();
-               EntityType var10 = this.getType(var3.getTag());
-               var12.setEntityId(var10);
-               var8.setChanged();
+         if (var6.is(Blocks.SPAWNER)) {
+            BlockEntity var7 = var2.getBlockEntity(var4);
+            if (var7 instanceof SpawnerBlockEntity) {
+               BaseSpawner var11 = ((SpawnerBlockEntity)var7).getSpawner();
+               EntityType var9 = this.getType(var3.getTag());
+               var11.setEntityId(var9);
+               var7.setChanged();
                var2.sendBlockUpdated(var4, var6, var6, 3);
                var3.shrink(1);
-               return InteractionResult.SUCCESS;
+               return InteractionResult.CONSUME;
             }
          }
 
-         BlockPos var11;
+         BlockPos var10;
          if (var6.getCollisionShape(var2, var4).isEmpty()) {
-            var11 = var4;
+            var10 = var4;
          } else {
-            var11 = var4.relative(var5);
+            var10 = var4.relative(var5);
          }
 
-         EntityType var9 = this.getType(var3.getTag());
-         if (var9.spawn(var2, var3, var1.getPlayer(), var11, MobSpawnType.SPAWN_EGG, true, !Objects.equals(var4, var11) && var5 == Direction.UP) != null) {
+         EntityType var8 = this.getType(var3.getTag());
+         if (var8.spawn((ServerLevel)var2, var3, var1.getPlayer(), var10, MobSpawnType.SPAWN_EGG, true, !Objects.equals(var4, var10) && var5 == Direction.UP) != null) {
             var3.shrink(1);
          }
 
-         return InteractionResult.SUCCESS;
+         return InteractionResult.CONSUME;
       }
    }
 
    public InteractionResultHolder<ItemStack> use(Level var1, Player var2, InteractionHand var3) {
       ItemStack var4 = var2.getItemInHand(var3);
-      HitResult var5 = getPlayerPOVHitResult(var1, var2, ClipContext.Fluid.SOURCE_ONLY);
+      BlockHitResult var5 = getPlayerPOVHitResult(var1, var2, ClipContext.Fluid.SOURCE_ONLY);
       if (var5.getType() != HitResult.Type.BLOCK) {
          return InteractionResultHolder.pass(var4);
-      } else if (var1.isClientSide) {
+      } else if (!(var1 instanceof ServerLevel)) {
          return InteractionResultHolder.success(var4);
       } else {
          BlockHitResult var6 = (BlockHitResult)var5;
          BlockPos var7 = var6.getBlockPos();
          if (!(var1.getBlockState(var7).getBlock() instanceof LiquidBlock)) {
             return InteractionResultHolder.pass(var4);
          } else if (var1.mayInteract(var2, var7) && var2.mayUseItemAt(var7, var6.getDirection(), var4)) {
             EntityType var8 = this.getType(var4.getTag());
-            if (var8.spawn(var1, var4, var2, var7, MobSpawnType.SPAWN_EGG, false, false) == null) {
+            if (var8.spawn((ServerLevel)var1, var4, var2, var7, MobSpawnType.SPAWN_EGG, false, false) == null) {
                return InteractionResultHolder.pass(var4);
             } else {
                if (!var2.abilities.instabuild) {
                   var4.shrink(1);
                }
 
                var2.awardStat(Stats.ITEM_USED.get(this));
-               return InteractionResultHolder.success(var4);
+               return InteractionResultHolder.consume(var4);
             }
          } else {
             return InteractionResultHolder.fail(var4);
          }
       }
@@ -135,6 +140,40 @@
          }
       }
 
       return this.defaultType;
    }
+
+   public Optional<Mob> spawnOffspringFromSpawnEgg(Player var1, Mob var2, EntityType<? extends Mob> var3, ServerLevel var4, Vec3 var5, ItemStack var6) {
+      if (!this.spawnsEntity(var6.getTag(), var3)) {
+         return Optional.empty();
+      } else {
+         Object var7;
+         if (var2 instanceof AgableMob) {
+            var7 = ((AgableMob)var2).getBreedOffspring(var4, (AgableMob)var2);
+         } else {
+            var7 = (Mob)var3.create(var4);
+         }
+
+         if (var7 == null) {
+            return Optional.empty();
+         } else {
+            ((Mob)var7).setBaby(true);
+            if (!((Mob)var7).isBaby()) {
+               return Optional.empty();
+            } else {
+               ((Mob)var7).moveTo(var5.x(), var5.y(), var5.z(), 0.0F, 0.0F);
+               var4.addFreshEntity((Entity)var7);
+               if (var6.hasCustomHoverName()) {
+                  ((Mob)var7).setCustomName(var6.getHoverName());
+               }
+
+               if (!var1.abilities.instabuild) {
+                  var6.shrink(1);
+               }
+
+               return Optional.of(var7);
+            }
+         }
+      }
+   }
 }
