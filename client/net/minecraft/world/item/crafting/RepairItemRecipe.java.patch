--- net/minecraft/world/item/crafting/RepairItemRecipe.java
+++ net/minecraft/world/item/crafting/RepairItemRecipe.java
@@ -1,13 +1,19 @@
 package net.minecraft.world.item.crafting;
 
 import com.google.common.collect.Lists;
+import com.google.common.collect.Maps;
 import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.Map;
+import net.minecraft.core.Registry;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.world.inventory.CraftingContainer;
 import net.minecraft.world.item.Item;
 import net.minecraft.world.item.ItemStack;
+import net.minecraft.world.item.enchantment.Enchantment;
+import net.minecraft.world.item.enchantment.EnchantmentHelper;
 import net.minecraft.world.level.Level;
 
 public class RepairItemRecipe extends CustomRecipe {
    public RepairItemRecipe(ResourceLocation var1) {
       super(var1);
@@ -48,24 +54,38 @@
             }
          }
       }
 
       if (var2.size() == 2) {
-         ItemStack var11 = (ItemStack)var2.get(0);
+         ItemStack var14 = (ItemStack)var2.get(0);
          var4 = (ItemStack)var2.get(1);
-         if (var11.getItem() == var4.getItem() && var11.getCount() == 1 && var4.getCount() == 1 && var11.getItem().canBeDepleted()) {
-            Item var12 = var11.getItem();
-            int var6 = var12.getMaxDamage() - var11.getDamageValue();
-            int var7 = var12.getMaxDamage() - var4.getDamageValue();
-            int var8 = var6 + var7 + var12.getMaxDamage() * 5 / 100;
-            int var9 = var12.getMaxDamage() - var8;
+         if (var14.getItem() == var4.getItem() && var14.getCount() == 1 && var4.getCount() == 1 && var14.getItem().canBeDepleted()) {
+            Item var15 = var14.getItem();
+            int var6 = var15.getMaxDamage() - var14.getDamageValue();
+            int var7 = var15.getMaxDamage() - var4.getDamageValue();
+            int var8 = var6 + var7 + var15.getMaxDamage() * 5 / 100;
+            int var9 = var15.getMaxDamage() - var8;
             if (var9 < 0) {
                var9 = 0;
             }
 
-            ItemStack var10 = new ItemStack(var11.getItem());
+            ItemStack var10 = new ItemStack(var14.getItem());
             var10.setDamageValue(var9);
+            HashMap var11 = Maps.newHashMap();
+            Map var12 = EnchantmentHelper.getEnchantments(var14);
+            Map var13 = EnchantmentHelper.getEnchantments(var4);
+            Registry.ENCHANTMENT.stream().filter(Enchantment::isCurse).forEach((var3x) -> {
+               int var4 = Math.max((Integer)var12.getOrDefault(var3x, 0), (Integer)var13.getOrDefault(var3x, 0));
+               if (var4 > 0) {
+                  var11.put(var3x, var4);
+               }
+
+            });
+            if (!var11.isEmpty()) {
+               EnchantmentHelper.setEnchantments(var11, var10);
+            }
+
             return var10;
          }
       }
 
       return ItemStack.EMPTY;
