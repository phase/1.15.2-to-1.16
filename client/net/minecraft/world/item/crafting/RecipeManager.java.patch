--- net/minecraft/world/item/crafting/RecipeManager.java
+++ net/minecraft/world/item/crafting/RecipeManager.java
@@ -3,10 +3,11 @@
 import com.google.common.collect.ImmutableMap;
 import com.google.common.collect.Maps;
 import com.google.common.collect.ImmutableMap.Builder;
 import com.google.gson.Gson;
 import com.google.gson.GsonBuilder;
+import com.google.gson.JsonElement;
 import com.google.gson.JsonObject;
 import com.google.gson.JsonParseException;
 import com.google.gson.JsonSyntaxException;
 import java.util.Collection;
 import java.util.Collections;
@@ -42,21 +43,21 @@
 
    public RecipeManager() {
       super(GSON, "recipes");
    }
 
-   protected void apply(Map<ResourceLocation, JsonObject> var1, ResourceManager var2, ProfilerFiller var3) {
+   protected void apply(Map<ResourceLocation, JsonElement> var1, ResourceManager var2, ProfilerFiller var3) {
       this.hasErrors = false;
       HashMap var4 = Maps.newHashMap();
       Iterator var5 = var1.entrySet().iterator();
 
       while(var5.hasNext()) {
          Entry var6 = (Entry)var5.next();
          ResourceLocation var7 = (ResourceLocation)var6.getKey();
 
          try {
-            Recipe var8 = fromJson(var7, (JsonObject)var6.getValue());
+            Recipe var8 = fromJson(var7, GsonHelper.convertToJsonObject((JsonElement)var6.getValue(), "top element"));
             ((Builder)var4.computeIfAbsent(var8.getType(), (var0) -> {
                return ImmutableMap.builder();
             })).put(var7, var8);
          } catch (IllegalArgumentException | JsonParseException var9) {
             LOGGER.error("Parsing error loading recipe {}", var7, var9);
@@ -73,10 +74,16 @@
       return this.byType(var1).values().stream().flatMap((var3x) -> {
          return Util.toStream(var1.tryMatch(var3x, var3, var2));
       }).findFirst();
    }
 
+   public <C extends Container, T extends Recipe<C>> List<T> getAllRecipesFor(RecipeType<T> var1) {
+      return (List)this.byType(var1).values().stream().map((var0) -> {
+         return var0;
+      }).collect(Collectors.toList());
+   }
+
    public <C extends Container, T extends Recipe<C>> List<T> getRecipesFor(RecipeType<T> var1, C var2, Level var3) {
       return (List)this.byType(var1).values().stream().flatMap((var3x) -> {
          return Util.toStream(var1.tryMatch(var3x, var3, var2));
       }).sorted(Comparator.comparing((var0) -> {
          return var0.getResultItem().getDescriptionId();
