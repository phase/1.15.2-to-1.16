--- net/minecraft/world/item/BoneMealItem.java
+++ net/minecraft/world/item/BoneMealItem.java
@@ -4,10 +4,11 @@
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.core.particles.ParticleTypes;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.tags.BlockTags;
+import net.minecraft.tags.Tag;
 import net.minecraft.world.InteractionResult;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.LevelAccessor;
 import net.minecraft.world.level.biome.Biome;
 import net.minecraft.world.level.biome.Biomes;
@@ -29,20 +30,20 @@
       if (growCrop(var1.getItemInHand(), var2, var3)) {
          if (!var2.isClientSide) {
             var2.levelEvent(2005, var3, 0);
          }
 
-         return InteractionResult.SUCCESS;
+         return InteractionResult.sidedSuccess(var2.isClientSide);
       } else {
          BlockState var5 = var2.getBlockState(var3);
          boolean var6 = var5.isFaceSturdy(var2, var3, var1.getClickedFace());
          if (var6 && growWaterPlant(var1.getItemInHand(), var2, var4, var1.getClickedFace())) {
             if (!var2.isClientSide) {
                var2.levelEvent(2005, var4, 0);
             }
 
-            return InteractionResult.SUCCESS;
+            return InteractionResult.sidedSuccess(var2.isClientSide);
          } else {
             return InteractionResult.PASS;
          }
       }
    }
@@ -66,11 +67,11 @@
 
       return false;
    }
 
    public static boolean growWaterPlant(ItemStack var0, Level var1, BlockPos var2, @Nullable Direction var3) {
-      if (var1.getBlockState(var2).getBlock() == Blocks.WATER && var1.getFluidState(var2).getAmount() == 8) {
+      if (var1.getBlockState(var2).is(Blocks.WATER) && var1.getFluidState(var2).getAmount() == 8) {
          if (!(var1 instanceof ServerLevel)) {
             return true;
          } else {
             label80:
             for(int var4 = 0; var4 < 128; ++var4) {
@@ -93,21 +94,21 @@
                   } else if (random.nextInt(4) == 0) {
                      var7 = ((Block)BlockTags.UNDERWATER_BONEMEALS.getRandomElement(random)).defaultBlockState();
                   }
                }
 
-               if (var7.getBlock().is(BlockTags.WALL_CORALS)) {
+               if (var7.getBlock().is((Tag)BlockTags.WALL_CORALS)) {
                   for(var8 = 0; !var7.canSurvive(var1, var5) && var8 < 4; ++var8) {
                      var7 = (BlockState)var7.setValue(BaseCoralWallFanBlock.FACING, Direction.Plane.HORIZONTAL.getRandomDirection(random));
                   }
                }
 
                if (var7.canSurvive(var1, var5)) {
                   BlockState var9 = var1.getBlockState(var5);
-                  if (var9.getBlock() == Blocks.WATER && var1.getFluidState(var5).getAmount() == 8) {
+                  if (var9.is(Blocks.WATER) && var1.getFluidState(var5).getAmount() == 8) {
                      var1.setBlock(var5, var7, 3);
-                  } else if (var9.getBlock() == Blocks.SEAGRASS && random.nextInt(10) == 0) {
+                  } else if (var9.is(Blocks.SEAGRASS) && random.nextInt(10) == 0) {
                      ((BonemealableBlock)Blocks.SEAGRASS).performBonemeal((ServerLevel)var1, random, var5, var9);
                   }
                }
             }
 
@@ -124,15 +125,38 @@
          var2 = 15;
       }
 
       BlockState var3 = var0.getBlockState(var1);
       if (!var3.isAir()) {
-         for(int var4 = 0; var4 < var2; ++var4) {
-            double var5 = random.nextGaussian() * 0.02D;
-            double var7 = random.nextGaussian() * 0.02D;
+         double var4 = 0.5D;
+         double var6;
+         if (!var3.getFluidState().isEmpty()) {
+            var2 *= 3;
+            var6 = 1.0D;
+            var4 = 3.0D;
+         } else if (var3.isSolidRender(var0, var1)) {
+            var1 = var1.above();
+            var2 *= 3;
+            var4 = 3.0D;
+            var6 = 1.0D;
+         } else {
+            var6 = var3.getShape(var0, var1).max(Direction.Axis.Y);
+         }
+
+         var0.addParticle(ParticleTypes.HAPPY_VILLAGER, (double)var1.getX() + 0.5D, (double)var1.getY() + 0.5D, (double)var1.getZ() + 0.5D, 0.0D, 0.0D, 0.0D);
+
+         for(int var8 = 0; var8 < var2; ++var8) {
             double var9 = random.nextGaussian() * 0.02D;
-            var0.addParticle(ParticleTypes.HAPPY_VILLAGER, (double)((float)var1.getX() + random.nextFloat()), (double)var1.getY() + (double)random.nextFloat() * var3.getShape(var0, var1).max(Direction.Axis.Y), (double)((float)var1.getZ() + random.nextFloat()), var5, var7, var9);
+            double var11 = random.nextGaussian() * 0.02D;
+            double var13 = random.nextGaussian() * 0.02D;
+            double var15 = 0.5D - var4;
+            double var17 = (double)var1.getX() + var15 + random.nextDouble() * var4 * 2.0D;
+            double var19 = (double)var1.getY() + random.nextDouble() * var6;
+            double var21 = (double)var1.getZ() + var15 + random.nextDouble() * var4 * 2.0D;
+            if (!var0.getBlockState((new BlockPos(var17, var19, var21)).below()).isAir()) {
+               var0.addParticle(ParticleTypes.HAPPY_VILLAGER, var17, var19, var21, var9, var11, var13);
+            }
          }
 
       }
    }
 }
