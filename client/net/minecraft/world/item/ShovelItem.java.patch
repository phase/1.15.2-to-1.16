--- net/minecraft/world/item/ShovelItem.java
+++ net/minecraft/world/item/ShovelItem.java
@@ -23,13 +23,12 @@
 
    public ShovelItem(Tier var1, float var2, float var3, Item.Properties var4) {
       super(var2, var3, var1, DIGGABLES, var4);
    }
 
-   public boolean canDestroySpecial(BlockState var1) {
-      Block var2 = var1.getBlock();
-      return var2 == Blocks.SNOW || var2 == Blocks.SNOW_BLOCK;
+   public boolean isCorrectToolForDrops(BlockState var1) {
+      return var1.is(Blocks.SNOW) || var1.is(Blocks.SNOW_BLOCK);
    }
 
    public InteractionResult useOn(UseOnContext var1) {
       Level var2 = var1.getLevel();
       BlockPos var3 = var1.getClickedPos();
@@ -42,11 +41,15 @@
          BlockState var7 = null;
          if (var6 != null && var2.getBlockState(var3.above()).isAir()) {
             var2.playSound(var5, var3, SoundEvents.SHOVEL_FLATTEN, SoundSource.BLOCKS, 1.0F, 1.0F);
             var7 = var6;
          } else if (var4.getBlock() instanceof CampfireBlock && (Boolean)var4.getValue(CampfireBlock.LIT)) {
-            var2.levelEvent((Player)null, 1009, var3, 0);
+            if (!var2.isClientSide()) {
+               var2.levelEvent((Player)null, 1009, var3, 0);
+            }
+
+            CampfireBlock.dowse(var2, var3, var4);
             var7 = (BlockState)var4.setValue(CampfireBlock.LIT, false);
          }
 
          if (var7 != null) {
             if (!var2.isClientSide) {
@@ -56,17 +59,17 @@
                      var1x.broadcastBreakEvent(var1.getHand());
                   });
                }
             }
 
-            return InteractionResult.SUCCESS;
+            return InteractionResult.sidedSuccess(var2.isClientSide);
          } else {
             return InteractionResult.PASS;
          }
       }
    }
 
    static {
-      DIGGABLES = Sets.newHashSet(new Block[]{Blocks.CLAY, Blocks.DIRT, Blocks.COARSE_DIRT, Blocks.PODZOL, Blocks.FARMLAND, Blocks.GRASS_BLOCK, Blocks.GRAVEL, Blocks.MYCELIUM, Blocks.SAND, Blocks.RED_SAND, Blocks.SNOW_BLOCK, Blocks.SNOW, Blocks.SOUL_SAND, Blocks.GRASS_PATH, Blocks.WHITE_CONCRETE_POWDER, Blocks.ORANGE_CONCRETE_POWDER, Blocks.MAGENTA_CONCRETE_POWDER, Blocks.LIGHT_BLUE_CONCRETE_POWDER, Blocks.YELLOW_CONCRETE_POWDER, Blocks.LIME_CONCRETE_POWDER, Blocks.PINK_CONCRETE_POWDER, Blocks.GRAY_CONCRETE_POWDER, Blocks.LIGHT_GRAY_CONCRETE_POWDER, Blocks.CYAN_CONCRETE_POWDER, Blocks.PURPLE_CONCRETE_POWDER, Blocks.BLUE_CONCRETE_POWDER, Blocks.BROWN_CONCRETE_POWDER, Blocks.GREEN_CONCRETE_POWDER, Blocks.RED_CONCRETE_POWDER, Blocks.BLACK_CONCRETE_POWDER});
+      DIGGABLES = Sets.newHashSet(new Block[]{Blocks.CLAY, Blocks.DIRT, Blocks.COARSE_DIRT, Blocks.PODZOL, Blocks.FARMLAND, Blocks.GRASS_BLOCK, Blocks.GRAVEL, Blocks.MYCELIUM, Blocks.SAND, Blocks.RED_SAND, Blocks.SNOW_BLOCK, Blocks.SNOW, Blocks.SOUL_SAND, Blocks.GRASS_PATH, Blocks.WHITE_CONCRETE_POWDER, Blocks.ORANGE_CONCRETE_POWDER, Blocks.MAGENTA_CONCRETE_POWDER, Blocks.LIGHT_BLUE_CONCRETE_POWDER, Blocks.YELLOW_CONCRETE_POWDER, Blocks.LIME_CONCRETE_POWDER, Blocks.PINK_CONCRETE_POWDER, Blocks.GRAY_CONCRETE_POWDER, Blocks.LIGHT_GRAY_CONCRETE_POWDER, Blocks.CYAN_CONCRETE_POWDER, Blocks.PURPLE_CONCRETE_POWDER, Blocks.BLUE_CONCRETE_POWDER, Blocks.BROWN_CONCRETE_POWDER, Blocks.GREEN_CONCRETE_POWDER, Blocks.RED_CONCRETE_POWDER, Blocks.BLACK_CONCRETE_POWDER, Blocks.SOUL_SOIL});
       FLATTENABLES = Maps.newHashMap(ImmutableMap.of(Blocks.GRASS_BLOCK, Blocks.GRASS_PATH.defaultBlockState()));
    }
 }
