--- net/minecraft/world/level/biome/Biome.java
+++ net/minecraft/world/level/biome/Biome.java
@@ -1,85 +1,154 @@
 package net.minecraft.world.level.biome;
 
+import com.google.common.collect.ImmutableList;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.google.common.collect.Sets;
+import com.mojang.datafixers.DataFixUtils;
+import com.mojang.serialization.Codec;
+import com.mojang.serialization.MapCodec;
+import com.mojang.serialization.codecs.RecordCodecBuilder;
 import it.unimi.dsi.fastutil.longs.Long2FloatLinkedOpenHashMap;
 import java.util.Arrays;
+import java.util.Collection;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
+import java.util.Optional;
 import java.util.Random;
 import java.util.Set;
+import java.util.function.Supplier;
 import java.util.stream.Collectors;
 import javax.annotation.Nullable;
 import net.minecraft.CrashReport;
 import net.minecraft.ReportedException;
 import net.minecraft.Util;
 import net.minecraft.core.BlockPos;
-import net.minecraft.core.IdMapper;
 import net.minecraft.core.Registry;
-import net.minecraft.network.chat.Component;
-import net.minecraft.network.chat.TranslatableComponent;
+import net.minecraft.core.SectionPos;
+import net.minecraft.data.BuiltinRegistries;
+import net.minecraft.resources.RegistryFileCodec;
+import net.minecraft.resources.ResourceLocation;
+import net.minecraft.server.level.WorldGenRegion;
+import net.minecraft.sounds.Music;
+import net.minecraft.sounds.SoundEvent;
 import net.minecraft.util.Mth;
+import net.minecraft.util.StringRepresentable;
 import net.minecraft.util.WeighedRandom;
 import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.entity.MobCategory;
+import net.minecraft.world.level.ChunkPos;
 import net.minecraft.world.level.FoliageColor;
 import net.minecraft.world.level.GrassColor;
-import net.minecraft.world.level.LevelAccessor;
 import net.minecraft.world.level.LevelReader;
 import net.minecraft.world.level.LightLayer;
+import net.minecraft.world.level.StructureFeatureManager;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.LiquidBlock;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.chunk.ChunkAccess;
 import net.minecraft.world.level.chunk.ChunkGenerator;
-import net.minecraft.world.level.levelgen.ChunkGeneratorSettings;
 import net.minecraft.world.level.levelgen.GenerationStep;
 import net.minecraft.world.level.levelgen.WorldgenRandom;
 import net.minecraft.world.level.levelgen.carver.CarverConfiguration;
 import net.minecraft.world.level.levelgen.carver.ConfiguredWorldCarver;
-import net.minecraft.world.level.levelgen.carver.WorldCarver;
 import net.minecraft.world.level.levelgen.feature.ConfiguredFeature;
+import net.minecraft.world.level.levelgen.feature.ConfiguredStructureFeature;
 import net.minecraft.world.level.levelgen.feature.Feature;
 import net.minecraft.world.level.levelgen.feature.StructureFeature;
-import net.minecraft.world.level.levelgen.feature.configurations.FeatureConfiguration;
+import net.minecraft.world.level.levelgen.structure.BoundingBox;
 import net.minecraft.world.level.levelgen.surfacebuilders.ConfiguredSurfaceBuilder;
-import net.minecraft.world.level.levelgen.surfacebuilders.SurfaceBuilder;
 import net.minecraft.world.level.levelgen.surfacebuilders.SurfaceBuilderConfiguration;
 import net.minecraft.world.level.levelgen.synth.PerlinSimplexNoise;
 import net.minecraft.world.level.material.FluidState;
 import net.minecraft.world.level.material.Fluids;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
-public abstract class Biome {
+public class Biome {
    public static final Logger LOGGER = LogManager.getLogger();
-   public static final Set<Biome> EXPLORABLE_BIOMES = Sets.newHashSet();
-   public static final IdMapper<Biome> MUTATED_BIOMES = new IdMapper();
-   protected static final PerlinSimplexNoise TEMPERATURE_NOISE = new PerlinSimplexNoise(new WorldgenRandom(1234L), 0, 0);
-   public static final PerlinSimplexNoise BIOME_INFO_NOISE = new PerlinSimplexNoise(new WorldgenRandom(2345L), 0, 0);
-   @Nullable
-   protected String descriptionId;
-   protected final float depth;
-   protected final float scale;
-   protected final float temperature;
-   protected final float downfall;
-   protected final int waterColor;
-   protected final int waterFogColor;
+   public static final MapCodec<Biome> DIRECT_CODEC = RecordCodecBuilder.mapCodec((var0) -> {
+      RecordCodecBuilder var10001 = Biome.Precipitation.CODEC.fieldOf("precipitation").forGetter((var0x) -> {
+         return var0x.precipitation;
+      });
+      RecordCodecBuilder var10002 = Biome.BiomeCategory.CODEC.fieldOf("category").forGetter((var0x) -> {
+         return var0x.biomeCategory;
+      });
+      RecordCodecBuilder var10003 = Codec.FLOAT.fieldOf("depth").forGetter((var0x) -> {
+         return var0x.depth;
+      });
+      RecordCodecBuilder var10004 = Codec.FLOAT.fieldOf("scale").forGetter((var0x) -> {
+         return var0x.scale;
+      });
+      RecordCodecBuilder var10005 = Codec.FLOAT.fieldOf("temperature").forGetter((var0x) -> {
+         return var0x.temperature;
+      });
+      RecordCodecBuilder var10006 = Codec.FLOAT.fieldOf("downfall").forGetter((var0x) -> {
+         return var0x.downfall;
+      });
+      RecordCodecBuilder var10007 = BiomeSpecialEffects.CODEC.fieldOf("effects").forGetter((var0x) -> {
+         return var0x.specialEffects;
+      });
+      RecordCodecBuilder var10008 = Codec.INT.fieldOf("sky_color").forGetter((var0x) -> {
+         return var0x.skyColor;
+      });
+      RecordCodecBuilder var10009 = ConfiguredSurfaceBuilder.CODEC.fieldOf("surface_builder").forGetter((var0x) -> {
+         return var0x.surfaceBuilder;
+      });
+      Codec var10010 = GenerationStep.Carving.CODEC;
+      Codec var10011 = ConfiguredWorldCarver.CODEC.listOf();
+      Logger var10013 = LOGGER;
+      var10013.getClass();
+      RecordCodecBuilder var1 = Codec.simpleMap(var10010, var10011.promotePartial(Util.prefix("Carver: ", var10013::error)), StringRepresentable.keys(GenerationStep.Carving.values())).fieldOf("carvers").forGetter((var0x) -> {
+         return var0x.carvers;
+      });
+      var10011 = ConfiguredFeature.CODEC.listOf();
+      var10013 = LOGGER;
+      var10013.getClass();
+      RecordCodecBuilder var2 = var10011.promotePartial(Util.prefix("Feature: ", var10013::error)).listOf().fieldOf("features").forGetter((var0x) -> {
+         return var0x.features;
+      });
+      Codec var10012 = ConfiguredStructureFeature.CODEC.listOf();
+      Logger var10014 = LOGGER;
+      var10014.getClass();
+      RecordCodecBuilder var3 = var10012.promotePartial(Util.prefix("Structure start: ", var10014::error)).fieldOf("starts").forGetter((var0x) -> {
+         return var0x.structureStarts;
+      });
+      Codec var4 = MobCategory.CODEC;
+      Codec var5 = Biome.SpawnerData.CODEC.listOf();
+      Logger var10016 = LOGGER;
+      var10016.getClass();
+      return var0.group(var10001, var10002, var10003, var10004, var10005, var10006, var10007, var10008, var10009, var1, var2, var3, Codec.simpleMap(var4, var5.promotePartial(Util.prefix("Spawn data: ", var10016::error)), StringRepresentable.keys(MobCategory.values())).fieldOf("spawners").forGetter((var0x) -> {
+         return var0x.spawners;
+      }), Codec.STRING.optionalFieldOf("parent").forGetter((var0x) -> {
+         return Optional.ofNullable(var0x.parent);
+      }), Codec.simpleMap(Registry.ENTITY_TYPE, Biome.MobSpawnCost.CODEC, Registry.ENTITY_TYPE).fieldOf("spawn_costs").forGetter((var0x) -> {
+         return var0x.mobSpawnCosts;
+      })).apply(var0, Biome::new);
+   });
+   public static final Codec<Supplier<Biome>> CODEC;
+   public static final Set<Biome> EXPLORABLE_BIOMES;
+   protected static final PerlinSimplexNoise TEMPERATURE_NOISE;
+   public static final PerlinSimplexNoise BIOME_INFO_NOISE;
+   private final float depth;
+   private final float scale;
+   private final float temperature;
+   private final float downfall;
    private final int skyColor;
    @Nullable
    protected final String parent;
-   protected final ConfiguredSurfaceBuilder<?> surfaceBuilder;
-   protected final Biome.BiomeCategory biomeCategory;
-   protected final Biome.Precipitation precipitation;
-   protected final Map<GenerationStep.Carving, List<ConfiguredWorldCarver<?>>> carvers = Maps.newHashMap();
-   protected final Map<GenerationStep.Decoration, List<ConfiguredFeature<?, ?>>> features = Maps.newHashMap();
-   protected final List<ConfiguredFeature<?, ?>> flowerFeatures = Lists.newArrayList();
-   protected final Map<StructureFeature<?>, FeatureConfiguration> validFeatureStarts = Maps.newHashMap();
-   private final Map<MobCategory, List<Biome.SpawnerData>> spawners = Maps.newHashMap();
+   private final Supplier<ConfiguredSurfaceBuilder<?>> surfaceBuilder;
+   private final Biome.BiomeCategory biomeCategory;
+   private final Biome.Precipitation precipitation;
+   private final BiomeSpecialEffects specialEffects;
+   private final Map<GenerationStep.Carving, List<Supplier<ConfiguredWorldCarver<?>>>> carvers;
+   private final List<List<Supplier<ConfiguredFeature<?, ?>>>> features;
+   private final List<ConfiguredFeature<?, ?>> flowerFeatures;
+   private final List<Supplier<ConfiguredStructureFeature<?, ?>>> structureStarts;
+   private final Map<MobCategory, List<Biome.SpawnerData>> spawners;
+   private final Map<EntityType<?>, Biome.MobSpawnCost> mobSpawnCosts;
    private final ThreadLocal<Long2FloatLinkedOpenHashMap> temperatureCache = ThreadLocal.withInitial(() -> {
       return (Long2FloatLinkedOpenHashMap)Util.make(() -> {
          Long2FloatLinkedOpenHashMap var1 = new Long2FloatLinkedOpenHashMap(1024, 0.25F) {
             protected void rehash(int var1) {
             }
@@ -87,54 +156,62 @@
          var1.defaultReturnValue(Float.NaN);
          return var1;
       });
    });
 
-   @Nullable
-   public static Biome getMutatedVariant(Biome var0) {
-      return (Biome)MUTATED_BIOMES.byId(Registry.BIOME.getId(var0));
-   }
-
-   public static <C extends CarverConfiguration> ConfiguredWorldCarver<C> makeCarver(WorldCarver<C> var0, C var1) {
-      return new ConfiguredWorldCarver(var0, var1);
-   }
-
    protected Biome(Biome.BiomeBuilder var1) {
-      if (var1.surfaceBuilder != null && var1.precipitation != null && var1.biomeCategory != null && var1.depth != null && var1.scale != null && var1.temperature != null && var1.downfall != null && var1.waterColor != null && var1.waterFogColor != null) {
+      if (var1.surfaceBuilder != null && var1.precipitation != null && var1.biomeCategory != null && var1.depth != null && var1.scale != null && var1.temperature != null && var1.downfall != null && var1.specialEffects != null) {
          this.surfaceBuilder = var1.surfaceBuilder;
          this.precipitation = var1.precipitation;
          this.biomeCategory = var1.biomeCategory;
          this.depth = var1.depth;
          this.scale = var1.scale;
          this.temperature = var1.temperature;
          this.downfall = var1.downfall;
-         this.waterColor = var1.waterColor;
-         this.waterFogColor = var1.waterFogColor;
          this.skyColor = this.calculateSkyColor();
          this.parent = var1.parent;
-         GenerationStep.Decoration[] var2 = GenerationStep.Decoration.values();
+         this.specialEffects = var1.specialEffects;
+         this.carvers = Maps.newHashMap();
+         this.structureStarts = Lists.newArrayList();
+         this.features = Lists.newArrayList();
+         this.spawners = Maps.newHashMap();
+         MobCategory[] var2 = MobCategory.values();
          int var3 = var2.length;
 
-         int var4;
-         for(var4 = 0; var4 < var3; ++var4) {
-            GenerationStep.Decoration var5 = var2[var4];
-            this.features.put(var5, Lists.newArrayList());
+         for(int var4 = 0; var4 < var3; ++var4) {
+            MobCategory var5 = var2[var4];
+            this.spawners.put(var5, Lists.newArrayList());
          }
 
-         MobCategory[] var6 = MobCategory.values();
-         var3 = var6.length;
-
-         for(var4 = 0; var4 < var3; ++var4) {
-            MobCategory var7 = var6[var4];
-            this.spawners.put(var7, Lists.newArrayList());
-         }
-
+         this.mobSpawnCosts = Maps.newHashMap();
+         this.flowerFeatures = Lists.newArrayList();
       } else {
          throw new IllegalStateException("You are missing parameters to build a proper biome for " + this.getClass().getSimpleName() + "\n" + var1);
       }
    }
 
+   private Biome(Biome.Precipitation var1, Biome.BiomeCategory var2, float var3, float var4, float var5, float var6, BiomeSpecialEffects var7, int var8, Supplier<ConfiguredSurfaceBuilder<?>> var9, Map<GenerationStep.Carving, List<Supplier<ConfiguredWorldCarver<?>>>> var10, List<List<Supplier<ConfiguredFeature<?, ?>>>> var11, List<Supplier<ConfiguredStructureFeature<?, ?>>> var12, Map<MobCategory, List<Biome.SpawnerData>> var13, Optional<String> var14, Map<EntityType<?>, Biome.MobSpawnCost> var15) {
+      this.precipitation = var1;
+      this.biomeCategory = var2;
+      this.depth = var3;
+      this.scale = var4;
+      this.temperature = var5;
+      this.downfall = var6;
+      this.specialEffects = var7;
+      this.skyColor = var8;
+      this.surfaceBuilder = var9;
+      this.carvers = var10;
+      this.features = var11;
+      this.structureStarts = var12;
+      this.spawners = var13;
+      this.parent = (String)var14.orElse((Object)null);
+      this.mobSpawnCosts = var15;
+      this.flowerFeatures = (List)var11.stream().flatMap(Collection::stream).map(Supplier::get).filter((var0) -> {
+         return var0.feature == Feature.DECORATED_FLOWER;
+      }).collect(Collectors.toList());
+   }
+
    public boolean isMutated() {
       return this.parent != null;
    }
 
    private int calculateSkyColor() {
@@ -146,18 +223,27 @@
 
    public int getSkyColor() {
       return this.skyColor;
    }
 
-   protected void addSpawn(MobCategory var1, Biome.SpawnerData var2) {
+   public void addSpawn(MobCategory var1, Biome.SpawnerData var2) {
       ((List)this.spawners.get(var1)).add(var2);
    }
 
+   protected void addMobCharge(EntityType<?> var1, double var2, double var4) {
+      this.mobSpawnCosts.put(var1, new Biome.MobSpawnCost(var4, var2));
+   }
+
    public List<Biome.SpawnerData> getMobs(MobCategory var1) {
       return (List)this.spawners.get(var1);
    }
 
+   @Nullable
+   public Biome.MobSpawnCost getMobSpawnCost(EntityType<?> var1) {
+      return (Biome.MobSpawnCost)this.mobSpawnCosts.get(var1);
+   }
+
    public Biome.Precipitation getPrecipitation() {
       return this.precipitation;
    }
 
    public boolean isHumid() {
@@ -235,70 +321,125 @@
          return false;
       }
    }
 
    public void addFeature(GenerationStep.Decoration var1, ConfiguredFeature<?, ?> var2) {
-      if (var2.feature == Feature.DECORATED_FLOWER) {
-         this.flowerFeatures.add(var2);
+      this.addFeature(var1.ordinal(), () -> {
+         return var2;
+      });
+   }
+
+   public void addFeature(int var1, Supplier<ConfiguredFeature<?, ?>> var2) {
+      if (((ConfiguredFeature)var2.get()).feature == Feature.DECORATED_FLOWER) {
+         this.flowerFeatures.add(var2.get());
       }
 
+      while(this.features.size() <= var1) {
+         this.features.add(Lists.newArrayList());
+      }
+
       ((List)this.features.get(var1)).add(var2);
    }
 
    public <C extends CarverConfiguration> void addCarver(GenerationStep.Carving var1, ConfiguredWorldCarver<C> var2) {
       ((List)this.carvers.computeIfAbsent(var1, (var0) -> {
          return Lists.newArrayList();
-      })).add(var2);
+      })).add(() -> {
+         return var2;
+      });
    }
 
-   public List<ConfiguredWorldCarver<?>> getCarvers(GenerationStep.Carving var1) {
-      return (List)this.carvers.computeIfAbsent(var1, (var0) -> {
-         return Lists.newArrayList();
+   public List<Supplier<ConfiguredWorldCarver<?>>> getCarvers(GenerationStep.Carving var1) {
+      return (List)this.carvers.getOrDefault(var1, ImmutableList.of());
+   }
+
+   public void addStructureStart(ConfiguredStructureFeature<?, ?> var1) {
+      this.structureStarts.add(() -> {
+         return var1;
       });
    }
 
-   public <C extends FeatureConfiguration> void addStructureStart(ConfiguredFeature<C, ? extends StructureFeature<C>> var1) {
-      this.validFeatureStarts.put(var1.feature, var1.config);
+   public boolean isValidStart(StructureFeature<?> var1) {
+      return this.structureStarts.stream().anyMatch((var1x) -> {
+         return ((ConfiguredStructureFeature)var1x.get()).feature == var1;
+      });
    }
 
-   public <C extends FeatureConfiguration> boolean isValidStart(StructureFeature<C> var1) {
-      return this.validFeatureStarts.containsKey(var1);
+   public Iterable<Supplier<ConfiguredStructureFeature<?, ?>>> structures() {
+      return this.structureStarts;
    }
 
-   @Nullable
-   public <C extends FeatureConfiguration> C getStructureConfiguration(StructureFeature<C> var1) {
-      return (FeatureConfiguration)this.validFeatureStarts.get(var1);
+   public ConfiguredStructureFeature<?, ?> withBiomeConfig(ConfiguredStructureFeature<?, ?> var1) {
+      return (ConfiguredStructureFeature)DataFixUtils.orElse(this.structureStarts.stream().map(Supplier::get).filter((var1x) -> {
+         return var1x.feature == var1.feature;
+      }).findAny(), var1);
    }
 
    public List<ConfiguredFeature<?, ?>> getFlowerFeatures() {
       return this.flowerFeatures;
    }
 
-   public List<ConfiguredFeature<?, ?>> getFeaturesForStep(GenerationStep.Decoration var1) {
-      return (List)this.features.get(var1);
+   public List<List<Supplier<ConfiguredFeature<?, ?>>>> features() {
+      return this.features;
    }
 
-   public void generate(GenerationStep.Decoration var1, ChunkGenerator<? extends ChunkGeneratorSettings> var2, LevelAccessor var3, long var4, WorldgenRandom var6, BlockPos var7) {
-      int var8 = 0;
+   public void generate(StructureFeatureManager var1, ChunkGenerator var2, WorldGenRegion var3, long var4, WorldgenRandom var6, BlockPos var7) {
+      for(int var8 = 0; var8 < this.features.size(); ++var8) {
+         int var9 = 0;
+         Iterator var10;
+         if (var1.shouldGenerateFeatures()) {
+            var10 = Registry.STRUCTURE_FEATURE.iterator();
 
-      for(Iterator var9 = ((List)this.features.get(var1)).iterator(); var9.hasNext(); ++var8) {
-         ConfiguredFeature var10 = (ConfiguredFeature)var9.next();
-         var6.setFeatureSeed(var4, var8, var1.ordinal());
+            while(var10.hasNext()) {
+               StructureFeature var11 = (StructureFeature)var10.next();
+               if (var11.step().ordinal() == var8) {
+                  var6.setFeatureSeed(var4, var9, var8);
+                  int var12 = var7.getX() >> 4;
+                  int var13 = var7.getZ() >> 4;
+                  int var14 = var12 << 4;
+                  int var15 = var13 << 4;
 
-         try {
-            var10.place(var3, var2, var6, var7);
-         } catch (Exception var13) {
-            CrashReport var12 = CrashReport.forThrowable(var13, "Feature placement");
-            var12.addCategory("Feature").setDetail("Id", (Object)Registry.FEATURE.getKey(var10.feature)).setDetail("Description", () -> {
-               return var10.feature.toString();
-            });
-            throw new ReportedException(var12);
+                  try {
+                     var1.startsForFeature(SectionPos.of(var7), var11).forEach((var8x) -> {
+                        var8x.placeInChunk(var3, var1, var2, var6, new BoundingBox(var14, var15, var14 + 15, var15 + 15), new ChunkPos(var12, var13));
+                     });
+                  } catch (Exception var18) {
+                     CrashReport var17 = CrashReport.forThrowable(var18, "Feature placement");
+                     var17.addCategory("Feature").setDetail("Id", (Object)Registry.STRUCTURE_FEATURE.getKey(var11)).setDetail("Description", () -> {
+                        return var11.toString();
+                     });
+                     throw new ReportedException(var17);
+                  }
+
+                  ++var9;
+               }
+            }
          }
+
+         for(var10 = ((List)this.features.get(var8)).iterator(); var10.hasNext(); ++var9) {
+            Supplier var20 = (Supplier)var10.next();
+            ConfiguredFeature var21 = (ConfiguredFeature)var20.get();
+            var6.setFeatureSeed(var4, var9, var8);
+
+            try {
+               var21.place(var3, var2, var6, var7);
+            } catch (Exception var19) {
+               CrashReport var22 = CrashReport.forThrowable(var19, "Feature placement");
+               var22.addCategory("Feature").setDetail("Id", (Object)Registry.FEATURE.getKey(var21.feature)).setDetail("Config", (Object)var21.config).setDetail("Description", () -> {
+                  return var21.feature.toString();
+               });
+               throw new ReportedException(var22);
+            }
+         }
       }
 
    }
 
+   public int getFogColor() {
+      return this.specialEffects.getFogColor();
+   }
+
    public int getGrassColor(double var1, double var3) {
       double var5 = (double)Mth.clamp(this.getTemperature(), 0.0F, 1.0F);
       double var7 = (double)Mth.clamp(this.getDownfall(), 0.0F, 1.0F);
       return GrassColor.get(var5, var7);
    }
@@ -308,12 +449,13 @@
       double var3 = (double)Mth.clamp(this.getDownfall(), 0.0F, 1.0F);
       return FoliageColor.get(var1, var3);
    }
 
    public void buildSurfaceAt(Random var1, ChunkAccess var2, int var3, int var4, int var5, double var6, BlockState var8, BlockState var9, int var10, long var11) {
-      this.surfaceBuilder.initNoise(var11);
-      this.surfaceBuilder.apply(var1, var2, this, var3, var4, var5, var6, var8, var9, var10, var11);
+      ConfiguredSurfaceBuilder var13 = (ConfiguredSurfaceBuilder)this.surfaceBuilder.get();
+      var13.initNoise(var11);
+      var13.apply(var1, var2, this, var3, var4, var5, var6, var8, var9, var10, var11);
    }
 
    public Biome.BiomeTempCategory getTemperatureCategory() {
       if (this.biomeCategory == Biome.BiomeCategory.OCEAN) {
          return Biome.BiomeTempCategory.OCEAN;
@@ -330,58 +472,142 @@
 
    public final float getDownfall() {
       return this.downfall;
    }
 
-   public Component getName() {
-      return new TranslatableComponent(this.getDescriptionId(), new Object[0]);
-   }
-
-   public String getDescriptionId() {
-      if (this.descriptionId == null) {
-         this.descriptionId = Util.makeDescriptionId("biome", Registry.BIOME.getKey(this));
-      }
-
-      return this.descriptionId;
-   }
-
    public final float getScale() {
       return this.scale;
    }
 
    public final float getTemperature() {
       return this.temperature;
    }
 
+   public BiomeSpecialEffects getSpecialEffects() {
+      return this.specialEffects;
+   }
+
    public final int getWaterColor() {
-      return this.waterColor;
+      return this.specialEffects.getWaterColor();
    }
 
    public final int getWaterFogColor() {
-      return this.waterFogColor;
+      return this.specialEffects.getWaterFogColor();
    }
 
+   public Optional<AmbientParticleSettings> getAmbientParticle() {
+      return this.specialEffects.getAmbientParticleSettings();
+   }
+
+   public Optional<SoundEvent> getAmbientLoop() {
+      return this.specialEffects.getAmbientLoopSoundEvent();
+   }
+
+   public Optional<AmbientMoodSettings> getAmbientMood() {
+      return this.specialEffects.getAmbientMoodSettings();
+   }
+
+   public Optional<AmbientAdditionsSettings> getAmbientAdditions() {
+      return this.specialEffects.getAmbientAdditionsSettings();
+   }
+
+   public Optional<Music> getBackgroundMusic() {
+      return this.specialEffects.getBackgroundMusic();
+   }
+
    public final Biome.BiomeCategory getBiomeCategory() {
       return this.biomeCategory;
    }
 
-   public ConfiguredSurfaceBuilder<?> getSurfaceBuilder() {
+   public Supplier<ConfiguredSurfaceBuilder<?>> getSurfaceBuilder() {
       return this.surfaceBuilder;
    }
 
    public SurfaceBuilderConfiguration getSurfaceBuilderConfig() {
-      return this.surfaceBuilder.getSurfaceBuilderConfiguration();
+      return ((ConfiguredSurfaceBuilder)this.surfaceBuilder.get()).config();
    }
 
    @Nullable
    public String getParent() {
       return this.parent;
    }
 
+   public String toString() {
+      ResourceLocation var1 = BuiltinRegistries.BIOME.getKey(this);
+      return var1 == null ? super.toString() : var1.toString();
+   }
+
+   static {
+      CODEC = RegistryFileCodec.create(Registry.BIOME_REGISTRY, DIRECT_CODEC);
+      EXPLORABLE_BIOMES = Sets.newHashSet();
+      TEMPERATURE_NOISE = new PerlinSimplexNoise(new WorldgenRandom(1234L), ImmutableList.of(0));
+      BIOME_INFO_NOISE = new PerlinSimplexNoise(new WorldgenRandom(2345L), ImmutableList.of(0));
+   }
+
+   public static class ClimateParameters {
+      public static final Codec<Biome.ClimateParameters> CODEC = RecordCodecBuilder.create((var0) -> {
+         return var0.group(Codec.floatRange(-2.0F, 2.0F).fieldOf("temperature").forGetter((var0x) -> {
+            return var0x.temperature;
+         }), Codec.floatRange(-2.0F, 2.0F).fieldOf("humidity").forGetter((var0x) -> {
+            return var0x.humidity;
+         }), Codec.floatRange(-2.0F, 2.0F).fieldOf("altitude").forGetter((var0x) -> {
+            return var0x.altitude;
+         }), Codec.floatRange(-2.0F, 2.0F).fieldOf("weirdness").forGetter((var0x) -> {
+            return var0x.weirdness;
+         }), Codec.floatRange(0.0F, 1.0F).fieldOf("offset").forGetter((var0x) -> {
+            return var0x.offset;
+         })).apply(var0, Biome.ClimateParameters::new);
+      });
+      private final float temperature;
+      private final float humidity;
+      private final float altitude;
+      private final float weirdness;
+      private final float offset;
+
+      public ClimateParameters(float var1, float var2, float var3, float var4, float var5) {
+         this.temperature = var1;
+         this.humidity = var2;
+         this.altitude = var3;
+         this.weirdness = var4;
+         this.offset = var5;
+      }
+
+      public boolean equals(Object var1) {
+         if (this == var1) {
+            return true;
+         } else if (var1 != null && this.getClass() == var1.getClass()) {
+            Biome.ClimateParameters var2 = (Biome.ClimateParameters)var1;
+            if (Float.compare(var2.temperature, this.temperature) != 0) {
+               return false;
+            } else if (Float.compare(var2.humidity, this.humidity) != 0) {
+               return false;
+            } else if (Float.compare(var2.altitude, this.altitude) != 0) {
+               return false;
+            } else {
+               return Float.compare(var2.weirdness, this.weirdness) == 0;
+            }
+         } else {
+            return false;
+         }
+      }
+
+      public int hashCode() {
+         int var1 = this.temperature != 0.0F ? Float.floatToIntBits(this.temperature) : 0;
+         var1 = 31 * var1 + (this.humidity != 0.0F ? Float.floatToIntBits(this.humidity) : 0);
+         var1 = 31 * var1 + (this.altitude != 0.0F ? Float.floatToIntBits(this.altitude) : 0);
+         var1 = 31 * var1 + (this.weirdness != 0.0F ? Float.floatToIntBits(this.weirdness) : 0);
+         return var1;
+      }
+
+      public float fitness(Biome.ClimateParameters var1) {
+         return (this.temperature - var1.temperature) * (this.temperature - var1.temperature) + (this.humidity - var1.humidity) * (this.humidity - var1.humidity) + (this.altitude - var1.altitude) * (this.altitude - var1.altitude) + (this.weirdness - var1.weirdness) * (this.weirdness - var1.weirdness) + (this.offset - var1.offset) * (this.offset - var1.offset);
+      }
+   }
+
    public static class BiomeBuilder {
       @Nullable
-      private ConfiguredSurfaceBuilder<?> surfaceBuilder;
+      private Supplier<ConfiguredSurfaceBuilder<?>> surfaceBuilder;
       @Nullable
       private Biome.Precipitation precipitation;
       @Nullable
       private Biome.BiomeCategory biomeCategory;
       @Nullable
@@ -391,25 +617,24 @@
       @Nullable
       private Float temperature;
       @Nullable
       private Float downfall;
       @Nullable
-      private Integer waterColor;
-      @Nullable
-      private Integer waterFogColor;
-      @Nullable
       private String parent;
+      @Nullable
+      private BiomeSpecialEffects specialEffects;
 
       public BiomeBuilder() {
       }
 
-      public <SC extends SurfaceBuilderConfiguration> Biome.BiomeBuilder surfaceBuilder(SurfaceBuilder<SC> var1, SC var2) {
-         this.surfaceBuilder = new ConfiguredSurfaceBuilder(var1, var2);
-         return this;
+      public Biome.BiomeBuilder surfaceBuilder(ConfiguredSurfaceBuilder<?> var1) {
+         return this.surfaceBuilder(() -> {
+            return var1;
+         });
       }
 
-      public Biome.BiomeBuilder surfaceBuilder(ConfiguredSurfaceBuilder<?> var1) {
+      public Biome.BiomeBuilder surfaceBuilder(Supplier<ConfiguredSurfaceBuilder<?>> var1) {
          this.surfaceBuilder = var1;
          return this;
       }
 
       public Biome.BiomeBuilder precipitation(Biome.Precipitation var1) {
@@ -440,52 +665,80 @@
       public Biome.BiomeBuilder downfall(float var1) {
          this.downfall = var1;
          return this;
       }
 
-      public Biome.BiomeBuilder waterColor(int var1) {
-         this.waterColor = var1;
+      public Biome.BiomeBuilder parent(@Nullable String var1) {
+         this.parent = var1;
          return this;
       }
 
-      public Biome.BiomeBuilder waterFogColor(int var1) {
-         this.waterFogColor = var1;
+      public Biome.BiomeBuilder specialEffects(BiomeSpecialEffects var1) {
+         this.specialEffects = var1;
          return this;
       }
 
-      public Biome.BiomeBuilder parent(@Nullable String var1) {
-         this.parent = var1;
-         return this;
-      }
-
       public String toString() {
-         return "BiomeBuilder{\nsurfaceBuilder=" + this.surfaceBuilder + ",\nprecipitation=" + this.precipitation + ",\nbiomeCategory=" + this.biomeCategory + ",\ndepth=" + this.depth + ",\nscale=" + this.scale + ",\ntemperature=" + this.temperature + ",\ndownfall=" + this.downfall + ",\nwaterColor=" + this.waterColor + ",\nwaterFogColor=" + this.waterFogColor + ",\nparent='" + this.parent + '\'' + "\n" + '}';
+         return "BiomeBuilder{\nsurfaceBuilder=" + this.surfaceBuilder + ",\nprecipitation=" + this.precipitation + ",\nbiomeCategory=" + this.biomeCategory + ",\ndepth=" + this.depth + ",\nscale=" + this.scale + ",\ntemperature=" + this.temperature + ",\ndownfall=" + this.downfall + ",\nspecialEffects=" + this.specialEffects + ",\nparent='" + this.parent + '\'' + "\n" + '}';
       }
    }
 
    public static class SpawnerData extends WeighedRandom.WeighedRandomItem {
+      public static final Codec<Biome.SpawnerData> CODEC = RecordCodecBuilder.create((var0) -> {
+         return var0.group(Registry.ENTITY_TYPE.fieldOf("type").forGetter((var0x) -> {
+            return var0x.type;
+         }), Codec.INT.fieldOf("weight").forGetter((var0x) -> {
+            return var0x.weight;
+         }), Codec.INT.fieldOf("minCount").forGetter((var0x) -> {
+            return var0x.minCount;
+         }), Codec.INT.fieldOf("maxCount").forGetter((var0x) -> {
+            return var0x.maxCount;
+         })).apply(var0, Biome.SpawnerData::new);
+      });
       public final EntityType<?> type;
       public final int minCount;
       public final int maxCount;
 
       public SpawnerData(EntityType<?> var1, int var2, int var3, int var4) {
          super(var2);
-         this.type = var1;
+         this.type = var1.getCategory() == MobCategory.MISC ? EntityType.PIG : var1;
          this.minCount = var3;
          this.maxCount = var4;
       }
 
       public String toString() {
          return EntityType.getKey(this.type) + "*(" + this.minCount + "-" + this.maxCount + "):" + this.weight;
       }
    }
 
-   public static enum Precipitation {
+   public static class MobSpawnCost {
+      public static final Codec<Biome.MobSpawnCost> CODEC = RecordCodecBuilder.create((var0) -> {
+         return var0.group(Codec.DOUBLE.fieldOf("energy_budget").forGetter(Biome.MobSpawnCost::getEnergyBudget), Codec.DOUBLE.fieldOf("charge").forGetter(Biome.MobSpawnCost::getCharge)).apply(var0, Biome.MobSpawnCost::new);
+      });
+      private final double energyBudget;
+      private final double charge;
+
+      public MobSpawnCost(double var1, double var3) {
+         this.energyBudget = var1;
+         this.charge = var3;
+      }
+
+      public double getEnergyBudget() {
+         return this.energyBudget;
+      }
+
+      public double getCharge() {
+         return this.charge;
+      }
+   }
+
+   public static enum Precipitation implements StringRepresentable {
       NONE("none"),
       RAIN("rain"),
       SNOW("snow");
 
+      public static final Codec<Biome.Precipitation> CODEC = StringRepresentable.fromEnum(Biome.Precipitation::values, Biome.Precipitation::byName);
       private static final Map<String, Biome.Precipitation> BY_NAME = (Map)Arrays.stream(values()).collect(Collectors.toMap(Biome.Precipitation::getName, (var0) -> {
          return var0;
       }));
       private final String name;
 
@@ -494,13 +747,21 @@
       }
 
       public String getName() {
          return this.name;
       }
+
+      public static Biome.Precipitation byName(String var0) {
+         return (Biome.Precipitation)BY_NAME.get(var0);
+      }
+
+      public String getSerializedName() {
+         return this.name;
+      }
    }
 
-   public static enum BiomeCategory {
+   public static enum BiomeCategory implements StringRepresentable {
       NONE("none"),
       TAIGA("taiga"),
       EXTREME_HILLS("extreme_hills"),
       JUNGLE("jungle"),
       MESA("mesa"),
@@ -515,10 +776,11 @@
       RIVER("river"),
       SWAMP("swamp"),
       MUSHROOM("mushroom"),
       NETHER("nether");
 
+      public static final Codec<Biome.BiomeCategory> CODEC = StringRepresentable.fromEnum(Biome.BiomeCategory::values, Biome.BiomeCategory::byName);
       private static final Map<String, Biome.BiomeCategory> BY_NAME = (Map)Arrays.stream(values()).collect(Collectors.toMap(Biome.BiomeCategory::getName, (var0) -> {
          return var0;
       }));
       private final String name;
 
@@ -527,10 +789,18 @@
       }
 
       public String getName() {
          return this.name;
       }
+
+      public static Biome.BiomeCategory byName(String var0) {
+         return (Biome.BiomeCategory)BY_NAME.get(var0);
+      }
+
+      public String getSerializedName() {
+         return this.name;
+      }
    }
 
    public static enum BiomeTempCategory {
       OCEAN("ocean"),
       COLD("cold"),
