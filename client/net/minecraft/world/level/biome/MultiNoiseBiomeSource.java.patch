--- net/minecraft/world/level/biome/MultiNoiseBiomeSource.java
+++ net/minecraft/world/level/biome/MultiNoiseBiomeSource.java
@@ -1,0 +1,143 @@
+package net.minecraft.world.level.biome;
+
+import com.google.common.collect.ImmutableList;
+import com.google.common.collect.Maps;
+import com.mojang.datafixers.util.Either;
+import com.mojang.datafixers.util.Pair;
+import com.mojang.serialization.Codec;
+import com.mojang.serialization.DataResult;
+import com.mojang.serialization.MapCodec;
+import com.mojang.serialization.codecs.RecordCodecBuilder;
+import java.util.Comparator;
+import java.util.List;
+import java.util.Map;
+import java.util.Objects;
+import java.util.Optional;
+import java.util.function.Function;
+import java.util.function.LongFunction;
+import java.util.function.Supplier;
+import java.util.stream.Collectors;
+import java.util.stream.IntStream;
+import net.minecraft.resources.ResourceLocation;
+import net.minecraft.world.level.levelgen.WorldgenRandom;
+import net.minecraft.world.level.levelgen.synth.NormalNoise;
+
+public class MultiNoiseBiomeSource extends BiomeSource {
+   public static final MapCodec<MultiNoiseBiomeSource> DIRECT_CODEC = RecordCodecBuilder.mapCodec((var0) -> {
+      return var0.group(Codec.LONG.fieldOf("seed").forGetter((var0x) -> {
+         return var0x.seed;
+      }), RecordCodecBuilder.create((var0x) -> {
+         return var0x.group(Biome.ClimateParameters.CODEC.fieldOf("parameters").forGetter(Pair::getFirst), Biome.CODEC.fieldOf("biome").forGetter(Pair::getSecond)).apply(var0x, Pair::of);
+      }).listOf().fieldOf("biomes").forGetter((var0x) -> {
+         return var0x.parameters;
+      })).apply(var0, MultiNoiseBiomeSource::new);
+   });
+   public static final Codec<MultiNoiseBiomeSource> CODEC;
+   private final NormalNoise temperatureNoise;
+   private final NormalNoise humidityNoise;
+   private final NormalNoise altitudeNoise;
+   private final NormalNoise weirdnessNoise;
+   private final List<Pair<Biome.ClimateParameters, Supplier<Biome>>> parameters;
+   private final boolean useY;
+   private final long seed;
+   private final Optional<MultiNoiseBiomeSource.Preset> preset;
+
+   private MultiNoiseBiomeSource(long var1, List<Pair<Biome.ClimateParameters, Supplier<Biome>>> var3) {
+      this(var1, var3, Optional.empty());
+   }
+
+   public MultiNoiseBiomeSource(long var1, List<Pair<Biome.ClimateParameters, Supplier<Biome>>> var3, Optional<MultiNoiseBiomeSource.Preset> var4) {
+      super((List)var3.stream().map(Pair::getSecond).map(Supplier::get).collect(Collectors.toList()));
+      this.seed = var1;
+      this.preset = var4;
+      IntStream var5 = IntStream.rangeClosed(-7, -6);
+      IntStream var6 = IntStream.rangeClosed(-7, -6);
+      IntStream var7 = IntStream.rangeClosed(-7, -6);
+      IntStream var8 = IntStream.rangeClosed(-7, -6);
+      this.temperatureNoise = new NormalNoise(new WorldgenRandom(var1), var5);
+      this.humidityNoise = new NormalNoise(new WorldgenRandom(var1 + 1L), var6);
+      this.altitudeNoise = new NormalNoise(new WorldgenRandom(var1 + 2L), var7);
+      this.weirdnessNoise = new NormalNoise(new WorldgenRandom(var1 + 3L), var8);
+      this.parameters = var3;
+      this.useY = false;
+   }
+
+   private static MultiNoiseBiomeSource defaultNether(long var0) {
+      return new MultiNoiseBiomeSource(var0, ImmutableList.of(Pair.of(new Biome.ClimateParameters(0.0F, 0.0F, 0.0F, 0.0F, 0.0F), () -> {
+         return Biomes.NETHER_WASTES;
+      }), Pair.of(new Biome.ClimateParameters(0.0F, -0.5F, 0.0F, 0.0F, 0.0F), () -> {
+         return Biomes.SOUL_SAND_VALLEY;
+      }), Pair.of(new Biome.ClimateParameters(0.4F, 0.0F, 0.0F, 0.0F, 0.0F), () -> {
+         return Biomes.CRIMSON_FOREST;
+      }), Pair.of(new Biome.ClimateParameters(0.0F, 0.5F, 0.0F, 0.0F, 0.375F), () -> {
+         return Biomes.WARPED_FOREST;
+      }), Pair.of(new Biome.ClimateParameters(-0.5F, 0.0F, 0.0F, 0.0F, 0.175F), () -> {
+         return Biomes.BASALT_DELTAS;
+      })), Optional.of(MultiNoiseBiomeSource.Preset.NETHER));
+   }
+
+   protected Codec<? extends BiomeSource> codec() {
+      return CODEC;
+   }
+
+   public BiomeSource withSeed(long var1) {
+      return new MultiNoiseBiomeSource(var1, this.parameters, this.preset);
+   }
+
+   public Biome getNoiseBiome(int var1, int var2, int var3) {
+      int var4 = this.useY ? var2 : 0;
+      Biome.ClimateParameters var5 = new Biome.ClimateParameters((float)this.temperatureNoise.getValue((double)var1, (double)var4, (double)var3), (float)this.humidityNoise.getValue((double)var1, (double)var4, (double)var3), (float)this.altitudeNoise.getValue((double)var1, (double)var4, (double)var3), (float)this.weirdnessNoise.getValue((double)var1, (double)var4, (double)var3), 0.0F);
+      return (Biome)this.parameters.stream().min(Comparator.comparing((var1x) -> {
+         return ((Biome.ClimateParameters)var1x.getFirst()).fitness(var5);
+      })).map(Pair::getSecond).map(Supplier::get).orElse(Biomes.THE_VOID);
+   }
+
+   public boolean stable(long var1) {
+      return this.seed == var1 && Objects.equals(this.preset, Optional.of(MultiNoiseBiomeSource.Preset.NETHER));
+   }
+
+   static {
+      CODEC = Codec.mapEither(MultiNoiseBiomeSource.Preset.CODEC, DIRECT_CODEC).xmap((var0) -> {
+         return (MultiNoiseBiomeSource)var0.map((var0x) -> {
+            return ((MultiNoiseBiomeSource.Preset)var0x.getFirst()).biomeSource((Long)var0x.getSecond());
+         }, Function.identity());
+      }, (var0) -> {
+         return (Either)var0.preset.map((var1) -> {
+            return Either.left(Pair.of(var1, var0.seed));
+         }).orElseGet(() -> {
+            return Either.right(var0);
+         });
+      }).codec();
+   }
+
+   public static class Preset {
+      private static final Map<ResourceLocation, MultiNoiseBiomeSource.Preset> BY_NAME = Maps.newHashMap();
+      public static final MapCodec<Pair<MultiNoiseBiomeSource.Preset, Long>> CODEC;
+      public static final MultiNoiseBiomeSource.Preset NETHER;
+      private final ResourceLocation name;
+      private final LongFunction<MultiNoiseBiomeSource> biomeSource;
+
+      public Preset(ResourceLocation var1, LongFunction<MultiNoiseBiomeSource> var2) {
+         this.name = var1;
+         this.biomeSource = var2;
+         BY_NAME.put(var1, this);
+      }
+
+      public MultiNoiseBiomeSource biomeSource(long var1) {
+         return (MultiNoiseBiomeSource)this.biomeSource.apply(var1);
+      }
+
+      static {
+         CODEC = Codec.mapPair(ResourceLocation.CODEC.flatXmap((var0) -> {
+            return (DataResult)Optional.ofNullable(BY_NAME.get(var0)).map(DataResult::success).orElseGet(() -> {
+               return DataResult.error("Unknown preset: " + var0);
+            });
+         }, (var0) -> {
+            return DataResult.success(var0.name);
+         }).fieldOf("preset"), Codec.LONG.fieldOf("seed")).stable();
+         NETHER = new MultiNoiseBiomeSource.Preset(new ResourceLocation("nether"), (var0) -> {
+            return MultiNoiseBiomeSource.defaultNether(var0);
+         });
+      }
+   }
+}
