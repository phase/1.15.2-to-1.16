--- net/minecraft/world/level/GameRules.java
+++ net/minecraft/world/level/GameRules.java
@@ -5,10 +5,11 @@
 import com.mojang.brigadier.arguments.ArgumentType;
 import com.mojang.brigadier.arguments.BoolArgumentType;
 import com.mojang.brigadier.arguments.IntegerArgumentType;
 import com.mojang.brigadier.builder.RequiredArgumentBuilder;
 import com.mojang.brigadier.context.CommandContext;
+import com.mojang.serialization.DynamicLike;
 import java.util.Comparator;
 import java.util.Iterator;
 import java.util.Map;
 import java.util.Map.Entry;
 import java.util.function.BiConsumer;
@@ -28,76 +29,68 @@
 public class GameRules {
    private static final Logger LOGGER = LogManager.getLogger();
    private static final Map<GameRules.Key<?>, GameRules.Type<?>> GAME_RULE_TYPES = Maps.newTreeMap(Comparator.comparing((var0) -> {
       return var0.id;
    }));
-   public static final GameRules.Key<GameRules.BooleanValue> RULE_DOFIRETICK = register("doFireTick", GameRules.BooleanValue.create(true));
-   public static final GameRules.Key<GameRules.BooleanValue> RULE_MOBGRIEFING = register("mobGriefing", GameRules.BooleanValue.create(true));
-   public static final GameRules.Key<GameRules.BooleanValue> RULE_KEEPINVENTORY = register("keepInventory", GameRules.BooleanValue.create(false));
-   public static final GameRules.Key<GameRules.BooleanValue> RULE_DOMOBSPAWNING = register("doMobSpawning", GameRules.BooleanValue.create(true));
-   public static final GameRules.Key<GameRules.BooleanValue> RULE_DOMOBLOOT = register("doMobLoot", GameRules.BooleanValue.create(true));
-   public static final GameRules.Key<GameRules.BooleanValue> RULE_DOBLOCKDROPS = register("doTileDrops", GameRules.BooleanValue.create(true));
-   public static final GameRules.Key<GameRules.BooleanValue> RULE_DOENTITYDROPS = register("doEntityDrops", GameRules.BooleanValue.create(true));
-   public static final GameRules.Key<GameRules.BooleanValue> RULE_COMMANDBLOCKOUTPUT = register("commandBlockOutput", GameRules.BooleanValue.create(true));
-   public static final GameRules.Key<GameRules.BooleanValue> RULE_NATURAL_REGENERATION = register("naturalRegeneration", GameRules.BooleanValue.create(true));
-   public static final GameRules.Key<GameRules.BooleanValue> RULE_DAYLIGHT = register("doDaylightCycle", GameRules.BooleanValue.create(true));
-   public static final GameRules.Key<GameRules.BooleanValue> RULE_LOGADMINCOMMANDS = register("logAdminCommands", GameRules.BooleanValue.create(true));
-   public static final GameRules.Key<GameRules.BooleanValue> RULE_SHOWDEATHMESSAGES = register("showDeathMessages", GameRules.BooleanValue.create(true));
-   public static final GameRules.Key<GameRules.IntegerValue> RULE_RANDOMTICKING = register("randomTickSpeed", GameRules.IntegerValue.create(3));
-   public static final GameRules.Key<GameRules.BooleanValue> RULE_SENDCOMMANDFEEDBACK = register("sendCommandFeedback", GameRules.BooleanValue.create(true));
-   public static final GameRules.Key<GameRules.BooleanValue> RULE_REDUCEDDEBUGINFO = register("reducedDebugInfo", GameRules.BooleanValue.create(false, (var0, var1) -> {
-      int var2 = var1.get() ? 22 : 23;
-      Iterator var3 = var0.getPlayerList().getPlayers().iterator();
-
-      while(var3.hasNext()) {
-         ServerPlayer var4 = (ServerPlayer)var3.next();
-         var4.connection.send(new ClientboundEntityEventPacket(var4, (byte)var2));
-      }
-
-   }));
-   public static final GameRules.Key<GameRules.BooleanValue> RULE_SPECTATORSGENERATECHUNKS = register("spectatorsGenerateChunks", GameRules.BooleanValue.create(true));
-   public static final GameRules.Key<GameRules.IntegerValue> RULE_SPAWN_RADIUS = register("spawnRadius", GameRules.IntegerValue.create(10));
-   public static final GameRules.Key<GameRules.BooleanValue> RULE_DISABLE_ELYTRA_MOVEMENT_CHECK = register("disableElytraMovementCheck", GameRules.BooleanValue.create(false));
-   public static final GameRules.Key<GameRules.IntegerValue> RULE_MAX_ENTITY_CRAMMING = register("maxEntityCramming", GameRules.IntegerValue.create(24));
-   public static final GameRules.Key<GameRules.BooleanValue> RULE_WEATHER_CYCLE = register("doWeatherCycle", GameRules.BooleanValue.create(true));
-   public static final GameRules.Key<GameRules.BooleanValue> RULE_LIMITED_CRAFTING = register("doLimitedCrafting", GameRules.BooleanValue.create(false));
-   public static final GameRules.Key<GameRules.IntegerValue> RULE_MAX_COMMAND_CHAIN_LENGTH = register("maxCommandChainLength", GameRules.IntegerValue.create(65536));
-   public static final GameRules.Key<GameRules.BooleanValue> RULE_ANNOUNCE_ADVANCEMENTS = register("announceAdvancements", GameRules.BooleanValue.create(true));
-   public static final GameRules.Key<GameRules.BooleanValue> RULE_DISABLE_RAIDS = register("disableRaids", GameRules.BooleanValue.create(false));
-   public static final GameRules.Key<GameRules.BooleanValue> RULE_DOINSOMNIA = register("doInsomnia", GameRules.BooleanValue.create(true));
-   public static final GameRules.Key<GameRules.BooleanValue> RULE_DO_IMMEDIATE_RESPAWN = register("doImmediateRespawn", GameRules.BooleanValue.create(false, (var0, var1) -> {
-      Iterator var2 = var0.getPlayerList().getPlayers().iterator();
-
-      while(var2.hasNext()) {
-         ServerPlayer var3 = (ServerPlayer)var2.next();
-         var3.connection.send(new ClientboundGameEventPacket(11, var1.get() ? 1.0F : 0.0F));
-      }
-
-   }));
-   public static final GameRules.Key<GameRules.BooleanValue> RULE_DROWNING_DAMAGE = register("drowningDamage", GameRules.BooleanValue.create(true));
-   public static final GameRules.Key<GameRules.BooleanValue> RULE_FALL_DAMAGE = register("fallDamage", GameRules.BooleanValue.create(true));
-   public static final GameRules.Key<GameRules.BooleanValue> RULE_FIRE_DAMAGE = register("fireDamage", GameRules.BooleanValue.create(true));
-   public static final GameRules.Key<GameRules.BooleanValue> RULE_DO_PATROL_SPAWNING = register("doPatrolSpawning", GameRules.BooleanValue.create(true));
-   public static final GameRules.Key<GameRules.BooleanValue> RULE_DO_TRADER_SPAWNING = register("doTraderSpawning", GameRules.BooleanValue.create(true));
+   public static final GameRules.Key<GameRules.BooleanValue> RULE_DOFIRETICK;
+   public static final GameRules.Key<GameRules.BooleanValue> RULE_MOBGRIEFING;
+   public static final GameRules.Key<GameRules.BooleanValue> RULE_KEEPINVENTORY;
+   public static final GameRules.Key<GameRules.BooleanValue> RULE_DOMOBSPAWNING;
+   public static final GameRules.Key<GameRules.BooleanValue> RULE_DOMOBLOOT;
+   public static final GameRules.Key<GameRules.BooleanValue> RULE_DOBLOCKDROPS;
+   public static final GameRules.Key<GameRules.BooleanValue> RULE_DOENTITYDROPS;
+   public static final GameRules.Key<GameRules.BooleanValue> RULE_COMMANDBLOCKOUTPUT;
+   public static final GameRules.Key<GameRules.BooleanValue> RULE_NATURAL_REGENERATION;
+   public static final GameRules.Key<GameRules.BooleanValue> RULE_DAYLIGHT;
+   public static final GameRules.Key<GameRules.BooleanValue> RULE_LOGADMINCOMMANDS;
+   public static final GameRules.Key<GameRules.BooleanValue> RULE_SHOWDEATHMESSAGES;
+   public static final GameRules.Key<GameRules.IntegerValue> RULE_RANDOMTICKING;
+   public static final GameRules.Key<GameRules.BooleanValue> RULE_SENDCOMMANDFEEDBACK;
+   public static final GameRules.Key<GameRules.BooleanValue> RULE_REDUCEDDEBUGINFO;
+   public static final GameRules.Key<GameRules.BooleanValue> RULE_SPECTATORSGENERATECHUNKS;
+   public static final GameRules.Key<GameRules.IntegerValue> RULE_SPAWN_RADIUS;
+   public static final GameRules.Key<GameRules.BooleanValue> RULE_DISABLE_ELYTRA_MOVEMENT_CHECK;
+   public static final GameRules.Key<GameRules.IntegerValue> RULE_MAX_ENTITY_CRAMMING;
+   public static final GameRules.Key<GameRules.BooleanValue> RULE_WEATHER_CYCLE;
+   public static final GameRules.Key<GameRules.BooleanValue> RULE_LIMITED_CRAFTING;
+   public static final GameRules.Key<GameRules.IntegerValue> RULE_MAX_COMMAND_CHAIN_LENGTH;
+   public static final GameRules.Key<GameRules.BooleanValue> RULE_ANNOUNCE_ADVANCEMENTS;
+   public static final GameRules.Key<GameRules.BooleanValue> RULE_DISABLE_RAIDS;
+   public static final GameRules.Key<GameRules.BooleanValue> RULE_DOINSOMNIA;
+   public static final GameRules.Key<GameRules.BooleanValue> RULE_DO_IMMEDIATE_RESPAWN;
+   public static final GameRules.Key<GameRules.BooleanValue> RULE_DROWNING_DAMAGE;
+   public static final GameRules.Key<GameRules.BooleanValue> RULE_FALL_DAMAGE;
+   public static final GameRules.Key<GameRules.BooleanValue> RULE_FIRE_DAMAGE;
+   public static final GameRules.Key<GameRules.BooleanValue> RULE_DO_PATROL_SPAWNING;
+   public static final GameRules.Key<GameRules.BooleanValue> RULE_DO_TRADER_SPAWNING;
    private final Map<GameRules.Key<?>, GameRules.Value<?>> rules;
 
-   private static <T extends GameRules.Value<T>> GameRules.Key<T> register(String var0, GameRules.Type<T> var1) {
-      GameRules.Key var2 = new GameRules.Key(var0);
-      GameRules.Type var3 = (GameRules.Type)GAME_RULE_TYPES.put(var2, var1);
-      if (var3 != null) {
+   private static <T extends GameRules.Value<T>> GameRules.Key<T> register(String var0, GameRules.Category var1, GameRules.Type<T> var2) {
+      GameRules.Key var3 = new GameRules.Key(var0, var1);
+      GameRules.Type var4 = (GameRules.Type)GAME_RULE_TYPES.put(var3, var2);
+      if (var4 != null) {
          throw new IllegalStateException("Duplicate game rule registration for " + var0);
       } else {
-         return var2;
+         return var3;
       }
    }
 
+   public GameRules(DynamicLike<?> var1) {
+      this();
+      this.loadFromTag(var1);
+   }
+
    public GameRules() {
       this.rules = (Map)GAME_RULE_TYPES.entrySet().stream().collect(ImmutableMap.toImmutableMap(Entry::getKey, (var0) -> {
          return ((GameRules.Type)var0.getValue()).createRule();
       }));
    }
 
+   private GameRules(Map<GameRules.Key<?>, GameRules.Value<?>> var1) {
+      this.rules = var1;
+   }
+
    public <T extends GameRules.Value<T>> T getRule(GameRules.Key<T> var1) {
       return (GameRules.Value)this.rules.get(var1);
    }
 
    public CompoundTag createTag() {
@@ -106,44 +99,110 @@
          var1.putString(var1x.id, var2.serialize());
       });
       return var1;
    }
 
-   public void loadFromTag(CompoundTag var1) {
+   private void loadFromTag(DynamicLike<?> var1) {
       this.rules.forEach((var1x, var2) -> {
-         if (var1.contains(var1x.id)) {
-            var2.deserialize(var1.getString(var1x.id));
-         }
-
+         var1.get(var1x.id).asString().result().ifPresent(var2::deserialize);
       });
    }
 
+   public GameRules copy() {
+      return new GameRules((Map)this.rules.entrySet().stream().collect(ImmutableMap.toImmutableMap(Entry::getKey, (var0) -> {
+         return ((GameRules.Value)var0.getValue()).copy();
+      })));
+   }
+
    public static void visitGameRuleTypes(GameRules.GameRuleTypeVisitor var0) {
       GAME_RULE_TYPES.forEach((var1, var2) -> {
-         cap(var0, var1, var2);
+         callVisitorCap(var0, var1, var2);
       });
    }
 
-   private static <T extends GameRules.Value<T>> void cap(GameRules.GameRuleTypeVisitor var0, GameRules.Key<?> var1, GameRules.Type<?> var2) {
+   private static <T extends GameRules.Value<T>> void callVisitorCap(GameRules.GameRuleTypeVisitor var0, GameRules.Key<?> var1, GameRules.Type<?> var2) {
       var0.visit(var1, var2);
+      var2.callVisitor(var0, var1);
    }
 
+   public void assignFrom(GameRules var1, @Nullable MinecraftServer var2) {
+      var1.rules.keySet().forEach((var3) -> {
+         this.assignCap(var3, var1, var2);
+      });
+   }
+
+   private <T extends GameRules.Value<T>> void assignCap(GameRules.Key<T> var1, GameRules var2, @Nullable MinecraftServer var3) {
+      GameRules.Value var4 = var2.getRule(var1);
+      this.getRule(var1).setFrom(var4, var3);
+   }
+
    public boolean getBoolean(GameRules.Key<GameRules.BooleanValue> var1) {
       return ((GameRules.BooleanValue)this.getRule(var1)).get();
    }
 
    public int getInt(GameRules.Key<GameRules.IntegerValue> var1) {
       return ((GameRules.IntegerValue)this.getRule(var1)).get();
    }
 
+   static {
+      RULE_DOFIRETICK = register("doFireTick", GameRules.Category.UPDATES, GameRules.BooleanValue.create(true));
+      RULE_MOBGRIEFING = register("mobGriefing", GameRules.Category.MOBS, GameRules.BooleanValue.create(true));
+      RULE_KEEPINVENTORY = register("keepInventory", GameRules.Category.PLAYER, GameRules.BooleanValue.create(false));
+      RULE_DOMOBSPAWNING = register("doMobSpawning", GameRules.Category.SPAWNING, GameRules.BooleanValue.create(true));
+      RULE_DOMOBLOOT = register("doMobLoot", GameRules.Category.DROPS, GameRules.BooleanValue.create(true));
+      RULE_DOBLOCKDROPS = register("doTileDrops", GameRules.Category.DROPS, GameRules.BooleanValue.create(true));
+      RULE_DOENTITYDROPS = register("doEntityDrops", GameRules.Category.DROPS, GameRules.BooleanValue.create(true));
+      RULE_COMMANDBLOCKOUTPUT = register("commandBlockOutput", GameRules.Category.CHAT, GameRules.BooleanValue.create(true));
+      RULE_NATURAL_REGENERATION = register("naturalRegeneration", GameRules.Category.PLAYER, GameRules.BooleanValue.create(true));
+      RULE_DAYLIGHT = register("doDaylightCycle", GameRules.Category.UPDATES, GameRules.BooleanValue.create(true));
+      RULE_LOGADMINCOMMANDS = register("logAdminCommands", GameRules.Category.CHAT, GameRules.BooleanValue.create(true));
+      RULE_SHOWDEATHMESSAGES = register("showDeathMessages", GameRules.Category.CHAT, GameRules.BooleanValue.create(true));
+      RULE_RANDOMTICKING = register("randomTickSpeed", GameRules.Category.UPDATES, GameRules.IntegerValue.create(3));
+      RULE_SENDCOMMANDFEEDBACK = register("sendCommandFeedback", GameRules.Category.CHAT, GameRules.BooleanValue.create(true));
+      RULE_REDUCEDDEBUGINFO = register("reducedDebugInfo", GameRules.Category.MISC, GameRules.BooleanValue.create(false, (var0, var1) -> {
+         int var2 = var1.get() ? 22 : 23;
+         Iterator var3 = var0.getPlayerList().getPlayers().iterator();
+
+         while(var3.hasNext()) {
+            ServerPlayer var4 = (ServerPlayer)var3.next();
+            var4.connection.send(new ClientboundEntityEventPacket(var4, (byte)var2));
+         }
+
+      }));
+      RULE_SPECTATORSGENERATECHUNKS = register("spectatorsGenerateChunks", GameRules.Category.PLAYER, GameRules.BooleanValue.create(true));
+      RULE_SPAWN_RADIUS = register("spawnRadius", GameRules.Category.PLAYER, GameRules.IntegerValue.create(10));
+      RULE_DISABLE_ELYTRA_MOVEMENT_CHECK = register("disableElytraMovementCheck", GameRules.Category.PLAYER, GameRules.BooleanValue.create(false));
+      RULE_MAX_ENTITY_CRAMMING = register("maxEntityCramming", GameRules.Category.MOBS, GameRules.IntegerValue.create(24));
+      RULE_WEATHER_CYCLE = register("doWeatherCycle", GameRules.Category.UPDATES, GameRules.BooleanValue.create(true));
+      RULE_LIMITED_CRAFTING = register("doLimitedCrafting", GameRules.Category.PLAYER, GameRules.BooleanValue.create(false));
+      RULE_MAX_COMMAND_CHAIN_LENGTH = register("maxCommandChainLength", GameRules.Category.MISC, GameRules.IntegerValue.create(65536));
+      RULE_ANNOUNCE_ADVANCEMENTS = register("announceAdvancements", GameRules.Category.CHAT, GameRules.BooleanValue.create(true));
+      RULE_DISABLE_RAIDS = register("disableRaids", GameRules.Category.MOBS, GameRules.BooleanValue.create(false));
+      RULE_DOINSOMNIA = register("doInsomnia", GameRules.Category.SPAWNING, GameRules.BooleanValue.create(true));
+      RULE_DO_IMMEDIATE_RESPAWN = register("doImmediateRespawn", GameRules.Category.PLAYER, GameRules.BooleanValue.create(false, (var0, var1) -> {
+         Iterator var2 = var0.getPlayerList().getPlayers().iterator();
+
+         while(var2.hasNext()) {
+            ServerPlayer var3 = (ServerPlayer)var2.next();
+            var3.connection.send(new ClientboundGameEventPacket(11, var1.get() ? 1.0F : 0.0F));
+         }
+
+      }));
+      RULE_DROWNING_DAMAGE = register("drowningDamage", GameRules.Category.PLAYER, GameRules.BooleanValue.create(true));
+      RULE_FALL_DAMAGE = register("fallDamage", GameRules.Category.PLAYER, GameRules.BooleanValue.create(true));
+      RULE_FIRE_DAMAGE = register("fireDamage", GameRules.Category.PLAYER, GameRules.BooleanValue.create(true));
+      RULE_DO_PATROL_SPAWNING = register("doPatrolSpawning", GameRules.Category.SPAWNING, GameRules.BooleanValue.create(true));
+      RULE_DO_TRADER_SPAWNING = register("doTraderSpawning", GameRules.Category.SPAWNING, GameRules.BooleanValue.create(true));
+   }
+
    public static class BooleanValue extends GameRules.Value<GameRules.BooleanValue> {
       private boolean value;
 
       private static GameRules.Type<GameRules.BooleanValue> create(boolean var0, BiConsumer<MinecraftServer, GameRules.BooleanValue> var1) {
          return new GameRules.Type(BoolArgumentType::bool, (var1x) -> {
             return new GameRules.BooleanValue(var1x, var0);
-         }, var1);
+         }, var1, GameRules.GameRuleTypeVisitor::visitBoolean);
       }
 
       private static GameRules.Type<GameRules.BooleanValue> create(boolean var0) {
          return create(var0, (var0x, var1) -> {
          });
@@ -165,11 +224,11 @@
       public void set(boolean var1, @Nullable MinecraftServer var2) {
          this.value = var1;
          this.onChanged(var2);
       }
 
-      protected String serialize() {
+      public String serialize() {
          return Boolean.toString(this.value);
       }
 
       protected void deserialize(String var1) {
          this.value = Boolean.parseBoolean(var1);
@@ -180,19 +239,28 @@
       }
 
       protected GameRules.BooleanValue getSelf() {
          return this;
       }
+
+      protected GameRules.BooleanValue copy() {
+         return new GameRules.BooleanValue(this.type, this.value);
+      }
+
+      public void setFrom(GameRules.BooleanValue var1, @Nullable MinecraftServer var2) {
+         this.value = var1.value;
+         this.onChanged(var2);
+      }
    }
 
    public static class IntegerValue extends GameRules.Value<GameRules.IntegerValue> {
       private int value;
 
       private static GameRules.Type<GameRules.IntegerValue> create(int var0, BiConsumer<MinecraftServer, GameRules.IntegerValue> var1) {
          return new GameRules.Type(IntegerArgumentType::integer, (var1x) -> {
             return new GameRules.IntegerValue(var1x, var0);
-         }, var1);
+         }, var1, GameRules.GameRuleTypeVisitor::visitInteger);
       }
 
       private static GameRules.Type<GameRules.IntegerValue> create(int var0) {
          return create(var0, (var0x, var1) -> {
          });
@@ -209,18 +277,27 @@
 
       public int get() {
          return this.value;
       }
 
-      protected String serialize() {
+      public String serialize() {
          return Integer.toString(this.value);
       }
 
       protected void deserialize(String var1) {
          this.value = safeParse(var1);
       }
 
+      public boolean tryDeserialize(String var1) {
+         try {
+            this.value = Integer.parseInt(var1);
+            return true;
+         } catch (NumberFormatException var3) {
+            return false;
+         }
+      }
+
       private static int safeParse(String var0) {
          if (!var0.isEmpty()) {
             try {
                return Integer.parseInt(var0);
             } catch (NumberFormatException var2) {
@@ -236,14 +313,23 @@
       }
 
       protected GameRules.IntegerValue getSelf() {
          return this;
       }
+
+      protected GameRules.IntegerValue copy() {
+         return new GameRules.IntegerValue(this.type, this.value);
+      }
+
+      public void setFrom(GameRules.IntegerValue var1, @Nullable MinecraftServer var2) {
+         this.value = var1.value;
+         this.onChanged(var2);
+      }
    }
 
    public abstract static class Value<T extends GameRules.Value<T>> {
-      private final GameRules.Type<T> type;
+      protected final GameRules.Type<T> type;
 
       public Value(GameRules.Type<T> var1) {
          this.type = var1;
       }
 
@@ -261,46 +347,58 @@
 
       }
 
       protected abstract void deserialize(String var1);
 
-      protected abstract String serialize();
+      public abstract String serialize();
 
       public String toString() {
          return this.serialize();
       }
 
       public abstract int getCommandResult();
 
       protected abstract T getSelf();
+
+      protected abstract T copy();
+
+      public abstract void setFrom(T var1, @Nullable MinecraftServer var2);
    }
 
    public static class Type<T extends GameRules.Value<T>> {
       private final Supplier<ArgumentType<?>> argument;
       private final Function<GameRules.Type<T>, T> constructor;
       private final BiConsumer<MinecraftServer, T> callback;
+      private final GameRules.VisitorCaller<T> visitorCaller;
 
-      private Type(Supplier<ArgumentType<?>> var1, Function<GameRules.Type<T>, T> var2, BiConsumer<MinecraftServer, T> var3) {
+      private Type(Supplier<ArgumentType<?>> var1, Function<GameRules.Type<T>, T> var2, BiConsumer<MinecraftServer, T> var3, GameRules.VisitorCaller<T> var4) {
          this.argument = var1;
          this.constructor = var2;
          this.callback = var3;
+         this.visitorCaller = var4;
       }
 
       public RequiredArgumentBuilder<CommandSourceStack, ?> createArgument(String var1) {
          return Commands.argument(var1, (ArgumentType)this.argument.get());
       }
 
       public T createRule() {
          return (GameRules.Value)this.constructor.apply(this);
       }
+
+      public void callVisitor(GameRules.GameRuleTypeVisitor var1, GameRules.Key<T> var2) {
+         this.visitorCaller.call(var1, var2, this);
+      }
    }
 
    public static final class Key<T extends GameRules.Value<T>> {
       private final String id;
+      private final GameRules.Category category;
 
-      public Key(String var1) {
+      public Key(String var1, GameRules.Category var2) {
          this.id = var1;
+         this.category = var2;
       }
 
       public String toString() {
          return this.id;
       }
@@ -318,12 +416,50 @@
       }
 
       public String getId() {
          return this.id;
       }
+
+      public String getDescriptionId() {
+         return "gamerule." + this.id;
+      }
+
+      public GameRules.Category getCategory() {
+         return this.category;
+      }
    }
 
-   @FunctionalInterface
    public interface GameRuleTypeVisitor {
-      <T extends GameRules.Value<T>> void visit(GameRules.Key<T> var1, GameRules.Type<T> var2);
+      default <T extends GameRules.Value<T>> void visit(GameRules.Key<T> var1, GameRules.Type<T> var2) {
+      }
+
+      default void visitBoolean(GameRules.Key<GameRules.BooleanValue> var1, GameRules.Type<GameRules.BooleanValue> var2) {
+      }
+
+      default void visitInteger(GameRules.Key<GameRules.IntegerValue> var1, GameRules.Type<GameRules.IntegerValue> var2) {
+      }
    }
+
+   interface VisitorCaller<T extends GameRules.Value<T>> {
+      void call(GameRules.GameRuleTypeVisitor var1, GameRules.Key<T> var2, GameRules.Type<T> var3);
+   }
+
+   public static enum Category {
+      PLAYER("gamerule.category.player"),
+      MOBS("gamerule.category.mobs"),
+      SPAWNING("gamerule.category.spawning"),
+      DROPS("gamerule.category.drops"),
+      UPDATES("gamerule.category.updates"),
+      CHAT("gamerule.category.chat"),
+      MISC("gamerule.category.misc");
+
+      private final String descriptionId;
+
+      private Category(String var3) {
+         this.descriptionId = var3;
+      }
+
+      public String getDescriptionId() {
+         return this.descriptionId;
+      }
+   }
 }
