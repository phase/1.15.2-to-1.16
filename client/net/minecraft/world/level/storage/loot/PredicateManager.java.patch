--- net/minecraft/world/level/storage/loot/PredicateManager.java
+++ net/minecraft/world/level/storage/loot/PredicateManager.java
@@ -1,29 +1,30 @@
 package net.minecraft.world.level.storage.loot;
 
 import com.google.common.collect.ImmutableMap;
 import com.google.common.collect.ImmutableMap.Builder;
 import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.JsonObject;
+import com.google.gson.JsonElement;
 import java.util.Collections;
 import java.util.Map;
 import java.util.Set;
+import java.util.function.Predicate;
 import javax.annotation.Nullable;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.server.packs.resources.ResourceManager;
 import net.minecraft.server.packs.resources.SimpleJsonResourceReloadListener;
 import net.minecraft.util.profiling.ProfilerFiller;
 import net.minecraft.world.level.storage.loot.parameters.LootContextParamSets;
 import net.minecraft.world.level.storage.loot.predicates.LootItemCondition;
+import net.minecraft.world.level.storage.loot.predicates.LootItemConditionType;
 import net.minecraft.world.level.storage.loot.predicates.LootItemConditions;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
 public class PredicateManager extends SimpleJsonResourceReloadListener {
    private static final Logger LOGGER = LogManager.getLogger();
-   private static final Gson GSON = (new GsonBuilder()).registerTypeAdapter(RandomValueBounds.class, new RandomValueBounds.Serializer()).registerTypeAdapter(BinomialDistributionGenerator.class, new BinomialDistributionGenerator.Serializer()).registerTypeAdapter(ConstantIntValue.class, new ConstantIntValue.Serializer()).registerTypeHierarchyAdapter(LootItemCondition.class, new LootItemConditions.Serializer()).registerTypeHierarchyAdapter(LootContext.EntityTarget.class, new LootContext.EntityTarget.Serializer()).create();
+   private static final Gson GSON = Deserializers.createConditionSerializer().create();
    private Map<ResourceLocation, LootItemCondition> conditions = ImmutableMap.of();
 
    public PredicateManager() {
       super(GSON, "predicates");
    }
@@ -31,16 +32,21 @@
    @Nullable
    public LootItemCondition get(ResourceLocation var1) {
       return (LootItemCondition)this.conditions.get(var1);
    }
 
-   protected void apply(Map<ResourceLocation, JsonObject> var1, ResourceManager var2, ProfilerFiller var3) {
+   protected void apply(Map<ResourceLocation, JsonElement> var1, ResourceManager var2, ProfilerFiller var3) {
       Builder var4 = ImmutableMap.builder();
       var1.forEach((var1x, var2x) -> {
          try {
-            LootItemCondition var3 = (LootItemCondition)GSON.fromJson(var2x, LootItemCondition.class);
-            var4.put(var1x, var3);
+            if (var2x.isJsonArray()) {
+               LootItemCondition[] var3 = (LootItemCondition[])GSON.fromJson(var2x, LootItemCondition[].class);
+               var4.put(var1x, new PredicateManager.CompositePredicate(var3));
+            } else {
+               LootItemCondition var5 = (LootItemCondition)GSON.fromJson(var2x, LootItemCondition.class);
+               var4.put(var1x, var5);
+            }
          } catch (Exception var4x) {
             LOGGER.error("Couldn't parse loot table {}", var1x, var4x);
          }
 
       });
@@ -58,6 +64,33 @@
    }
 
    public Set<ResourceLocation> getKeys() {
       return Collections.unmodifiableSet(this.conditions.keySet());
    }
+
+   static class CompositePredicate implements LootItemCondition {
+      private final LootItemCondition[] terms;
+      private final Predicate<LootContext> composedPredicate;
+
+      private CompositePredicate(LootItemCondition[] var1) {
+         this.terms = var1;
+         this.composedPredicate = LootItemConditions.andConditions(var1);
+      }
+
+      public final boolean test(LootContext var1) {
+         return this.composedPredicate.test(var1);
+      }
+
+      public void validate(ValidationContext var1) {
+         LootItemCondition.super.validate(var1);
+
+         for(int var2 = 0; var2 < this.terms.length; ++var2) {
+            this.terms[var2].validate(var1.forChild(".term[" + var2 + "]"));
+         }
+
+      }
+
+      public LootItemConditionType getType() {
+         throw new UnsupportedOperationException();
+      }
+   }
 }
