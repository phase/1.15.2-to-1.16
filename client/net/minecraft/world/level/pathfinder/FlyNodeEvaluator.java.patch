--- net/minecraft/world/level/pathfinder/FlyNodeEvaluator.java
+++ net/minecraft/world/level/pathfinder/FlyNodeEvaluator.java
@@ -4,16 +4,18 @@
 import java.util.EnumSet;
 import java.util.HashSet;
 import java.util.Iterator;
 import javax.annotation.Nullable;
 import net.minecraft.core.BlockPos;
+import net.minecraft.tags.BlockTags;
 import net.minecraft.util.Mth;
 import net.minecraft.world.entity.Mob;
 import net.minecraft.world.level.BlockGetter;
 import net.minecraft.world.level.PathNavigationRegion;
 import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.Blocks;
+import net.minecraft.world.level.block.state.BlockState;
 
 public class FlyNodeEvaluator extends WalkNodeEvaluator {
    public FlyNodeEvaluator() {
    }
 
@@ -39,11 +41,11 @@
          }
       } else {
          var1 = Mth.floor(this.mob.getY() + 0.5D);
       }
 
-      BlockPos var8 = new BlockPos(this.mob);
+      BlockPos var8 = this.mob.blockPosition();
       BlockPathTypes var9 = this.getBlockPathType(this.mob, var8.getX(), var1, var8.getZ());
       if (this.mob.getPathfindingMalus(var9) < 0.0F) {
          HashSet var4 = Sets.newHashSet();
          var4.add(new BlockPos(this.mob.getBoundingBox().minX, (double)var1, this.mob.getBoundingBox().minZ));
          var4.add(new BlockPos(this.mob.getBoundingBox().minX, (double)var1, this.mob.getBoundingBox().maxZ));
@@ -228,11 +230,11 @@
    }
 
    public BlockPathTypes getBlockPathType(BlockGetter var1, int var2, int var3, int var4, Mob var5, int var6, int var7, int var8, boolean var9, boolean var10) {
       EnumSet var11 = EnumSet.noneOf(BlockPathTypes.class);
       BlockPathTypes var12 = BlockPathTypes.BLOCKED;
-      BlockPos var13 = new BlockPos(var5);
+      BlockPos var13 = var5.blockPosition();
       var12 = this.getBlockPathTypes(var1, var2, var3, var4, var6, var7, var8, var9, var10, var11, var12, var13);
       if (var11.contains(BlockPathTypes.FENCE)) {
          return BlockPathTypes.FENCE;
       } else {
          BlockPathTypes var14 = BlockPathTypes.BLOCKED;
@@ -256,36 +258,37 @@
          }
       }
    }
 
    public BlockPathTypes getBlockPathType(BlockGetter var1, int var2, int var3, int var4) {
-      BlockPathTypes var5 = getBlockPathTypeRaw(var1, var2, var3, var4);
-      if (var5 == BlockPathTypes.OPEN && var3 >= 1) {
-         Block var6 = var1.getBlockState(new BlockPos(var2, var3 - 1, var4)).getBlock();
-         BlockPathTypes var7 = getBlockPathTypeRaw(var1, var2, var3 - 1, var4);
-         if (var7 != BlockPathTypes.DAMAGE_FIRE && var6 != Blocks.MAGMA_BLOCK && var7 != BlockPathTypes.LAVA && var6 != Blocks.CAMPFIRE) {
-            if (var7 == BlockPathTypes.DAMAGE_CACTUS) {
-               var5 = BlockPathTypes.DAMAGE_CACTUS;
-            } else if (var7 == BlockPathTypes.DAMAGE_OTHER) {
-               var5 = BlockPathTypes.DAMAGE_OTHER;
-            } else if (var7 == BlockPathTypes.COCOA) {
-               var5 = BlockPathTypes.COCOA;
-            } else if (var7 == BlockPathTypes.FENCE) {
-               var5 = BlockPathTypes.FENCE;
+      BlockPos.MutableBlockPos var5 = new BlockPos.MutableBlockPos();
+      BlockPathTypes var6 = getBlockPathTypeRaw(var1, var5.set(var2, var3, var4));
+      if (var6 == BlockPathTypes.OPEN && var3 >= 1) {
+         BlockState var7 = var1.getBlockState(var5.set(var2, var3 - 1, var4));
+         BlockPathTypes var8 = getBlockPathTypeRaw(var1, var5.set(var2, var3 - 1, var4));
+         if (var8 != BlockPathTypes.DAMAGE_FIRE && !var7.is(Blocks.MAGMA_BLOCK) && var8 != BlockPathTypes.LAVA && !var7.is(BlockTags.CAMPFIRES)) {
+            if (var8 == BlockPathTypes.DAMAGE_CACTUS) {
+               var6 = BlockPathTypes.DAMAGE_CACTUS;
+            } else if (var8 == BlockPathTypes.DAMAGE_OTHER) {
+               var6 = BlockPathTypes.DAMAGE_OTHER;
+            } else if (var8 == BlockPathTypes.COCOA) {
+               var6 = BlockPathTypes.COCOA;
+            } else if (var8 == BlockPathTypes.FENCE) {
+               var6 = BlockPathTypes.FENCE;
             } else {
-               var5 = var7 != BlockPathTypes.WALKABLE && var7 != BlockPathTypes.OPEN && var7 != BlockPathTypes.WATER ? BlockPathTypes.WALKABLE : BlockPathTypes.OPEN;
+               var6 = var8 != BlockPathTypes.WALKABLE && var8 != BlockPathTypes.OPEN && var8 != BlockPathTypes.WATER ? BlockPathTypes.WALKABLE : BlockPathTypes.OPEN;
             }
          } else {
-            var5 = BlockPathTypes.DAMAGE_FIRE;
+            var6 = BlockPathTypes.DAMAGE_FIRE;
          }
       }
 
-      if (var5 == BlockPathTypes.WALKABLE || var5 == BlockPathTypes.OPEN) {
-         var5 = checkNeighbourBlocks(var1, var2, var3, var4, var5);
+      if (var6 == BlockPathTypes.WALKABLE || var6 == BlockPathTypes.OPEN) {
+         var6 = checkNeighbourBlocks(var1, var5.set(var2, var3, var4), var6);
       }
 
-      return var5;
+      return var6;
    }
 
    private BlockPathTypes getBlockPathType(Mob var1, BlockPos var2) {
       return this.getBlockPathType(var1, var2.getX(), var2.getY(), var2.getZ());
    }
