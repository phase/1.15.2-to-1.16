--- net/minecraft/world/level/pathfinder/PathFinder.java
+++ net/minecraft/world/level/pathfinder/PathFinder.java
@@ -1,29 +1,29 @@
 package net.minecraft.world.level.pathfinder;
 
+import com.google.common.collect.ImmutableSet;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Sets;
 import java.util.ArrayList;
 import java.util.Comparator;
+import java.util.HashSet;
 import java.util.Iterator;
 import java.util.Map;
 import java.util.Optional;
 import java.util.Set;
 import java.util.function.Function;
 import java.util.stream.Collectors;
-import java.util.stream.Stream;
 import javax.annotation.Nullable;
 import net.minecraft.core.BlockPos;
 import net.minecraft.world.entity.Mob;
 import net.minecraft.world.level.PathNavigationRegion;
 
 public class PathFinder {
-   private final BinaryHeap openSet = new BinaryHeap();
-   private final Set<Node> closedSet = Sets.newHashSet();
    private final Node[] neighbors = new Node[32];
    private final int maxVisitedNodes;
    private final NodeEvaluator nodeEvaluator;
+   private final BinaryHeap openSet = new BinaryHeap();
 
    public PathFinder(NodeEvaluator var1, int var2) {
       this.nodeEvaluator = var1;
       this.maxVisitedNodes = var2;
    }
@@ -46,70 +46,71 @@
       Set var6 = var2.keySet();
       var1.g = 0.0F;
       var1.h = this.getBestH(var1, var6);
       var1.f = var1.h;
       this.openSet.clear();
-      this.closedSet.clear();
       this.openSet.insert(var1);
-      int var7 = 0;
-      int var8 = (int)((float)this.maxVisitedNodes * var5);
+      ImmutableSet var7 = ImmutableSet.of();
+      int var8 = 0;
+      HashSet var9 = Sets.newHashSetWithExpectedSize(var6.size());
+      int var10 = (int)((float)this.maxVisitedNodes * var5);
 
       while(!this.openSet.isEmpty()) {
-         ++var7;
-         if (var7 >= var8) {
+         ++var8;
+         if (var8 >= var10) {
             break;
          }
 
-         Node var9 = this.openSet.pop();
-         var9.closed = true;
-         var6.stream().filter((var2x) -> {
-            return var9.distanceManhattan((Node)var2x) <= (float)var4;
-         }).forEach(Target::setReached);
-         if (var6.stream().anyMatch(Target::isReached)) {
+         Node var11 = this.openSet.pop();
+         var11.closed = true;
+         Iterator var12 = var6.iterator();
+
+         while(var12.hasNext()) {
+            Target var13 = (Target)var12.next();
+            if (var11.distanceManhattan((Node)var13) <= (float)var4) {
+               var13.setReached();
+               var9.add(var13);
+            }
+         }
+
+         if (!var9.isEmpty()) {
             break;
          }
 
-         if (var9.distanceTo(var1) < var3) {
-            int var10 = this.nodeEvaluator.getNeighbors(this.neighbors, var9);
+         if (var11.distanceTo(var1) < var3) {
+            int var18 = this.nodeEvaluator.getNeighbors(this.neighbors, var11);
 
-            for(int var11 = 0; var11 < var10; ++var11) {
-               Node var12 = this.neighbors[var11];
-               float var13 = var9.distanceTo(var12);
-               var12.walkedDistance = var9.walkedDistance + var13;
-               float var14 = var9.g + var13 + var12.costMalus;
-               if (var12.walkedDistance < var3 && (!var12.inOpenSet() || var14 < var12.g)) {
-                  var12.cameFrom = var9;
-                  var12.g = var14;
-                  var12.h = this.getBestH(var12, var6) * 1.5F;
-                  if (var12.inOpenSet()) {
-                     this.openSet.changeCost(var12, var12.g + var12.h);
+            for(int var20 = 0; var20 < var18; ++var20) {
+               Node var14 = this.neighbors[var20];
+               float var15 = var11.distanceTo(var14);
+               var14.walkedDistance = var11.walkedDistance + var15;
+               float var16 = var11.g + var15 + var14.costMalus;
+               if (var14.walkedDistance < var3 && (!var14.inOpenSet() || var16 < var14.g)) {
+                  var14.cameFrom = var11;
+                  var14.g = var16;
+                  var14.h = this.getBestH(var14, var6) * 1.5F;
+                  if (var14.inOpenSet()) {
+                     this.openSet.changeCost(var14, var14.g + var14.h);
                   } else {
-                     var12.f = var12.g + var12.h;
-                     this.openSet.insert(var12);
+                     var14.f = var14.g + var14.h;
+                     this.openSet.insert(var14);
                   }
                }
             }
          }
       }
 
-      Stream var15;
-      if (var6.stream().anyMatch(Target::isReached)) {
-         var15 = var6.stream().filter(Target::isReached).map((var2x) -> {
-            return this.reconstructPath(var2x.getBestNode(), (BlockPos)var2.get(var2x), true);
-         }).sorted(Comparator.comparingInt(Path::getSize));
-      } else {
-         var15 = var6.stream().map((var2x) -> {
-            return this.reconstructPath(var2x.getBestNode(), (BlockPos)var2.get(var2x), false);
-         }).sorted(Comparator.comparingDouble(Path::getDistToTarget).thenComparingInt(Path::getSize));
-      }
-
-      Optional var16 = var15.findFirst();
-      if (!var16.isPresent()) {
+      Optional var17 = !var9.isEmpty() ? var9.stream().map((var2x) -> {
+         return this.reconstructPath(var2x.getBestNode(), (BlockPos)var2.get(var2x), true);
+      }).min(Comparator.comparingInt(Path::getSize)) : var6.stream().map((var2x) -> {
+         return this.reconstructPath(var2x.getBestNode(), (BlockPos)var2.get(var2x), false);
+      }).min(Comparator.comparingDouble(Path::getDistToTarget).thenComparingInt(Path::getSize));
+      if (!var17.isPresent()) {
          return null;
       } else {
-         Path var17 = (Path)var16.get();
-         return var17;
+         Path var19 = (Path)var17.get();
+         return var19;
       }
    }
 
    private float getBestH(Node var1, Set<Target> var2) {
       float var3 = Float.MAX_VALUE;
