--- net/minecraft/world/level/block/StructureBlock.java
+++ net/minecraft/world/level/block/StructureBlock.java
@@ -1,41 +1,43 @@
 package net.minecraft.world.level.block;
 
 import javax.annotation.Nullable;
 import net.minecraft.core.BlockPos;
+import net.minecraft.server.level.ServerLevel;
 import net.minecraft.world.InteractionHand;
 import net.minecraft.world.InteractionResult;
 import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.player.Player;
-import net.minecraft.world.item.BlockPlaceContext;
 import net.minecraft.world.item.ItemStack;
+import net.minecraft.world.item.context.BlockPlaceContext;
 import net.minecraft.world.level.BlockGetter;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.block.entity.BlockEntity;
 import net.minecraft.world.level.block.entity.StructureBlockEntity;
+import net.minecraft.world.level.block.state.BlockBehaviour;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.block.state.StateDefinition;
 import net.minecraft.world.level.block.state.properties.BlockStateProperties;
 import net.minecraft.world.level.block.state.properties.EnumProperty;
 import net.minecraft.world.level.block.state.properties.StructureMode;
 import net.minecraft.world.phys.BlockHitResult;
 
 public class StructureBlock extends BaseEntityBlock {
    public static final EnumProperty<StructureMode> MODE;
 
-   protected StructureBlock(Block.Properties var1) {
+   protected StructureBlock(BlockBehaviour.Properties var1) {
       super(var1);
    }
 
    public BlockEntity newBlockEntity(BlockGetter var1) {
       return new StructureBlockEntity();
    }
 
    public InteractionResult use(BlockState var1, Level var2, BlockPos var3, Player var4, InteractionHand var5, BlockHitResult var6) {
       BlockEntity var7 = var2.getBlockEntity(var3);
       if (var7 instanceof StructureBlockEntity) {
-         return ((StructureBlockEntity)var7).usedBy(var4) ? InteractionResult.SUCCESS : InteractionResult.PASS;
+         return ((StructureBlockEntity)var7).usedBy(var4) ? InteractionResult.sidedSuccess(var2.isClientSide) : InteractionResult.PASS;
       } else {
          return InteractionResult.PASS;
       }
    }
 
@@ -62,37 +64,37 @@
    protected void createBlockStateDefinition(StateDefinition.Builder<Block, BlockState> var1) {
       var1.add(MODE);
    }
 
    public void neighborChanged(BlockState var1, Level var2, BlockPos var3, Block var4, BlockPos var5, boolean var6) {
-      if (!var2.isClientSide) {
+      if (var2 instanceof ServerLevel) {
          BlockEntity var7 = var2.getBlockEntity(var3);
          if (var7 instanceof StructureBlockEntity) {
             StructureBlockEntity var8 = (StructureBlockEntity)var7;
             boolean var9 = var2.hasNeighborSignal(var3);
             boolean var10 = var8.isPowered();
             if (var9 && !var10) {
                var8.setPowered(true);
-               this.trigger(var8);
+               this.trigger((ServerLevel)var2, var8);
             } else if (!var9 && var10) {
                var8.setPowered(false);
             }
 
          }
       }
    }
 
-   private void trigger(StructureBlockEntity var1) {
-      switch(var1.getMode()) {
+   private void trigger(ServerLevel var1, StructureBlockEntity var2) {
+      switch(var2.getMode()) {
       case SAVE:
-         var1.saveStructure(false);
+         var2.saveStructure(false);
          break;
       case LOAD:
-         var1.loadStructure(false);
+         var2.loadStructure(var1, false);
          break;
       case CORNER:
-         var1.unloadStructure();
+         var2.unloadStructure();
       case DATA:
       }
 
    }
 
