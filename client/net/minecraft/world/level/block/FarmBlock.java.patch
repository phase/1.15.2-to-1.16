--- net/minecraft/world/level/block/FarmBlock.java
+++ net/minecraft/world/level/block/FarmBlock.java
@@ -14,10 +14,11 @@
 import net.minecraft.world.level.GameRules;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.LevelAccessor;
 import net.minecraft.world.level.LevelReader;
 import net.minecraft.world.level.block.piston.MovingPistonBlock;
+import net.minecraft.world.level.block.state.BlockBehaviour;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.block.state.StateDefinition;
 import net.minecraft.world.level.block.state.properties.BlockStateProperties;
 import net.minecraft.world.level.block.state.properties.IntegerProperty;
 import net.minecraft.world.level.pathfinder.PathComputationType;
@@ -26,11 +27,11 @@
 
 public class FarmBlock extends Block {
    public static final IntegerProperty MOISTURE;
    protected static final VoxelShape SHAPE;
 
-   protected FarmBlock(Block.Properties var1) {
+   protected FarmBlock(BlockBehaviour.Properties var1) {
       super(var1);
       this.registerDefaultState((BlockState)((BlockState)this.stateDefinition.any()).setValue(MOISTURE, 0));
    }
 
    public BlockState updateShape(BlockState var1, Direction var2, BlockState var3, LevelAccessor var4, BlockPos var5, BlockPos var6) {
@@ -59,23 +60,26 @@
    }
 
    public void tick(BlockState var1, ServerLevel var2, BlockPos var3, Random var4) {
       if (!var1.canSurvive(var2, var3)) {
          turnToDirt(var1, var2, var3);
-      } else {
-         int var5 = (Integer)var1.getValue(MOISTURE);
-         if (!isNearWater(var2, var3) && !var2.isRainingAt(var3.above())) {
-            if (var5 > 0) {
-               var2.setBlock(var3, (BlockState)var1.setValue(MOISTURE, var5 - 1), 2);
-            } else if (!isUnderCrops(var2, var3)) {
-               turnToDirt(var1, var2, var3);
-            }
-         } else if (var5 < 7) {
-            var2.setBlock(var3, (BlockState)var1.setValue(MOISTURE, 7), 2);
-         }
+      }
 
+   }
+
+   public void randomTick(BlockState var1, ServerLevel var2, BlockPos var3, Random var4) {
+      int var5 = (Integer)var1.getValue(MOISTURE);
+      if (!isNearWater(var2, var3) && !var2.isRainingAt(var3.above())) {
+         if (var5 > 0) {
+            var2.setBlock(var3, (BlockState)var1.setValue(MOISTURE, var5 - 1), 2);
+         } else if (!isUnderCrops(var2, var3)) {
+            turnToDirt(var1, var2, var3);
+         }
+      } else if (var5 < 7) {
+         var2.setBlock(var3, (BlockState)var1.setValue(MOISTURE, 7), 2);
       }
+
    }
 
    public void fallOn(Level var1, BlockPos var2, Entity var3, float var4) {
       if (!var1.isClientSide && var1.random.nextFloat() < var4 - 0.5F && var3 instanceof LivingEntity && (var3 instanceof Player || var1.getGameRules().getBoolean(GameRules.RULE_MOBGRIEFING)) && var3.getBbWidth() * var3.getBbWidth() * var3.getBbHeight() > 0.512F) {
          turnToDirt(var1.getBlockState(var2), var1, var2);
@@ -114,14 +118,10 @@
 
    public boolean isPathfindable(BlockState var1, BlockGetter var2, BlockPos var3, PathComputationType var4) {
       return false;
    }
 
-   public boolean isViewBlocking(BlockState var1, BlockGetter var2, BlockPos var3) {
-      return true;
-   }
-
    static {
       MOISTURE = BlockStateProperties.MOISTURE;
       SHAPE = Block.box(0.0D, 0.0D, 0.0D, 16.0D, 15.0D, 16.0D);
    }
 }
