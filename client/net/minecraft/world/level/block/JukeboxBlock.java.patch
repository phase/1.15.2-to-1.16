--- net/minecraft/world/level/block/JukeboxBlock.java
+++ net/minecraft/world/level/block/JukeboxBlock.java
@@ -1,40 +1,56 @@
 package net.minecraft.world.level.block;
 
+import javax.annotation.Nullable;
 import net.minecraft.core.BlockPos;
+import net.minecraft.nbt.CompoundTag;
 import net.minecraft.world.InteractionHand;
 import net.minecraft.world.InteractionResult;
+import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.item.ItemEntity;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.item.Item;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.RecordItem;
 import net.minecraft.world.level.BlockGetter;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.LevelAccessor;
 import net.minecraft.world.level.block.entity.BlockEntity;
 import net.minecraft.world.level.block.entity.JukeboxBlockEntity;
+import net.minecraft.world.level.block.state.BlockBehaviour;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.block.state.StateDefinition;
 import net.minecraft.world.level.block.state.properties.BlockStateProperties;
 import net.minecraft.world.level.block.state.properties.BooleanProperty;
 import net.minecraft.world.phys.BlockHitResult;
 
 public class JukeboxBlock extends BaseEntityBlock {
    public static final BooleanProperty HAS_RECORD;
 
-   protected JukeboxBlock(Block.Properties var1) {
+   protected JukeboxBlock(BlockBehaviour.Properties var1) {
       super(var1);
       this.registerDefaultState((BlockState)((BlockState)this.stateDefinition.any()).setValue(HAS_RECORD, false));
    }
 
+   public void setPlacedBy(Level var1, BlockPos var2, BlockState var3, @Nullable LivingEntity var4, ItemStack var5) {
+      super.setPlacedBy(var1, var2, var3, var4, var5);
+      CompoundTag var6 = var5.getOrCreateTag();
+      if (var6.contains("BlockEntityTag")) {
+         CompoundTag var7 = var6.getCompound("BlockEntityTag");
+         if (var7.contains("RecordItem")) {
+            var1.setBlock(var2, (BlockState)var3.setValue(HAS_RECORD, true), 2);
+         }
+      }
+
+   }
+
    public InteractionResult use(BlockState var1, Level var2, BlockPos var3, Player var4, InteractionHand var5, BlockHitResult var6) {
       if ((Boolean)var1.getValue(HAS_RECORD)) {
          this.dropRecording(var2, var3);
          var1 = (BlockState)var1.setValue(HAS_RECORD, false);
          var2.setBlock(var3, var1, 2);
-         return InteractionResult.SUCCESS;
+         return InteractionResult.sidedSuccess(var2.isClientSide);
       } else {
          return InteractionResult.PASS;
       }
    }
 
@@ -67,11 +83,11 @@
          }
       }
    }
 
    public void onRemove(BlockState var1, Level var2, BlockPos var3, BlockState var4, boolean var5) {
-      if (var1.getBlock() != var4.getBlock()) {
+      if (!var1.is(var4.getBlock())) {
          this.dropRecording(var2, var3);
          super.onRemove(var1, var2, var3, var4, var5);
       }
    }
 
