--- net/minecraft/world/level/block/BeehiveBlock.java
+++ net/minecraft/world/level/block/BeehiveBlock.java
@@ -2,10 +2,11 @@
 
 import java.util.Iterator;
 import java.util.List;
 import java.util.Random;
 import javax.annotation.Nullable;
+import net.minecraft.Util;
 import net.minecraft.advancements.CriteriaTriggers;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.core.particles.ParticleTypes;
 import net.minecraft.nbt.CompoundTag;
@@ -15,10 +16,11 @@
 import net.minecraft.tags.BlockTags;
 import net.minecraft.util.Mth;
 import net.minecraft.world.InteractionHand;
 import net.minecraft.world.InteractionResult;
 import net.minecraft.world.entity.Entity;
+import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.animal.Bee;
 import net.minecraft.world.entity.boss.wither.WitherBoss;
 import net.minecraft.world.entity.item.ItemEntity;
 import net.minecraft.world.entity.item.PrimedTnt;
 import net.minecraft.world.entity.monster.Creeper;
@@ -34,10 +36,11 @@
 import net.minecraft.world.level.GameRules;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.LevelAccessor;
 import net.minecraft.world.level.block.entity.BeehiveBlockEntity;
 import net.minecraft.world.level.block.entity.BlockEntity;
+import net.minecraft.world.level.block.state.BlockBehaviour;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.block.state.StateDefinition;
 import net.minecraft.world.level.block.state.properties.BlockStateProperties;
 import net.minecraft.world.level.block.state.properties.DirectionProperty;
 import net.minecraft.world.level.block.state.properties.IntegerProperty;
@@ -46,15 +49,15 @@
 import net.minecraft.world.phys.AABB;
 import net.minecraft.world.phys.BlockHitResult;
 import net.minecraft.world.phys.shapes.VoxelShape;
 
 public class BeehiveBlock extends BaseEntityBlock {
-   public static final Direction[] SPAWN_DIRECTIONS;
+   private static final Direction[] SPAWN_DIRECTIONS;
    public static final DirectionProperty FACING;
    public static final IntegerProperty HONEY_LEVEL;
 
-   public BeehiveBlock(Block.Properties var1) {
+   public BeehiveBlock(BlockBehaviour.Properties var1) {
       super(var1);
       this.registerDefaultState((BlockState)((BlockState)((BlockState)this.stateDefinition.any()).setValue(HONEY_LEVEL, 0)).setValue(FACING, Direction.NORTH));
    }
 
    public boolean hasAnalogOutputSignal(BlockState var1) {
@@ -88,11 +91,11 @@
          Iterator var6 = var3.iterator();
 
          while(var6.hasNext()) {
             Bee var7 = (Bee)var6.next();
             if (var7.getTarget() == null) {
-               var7.makeAngry((Entity)var4.get(var1.random.nextInt(var5)));
+               var7.setTarget((LivingEntity)var4.get(var1.random.nextInt(var5)));
             }
          }
       }
 
    }
@@ -101,49 +104,45 @@
       popResource(var0, var1, new ItemStack(Items.HONEYCOMB, 3));
    }
 
    public InteractionResult use(BlockState var1, Level var2, BlockPos var3, Player var4, InteractionHand var5, BlockHitResult var6) {
       ItemStack var7 = var4.getItemInHand(var5);
-      ItemStack var8 = var7.copy();
-      int var9 = (Integer)var1.getValue(HONEY_LEVEL);
-      boolean var10 = false;
-      if (var9 >= 5) {
+      int var8 = (Integer)var1.getValue(HONEY_LEVEL);
+      boolean var9 = false;
+      if (var8 >= 5) {
          if (var7.getItem() == Items.SHEARS) {
             var2.playSound(var4, var4.getX(), var4.getY(), var4.getZ(), SoundEvents.BEEHIVE_SHEAR, SoundSource.NEUTRAL, 1.0F, 1.0F);
             dropHoneycomb(var2, var3);
             var7.hurtAndBreak(1, var4, (var1x) -> {
                var1x.broadcastBreakEvent(var5);
             });
-            var10 = true;
+            var9 = true;
          } else if (var7.getItem() == Items.GLASS_BOTTLE) {
             var7.shrink(1);
             var2.playSound(var4, var4.getX(), var4.getY(), var4.getZ(), SoundEvents.BOTTLE_FILL, SoundSource.NEUTRAL, 1.0F, 1.0F);
             if (var7.isEmpty()) {
                var4.setItemInHand(var5, new ItemStack(Items.HONEY_BOTTLE));
             } else if (!var4.inventory.add(new ItemStack(Items.HONEY_BOTTLE))) {
                var4.drop(new ItemStack(Items.HONEY_BOTTLE), false);
             }
 
-            var10 = true;
+            var9 = true;
          }
       }
 
-      if (var10) {
-         if (!CampfireBlock.isSmokeyPos(var2, var3, 5)) {
+      if (var9) {
+         if (!CampfireBlock.isSmokeyPos(var2, var3)) {
             if (this.hiveContainsBees(var2, var3)) {
                this.angerNearbyBees(var2, var3);
             }
 
             this.releaseBeesAndResetHoneyLevel(var2, var1, var3, var4, BeehiveBlockEntity.BeeReleaseStatus.EMERGENCY);
          } else {
             this.resetHoneyLevel(var2, var1, var3);
-            if (var4 instanceof ServerPlayer) {
-               CriteriaTriggers.SAFELY_HARVEST_HONEY.trigger((ServerPlayer)var4, var3, var8);
-            }
          }
 
-         return InteractionResult.SUCCESS;
+         return InteractionResult.sidedSuccess(var2.isClientSide);
       } else {
          return super.use(var1, var2, var3, var4, var5, var6);
       }
    }
 
@@ -281,10 +280,14 @@
       }
 
       return super.updateShape(var1, var2, var3, var4, var5, var6);
    }
 
+   public static Direction getRandomOffset(Random var0) {
+      return (Direction)Util.getRandom((Object[])SPAWN_DIRECTIONS, var0);
+   }
+
    static {
       SPAWN_DIRECTIONS = new Direction[]{Direction.WEST, Direction.EAST, Direction.SOUTH};
       FACING = HorizontalDirectionalBlock.FACING;
       HONEY_LEVEL = BlockStateProperties.LEVEL_HONEY;
    }
