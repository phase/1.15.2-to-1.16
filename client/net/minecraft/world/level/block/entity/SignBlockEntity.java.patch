--- net/minecraft/world/level/block/entity/SignBlockEntity.java
+++ net/minecraft/world/level/block/entity/SignBlockEntity.java
@@ -1,36 +1,42 @@
 package net.minecraft.world.level.block.entity;
 
 import com.mojang.brigadier.exceptions.CommandSyntaxException;
-import java.util.function.Function;
+import java.util.function.UnaryOperator;
 import javax.annotation.Nullable;
 import net.minecraft.commands.CommandSource;
 import net.minecraft.commands.CommandSourceStack;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.network.chat.ClickEvent;
 import net.minecraft.network.chat.Component;
 import net.minecraft.network.chat.ComponentUtils;
+import net.minecraft.network.chat.FormattedText;
+import net.minecraft.network.chat.MutableComponent;
 import net.minecraft.network.chat.Style;
 import net.minecraft.network.chat.TextComponent;
 import net.minecraft.network.protocol.game.ClientboundBlockEntityDataPacket;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.item.DyeColor;
+import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.phys.Vec2;
 import net.minecraft.world.phys.Vec3;
 
 public class SignBlockEntity extends BlockEntity {
-   public final Component[] messages = new Component[]{new TextComponent(""), new TextComponent(""), new TextComponent(""), new TextComponent("")};
-   private boolean isEditable = true;
+   private final Component[] messages;
+   private boolean isEditable;
    private Player playerWhoMayEdit;
-   private final String[] renderMessages = new String[4];
+   private final FormattedText[] renderMessages;
    private DyeColor color;
 
    public SignBlockEntity() {
       super(BlockEntityType.SIGN);
+      this.messages = new Component[]{TextComponent.EMPTY, TextComponent.EMPTY, TextComponent.EMPTY, TextComponent.EMPTY};
+      this.isEditable = true;
+      this.renderMessages = new FormattedText[4];
       this.color = DyeColor.BLACK;
    }
 
    public CompoundTag save(CompoundTag var1) {
       super.save(var1);
@@ -42,46 +48,42 @@
 
       var1.putString("Color", this.color.getName());
       return var1;
    }
 
-   public void load(CompoundTag var1) {
+   public void load(BlockState var1, CompoundTag var2) {
       this.isEditable = false;
-      super.load(var1);
-      this.color = DyeColor.byName(var1.getString("Color"), DyeColor.BLACK);
+      super.load(var1, var2);
+      this.color = DyeColor.byName(var2.getString("Color"), DyeColor.BLACK);
 
-      for(int var2 = 0; var2 < 4; ++var2) {
-         String var3 = var1.getString("Text" + (var2 + 1));
-         Component var4 = Component.Serializer.fromJson(var3.isEmpty() ? "\"\"" : var3);
+      for(int var3 = 0; var3 < 4; ++var3) {
+         String var4 = var2.getString("Text" + (var3 + 1));
+         MutableComponent var5 = Component.Serializer.fromJson(var4.isEmpty() ? "\"\"" : var4);
          if (this.level instanceof ServerLevel) {
             try {
-               this.messages[var2] = ComponentUtils.updateForEntity(this.createCommandSourceStack((ServerPlayer)null), var4, (Entity)null, 0);
-            } catch (CommandSyntaxException var6) {
-               this.messages[var2] = var4;
+               this.messages[var3] = ComponentUtils.updateForEntity(this.createCommandSourceStack((ServerPlayer)null), var5, (Entity)null, 0);
+            } catch (CommandSyntaxException var7) {
+               this.messages[var3] = var5;
             }
          } else {
-            this.messages[var2] = var4;
+            this.messages[var3] = var5;
          }
 
-         this.renderMessages[var2] = null;
+         this.renderMessages[var3] = null;
       }
 
    }
 
-   public Component getMessage(int var1) {
-      return this.messages[var1];
-   }
-
    public void setMessage(int var1, Component var2) {
       this.messages[var1] = var2;
       this.renderMessages[var1] = null;
    }
 
    @Nullable
-   public String getRenderMessage(int var1, Function<Component, String> var2) {
+   public FormattedText getRenderMessage(int var1, UnaryOperator<FormattedText> var2) {
       if (this.renderMessages[var1] == null && this.messages[var1] != null) {
-         this.renderMessages[var1] = (String)var2.apply(this.messages[var1]);
+         this.renderMessages[var1] = (FormattedText)var2.apply(this.messages[var1]);
       }
 
       return this.renderMessages[var1];
    }
 
@@ -137,11 +139,11 @@
    }
 
    public CommandSourceStack createCommandSourceStack(@Nullable ServerPlayer var1) {
       String var2 = var1 == null ? "Sign" : var1.getName().getString();
       Object var3 = var1 == null ? new TextComponent("Sign") : var1.getDisplayName();
-      return new CommandSourceStack(CommandSource.NULL, new Vec3((double)this.worldPosition.getX() + 0.5D, (double)this.worldPosition.getY() + 0.5D, (double)this.worldPosition.getZ() + 0.5D), Vec2.ZERO, (ServerLevel)this.level, 2, var2, (Component)var3, this.level.getServer(), var1);
+      return new CommandSourceStack(CommandSource.NULL, Vec3.atCenterOf(this.worldPosition), Vec2.ZERO, (ServerLevel)this.level, 2, var2, (Component)var3, this.level.getServer(), var1);
    }
 
    public DyeColor getColor() {
       return this.color;
    }
