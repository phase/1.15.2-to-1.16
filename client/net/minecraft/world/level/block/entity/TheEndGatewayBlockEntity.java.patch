--- net/minecraft/world/level/block/entity/TheEndGatewayBlockEntity.java
+++ net/minecraft/world/level/block/entity/TheEndGatewayBlockEntity.java
@@ -2,26 +2,28 @@
 
 import java.util.Iterator;
 import java.util.List;
 import java.util.Random;
 import javax.annotation.Nullable;
+import net.minecraft.advancements.CriteriaTriggers;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.NbtUtils;
 import net.minecraft.network.protocol.game.ClientboundBlockEntityDataPacket;
 import net.minecraft.server.level.ServerLevel;
+import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.util.Mth;
 import net.minecraft.world.entity.Entity;
+import net.minecraft.world.entity.projectile.ThrownEnderpearl;
 import net.minecraft.world.level.BlockGetter;
 import net.minecraft.world.level.ChunkPos;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.chunk.LevelChunk;
-import net.minecraft.world.level.dimension.end.TheEndDimension;
 import net.minecraft.world.level.levelgen.feature.Feature;
 import net.minecraft.world.level.levelgen.feature.configurations.EndGatewayConfiguration;
 import net.minecraft.world.level.levelgen.feature.configurations.FeatureConfiguration;
 import net.minecraft.world.phys.AABB;
 import net.minecraft.world.phys.Vec3;
@@ -52,22 +54,22 @@
       }
 
       return var1;
    }
 
-   public void load(CompoundTag var1) {
-      super.load(var1);
-      this.age = var1.getLong("Age");
-      if (var1.contains("ExitPortal", 10)) {
-         this.exitPortal = NbtUtils.readBlockPos(var1.getCompound("ExitPortal"));
+   public void load(BlockState var1, CompoundTag var2) {
+      super.load(var1, var2);
+      this.age = var2.getLong("Age");
+      if (var2.contains("ExitPortal", 10)) {
+         this.exitPortal = NbtUtils.readBlockPos(var2.getCompound("ExitPortal"));
       }
 
-      this.exactTeleport = var1.getBoolean("ExactTeleport");
+      this.exactTeleport = var2.getBoolean("ExactTeleport");
    }
 
    public double getViewDistance() {
-      return 65536.0D;
+      return 256.0D;
    }
 
    public void tick() {
       boolean var1 = this.isSpawning();
       boolean var2 = this.isCoolingDown();
@@ -75,11 +77,11 @@
       if (var2) {
          --this.teleportCooldown;
       } else if (!this.level.isClientSide) {
          List var3 = this.level.getEntitiesOfClass(Entity.class, new AABB(this.getBlockPos()));
          if (!var3.isEmpty()) {
-            this.teleportEntity(((Entity)var3.get(0)).getRootVehicle());
+            this.teleportEntity((Entity)var3.get(this.level.random.nextInt(var3.size())));
          }
 
          if (this.age % 2400L == 0L) {
             this.triggerCooldown();
          }
@@ -135,17 +137,34 @@
    }
 
    public void teleportEntity(Entity var1) {
       if (this.level instanceof ServerLevel && !this.isCoolingDown()) {
          this.teleportCooldown = 100;
-         if (this.exitPortal == null && this.level.dimension instanceof TheEndDimension) {
+         if (this.exitPortal == null && this.level.dimension() == Level.END) {
             this.findExitPortal((ServerLevel)this.level);
          }
 
          if (this.exitPortal != null) {
             BlockPos var2 = this.exactTeleport ? this.exitPortal : this.findExitPosition();
-            var1.teleportToWithTicket((double)var2.getX() + 0.5D, (double)var2.getY() + 0.5D, (double)var2.getZ() + 0.5D);
+            Entity var3;
+            if (var1 instanceof ThrownEnderpearl) {
+               Entity var4 = ((ThrownEnderpearl)var1).getOwner();
+               if (var4 instanceof ServerPlayer) {
+                  CriteriaTriggers.ENTER_BLOCK.trigger((ServerPlayer)var4, this.level.getBlockState(this.getBlockPos()));
+               }
+
+               if (var4 != null) {
+                  var3 = var4;
+                  var1.remove();
+               } else {
+                  var3 = var1;
+               }
+            } else {
+               var3 = var1.getRootVehicle();
+            }
+
+            var3.teleportToWithTicket((double)var2.getX() + 0.5D, (double)var2.getY(), (double)var2.getZ() + 0.5D);
          }
 
          this.triggerCooldown();
       }
    }
@@ -173,11 +192,11 @@
       LevelChunk var5 = getChunk(var1, var3);
       this.exitPortal = findValidSpawnInChunk(var5);
       if (this.exitPortal == null) {
          this.exitPortal = new BlockPos(var3.x + 0.5D, 75.0D, var3.z + 0.5D);
          LOGGER.debug("Failed to find suitable block, settling on {}", this.exitPortal);
-         Feature.END_ISLAND.configured(FeatureConfiguration.NONE).place(var1, var1.getChunkSource().getGenerator(), new Random(this.exitPortal.asLong()), this.exitPortal);
+         Feature.END_ISLAND.configured(FeatureConfiguration.NONE).place(var1, var1.structureFeatureManager(), var1.getChunkSource().getGenerator(), new Random(this.exitPortal.asLong()), this.exitPortal);
       } else {
          LOGGER.debug("Found block at {}", this.exitPortal);
       }
 
       this.exitPortal = findTallestBlock(var1, this.exitPortal, 16, true);
@@ -194,11 +213,11 @@
          for(int var6 = -var2; var6 <= var2; ++var6) {
             if (var5 != 0 || var6 != 0 || var3) {
                for(int var7 = 255; var7 > (var4 == null ? 0 : var4.getY()); --var7) {
                   BlockPos var8 = new BlockPos(var1.getX() + var5, var7, var1.getZ() + var6);
                   BlockState var9 = var0.getBlockState(var8);
-                  if (var9.isCollisionShapeFullBlock(var0, var8) && (var3 || var9.getBlock() != Blocks.BEDROCK)) {
+                  if (var9.isCollisionShapeFullBlock(var0, var8) && (var3 || !var9.is(Blocks.BEDROCK))) {
                      var4 = var8;
                      break;
                   }
                }
             }
@@ -238,11 +257,11 @@
 
                      var9 = (BlockPos)var8.next();
                      var10 = var0.getBlockState(var9);
                      var11 = var9.above();
                      var12 = var9.above(2);
-                  } while(var10.getBlock() != Blocks.END_STONE);
+                  } while(!var10.is(Blocks.END_STONE));
                } while(var0.getBlockState(var11).isCollisionShapeFullBlock(var0, var11));
             } while(var0.getBlockState(var12).isCollisionShapeFullBlock(var0, var12));
 
             var13 = var9.distSqr(0.0D, 0.0D, 0.0D, true);
          } while(var5 != null && var13 >= var6);
@@ -251,11 +270,11 @@
          var6 = var13;
       }
    }
 
    private void createExitPortal(ServerLevel var1, BlockPos var2) {
-      Feature.END_GATEWAY.configured(EndGatewayConfiguration.knownExit(this.getBlockPos(), false)).place(var1, var1.getChunkSource().getGenerator(), new Random(), var2);
+      Feature.END_GATEWAY.configured(EndGatewayConfiguration.knownExit(this.getBlockPos(), false)).place(var1, var1.structureFeatureManager(), var1.getChunkSource().getGenerator(), new Random(), var2);
    }
 
    public boolean shouldRenderFace(Direction var1) {
       return Block.shouldRenderFace(this.getBlockState(), this.level, this.getBlockPos(), var1);
    }
