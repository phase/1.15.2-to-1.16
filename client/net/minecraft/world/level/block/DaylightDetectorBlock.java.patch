--- net/minecraft/world/level/block/DaylightDetectorBlock.java
+++ net/minecraft/world/level/block/DaylightDetectorBlock.java
@@ -9,10 +9,11 @@
 import net.minecraft.world.level.BlockGetter;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.LightLayer;
 import net.minecraft.world.level.block.entity.BlockEntity;
 import net.minecraft.world.level.block.entity.DaylightDetectorBlockEntity;
+import net.minecraft.world.level.block.state.BlockBehaviour;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.block.state.StateDefinition;
 import net.minecraft.world.level.block.state.properties.BlockStateProperties;
 import net.minecraft.world.level.block.state.properties.BooleanProperty;
 import net.minecraft.world.level.block.state.properties.IntegerProperty;
@@ -23,11 +24,11 @@
 public class DaylightDetectorBlock extends BaseEntityBlock {
    public static final IntegerProperty POWER;
    public static final BooleanProperty INVERTED;
    protected static final VoxelShape SHAPE;
 
-   public DaylightDetectorBlock(Block.Properties var1) {
+   public DaylightDetectorBlock(BlockBehaviour.Properties var1) {
       super(var1);
       this.registerDefaultState((BlockState)((BlockState)((BlockState)this.stateDefinition.any()).setValue(POWER, 0)).setValue(INVERTED, false));
    }
 
    public VoxelShape getShape(BlockState var1, BlockGetter var2, BlockPos var3, CollisionContext var4) {
@@ -41,11 +42,11 @@
    public int getSignal(BlockState var1, BlockGetter var2, BlockPos var3, Direction var4) {
       return (Integer)var1.getValue(POWER);
    }
 
    public static void updateSignalStrength(BlockState var0, Level var1, BlockPos var2) {
-      if (var1.dimension.isHasSkyLight()) {
+      if (var1.dimensionType().hasSkyLight()) {
          int var3 = var1.getBrightness(LightLayer.SKY, var2) - var1.getSkyDarken();
          float var4 = var1.getSunAngle(1.0F);
          boolean var5 = (Boolean)var0.getValue(INVERTED);
          if (var5) {
             var3 = 15 - var3;
@@ -69,11 +70,11 @@
             return InteractionResult.SUCCESS;
          } else {
             BlockState var7 = (BlockState)var1.cycle(INVERTED);
             var2.setBlock(var3, var7, 4);
             updateSignalStrength(var7, var2, var3);
-            return InteractionResult.SUCCESS;
+            return InteractionResult.CONSUME;
          }
       } else {
          return super.use(var1, var2, var3, var4, var5, var6);
       }
    }
