--- net/minecraft/world/level/block/ObserverBlock.java
+++ net/minecraft/world/level/block/ObserverBlock.java
@@ -6,19 +6,20 @@
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.world.item.BlockPlaceContext;
 import net.minecraft.world.level.BlockGetter;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.LevelAccessor;
+import net.minecraft.world.level.block.state.BlockBehaviour;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.block.state.StateDefinition;
 import net.minecraft.world.level.block.state.properties.BlockStateProperties;
 import net.minecraft.world.level.block.state.properties.BooleanProperty;
 
 public class ObserverBlock extends DirectionalBlock {
    public static final BooleanProperty POWERED;
 
-   public ObserverBlock(Block.Properties var1) {
+   public ObserverBlock(BlockBehaviour.Properties var1) {
       super(var1);
       this.registerDefaultState((BlockState)((BlockState)((BlockState)this.stateDefinition.any()).setValue(FACING, Direction.SOUTH)).setValue(POWERED, false));
    }
 
    protected void createBlockStateDefinition(StateDefinition.Builder<Block, BlockState> var1) {
@@ -77,22 +78,22 @@
    public int getSignal(BlockState var1, BlockGetter var2, BlockPos var3, Direction var4) {
       return (Boolean)var1.getValue(POWERED) && var1.getValue(FACING) == var4 ? 15 : 0;
    }
 
    public void onPlace(BlockState var1, Level var2, BlockPos var3, BlockState var4, boolean var5) {
-      if (var1.getBlock() != var4.getBlock()) {
+      if (!var1.is(var4.getBlock())) {
          if (!var2.isClientSide() && (Boolean)var1.getValue(POWERED) && !var2.getBlockTicks().hasScheduledTick(var3, this)) {
             BlockState var6 = (BlockState)var1.setValue(POWERED, false);
             var2.setBlock(var3, var6, 18);
             this.updateNeighborsInFront(var2, var3, var6);
          }
 
       }
    }
 
    public void onRemove(BlockState var1, Level var2, BlockPos var3, BlockState var4, boolean var5) {
-      if (var1.getBlock() != var4.getBlock()) {
+      if (!var1.is(var4.getBlock())) {
          if (!var2.isClientSide && (Boolean)var1.getValue(POWERED) && var2.getBlockTicks().hasScheduledTick(var3, this)) {
             this.updateNeighborsInFront(var2, var3, (BlockState)var1.setValue(POWERED, false));
          }
 
       }
