--- net/minecraft/world/level/block/FireBlock.java
+++ net/minecraft/world/level/block/FireBlock.java
@@ -2,66 +2,80 @@
 
 import it.unimi.dsi.fastutil.objects.Object2IntMap;
 import it.unimi.dsi.fastutil.objects.Object2IntOpenHashMap;
 import java.util.Map;
 import java.util.Random;
-import javax.annotation.Nullable;
 import net.minecraft.Util;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
-import net.minecraft.core.Vec3i;
-import net.minecraft.core.particles.ParticleTypes;
 import net.minecraft.server.level.ServerLevel;
-import net.minecraft.sounds.SoundEvents;
-import net.minecraft.sounds.SoundSource;
 import net.minecraft.world.item.BlockPlaceContext;
 import net.minecraft.world.level.BlockGetter;
 import net.minecraft.world.level.GameRules;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.LevelAccessor;
 import net.minecraft.world.level.LevelReader;
+import net.minecraft.world.level.block.state.BlockBehaviour;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.block.state.StateDefinition;
 import net.minecraft.world.level.block.state.properties.BlockStateProperties;
 import net.minecraft.world.level.block.state.properties.BooleanProperty;
 import net.minecraft.world.level.block.state.properties.IntegerProperty;
-import net.minecraft.world.level.dimension.DimensionType;
-import net.minecraft.world.level.dimension.end.TheEndDimension;
 import net.minecraft.world.phys.shapes.CollisionContext;
 import net.minecraft.world.phys.shapes.Shapes;
 import net.minecraft.world.phys.shapes.VoxelShape;
 
-public class FireBlock extends Block {
+public class FireBlock extends BaseFireBlock {
    public static final IntegerProperty AGE;
    public static final BooleanProperty NORTH;
    public static final BooleanProperty EAST;
    public static final BooleanProperty SOUTH;
    public static final BooleanProperty WEST;
    public static final BooleanProperty UP;
    private static final Map<Direction, BooleanProperty> PROPERTY_BY_DIRECTION;
    private final Object2IntMap<Block> flameOdds = new Object2IntOpenHashMap();
    private final Object2IntMap<Block> burnOdds = new Object2IntOpenHashMap();
 
-   protected FireBlock(Block.Properties var1) {
-      super(var1);
+   public FireBlock(BlockBehaviour.Properties var1) {
+      super(var1, 1.0F);
       this.registerDefaultState((BlockState)((BlockState)((BlockState)((BlockState)((BlockState)((BlockState)((BlockState)this.stateDefinition.any()).setValue(AGE, 0)).setValue(NORTH, false)).setValue(EAST, false)).setValue(SOUTH, false)).setValue(WEST, false)).setValue(UP, false));
    }
 
-   public VoxelShape getShape(BlockState var1, BlockGetter var2, BlockPos var3, CollisionContext var4) {
-      return Shapes.empty();
+   public BlockState updateShape(BlockState var1, Direction var2, BlockState var3, LevelAccessor var4, BlockPos var5, BlockPos var6) {
+      return this.canSurvive(var1, var4, var5) ? this.getStateWithAge(var4, var5, (Integer)var1.getValue(AGE)) : Blocks.AIR.defaultBlockState();
    }
 
-   public BlockState updateShape(BlockState var1, Direction var2, BlockState var3, LevelAccessor var4, BlockPos var5, BlockPos var6) {
-      return this.canSurvive(var1, var4, var5) ? (BlockState)this.getStateForPlacement(var4, var5).setValue(AGE, var1.getValue(AGE)) : Blocks.AIR.defaultBlockState();
+   public VoxelShape getShape(BlockState var1, BlockGetter var2, BlockPos var3, CollisionContext var4) {
+      VoxelShape var5 = Shapes.empty();
+      if ((Boolean)var1.getValue(UP)) {
+         var5 = UP_AABB;
+      }
+
+      if ((Boolean)var1.getValue(WEST)) {
+         var5 = Shapes.or(var5, WEST_AABB);
+      }
+
+      if ((Boolean)var1.getValue(EAST)) {
+         var5 = Shapes.or(var5, EAST_AABB);
+      }
+
+      if ((Boolean)var1.getValue(NORTH)) {
+         var5 = Shapes.or(var5, NORTH_AABB);
+      }
+
+      if ((Boolean)var1.getValue(SOUTH)) {
+         var5 = Shapes.or(var5, SOUTH_AABB);
+      }
+
+      return var5 == Shapes.empty() ? DOWN_AABB : var5;
    }
 
-   @Nullable
    public BlockState getStateForPlacement(BlockPlaceContext var1) {
       return this.getStateForPlacement(var1.getLevel(), var1.getClickedPos());
    }
 
-   public BlockState getStateForPlacement(BlockGetter var1, BlockPos var2) {
+   protected BlockState getStateForPlacement(BlockGetter var1, BlockPos var2) {
       BlockPos var3 = var2.below();
       BlockState var4 = var1.getBlockState(var3);
       if (!this.canBurn(var4) && !var4.isFaceSturdy(var1, var3, Direction.UP)) {
          BlockState var5 = this.defaultBlockState();
          Direction[] var6 = Direction.values();
@@ -84,22 +98,19 @@
    public boolean canSurvive(BlockState var1, LevelReader var2, BlockPos var3) {
       BlockPos var4 = var3.below();
       return var2.getBlockState(var4).isFaceSturdy(var2, var4, Direction.UP) || this.isValidFireLocation(var2, var3);
    }
 
-   public int getTickDelay(LevelReader var1) {
-      return 30;
-   }
-
    public void tick(BlockState var1, ServerLevel var2, BlockPos var3, Random var4) {
+      var2.getBlockTicks().scheduleTick(var3, this, getFireTickDelay(var2.random));
       if (var2.getGameRules().getBoolean(GameRules.RULE_DOFIRETICK)) {
          if (!var1.canSurvive(var2, var3)) {
             var2.removeBlock(var3, false);
          }
 
-         Block var5 = var2.getBlockState(var3.below()).getBlock();
-         boolean var6 = var2.dimension instanceof TheEndDimension && var5 == Blocks.BEDROCK || var5 == Blocks.NETHERRACK || var5 == Blocks.MAGMA_BLOCK;
+         BlockState var5 = var2.getBlockState(var3.below());
+         boolean var6 = var5.is(var2.dimensionType().infiniburn());
          int var7 = (Integer)var1.getValue(AGE);
          if (!var6 && var2.isRaining() && this.isNearRain(var2, var3) && var4.nextFloat() < 0.2F + (float)var7 * 0.03F) {
             var2.removeBlock(var3, false);
          } else {
             int var8 = Math.min(15, var7 + var4.nextInt(3) / 2);
@@ -107,11 +118,10 @@
                var1 = (BlockState)var1.setValue(AGE, var8);
                var2.setBlock(var3, var1, 4);
             }
 
             if (!var6) {
-               var2.getBlockTicks().scheduleTick(var3, this, this.getTickDelay(var2) + var4.nextInt(10));
                if (!this.isValidFireLocation(var2, var3)) {
                   BlockPos var19 = var3.below();
                   if (!var2.getBlockState(var19).isFaceSturdy(var2, var19, Direction.UP) || var7 > 3) {
                      var2.removeBlock(var3, false);
                   }
@@ -142,21 +152,21 @@
                         int var15 = 100;
                         if (var14 > 1) {
                            var15 += (var14 - 1) * 100;
                         }
 
-                        var11.set((Vec3i)var3).move(var12, var14, var13);
+                        var11.setWithOffset(var3, var12, var14, var13);
                         int var16 = this.getFireOdds(var2, var11);
                         if (var16 > 0) {
                            int var17 = (var16 + 40 + var2.getDifficulty().getId() * 7) / (var7 + 30);
                            if (var9) {
                               var17 /= 2;
                            }
 
                            if (var17 > 0 && var4.nextInt(var15) <= var17 && (!var2.isRaining() || !this.isNearRain(var2, var11))) {
                               int var18 = Math.min(15, var7 + var4.nextInt(5) / 4);
-                              var2.setBlock(var11, (BlockState)this.getStateForPlacement(var2, var11).setValue(AGE, var18), 3);
+                              var2.setBlock(var11, this.getStateWithAge(var2, var11, var18), 3);
                            }
                         }
                      }
                   }
                }
@@ -182,11 +192,11 @@
       int var6 = this.getBurnOdd(var1.getBlockState(var2));
       if (var4.nextInt(var3) < var6) {
          BlockState var7 = var1.getBlockState(var2);
          if (var4.nextInt(var5 + 10) < 5 && !var1.isRainingAt(var2)) {
             int var8 = Math.min(var5 + var4.nextInt(5) / 4, 15);
-            var1.setBlock(var2, (BlockState)this.getStateForPlacement(var1, var2).setValue(AGE, var8), 3);
+            var1.setBlock(var2, this.getStateWithAge(var1, var2, var8), 3);
          } else {
             var1.removeBlock(var2, false);
          }
 
          Block var9 = var7.getBlock();
@@ -196,10 +206,15 @@
          }
       }
 
    }
 
+   private BlockState getStateWithAge(LevelAccessor var1, BlockPos var2, int var3) {
+      BlockState var4 = getState(var1, var2);
+      return var4.is(Blocks.FIRE) ? (BlockState)var4.setValue(AGE, var3) : var4;
+   }
+
    private boolean isValidFireLocation(BlockGetter var1, BlockPos var2) {
       Direction[] var3 = Direction.values();
       int var4 = var3.length;
 
       for(int var5 = 0; var5 < var4; ++var5) {
@@ -228,98 +243,28 @@
 
          return var3;
       }
    }
 
-   public boolean canBurn(BlockState var1) {
+   protected boolean canBurn(BlockState var1) {
       return this.getFlameOdds(var1) > 0;
    }
 
    public void onPlace(BlockState var1, Level var2, BlockPos var3, BlockState var4, boolean var5) {
-      if (var4.getBlock() != var1.getBlock()) {
-         if (var2.dimension.getType() != DimensionType.OVERWORLD && var2.dimension.getType() != DimensionType.NETHER || !((NetherPortalBlock)Blocks.NETHER_PORTAL).trySpawnPortal(var2, var3)) {
-            if (!var1.canSurvive(var2, var3)) {
-               var2.removeBlock(var3, false);
-            } else {
-               var2.getBlockTicks().scheduleTick(var3, this, this.getTickDelay(var2) + var2.random.nextInt(10));
-            }
-         }
-      }
+      super.onPlace(var1, var2, var3, var4, var5);
+      var2.getBlockTicks().scheduleTick(var3, this, getFireTickDelay(var2.random));
    }
 
-   public void animateTick(BlockState var1, Level var2, BlockPos var3, Random var4) {
-      if (var4.nextInt(24) == 0) {
-         var2.playLocalSound((double)((float)var3.getX() + 0.5F), (double)((float)var3.getY() + 0.5F), (double)((float)var3.getZ() + 0.5F), SoundEvents.FIRE_AMBIENT, SoundSource.BLOCKS, 1.0F + var4.nextFloat(), var4.nextFloat() * 0.7F + 0.3F, false);
-      }
-
-      BlockPos var5 = var3.below();
-      BlockState var6 = var2.getBlockState(var5);
-      int var7;
-      double var8;
-      double var10;
-      double var12;
-      if (!this.canBurn(var6) && !var6.isFaceSturdy(var2, var5, Direction.UP)) {
-         if (this.canBurn(var2.getBlockState(var3.west()))) {
-            for(var7 = 0; var7 < 2; ++var7) {
-               var8 = (double)var3.getX() + var4.nextDouble() * 0.10000000149011612D;
-               var10 = (double)var3.getY() + var4.nextDouble();
-               var12 = (double)var3.getZ() + var4.nextDouble();
-               var2.addParticle(ParticleTypes.LARGE_SMOKE, var8, var10, var12, 0.0D, 0.0D, 0.0D);
-            }
-         }
-
-         if (this.canBurn(var2.getBlockState(var3.east()))) {
-            for(var7 = 0; var7 < 2; ++var7) {
-               var8 = (double)(var3.getX() + 1) - var4.nextDouble() * 0.10000000149011612D;
-               var10 = (double)var3.getY() + var4.nextDouble();
-               var12 = (double)var3.getZ() + var4.nextDouble();
-               var2.addParticle(ParticleTypes.LARGE_SMOKE, var8, var10, var12, 0.0D, 0.0D, 0.0D);
-            }
-         }
-
-         if (this.canBurn(var2.getBlockState(var3.north()))) {
-            for(var7 = 0; var7 < 2; ++var7) {
-               var8 = (double)var3.getX() + var4.nextDouble();
-               var10 = (double)var3.getY() + var4.nextDouble();
-               var12 = (double)var3.getZ() + var4.nextDouble() * 0.10000000149011612D;
-               var2.addParticle(ParticleTypes.LARGE_SMOKE, var8, var10, var12, 0.0D, 0.0D, 0.0D);
-            }
-         }
-
-         if (this.canBurn(var2.getBlockState(var3.south()))) {
-            for(var7 = 0; var7 < 2; ++var7) {
-               var8 = (double)var3.getX() + var4.nextDouble();
-               var10 = (double)var3.getY() + var4.nextDouble();
-               var12 = (double)(var3.getZ() + 1) - var4.nextDouble() * 0.10000000149011612D;
-               var2.addParticle(ParticleTypes.LARGE_SMOKE, var8, var10, var12, 0.0D, 0.0D, 0.0D);
-            }
-         }
-
-         if (this.canBurn(var2.getBlockState(var3.above()))) {
-            for(var7 = 0; var7 < 2; ++var7) {
-               var8 = (double)var3.getX() + var4.nextDouble();
-               var10 = (double)(var3.getY() + 1) - var4.nextDouble() * 0.10000000149011612D;
-               var12 = (double)var3.getZ() + var4.nextDouble();
-               var2.addParticle(ParticleTypes.LARGE_SMOKE, var8, var10, var12, 0.0D, 0.0D, 0.0D);
-            }
-         }
-      } else {
-         for(var7 = 0; var7 < 3; ++var7) {
-            var8 = (double)var3.getX() + var4.nextDouble();
-            var10 = (double)var3.getY() + var4.nextDouble() * 0.5D + 0.5D;
-            var12 = (double)var3.getZ() + var4.nextDouble();
-            var2.addParticle(ParticleTypes.LARGE_SMOKE, var8, var10, var12, 0.0D, 0.0D, 0.0D);
-         }
-      }
-
+   private static int getFireTickDelay(Random var0) {
+      return 30 + var0.nextInt(10);
    }
 
    protected void createBlockStateDefinition(StateDefinition.Builder<Block, BlockState> var1) {
       var1.add(AGE, NORTH, EAST, SOUTH, WEST, UP);
    }
 
-   public void setFlammable(Block var1, int var2, int var3) {
+   private void setFlammable(Block var1, int var2, int var3) {
       this.flameOdds.put(var1, var2);
       this.burnOdds.put(var1, var3);
    }
 
    public static void bootStrap() {
@@ -425,10 +370,11 @@
       var0.setFlammable(Blocks.RED_WOOL, 30, 60);
       var0.setFlammable(Blocks.BLACK_WOOL, 30, 60);
       var0.setFlammable(Blocks.VINE, 15, 100);
       var0.setFlammable(Blocks.COAL_BLOCK, 5, 5);
       var0.setFlammable(Blocks.HAY_BLOCK, 60, 20);
+      var0.setFlammable(Blocks.TARGET, 15, 20);
       var0.setFlammable(Blocks.WHITE_CARPET, 60, 20);
       var0.setFlammable(Blocks.ORANGE_CARPET, 60, 20);
       var0.setFlammable(Blocks.MAGENTA_CARPET, 60, 20);
       var0.setFlammable(Blocks.LIGHT_BLUE_CARPET, 60, 20);
       var0.setFlammable(Blocks.YELLOW_CARPET, 60, 20);
