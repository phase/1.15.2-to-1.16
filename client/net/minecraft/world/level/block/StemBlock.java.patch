--- net/minecraft/world/level/block/StemBlock.java
+++ net/minecraft/world/level/block/StemBlock.java
@@ -9,10 +9,11 @@
 import net.minecraft.world.item.Item;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.Items;
 import net.minecraft.world.level.BlockGetter;
 import net.minecraft.world.level.Level;
+import net.minecraft.world.level.block.state.BlockBehaviour;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.block.state.StateDefinition;
 import net.minecraft.world.level.block.state.properties.BlockStateProperties;
 import net.minecraft.world.level.block.state.properties.IntegerProperty;
 import net.minecraft.world.phys.shapes.CollisionContext;
@@ -21,38 +22,37 @@
 public class StemBlock extends BushBlock implements BonemealableBlock {
    public static final IntegerProperty AGE;
    protected static final VoxelShape[] SHAPE_BY_AGE;
    private final StemGrownBlock fruit;
 
-   protected StemBlock(StemGrownBlock var1, Block.Properties var2) {
+   protected StemBlock(StemGrownBlock var1, BlockBehaviour.Properties var2) {
       super(var2);
       this.fruit = var1;
       this.registerDefaultState((BlockState)((BlockState)this.stateDefinition.any()).setValue(AGE, 0));
    }
 
    public VoxelShape getShape(BlockState var1, BlockGetter var2, BlockPos var3, CollisionContext var4) {
       return SHAPE_BY_AGE[(Integer)var1.getValue(AGE)];
    }
 
    protected boolean mayPlaceOn(BlockState var1, BlockGetter var2, BlockPos var3) {
-      return var1.getBlock() == Blocks.FARMLAND;
+      return var1.is(Blocks.FARMLAND);
    }
 
-   public void tick(BlockState var1, ServerLevel var2, BlockPos var3, Random var4) {
-      super.tick(var1, var2, var3, var4);
+   public void randomTick(BlockState var1, ServerLevel var2, BlockPos var3, Random var4) {
       if (var2.getRawBrightness(var3, 0) >= 9) {
          float var5 = CropBlock.getGrowthSpeed(this, var2, var3);
          if (var4.nextInt((int)(25.0F / var5) + 1) == 0) {
             int var6 = (Integer)var1.getValue(AGE);
             if (var6 < 7) {
                var1 = (BlockState)var1.setValue(AGE, var6 + 1);
                var2.setBlock(var3, var1, 2);
             } else {
                Direction var7 = Direction.Plane.HORIZONTAL.getRandomDirection(var4);
                BlockPos var8 = var3.relative(var7);
-               Block var9 = var2.getBlockState(var8.below()).getBlock();
-               if (var2.getBlockState(var8).isAir() && (var9 == Blocks.FARMLAND || var9 == Blocks.DIRT || var9 == Blocks.COARSE_DIRT || var9 == Blocks.PODZOL || var9 == Blocks.GRASS_BLOCK)) {
+               BlockState var9 = var2.getBlockState(var8.below());
+               if (var2.getBlockState(var8).isAir() && (var9.is(Blocks.FARMLAND) || var9.is(Blocks.DIRT) || var9.is(Blocks.COARSE_DIRT) || var9.is(Blocks.PODZOL) || var9.is(Blocks.GRASS_BLOCK))) {
                   var2.setBlockAndUpdate(var8, this.fruit.defaultBlockState());
                   var2.setBlockAndUpdate(var3, (BlockState)this.fruit.getAttachedStem().defaultBlockState().setValue(HorizontalDirectionalBlock.FACING, var7));
                }
             }
          }
@@ -85,11 +85,11 @@
    public void performBonemeal(ServerLevel var1, Random var2, BlockPos var3, BlockState var4) {
       int var5 = Math.min(7, (Integer)var4.getValue(AGE) + Mth.nextInt(var1.random, 2, 5));
       BlockState var6 = (BlockState)var4.setValue(AGE, var5);
       var1.setBlock(var3, var6, 2);
       if (var5 == 7) {
-         var6.tick(var1, var3, var1.random);
+         var6.randomTick(var1, var3, var1.random);
       }
 
    }
 
    protected void createBlockStateDefinition(StateDefinition.Builder<Block, BlockState> var1) {
