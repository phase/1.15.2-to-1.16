--- net/minecraft/world/level/block/LeavesBlock.java
+++ net/minecraft/world/level/block/LeavesBlock.java
@@ -1,34 +1,39 @@
 package net.minecraft.world.level.block;
 
 import java.util.Random;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
-import net.minecraft.core.Vec3i;
 import net.minecraft.core.particles.ParticleTypes;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.tags.BlockTags;
-import net.minecraft.world.entity.EntityType;
-import net.minecraft.world.item.BlockPlaceContext;
+import net.minecraft.world.item.context.BlockPlaceContext;
 import net.minecraft.world.level.BlockGetter;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.LevelAccessor;
+import net.minecraft.world.level.block.state.BlockBehaviour;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.block.state.StateDefinition;
 import net.minecraft.world.level.block.state.properties.BlockStateProperties;
 import net.minecraft.world.level.block.state.properties.BooleanProperty;
 import net.minecraft.world.level.block.state.properties.IntegerProperty;
+import net.minecraft.world.phys.shapes.Shapes;
+import net.minecraft.world.phys.shapes.VoxelShape;
 
 public class LeavesBlock extends Block {
    public static final IntegerProperty DISTANCE;
    public static final BooleanProperty PERSISTENT;
 
-   public LeavesBlock(Block.Properties var1) {
+   public LeavesBlock(BlockBehaviour.Properties var1) {
       super(var1);
       this.registerDefaultState((BlockState)((BlockState)((BlockState)this.stateDefinition.any()).setValue(DISTANCE, 7)).setValue(PERSISTENT, false));
    }
 
+   public VoxelShape getBlockSupportShape(BlockState var1, BlockGetter var2, BlockPos var3) {
+      return Shapes.empty();
+   }
+
    public boolean isRandomlyTicking(BlockState var1) {
       return (Integer)var1.getValue(DISTANCE) == 7 && !(Boolean)var1.getValue(PERSISTENT);
    }
 
    public void randomTick(BlockState var1, ServerLevel var2, BlockPos var3, Random var4) {
@@ -56,41 +61,21 @@
       return var1;
    }
 
    private static BlockState updateDistance(BlockState var0, LevelAccessor var1, BlockPos var2) {
       int var3 = 7;
-      BlockPos.PooledMutableBlockPos var4 = BlockPos.PooledMutableBlockPos.acquire();
-      Throwable var5 = null;
+      BlockPos.MutableBlockPos var4 = new BlockPos.MutableBlockPos();
+      Direction[] var5 = Direction.values();
+      int var6 = var5.length;
 
-      try {
-         Direction[] var6 = Direction.values();
-         int var7 = var6.length;
-
-         for(int var8 = 0; var8 < var7; ++var8) {
-            Direction var9 = var6[var8];
-            var4.set((Vec3i)var2).move(var9);
-            var3 = Math.min(var3, getDistanceAt(var1.getBlockState(var4)) + 1);
-            if (var3 == 1) {
-               break;
-            }
+      for(int var7 = 0; var7 < var6; ++var7) {
+         Direction var8 = var5[var7];
+         var4.setWithOffset(var2, var8);
+         var3 = Math.min(var3, getDistanceAt(var1.getBlockState(var4)) + 1);
+         if (var3 == 1) {
+            break;
          }
-      } catch (Throwable var17) {
-         var5 = var17;
-         throw var17;
-      } finally {
-         if (var4 != null) {
-            if (var5 != null) {
-               try {
-                  var4.close();
-               } catch (Throwable var16) {
-                  var5.addSuppressed(var16);
-               }
-            } else {
-               var4.close();
-            }
-         }
-
       }
 
       return (BlockState)var0.setValue(DISTANCE, var3);
    }
 
@@ -106,27 +91,19 @@
       if (var2.isRainingAt(var3.above())) {
          if (var4.nextInt(15) == 1) {
             BlockPos var5 = var3.below();
             BlockState var6 = var2.getBlockState(var5);
             if (!var6.canOcclude() || !var6.isFaceSturdy(var2, var5, Direction.UP)) {
-               double var7 = (double)((float)var3.getX() + var4.nextFloat());
+               double var7 = (double)var3.getX() + var4.nextDouble();
                double var9 = (double)var3.getY() - 0.05D;
-               double var11 = (double)((float)var3.getZ() + var4.nextFloat());
+               double var11 = (double)var3.getZ() + var4.nextDouble();
                var2.addParticle(ParticleTypes.DRIPPING_WATER, var7, var9, var11, 0.0D, 0.0D, 0.0D);
             }
          }
       }
    }
 
-   public boolean isSuffocating(BlockState var1, BlockGetter var2, BlockPos var3) {
-      return false;
-   }
-
-   public boolean isValidSpawn(BlockState var1, BlockGetter var2, BlockPos var3, EntityType<?> var4) {
-      return var4 == EntityType.OCELOT || var4 == EntityType.PARROT;
-   }
-
    protected void createBlockStateDefinition(StateDefinition.Builder<Block, BlockState> var1) {
       var1.add(DISTANCE, PERSISTENT);
    }
 
    public BlockState getStateForPlacement(BlockPlaceContext var1) {
