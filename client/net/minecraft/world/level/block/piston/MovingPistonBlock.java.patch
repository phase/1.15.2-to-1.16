--- net/minecraft/world/level/block/piston/MovingPistonBlock.java
+++ net/minecraft/world/level/block/piston/MovingPistonBlock.java
@@ -15,10 +15,11 @@
 import net.minecraft.world.level.block.BaseEntityBlock;
 import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.Mirror;
 import net.minecraft.world.level.block.Rotation;
 import net.minecraft.world.level.block.entity.BlockEntity;
+import net.minecraft.world.level.block.state.BlockBehaviour;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.block.state.StateDefinition;
 import net.minecraft.world.level.block.state.properties.DirectionProperty;
 import net.minecraft.world.level.block.state.properties.EnumProperty;
 import net.minecraft.world.level.block.state.properties.PistonType;
@@ -32,11 +33,11 @@
 
 public class MovingPistonBlock extends BaseEntityBlock {
    public static final DirectionProperty FACING;
    public static final EnumProperty<PistonType> TYPE;
 
-   public MovingPistonBlock(Block.Properties var1) {
+   public MovingPistonBlock(BlockBehaviour.Properties var1) {
       super(var1);
       this.registerDefaultState((BlockState)((BlockState)((BlockState)this.stateDefinition.any()).setValue(FACING, Direction.NORTH)).setValue(TYPE, PistonType.DEFAULT));
    }
 
    @Nullable
@@ -47,11 +48,11 @@
    public static BlockEntity newMovingBlockEntity(BlockState var0, Direction var1, boolean var2, boolean var3) {
       return new PistonMovingBlockEntity(var0, var1, var2, var3);
    }
 
    public void onRemove(BlockState var1, Level var2, BlockPos var3, BlockState var4, boolean var5) {
-      if (var1.getBlock() != var4.getBlock()) {
+      if (!var1.is(var4.getBlock())) {
          BlockEntity var6 = var2.getBlockEntity(var3);
          if (var6 instanceof PistonMovingBlockEntity) {
             ((PistonMovingBlockEntity)var6).finalTick();
          }
 
@@ -65,18 +66,10 @@
          var1.removeBlock(var4, false);
       }
 
    }
 
-   public boolean isRedstoneConductor(BlockState var1, BlockGetter var2, BlockPos var3) {
-      return false;
-   }
-
-   public boolean isSuffocating(BlockState var1, BlockGetter var2, BlockPos var3) {
-      return false;
-   }
-
    public InteractionResult use(BlockState var1, Level var2, BlockPos var3, Player var4, InteractionHand var5, BlockHitResult var6) {
       if (!var2.isClientSide && var2.getBlockEntity(var3) == null) {
          var2.removeBlock(var3, false);
          return InteractionResult.CONSUME;
       } else {
