--- net/minecraft/world/level/block/ScaffoldingBlock.java
+++ net/minecraft/world/level/block/ScaffoldingBlock.java
@@ -2,18 +2,18 @@
 
 import java.util.Iterator;
 import java.util.Random;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
-import net.minecraft.core.Vec3i;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.world.entity.item.FallingBlockEntity;
-import net.minecraft.world.item.BlockPlaceContext;
+import net.minecraft.world.item.context.BlockPlaceContext;
 import net.minecraft.world.level.BlockGetter;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.LevelAccessor;
 import net.minecraft.world.level.LevelReader;
+import net.minecraft.world.level.block.state.BlockBehaviour;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.block.state.StateDefinition;
 import net.minecraft.world.level.block.state.properties.BlockStateProperties;
 import net.minecraft.world.level.block.state.properties.BooleanProperty;
 import net.minecraft.world.level.block.state.properties.IntegerProperty;
@@ -30,11 +30,11 @@
    private static final VoxelShape BELOW_BLOCK = Shapes.block().move(0.0D, -1.0D, 0.0D);
    public static final IntegerProperty DISTANCE;
    public static final BooleanProperty WATERLOGGED;
    public static final BooleanProperty BOTTOM;
 
-   protected ScaffoldingBlock(Block.Properties var1) {
+   protected ScaffoldingBlock(BlockBehaviour.Properties var1) {
       super(var1);
       this.registerDefaultState((BlockState)((BlockState)((BlockState)((BlockState)this.stateDefinition.any()).setValue(DISTANCE, 7)).setValue(WATERLOGGED, false)).setValue(BOTTOM, false));
    }
 
    protected void createBlockStateDefinition(StateDefinition.Builder<Block, BlockState> var1) {
@@ -113,29 +113,29 @@
    public FluidState getFluidState(BlockState var1) {
       return (Boolean)var1.getValue(WATERLOGGED) ? Fluids.WATER.getSource(false) : super.getFluidState(var1);
    }
 
    private boolean isBottom(BlockGetter var1, BlockPos var2, int var3) {
-      return var3 > 0 && var1.getBlockState(var2.below()).getBlock() != this;
+      return var3 > 0 && !var1.getBlockState(var2.below()).is(this);
    }
 
    public static int getDistance(BlockGetter var0, BlockPos var1) {
-      BlockPos.MutableBlockPos var2 = (new BlockPos.MutableBlockPos(var1)).move(Direction.DOWN);
+      BlockPos.MutableBlockPos var2 = var1.mutable().move(Direction.DOWN);
       BlockState var3 = var0.getBlockState(var2);
       int var4 = 7;
-      if (var3.getBlock() == Blocks.SCAFFOLDING) {
+      if (var3.is(Blocks.SCAFFOLDING)) {
          var4 = (Integer)var3.getValue(DISTANCE);
       } else if (var3.isFaceSturdy(var0, var2, Direction.UP)) {
          return 0;
       }
 
       Iterator var5 = Direction.Plane.HORIZONTAL.iterator();
 
       while(var5.hasNext()) {
          Direction var6 = (Direction)var5.next();
-         BlockState var7 = var0.getBlockState(var2.set((Vec3i)var1).move(var6));
-         if (var7.getBlock() == Blocks.SCAFFOLDING) {
+         BlockState var7 = var0.getBlockState(var2.setWithOffset(var1, var6));
+         if (var7.is(Blocks.SCAFFOLDING)) {
             var4 = Math.min(var4, (Integer)var7.getValue(DISTANCE) + 1);
             if (var4 == 1) {
                break;
             }
          }
