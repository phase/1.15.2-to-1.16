--- net/minecraft/world/level/block/TripWireHookBlock.java
+++ net/minecraft/world/level/block/TripWireHookBlock.java
@@ -8,16 +8,17 @@
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.sounds.SoundEvents;
 import net.minecraft.sounds.SoundSource;
 import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.player.Player;
-import net.minecraft.world.item.BlockPlaceContext;
 import net.minecraft.world.item.ItemStack;
+import net.minecraft.world.item.context.BlockPlaceContext;
 import net.minecraft.world.level.BlockGetter;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.LevelAccessor;
 import net.minecraft.world.level.LevelReader;
+import net.minecraft.world.level.block.state.BlockBehaviour;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.block.state.StateDefinition;
 import net.minecraft.world.level.block.state.properties.BlockStateProperties;
 import net.minecraft.world.level.block.state.properties.BooleanProperty;
 import net.minecraft.world.level.block.state.properties.DirectionProperty;
@@ -31,11 +32,11 @@
    protected static final VoxelShape NORTH_AABB;
    protected static final VoxelShape SOUTH_AABB;
    protected static final VoxelShape WEST_AABB;
    protected static final VoxelShape EAST_AABB;
 
-   public TripWireHookBlock(Block.Properties var1) {
+   public TripWireHookBlock(BlockBehaviour.Properties var1) {
       super(var1);
       this.registerDefaultState((BlockState)((BlockState)((BlockState)((BlockState)this.stateDefinition.any()).setValue(FACING, Direction.NORTH)).setValue(POWERED, false)).setValue(ATTACHED, false));
    }
 
    public VoxelShape getShape(BlockState var1, BlockGetter var2, BlockPos var3, CollisionContext var4) {
@@ -54,11 +55,11 @@
 
    public boolean canSurvive(BlockState var1, LevelReader var2, BlockPos var3) {
       Direction var4 = (Direction)var1.getValue(FACING);
       BlockPos var5 = var3.relative(var4.getOpposite());
       BlockState var6 = var2.getBlockState(var5);
-      return var4.getAxis().isHorizontal() && var6.isFaceSturdy(var2, var5, var4) && !var6.isSignalSource();
+      return var4.getAxis().isHorizontal() && var6.isFaceSturdy(var2, var5, var4);
    }
 
    public BlockState updateShape(BlockState var1, Direction var2, BlockState var3, LevelAccessor var4, BlockPos var5, BlockPos var6) {
       return var2.getOpposite() == var1.getValue(FACING) && !var1.canSurvive(var4, var5) ? Blocks.AIR.defaultBlockState() : super.updateShape(var1, var2, var3, var4, var5, var6);
    }
@@ -101,18 +102,18 @@
 
       BlockPos var16;
       for(int var15 = 1; var15 < 42; ++var15) {
          var16 = var2.relative(var8, var15);
          BlockState var17 = var1.getBlockState(var16);
-         if (var17.getBlock() == Blocks.TRIPWIRE_HOOK) {
+         if (var17.is(Blocks.TRIPWIRE_HOOK)) {
             if (var17.getValue(FACING) == var8.getOpposite()) {
                var13 = var15;
             }
             break;
          }
 
-         if (var17.getBlock() != Blocks.TRIPWIRE && var15 != var6) {
+         if (!var17.is(Blocks.TRIPWIRE) && var15 != var6) {
             var14[var15] = null;
             var11 = false;
          } else {
             if (var15 == var6) {
                var17 = (BlockState)MoreObjects.firstNonNull(var7, var17);
@@ -121,11 +122,11 @@
             boolean var18 = !(Boolean)var17.getValue(TripWireBlock.DISARMED);
             boolean var19 = (Boolean)var17.getValue(TripWireBlock.POWERED);
             var12 |= var18 && var19;
             var14[var15] = var17;
             if (var15 == var6) {
-               var1.getBlockTicks().scheduleTick(var2, this, this.getTickDelay(var1));
+               var1.getBlockTicks().scheduleTick(var2, this, 10);
                var11 &= var18;
             }
          }
       }
 
@@ -183,11 +184,11 @@
       var1.updateNeighborsAt(var2, this);
       var1.updateNeighborsAt(var2.relative(var3.getOpposite()), this);
    }
 
    public void onRemove(BlockState var1, Level var2, BlockPos var3, BlockState var4, boolean var5) {
-      if (!var5 && var1.getBlock() != var4.getBlock()) {
+      if (!var5 && !var1.is(var4.getBlock())) {
          boolean var6 = (Boolean)var1.getValue(ATTACHED);
          boolean var7 = (Boolean)var1.getValue(POWERED);
          if (var6 || var7) {
             this.calculateState(var2, var3, var1, true, false, -1, (BlockState)null);
          }
