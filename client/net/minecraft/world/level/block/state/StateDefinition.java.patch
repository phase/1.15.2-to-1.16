--- net/minecraft/world/level/block/state/StateDefinition.java
+++ net/minecraft/world/level/block/state/StateDefinition.java
@@ -5,63 +5,91 @@
 import com.google.common.collect.ImmutableMap;
 import com.google.common.collect.ImmutableSortedMap;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.google.common.collect.UnmodifiableIterator;
+import com.mojang.datafixers.util.Pair;
+import com.mojang.serialization.Codec;
+import com.mojang.serialization.Decoder;
+import com.mojang.serialization.Encoder;
+import com.mojang.serialization.MapCodec;
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Collections;
 import java.util.Iterator;
 import java.util.LinkedHashMap;
 import java.util.Map;
+import java.util.Map.Entry;
+import java.util.function.Function;
+import java.util.function.Supplier;
 import java.util.regex.Pattern;
 import java.util.stream.Collectors;
 import java.util.stream.Stream;
 import javax.annotation.Nullable;
-import net.minecraft.core.MapFiller;
+import net.minecraft.util.Codecs;
 import net.minecraft.world.level.block.state.properties.Property;
 
-public class StateDefinition<O, S extends StateHolder<S>> {
+public class StateDefinition<O, S extends StateHolder<O, S>> {
    private static final Pattern NAME_PATTERN = Pattern.compile("^[a-z0-9_]+$");
    private final O owner;
    private final ImmutableSortedMap<String, Property<?>> propertiesByName;
    private final ImmutableList<S> states;
 
-   protected <A extends AbstractStateHolder<O, S>> StateDefinition(O var1, StateDefinition.Factory<O, S, A> var2, Map<String, Property<?>> var3) {
-      this.owner = var1;
-      this.propertiesByName = ImmutableSortedMap.copyOf(var3);
-      LinkedHashMap var4 = Maps.newLinkedHashMap();
-      ArrayList var5 = Lists.newArrayList();
-      Stream var6 = Stream.of(Collections.emptyList());
+   protected StateDefinition(Function<O, S> var1, O var2, StateDefinition.Factory<O, S> var3, Map<String, Property<?>> var4) {
+      this.owner = var2;
+      this.propertiesByName = ImmutableSortedMap.copyOf(var4);
+      Supplier var5 = () -> {
+         return (StateHolder)var1.apply(var2);
+      };
+      MapCodec var6 = MapCodec.of(Encoder.empty(), Decoder.unit(var5));
 
-      Property var8;
-      for(UnmodifiableIterator var7 = this.propertiesByName.values().iterator(); var7.hasNext(); var6 = var6.flatMap((var1x) -> {
-         return var8.getPossibleValues().stream().map((var1) -> {
-            ArrayList var2 = Lists.newArrayList(var1x);
-            var2.add(var1);
-            return var2;
+      Entry var8;
+      for(UnmodifiableIterator var7 = this.propertiesByName.entrySet().iterator(); var7.hasNext(); var6 = appendPropertyCodec(var6, var5, (String)var8.getKey(), (Property)var8.getValue())) {
+         var8 = (Entry)var7.next();
+      }
+
+      LinkedHashMap var15 = Maps.newLinkedHashMap();
+      ArrayList var9 = Lists.newArrayList();
+      Stream var10 = Stream.of(Collections.emptyList());
+
+      Property var12;
+      for(UnmodifiableIterator var11 = this.propertiesByName.values().iterator(); var11.hasNext(); var10 = var10.flatMap((var1x) -> {
+         return var12.getPossibleValues().stream().map((var2) -> {
+            ArrayList var3 = Lists.newArrayList(var1x);
+            var3.add(Pair.of(var12, var2));
+            return var3;
          });
       })) {
-         var8 = (Property)var7.next();
+         var12 = (Property)var11.next();
       }
 
-      var6.forEach((var5x) -> {
-         Map var6 = MapFiller.linkedHashMapFrom(this.propertiesByName.values(), var5x);
-         AbstractStateHolder var7 = var2.create(var1, ImmutableMap.copyOf(var6));
-         var4.put(var6, var7);
-         var5.add(var7);
+      var10.forEach((var5x) -> {
+         ImmutableMap var6x = (ImmutableMap)var5x.stream().collect(ImmutableMap.toImmutableMap(Pair::getFirst, Pair::getSecond));
+         StateHolder var7 = (StateHolder)var3.create(var2, var6x, var6);
+         var15.put(var6x, var7);
+         var9.add(var7);
       });
-      Iterator var9 = var5.iterator();
+      Iterator var13 = var9.iterator();
 
-      while(var9.hasNext()) {
-         AbstractStateHolder var10 = (AbstractStateHolder)var9.next();
-         var10.populateNeighbours(var4);
+      while(var13.hasNext()) {
+         StateHolder var14 = (StateHolder)var13.next();
+         var14.populateNeighbours(var15);
       }
 
-      this.states = ImmutableList.copyOf(var5);
+      this.states = ImmutableList.copyOf(var9);
    }
 
+   private static <S extends StateHolder<?, S>, T extends Comparable<T>> MapCodec<S> appendPropertyCodec(MapCodec<S> var0, Supplier<S> var1, String var2, Property<T> var3) {
+      return Codec.mapPair(var0, Codecs.setPartial(var3.valueCodec().fieldOf(var2), () -> {
+         return var3.value((StateHolder)var1.get());
+      })).xmap((var1x) -> {
+         return (StateHolder)((StateHolder)var1x.getFirst()).setValue(var3, ((Property.Value)var1x.getSecond()).value());
+      }, (var1x) -> {
+         return Pair.of(var1x, var3.value(var1x));
+      });
+   }
+
    public ImmutableList<S> getPossibleStates() {
       return this.states;
    }
 
    public S any() {
@@ -83,11 +111,11 @@
    @Nullable
    public Property<?> getProperty(String var1) {
       return (Property)this.propertiesByName.get(var1);
    }
 
-   public static class Builder<O, S extends StateHolder<S>> {
+   public static class Builder<O, S extends StateHolder<O, S>> {
       private final O owner;
       private final Map<String, Property<?>> properties = Maps.newHashMap();
 
       public Builder(O var1) {
          this.owner = var1;
@@ -134,14 +162,14 @@
                throw new IllegalArgumentException(this.owner + " has property: " + var2 + " with invalidly named value: " + var6);
             }
          }
       }
 
-      public <A extends AbstractStateHolder<O, S>> StateDefinition<O, S> create(StateDefinition.Factory<O, S, A> var1) {
-         return new StateDefinition(this.owner, var1, this.properties);
+      public StateDefinition<O, S> create(Function<O, S> var1, StateDefinition.Factory<O, S> var2) {
+         return new StateDefinition(var1, this.owner, var2, this.properties);
       }
    }
 
-   public interface Factory<O, S extends StateHolder<S>, A extends AbstractStateHolder<O, S>> {
-      A create(O var1, ImmutableMap<Property<?>, Comparable<?>> var2);
+   public interface Factory<O, S> {
+      S create(O var1, ImmutableMap<Property<?>, Comparable<?>> var2, MapCodec<S> var3);
    }
 }
