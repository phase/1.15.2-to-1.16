--- net/minecraft/world/level/block/state/StateDefinition.java
+++ net/minecraft/world/level/block/state/StateDefinition.java
@@ -5,61 +5,72 @@
 import com.google.common.collect.ImmutableMap;
 import com.google.common.collect.ImmutableSortedMap;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.google.common.collect.UnmodifiableIterator;
+import com.mojang.datafixers.util.Pair;
+import com.mojang.serialization.DataResult;
+import com.mojang.serialization.DynamicOps;
+import com.mojang.serialization.MapCodec;
+import com.mojang.serialization.MapLike;
+import com.mojang.serialization.RecordBuilder;
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Collections;
 import java.util.Iterator;
 import java.util.LinkedHashMap;
 import java.util.Map;
+import java.util.function.Function;
+import java.util.function.Supplier;
 import java.util.regex.Pattern;
 import java.util.stream.Collectors;
 import java.util.stream.Stream;
 import javax.annotation.Nullable;
-import net.minecraft.core.MapFiller;
 import net.minecraft.world.level.block.state.properties.Property;
+import org.apache.commons.lang3.mutable.MutableObject;
 
-public class StateDefinition<O, S extends StateHolder<S>> {
+public class StateDefinition<O, S extends StateHolder<O, S>> {
    private static final Pattern NAME_PATTERN = Pattern.compile("^[a-z0-9_]+$");
    private final O owner;
    private final ImmutableSortedMap<String, Property<?>> propertiesByName;
    private final ImmutableList<S> states;
 
-   protected <A extends AbstractStateHolder<O, S>> StateDefinition(O var1, StateDefinition.Factory<O, S, A> var2, Map<String, Property<?>> var3) {
-      this.owner = var1;
-      this.propertiesByName = ImmutableSortedMap.copyOf(var3);
-      LinkedHashMap var4 = Maps.newLinkedHashMap();
-      ArrayList var5 = Lists.newArrayList();
-      Stream var6 = Stream.of(Collections.emptyList());
+   protected StateDefinition(Function<O, S> var1, O var2, StateDefinition.Factory<O, S> var3, Map<String, Property<?>> var4) {
+      this.owner = var2;
+      this.propertiesByName = ImmutableSortedMap.copyOf(var4);
+      StateDefinition.PropertiesCodec var5 = new StateDefinition.PropertiesCodec(this.propertiesByName, () -> {
+         return (StateHolder)var1.apply(var2);
+      });
+      LinkedHashMap var6 = Maps.newLinkedHashMap();
+      ArrayList var7 = Lists.newArrayList();
+      Stream var8 = Stream.of(Collections.emptyList());
 
-      Property var8;
-      for(UnmodifiableIterator var7 = this.propertiesByName.values().iterator(); var7.hasNext(); var6 = var6.flatMap((var1x) -> {
-         return var8.getPossibleValues().stream().map((var1) -> {
-            ArrayList var2 = Lists.newArrayList(var1x);
-            var2.add(var1);
-            return var2;
+      Property var10;
+      for(UnmodifiableIterator var9 = this.propertiesByName.values().iterator(); var9.hasNext(); var8 = var8.flatMap((var1x) -> {
+         return var10.getPossibleValues().stream().map((var2) -> {
+            ArrayList var3 = Lists.newArrayList(var1x);
+            var3.add(Pair.of(var10, var2));
+            return var3;
          });
       })) {
-         var8 = (Property)var7.next();
+         var10 = (Property)var9.next();
       }
 
-      var6.forEach((var5x) -> {
-         Map var6 = MapFiller.linkedHashMapFrom(this.propertiesByName.values(), var5x);
-         AbstractStateHolder var7 = var2.create(var1, ImmutableMap.copyOf(var6));
-         var4.put(var6, var7);
-         var5.add(var7);
+      var8.forEach((var5x) -> {
+         ImmutableMap var6x = (ImmutableMap)var5x.stream().collect(ImmutableMap.toImmutableMap(Pair::getFirst, Pair::getSecond));
+         StateHolder var7x = (StateHolder)var3.create(var2, var6x, var5);
+         var6.put(var6x, var7x);
+         var7.add(var7x);
       });
-      Iterator var9 = var5.iterator();
+      Iterator var12 = var7.iterator();
 
-      while(var9.hasNext()) {
-         AbstractStateHolder var10 = (AbstractStateHolder)var9.next();
-         var10.populateNeighbours(var4);
+      while(var12.hasNext()) {
+         StateHolder var11 = (StateHolder)var12.next();
+         var11.populateNeighbours(var6);
       }
 
-      this.states = ImmutableList.copyOf(var5);
+      this.states = ImmutableList.copyOf(var7);
    }
 
    public ImmutableList<S> getPossibleStates() {
       return this.states;
    }
@@ -83,11 +94,59 @@
    @Nullable
    public Property<?> getProperty(String var1) {
       return (Property)this.propertiesByName.get(var1);
    }
 
-   public static class Builder<O, S extends StateHolder<S>> {
+   static class PropertiesCodec<S extends StateHolder<?, S>> extends MapCodec<S> {
+      private final Map<String, Property<?>> propertiesByName;
+      private final Supplier<S> defaultState;
+
+      public PropertiesCodec(Map<String, Property<?>> var1, Supplier<S> var2) {
+         this.propertiesByName = var1;
+         this.defaultState = var2;
+      }
+
+      public <T> RecordBuilder<T> encode(S var1, DynamicOps<T> var2, RecordBuilder<T> var3) {
+         var1.getValues().forEach((var2x, var3x) -> {
+            var3.add(var2x.getName(), var2.createString(getName(var2x, var3x)));
+         });
+         return var3;
+      }
+
+      public <T> Stream<T> keys(DynamicOps<T> var1) {
+         Stream var10000 = this.propertiesByName.keySet().stream();
+         var1.getClass();
+         return var10000.map(var1::createString);
+      }
+
+      public <T> DataResult<S> decode(DynamicOps<T> var1, MapLike<T> var2) {
+         MutableObject var3 = new MutableObject(DataResult.success(this.defaultState.get()));
+         var2.entries().forEach((var3x) -> {
+            DataResult var10000 = var1.getStringValue(var3x.getFirst());
+            Map var10001 = this.propertiesByName;
+            var10001.getClass();
+            DataResult var4 = var10000.map(var10001::get);
+            Object var5 = var3x.getSecond();
+            var3.setValue(((DataResult)var3.getValue()).flatMap((var3xx) -> {
+               return var4.flatMap((var3) -> {
+                  return var3.parseValue(var1, var3xx, var5);
+               });
+            }));
+         });
+         return (DataResult)var3.getValue();
+      }
+
+      private static <T extends Comparable<T>> String getName(Property<T> var0, Comparable<?> var1) {
+         return var0.getName(var1);
+      }
+
+      public String toString() {
+         return "PropertiesCodec";
+      }
+   }
+
+   public static class Builder<O, S extends StateHolder<O, S>> {
       private final O owner;
       private final Map<String, Property<?>> properties = Maps.newHashMap();
 
       public Builder(O var1) {
          this.owner = var1;
@@ -134,14 +193,14 @@
                throw new IllegalArgumentException(this.owner + " has property: " + var2 + " with invalidly named value: " + var6);
             }
          }
       }
 
-      public <A extends AbstractStateHolder<O, S>> StateDefinition<O, S> create(StateDefinition.Factory<O, S, A> var1) {
-         return new StateDefinition(this.owner, var1, this.properties);
+      public StateDefinition<O, S> create(Function<O, S> var1, StateDefinition.Factory<O, S> var2) {
+         return new StateDefinition(var1, this.owner, var2, this.properties);
       }
    }
 
-   public interface Factory<O, S extends StateHolder<S>, A extends AbstractStateHolder<O, S>> {
-      A create(O var1, ImmutableMap<Property<?>, Comparable<?>> var2);
+   public interface Factory<O, S> {
+      S create(O var1, ImmutableMap<Property<?>, Comparable<?>> var2, MapCodec<S> var3);
    }
 }
