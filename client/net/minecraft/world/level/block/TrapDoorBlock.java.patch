--- net/minecraft/world/level/block/TrapDoorBlock.java
+++ net/minecraft/world/level/block/TrapDoorBlock.java
@@ -3,16 +3,16 @@
 import javax.annotation.Nullable;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.world.InteractionHand;
 import net.minecraft.world.InteractionResult;
-import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.entity.player.Player;
-import net.minecraft.world.item.BlockPlaceContext;
+import net.minecraft.world.item.context.BlockPlaceContext;
 import net.minecraft.world.level.BlockGetter;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.LevelAccessor;
+import net.minecraft.world.level.block.state.BlockBehaviour;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.block.state.StateDefinition;
 import net.minecraft.world.level.block.state.properties.BlockStateProperties;
 import net.minecraft.world.level.block.state.properties.BooleanProperty;
 import net.minecraft.world.level.block.state.properties.EnumProperty;
@@ -35,11 +35,11 @@
    protected static final VoxelShape SOUTH_OPEN_AABB;
    protected static final VoxelShape NORTH_OPEN_AABB;
    protected static final VoxelShape BOTTOM_AABB;
    protected static final VoxelShape TOP_AABB;
 
-   protected TrapDoorBlock(Block.Properties var1) {
+   protected TrapDoorBlock(BlockBehaviour.Properties var1) {
       super(var1);
       this.registerDefaultState((BlockState)((BlockState)((BlockState)((BlockState)((BlockState)((BlockState)this.stateDefinition.any()).setValue(FACING, Direction.NORTH)).setValue(OPEN, false)).setValue(HALF, Half.BOTTOM)).setValue(POWERED, false)).setValue(WATERLOGGED, false));
    }
 
    public VoxelShape getShape(BlockState var1, BlockGetter var2, BlockPos var3, CollisionContext var4) {
@@ -82,11 +82,11 @@
          if ((Boolean)var1.getValue(WATERLOGGED)) {
             var2.getLiquidTicks().scheduleTick(var3, Fluids.WATER, Fluids.WATER.getTickDelay(var2));
          }
 
          this.playSound(var4, var2, var3, (Boolean)var1.getValue(OPEN));
-         return InteractionResult.SUCCESS;
+         return InteractionResult.sidedSuccess(var2.isClientSide);
       }
    }
 
    protected void playSound(@Nullable Player var1, Level var2, BlockPos var3, boolean var4) {
       int var5;
@@ -149,14 +149,10 @@
       }
 
       return super.updateShape(var1, var2, var3, var4, var5, var6);
    }
 
-   public boolean isValidSpawn(BlockState var1, BlockGetter var2, BlockPos var3, EntityType<?> var4) {
-      return false;
-   }
-
    static {
       OPEN = BlockStateProperties.OPEN;
       HALF = BlockStateProperties.HALF;
       POWERED = BlockStateProperties.POWERED;
       WATERLOGGED = BlockStateProperties.WATERLOGGED;
