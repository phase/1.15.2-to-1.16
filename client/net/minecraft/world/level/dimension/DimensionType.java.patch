--- net/minecraft/world/level/dimension/DimensionType.java
+++ net/minecraft/world/level/dimension/DimensionType.java
@@ -1,101 +1,265 @@
 package net.minecraft.world.level.dimension;
 
-import com.mojang.datafixers.Dynamic;
-import com.mojang.datafixers.types.DynamicOps;
+import com.mojang.serialization.Codec;
+import com.mojang.serialization.DataResult;
+import com.mojang.serialization.Dynamic;
+import com.mojang.serialization.Lifecycle;
+import com.mojang.serialization.MapCodec;
+import com.mojang.serialization.codecs.RecordCodecBuilder;
 import java.io.File;
-import java.util.function.BiFunction;
-import javax.annotation.Nullable;
+import java.util.Optional;
+import java.util.OptionalLong;
+import java.util.function.Supplier;
+import net.minecraft.core.MappedRegistry;
 import net.minecraft.core.Registry;
+import net.minecraft.core.RegistryAccess;
+import net.minecraft.resources.RegistryFileCodec;
+import net.minecraft.resources.ResourceKey;
 import net.minecraft.resources.ResourceLocation;
-import net.minecraft.util.Serializable;
+import net.minecraft.tags.BlockTags;
+import net.minecraft.tags.Tag;
+import net.minecraft.util.Codecs;
+import net.minecraft.util.Mth;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.biome.BiomeZoomer;
 import net.minecraft.world.level.biome.FuzzyOffsetBiomeZoomer;
 import net.minecraft.world.level.biome.FuzzyOffsetConstantColumnBiomeZoomer;
-import net.minecraft.world.level.dimension.end.TheEndDimension;
+import net.minecraft.world.level.biome.MultiNoiseBiomeSource;
+import net.minecraft.world.level.biome.TheEndBiomeSource;
+import net.minecraft.world.level.block.Block;
+import net.minecraft.world.level.chunk.ChunkGenerator;
+import net.minecraft.world.level.levelgen.NoiseBasedChunkGenerator;
+import net.minecraft.world.level.levelgen.NoiseGeneratorSettings;
 
-public class DimensionType implements Serializable {
-   public static final DimensionType OVERWORLD;
-   public static final DimensionType NETHER;
-   public static final DimensionType THE_END;
-   private final int id;
-   private final String fileSuffix;
-   private final String folder;
-   private final BiFunction<Level, DimensionType, ? extends Dimension> factory;
+public class DimensionType {
+   public static final MapCodec<DimensionType> DIRECT_CODEC = RecordCodecBuilder.mapCodec((var0) -> {
+      return var0.group(Codec.LONG.optionalFieldOf("fixed_time").xmap((var0x) -> {
+         return (OptionalLong)var0x.map(OptionalLong::of).orElseGet(OptionalLong::empty);
+      }, (var0x) -> {
+         return var0x.isPresent() ? Optional.of(var0x.getAsLong()) : Optional.empty();
+      }).forGetter((var0x) -> {
+         return var0x.fixedTime;
+      }), Codec.BOOL.fieldOf("has_skylight").forGetter(DimensionType::hasSkyLight), Codec.BOOL.fieldOf("has_ceiling").forGetter(DimensionType::hasCeiling), Codec.BOOL.fieldOf("ultrawarm").forGetter(DimensionType::ultraWarm), Codec.BOOL.fieldOf("natural").forGetter(DimensionType::natural), Codec.BOOL.fieldOf("shrunk").forGetter(DimensionType::shrunk), Codec.BOOL.fieldOf("piglin_safe").forGetter(DimensionType::piglinSafe), Codec.BOOL.fieldOf("bed_works").forGetter(DimensionType::bedWorks), Codec.BOOL.fieldOf("respawn_anchor_works").forGetter(DimensionType::respawnAnchorWorks), Codec.BOOL.fieldOf("has_raids").forGetter(DimensionType::hasRaids), Codecs.intRange(0, 256).fieldOf("logical_height").forGetter(DimensionType::logicalHeight), ResourceLocation.CODEC.fieldOf("infiniburn").forGetter((var0x) -> {
+         return var0x.infiniburn;
+      }), Codec.FLOAT.fieldOf("ambient_light").forGetter((var0x) -> {
+         return var0x.ambientLight;
+      })).apply(var0, DimensionType::new);
+   });
+   public static final float[] MOON_BRIGHTNESS_PER_PHASE = new float[]{1.0F, 0.75F, 0.5F, 0.25F, 0.0F, 0.25F, 0.5F, 0.75F};
+   public static final ResourceKey<DimensionType> OVERWORLD_LOCATION;
+   public static final ResourceKey<DimensionType> NETHER_LOCATION;
+   public static final ResourceKey<DimensionType> END_LOCATION;
+   protected static final DimensionType DEFAULT_OVERWORLD;
+   protected static final DimensionType DEFAULT_NETHER;
+   protected static final DimensionType DEFAULT_END;
+   public static final ResourceKey<DimensionType> OVERWORLD_CAVES_LOCATION;
+   protected static final DimensionType DEFAULT_OVERWORLD_CAVES;
+   public static final Codec<Supplier<DimensionType>> CODEC;
+   private final OptionalLong fixedTime;
    private final boolean hasSkylight;
+   private final boolean hasCeiling;
+   private final boolean ultraWarm;
+   private final boolean natural;
+   private final boolean shrunk;
+   private final boolean createDragonFight;
+   private final boolean piglinSafe;
+   private final boolean bedWorks;
+   private final boolean respawnAnchorWorks;
+   private final boolean hasRaids;
+   private final int logicalHeight;
    private final BiomeZoomer biomeZoomer;
+   private final ResourceLocation infiniburn;
+   private final float ambientLight;
+   private final transient float[] brightnessRamp;
 
-   private static DimensionType register(String var0, DimensionType var1) {
-      return (DimensionType)Registry.registerMapping(Registry.DIMENSION_TYPE, var1.id, var0, var1);
+   public static DimensionType defaultOverworld() {
+      return DEFAULT_OVERWORLD;
    }
 
-   protected DimensionType(int var1, String var2, String var3, BiFunction<Level, DimensionType, ? extends Dimension> var4, boolean var5, BiomeZoomer var6) {
-      this.id = var1;
-      this.fileSuffix = var2;
-      this.folder = var3;
-      this.factory = var4;
-      this.hasSkylight = var5;
-      this.biomeZoomer = var6;
+   public static DimensionType defaultOverworldCaves() {
+      return DEFAULT_OVERWORLD_CAVES;
    }
 
-   public static DimensionType of(Dynamic<?> var0) {
-      return (DimensionType)Registry.DIMENSION_TYPE.get(new ResourceLocation(var0.asString("")));
+   protected DimensionType(OptionalLong var1, boolean var2, boolean var3, boolean var4, boolean var5, boolean var6, boolean var7, boolean var8, boolean var9, boolean var10, int var11, ResourceLocation var12, float var13) {
+      this(var1, var2, var3, var4, var5, var6, false, var7, var8, var9, var10, var11, FuzzyOffsetBiomeZoomer.INSTANCE, var12, var13);
    }
 
-   public static Iterable<DimensionType> getAllTypes() {
-      return Registry.DIMENSION_TYPE;
+   protected DimensionType(OptionalLong var1, boolean var2, boolean var3, boolean var4, boolean var5, boolean var6, boolean var7, boolean var8, boolean var9, boolean var10, boolean var11, int var12, BiomeZoomer var13, ResourceLocation var14, float var15) {
+      this.fixedTime = var1;
+      this.hasSkylight = var2;
+      this.hasCeiling = var3;
+      this.ultraWarm = var4;
+      this.natural = var5;
+      this.shrunk = var6;
+      this.createDragonFight = var7;
+      this.piglinSafe = var8;
+      this.bedWorks = var9;
+      this.respawnAnchorWorks = var10;
+      this.hasRaids = var11;
+      this.logicalHeight = var12;
+      this.biomeZoomer = var13;
+      this.infiniburn = var14;
+      this.ambientLight = var15;
+      this.brightnessRamp = fillBrightnessRamp(var15);
    }
 
-   public int getId() {
-      return this.id + -1;
+   private static float[] fillBrightnessRamp(float var0) {
+      float[] var1 = new float[16];
+
+      for(int var2 = 0; var2 <= 15; ++var2) {
+         float var3 = (float)var2 / 15.0F;
+         float var4 = var3 / (4.0F - 3.0F * var3);
+         var1[var2] = Mth.lerp(var0, var4, 1.0F);
+      }
+
+      return var1;
    }
 
-   public String getFileSuffix() {
-      return this.fileSuffix;
+   @Deprecated
+   public static DataResult<ResourceKey<Level>> parseLegacy(Dynamic<?> var0) {
+      Optional var1 = var0.asNumber().result();
+      if (var1.isPresent()) {
+         int var2 = ((Number)var1.get()).intValue();
+         if (var2 == -1) {
+            return DataResult.success(Level.NETHER);
+         }
+
+         if (var2 == 0) {
+            return DataResult.success(Level.OVERWORLD);
+         }
+
+         if (var2 == 1) {
+            return DataResult.success(Level.END);
+         }
+      }
+
+      return Level.RESOURCE_KEY_CODEC.parse(var0);
    }
 
-   public File getStorageFolder(File var1) {
-      return this.folder.isEmpty() ? var1 : new File(var1, this.folder);
+   public static RegistryAccess.RegistryHolder registerBuiltin(RegistryAccess.RegistryHolder var0) {
+      var0.registerDimension(OVERWORLD_LOCATION, DEFAULT_OVERWORLD);
+      var0.registerDimension(OVERWORLD_CAVES_LOCATION, DEFAULT_OVERWORLD_CAVES);
+      var0.registerDimension(NETHER_LOCATION, DEFAULT_NETHER);
+      var0.registerDimension(END_LOCATION, DEFAULT_END);
+      return var0;
    }
 
-   public Dimension create(Level var1) {
-      return (Dimension)this.factory.apply(var1, this);
+   private static ChunkGenerator defaultEndGenerator(long var0) {
+      return new NoiseBasedChunkGenerator(new TheEndBiomeSource(var0), var0, NoiseGeneratorSettings.Preset.END.settings());
    }
 
-   public String toString() {
-      return getName(this).toString();
+   private static ChunkGenerator defaultNetherGenerator(long var0) {
+      return new NoiseBasedChunkGenerator(MultiNoiseBiomeSource.Preset.NETHER.biomeSource(var0), var0, NoiseGeneratorSettings.Preset.NETHER.settings());
    }
 
-   @Nullable
-   public static DimensionType getById(int var0) {
-      return (DimensionType)Registry.DIMENSION_TYPE.byId(var0 - -1);
+   public static MappedRegistry<LevelStem> defaultDimensions(long var0) {
+      MappedRegistry var2 = new MappedRegistry(Registry.LEVEL_STEM_REGISTRY, Lifecycle.experimental());
+      var2.register(LevelStem.NETHER, new LevelStem(() -> {
+         return DEFAULT_NETHER;
+      }, defaultNetherGenerator(var0)));
+      var2.register(LevelStem.END, new LevelStem(() -> {
+         return DEFAULT_END;
+      }, defaultEndGenerator(var0)));
+      var2.setPersistent(LevelStem.NETHER);
+      var2.setPersistent(LevelStem.END);
+      return var2;
    }
 
-   @Nullable
-   public static DimensionType getByName(ResourceLocation var0) {
-      return (DimensionType)Registry.DIMENSION_TYPE.get(var0);
+   @Deprecated
+   public String getFileSuffix() {
+      return this == DEFAULT_END ? "_end" : "";
    }
 
-   @Nullable
-   public static ResourceLocation getName(DimensionType var0) {
-      return Registry.DIMENSION_TYPE.getKey(var0);
+   public static File getStorageFolder(ResourceKey<Level> var0, File var1) {
+      if (var0 == Level.OVERWORLD) {
+         return var1;
+      } else if (var0 == Level.END) {
+         return new File(var1, "DIM1");
+      } else {
+         return var0 == Level.NETHER ? new File(var1, "DIM-1") : new File(var1, "dimensions/" + var0.location().getNamespace() + "/" + var0.location().getPath());
+      }
    }
 
    public boolean hasSkyLight() {
       return this.hasSkylight;
    }
 
+   public boolean hasCeiling() {
+      return this.hasCeiling;
+   }
+
+   public boolean ultraWarm() {
+      return this.ultraWarm;
+   }
+
+   public boolean natural() {
+      return this.natural;
+   }
+
+   public boolean shrunk() {
+      return this.shrunk;
+   }
+
+   public boolean piglinSafe() {
+      return this.piglinSafe;
+   }
+
+   public boolean bedWorks() {
+      return this.bedWorks;
+   }
+
+   public boolean respawnAnchorWorks() {
+      return this.respawnAnchorWorks;
+   }
+
+   public boolean hasRaids() {
+      return this.hasRaids;
+   }
+
+   public int logicalHeight() {
+      return this.logicalHeight;
+   }
+
+   public boolean createDragonFight() {
+      return this.createDragonFight;
+   }
+
    public BiomeZoomer getBiomeZoomer() {
       return this.biomeZoomer;
    }
 
-   public <T> T serialize(DynamicOps<T> var1) {
-      return var1.createString(Registry.DIMENSION_TYPE.getKey(this).toString());
+   public boolean hasFixedTime() {
+      return this.fixedTime.isPresent();
    }
 
+   public float timeOfDay(long var1) {
+      double var3 = Mth.frac((double)this.fixedTime.orElse(var1) / 24000.0D - 0.25D);
+      double var5 = 0.5D - Math.cos(var3 * 3.141592653589793D) / 2.0D;
+      return (float)(var3 * 2.0D + var5) / 3.0F;
+   }
+
+   public int moonPhase(long var1) {
+      return (int)(var1 / 24000L % 8L + 8L) % 8;
+   }
+
+   public float brightness(int var1) {
+      return this.brightnessRamp[var1];
+   }
+
+   public Tag<Block> infiniburn() {
+      Tag var1 = BlockTags.getAllTags().getTag(this.infiniburn);
+      return (Tag)(var1 != null ? var1 : BlockTags.INFINIBURN_OVERWORLD);
+   }
+
    static {
-      OVERWORLD = register("overworld", new DimensionType(1, "", "", NormalDimension::new, true, FuzzyOffsetConstantColumnBiomeZoomer.INSTANCE));
-      NETHER = register("the_nether", new DimensionType(0, "_nether", "DIM-1", NetherDimension::new, false, FuzzyOffsetBiomeZoomer.INSTANCE));
-      THE_END = register("the_end", new DimensionType(2, "_end", "DIM1", TheEndDimension::new, false, FuzzyOffsetBiomeZoomer.INSTANCE));
+      OVERWORLD_LOCATION = ResourceKey.create(Registry.DIMENSION_TYPE_REGISTRY, new ResourceLocation("overworld"));
+      NETHER_LOCATION = ResourceKey.create(Registry.DIMENSION_TYPE_REGISTRY, new ResourceLocation("the_nether"));
+      END_LOCATION = ResourceKey.create(Registry.DIMENSION_TYPE_REGISTRY, new ResourceLocation("the_end"));
+      DEFAULT_OVERWORLD = new DimensionType(OptionalLong.empty(), true, false, false, true, false, false, false, true, false, true, 256, FuzzyOffsetConstantColumnBiomeZoomer.INSTANCE, BlockTags.INFINIBURN_OVERWORLD.getName(), 0.0F);
+      DEFAULT_NETHER = new DimensionType(OptionalLong.of(18000L), false, true, true, false, true, false, true, false, true, false, 128, FuzzyOffsetBiomeZoomer.INSTANCE, BlockTags.INFINIBURN_NETHER.getName(), 0.1F);
+      DEFAULT_END = new DimensionType(OptionalLong.of(6000L), false, false, false, false, false, true, false, false, false, true, 256, FuzzyOffsetBiomeZoomer.INSTANCE, BlockTags.INFINIBURN_END.getName(), 0.0F);
+      OVERWORLD_CAVES_LOCATION = ResourceKey.create(Registry.DIMENSION_TYPE_REGISTRY, new ResourceLocation("overworld_caves"));
+      DEFAULT_OVERWORLD_CAVES = new DimensionType(OptionalLong.empty(), true, true, false, true, false, false, false, true, false, true, 256, FuzzyOffsetConstantColumnBiomeZoomer.INSTANCE, BlockTags.INFINIBURN_OVERWORLD.getName(), 0.0F);
+      CODEC = RegistryFileCodec.create(Registry.DIMENSION_TYPE_REGISTRY, DIRECT_CODEC);
    }
 }
