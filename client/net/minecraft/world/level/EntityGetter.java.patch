--- net/minecraft/world/level/EntityGetter.java
+++ net/minecraft/world/level/EntityGetter.java
@@ -3,11 +3,10 @@
 import com.google.common.collect.Lists;
 import java.util.ArrayList;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Objects;
-import java.util.Set;
 import java.util.UUID;
 import java.util.function.Predicate;
 import java.util.stream.Stream;
 import javax.annotation.Nullable;
 import net.minecraft.world.entity.Entity;
@@ -34,33 +33,48 @@
    default List<Entity> getEntities(@Nullable Entity var1, AABB var2) {
       return this.getEntities(var1, var2, EntitySelector.NO_SPECTATORS);
    }
 
    default boolean isUnobstructed(@Nullable Entity var1, VoxelShape var2) {
-      return var2.isEmpty() ? true : this.getEntities(var1, var2.bounds()).stream().filter((var1x) -> {
-         return !var1x.removed && var1x.blocksBuilding && (var1 == null || !var1x.isPassengerOfSameVehicle(var1));
-      }).noneMatch((var1x) -> {
-         return Shapes.joinIsNotEmpty(var2, Shapes.create(var1x.getBoundingBox()), BooleanOp.AND);
-      });
+      if (var2.isEmpty()) {
+         return true;
+      } else {
+         Iterator var3 = this.getEntities(var1, var2.bounds()).iterator();
+
+         Entity var4;
+         do {
+            do {
+               do {
+                  do {
+                     if (!var3.hasNext()) {
+                        return true;
+                     }
+
+                     var4 = (Entity)var3.next();
+                  } while(var4.removed);
+               } while(!var4.blocksBuilding);
+            } while(var1 != null && var4.isPassengerOfSameVehicle(var1));
+         } while(!Shapes.joinIsNotEmpty(var2, Shapes.create(var4.getBoundingBox()), BooleanOp.AND));
+
+         return false;
+      }
    }
 
    default <T extends Entity> List<T> getEntitiesOfClass(Class<? extends T> var1, AABB var2) {
       return this.getEntitiesOfClass(var1, var2, EntitySelector.NO_SPECTATORS);
    }
 
    default <T extends Entity> List<T> getLoadedEntitiesOfClass(Class<? extends T> var1, AABB var2) {
       return this.getLoadedEntitiesOfClass(var1, var2, EntitySelector.NO_SPECTATORS);
    }
 
-   default Stream<VoxelShape> getEntityCollisions(@Nullable Entity var1, AABB var2, Set<Entity> var3) {
+   default Stream<VoxelShape> getEntityCollisions(@Nullable Entity var1, AABB var2, Predicate<Entity> var3) {
       if (var2.getSize() < 1.0E-7D) {
          return Stream.empty();
       } else {
          AABB var4 = var2.inflate(1.0E-7D);
-         Stream var10000 = this.getEntities(var1, var4).stream().filter((var1x) -> {
-            return !var3.contains(var1x);
-         }).filter((var1x) -> {
+         Stream var10000 = this.getEntities(var1, var4).stream().filter(var3).filter((var1x) -> {
             return var1 == null || !var1.isPassengerOfSameVehicle(var1x);
          }).flatMap((var1x) -> {
             return Stream.of(var1x.getCollideBox(), var1 == null ? null : var1.getCollideAgainstBox(var1x));
          }).filter(Objects::nonNull);
          var4.getClass();
@@ -105,38 +119,10 @@
    default Player getNearestPlayer(double var1, double var3, double var5, double var7, boolean var9) {
       Predicate var10 = var9 ? EntitySelector.NO_CREATIVE_OR_SPECTATOR : EntitySelector.NO_SPECTATORS;
       return this.getNearestPlayer(var1, var3, var5, var7, var10);
    }
 
-   @Nullable
-   default Player getNearestPlayerIgnoreY(double var1, double var3, double var5) {
-      double var7 = -1.0D;
-      Player var9 = null;
-      Iterator var10 = this.players().iterator();
-
-      while(true) {
-         Player var11;
-         double var12;
-         do {
-            do {
-               do {
-                  if (!var10.hasNext()) {
-                     return var9;
-                  }
-
-                  var11 = (Player)var10.next();
-               } while(!EntitySelector.NO_SPECTATORS.test(var11));
-
-               var12 = var11.distanceToSqr(var1, var11.getY(), var3);
-            } while(var5 >= 0.0D && var12 >= var5 * var5);
-         } while(var7 != -1.0D && var12 >= var7);
-
-         var7 = var12;
-         var9 = var11;
-      }
-   }
-
    default boolean hasNearbyAlivePlayer(double var1, double var3, double var5, double var7) {
       Iterator var9 = this.players().iterator();
 
       double var11;
       do {
