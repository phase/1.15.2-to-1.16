--- net/minecraft/world/level/chunk/storage/SectionStorage.java
+++ net/minecraft/world/level/chunk/storage/SectionStorage.java
@@ -1,53 +1,53 @@
 package net.minecraft.world.level.chunk.storage;
 
 import com.google.common.collect.ImmutableMap;
 import com.google.common.collect.Maps;
 import com.mojang.datafixers.DataFixer;
-import com.mojang.datafixers.Dynamic;
-import com.mojang.datafixers.OptionalDynamic;
-import com.mojang.datafixers.types.DynamicOps;
+import com.mojang.serialization.Codec;
+import com.mojang.serialization.DataResult;
+import com.mojang.serialization.Dynamic;
+import com.mojang.serialization.DynamicOps;
+import com.mojang.serialization.OptionalDynamic;
 import it.unimi.dsi.fastutil.longs.Long2ObjectMap;
 import it.unimi.dsi.fastutil.longs.Long2ObjectOpenHashMap;
 import it.unimi.dsi.fastutil.longs.LongLinkedOpenHashSet;
 import java.io.File;
 import java.io.IOException;
 import java.util.HashMap;
 import java.util.Optional;
-import java.util.function.BiFunction;
 import java.util.function.BooleanSupplier;
 import java.util.function.Function;
 import javax.annotation.Nullable;
 import net.minecraft.SharedConstants;
 import net.minecraft.Util;
 import net.minecraft.core.SectionPos;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.NbtOps;
 import net.minecraft.nbt.Tag;
-import net.minecraft.util.Serializable;
 import net.minecraft.util.datafix.DataFixTypes;
 import net.minecraft.world.level.ChunkPos;
 import net.minecraft.world.level.Level;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
-public class SectionStorage<R extends Serializable> implements AutoCloseable {
+public class SectionStorage<R> implements AutoCloseable {
    private static final Logger LOGGER = LogManager.getLogger();
    private final IOWorker worker;
    private final Long2ObjectMap<Optional<R>> storage = new Long2ObjectOpenHashMap();
    private final LongLinkedOpenHashSet dirty = new LongLinkedOpenHashSet();
-   private final BiFunction<Runnable, Dynamic<?>, R> deserializer;
+   private final Function<Runnable, Codec<R>> codec;
    private final Function<Runnable, R> factory;
    private final DataFixer fixerUpper;
    private final DataFixTypes type;
 
-   public SectionStorage(File var1, BiFunction<Runnable, Dynamic<?>, R> var2, Function<Runnable, R> var3, DataFixer var4, DataFixTypes var5) {
-      this.deserializer = var2;
+   public SectionStorage(File var1, Function<Runnable, Codec<R>> var2, Function<Runnable, R> var3, DataFixer var4, DataFixTypes var5, boolean var6) {
+      this.codec = var2;
       this.factory = var3;
       this.fixerUpper = var4;
       this.type = var5;
-      this.worker = new IOWorker(new RegionFileStorage(var1), var1.getName());
+      this.worker = new IOWorker(var1, var6, var1.getName());
    }
 
    protected void tick(BooleanSupplier var1) {
       while(!this.dirty.isEmpty() && var1.getAsBoolean()) {
          ChunkPos var2 = SectionPos.of(this.dirty.firstLong()).chunk();
@@ -86,13 +86,13 @@
    }
 
    protected R getOrCreate(long var1) {
       Optional var3 = this.getOrLoad(var1);
       if (var3.isPresent()) {
-         return (Serializable)var3.get();
+         return var3.get();
       } else {
-         Serializable var4 = (Serializable)this.factory.apply(() -> {
+         Object var4 = this.factory.apply(() -> {
             this.setDirty(var1);
          });
          this.storage.put(var1, Optional.of(var4));
          return var4;
       }
@@ -125,14 +125,17 @@
          Dynamic var8 = this.fixerUpper.update(this.type.getType(), var14, var5, var6);
          OptionalDynamic var9 = var8.get("Sections");
 
          for(int var10 = 0; var10 < 16; ++var10) {
             long var11 = SectionPos.of(var1, var10).asLong();
-            Optional var13 = var9.get(Integer.toString(var10)).get().map((var3x) -> {
-               return (Serializable)this.deserializer.apply(() -> {
+            Optional var13 = var9.get(Integer.toString(var10)).result().flatMap((var3x) -> {
+               DataResult var10000 = ((Codec)this.codec.apply(() -> {
                   this.setDirty(var11);
-               }, var3x);
+               })).parse(var3x);
+               Logger var10001 = LOGGER;
+               var10001.getClass();
+               return var10000.resultOrPartial(var10001::error);
             });
             this.storage.put(var11, var13);
             var13.ifPresent((var4x) -> {
                this.onSectionLoad(var11);
                if (var7) {
@@ -162,11 +165,19 @@
       for(int var4 = 0; var4 < 16; ++var4) {
          long var5 = SectionPos.of(var1, var4).asLong();
          this.dirty.remove(var5);
          Optional var7 = (Optional)this.storage.get(var5);
          if (var7 != null && var7.isPresent()) {
-            var3.put(var2.createString(Integer.toString(var4)), ((Serializable)var7.get()).serialize(var2));
+            DataResult var8 = ((Codec)this.codec.apply(() -> {
+               this.setDirty(var5);
+            })).encodeStart(var2, var7.get());
+            String var9 = Integer.toString(var4);
+            Logger var10001 = LOGGER;
+            var10001.getClass();
+            var8.resultOrPartial(var10001::error).ifPresent((var3x) -> {
+               var3.put(var2.createString(var9), var3x);
+            });
          }
       }
 
       return new Dynamic(var2, var2.createMap(ImmutableMap.of(var2.createString("Sections"), var2.createMap(var3), var2.createString("DataVersion"), var2.createInt(SharedConstants.getCurrentVersion().getWorldVersion()))));
    }
@@ -182,11 +193,11 @@
          LOGGER.warn("No data for position: {}", SectionPos.of(var1));
       }
    }
 
    private static int getVersion(Dynamic<?> var0) {
-      return ((Number)var0.get("DataVersion").asNumber().orElse(1945)).intValue();
+      return var0.get("DataVersion").asInt(1945);
    }
 
    public void flush(ChunkPos var1) {
       if (!this.dirty.isEmpty()) {
          for(int var2 = 0; var2 < 16; ++var2) {
