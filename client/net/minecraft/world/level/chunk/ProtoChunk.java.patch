--- net/minecraft/world/level/chunk/ProtoChunk.java
+++ net/minecraft/world/level/chunk/ProtoChunk.java
@@ -3,10 +3,11 @@
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.google.common.collect.Sets;
 import it.unimi.dsi.fastutil.longs.LongOpenHashSet;
 import it.unimi.dsi.fastutil.longs.LongSet;
+import it.unimi.dsi.fastutil.objects.Object2ObjectArrayMap;
 import it.unimi.dsi.fastutil.shorts.ShortList;
 import java.util.BitSet;
 import java.util.Collection;
 import java.util.Collections;
 import java.util.EnumSet;
@@ -27,10 +28,11 @@
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.entity.BlockEntity;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.levelgen.GenerationStep;
 import net.minecraft.world.level.levelgen.Heightmap;
+import net.minecraft.world.level.levelgen.feature.StructureFeature;
 import net.minecraft.world.level.levelgen.structure.StructureStart;
 import net.minecraft.world.level.lighting.LevelLightEngine;
 import net.minecraft.world.level.material.Fluid;
 import net.minecraft.world.level.material.FluidState;
 import net.minecraft.world.level.material.Fluids;
@@ -51,12 +53,12 @@
    private final Map<BlockPos, CompoundTag> blockEntityNbts;
    private final LevelChunkSection[] sections;
    private final List<CompoundTag> entities;
    private final List<BlockPos> lights;
    private final ShortList[] postProcessing;
-   private final Map<String, StructureStart> structureStarts;
-   private final Map<String, LongSet> structuresRefences;
+   private final Map<StructureFeature<?>, StructureStart<?>> structureStarts;
+   private final Map<StructureFeature<?>, LongSet> structuresRefences;
    private final UpgradeData upgradeData;
    private final ProtoTickList<Block> blockTicks;
    private final ProtoTickList<Fluid> liquidTicks;
    private long inhabitedTime;
    private final Map<GenerationStep.Carving, BitSet> carvingMasks;
@@ -79,11 +81,11 @@
       this.entities = Lists.newArrayList();
       this.lights = Lists.newArrayList();
       this.postProcessing = new ShortList[16];
       this.structureStarts = Maps.newHashMap();
       this.structuresRefences = Maps.newHashMap();
-      this.carvingMasks = Maps.newHashMap();
+      this.carvingMasks = new Object2ObjectArrayMap();
       this.chunkPos = var1;
       this.upgradeData = var2;
       this.blockTicks = var4;
       this.liquidTicks = var5;
       if (var3 != null) {
@@ -144,11 +146,11 @@
    public BlockState setBlockState(BlockPos var1, BlockState var2, boolean var3) {
       int var4 = var1.getX();
       int var5 = var1.getY();
       int var6 = var1.getZ();
       if (var5 >= 0 && var5 < 256) {
-         if (this.sections[var5 >> 4] == LevelChunk.EMPTY_SECTION && var2.getBlock() == Blocks.AIR) {
+         if (this.sections[var5 >> 4] == LevelChunk.EMPTY_SECTION && var2.is(Blocks.AIR)) {
             return var2;
          } else {
             if (var2.getLightEmission() > 0) {
                this.lights.add(new BlockPos((var4 & 15) + this.getPos().getMinBlockX(), var5, (var6 & 15) + this.getPos().getMinBlockZ()));
             }
@@ -226,13 +228,15 @@
    public void addEntity(CompoundTag var1) {
       this.entities.add(var1);
    }
 
    public void addEntity(Entity var1) {
-      CompoundTag var2 = new CompoundTag();
-      var1.save(var2);
-      this.addEntity(var2);
+      if (!var1.isPassenger()) {
+         CompoundTag var2 = new CompoundTag();
+         var1.save(var2);
+         this.addEntity(var2);
+      }
    }
 
    public List<CompoundTag> getEntities() {
       return this.entities;
    }
@@ -302,47 +306,47 @@
 
    public void setLastSaveTime(long var1) {
    }
 
    @Nullable
-   public StructureStart getStartForFeature(String var1) {
+   public StructureStart<?> getStartForFeature(StructureFeature<?> var1) {
       return (StructureStart)this.structureStarts.get(var1);
    }
 
-   public void setStartForFeature(String var1, StructureStart var2) {
+   public void setStartForFeature(StructureFeature<?> var1, StructureStart<?> var2) {
       this.structureStarts.put(var1, var2);
       this.isDirty = true;
    }
 
-   public Map<String, StructureStart> getAllStarts() {
+   public Map<StructureFeature<?>, StructureStart<?>> getAllStarts() {
       return Collections.unmodifiableMap(this.structureStarts);
    }
 
-   public void setAllStarts(Map<String, StructureStart> var1) {
+   public void setAllStarts(Map<StructureFeature<?>, StructureStart<?>> var1) {
       this.structureStarts.clear();
       this.structureStarts.putAll(var1);
       this.isDirty = true;
    }
 
-   public LongSet getReferencesForFeature(String var1) {
+   public LongSet getReferencesForFeature(StructureFeature<?> var1) {
       return (LongSet)this.structuresRefences.computeIfAbsent(var1, (var0) -> {
          return new LongOpenHashSet();
       });
    }
 
-   public void addReferenceForFeature(String var1, long var2) {
+   public void addReferenceForFeature(StructureFeature<?> var1, long var2) {
       ((LongSet)this.structuresRefences.computeIfAbsent(var1, (var0) -> {
          return new LongOpenHashSet();
       })).add(var2);
       this.isDirty = true;
    }
 
-   public Map<String, LongSet> getAllReferences() {
+   public Map<StructureFeature<?>, LongSet> getAllReferences() {
       return Collections.unmodifiableMap(this.structuresRefences);
    }
 
-   public void setAllReferences(Map<String, LongSet> var1) {
+   public void setAllReferences(Map<StructureFeature<?>, LongSet> var1) {
       this.structuresRefences.clear();
       this.structuresRefences.putAll(var1);
       this.isDirty = true;
    }
 
@@ -419,11 +423,16 @@
    public void removeBlockEntity(BlockPos var1) {
       this.blockEntities.remove(var1);
       this.blockEntityNbts.remove(var1);
    }
 
+   @Nullable
    public BitSet getCarvingMask(GenerationStep.Carving var1) {
+      return (BitSet)this.carvingMasks.get(var1);
+   }
+
+   public BitSet getOrCreateCarvingMask(GenerationStep.Carving var1) {
       return (BitSet)this.carvingMasks.computeIfAbsent(var1, (var0) -> {
          return new BitSet(65536);
       });
    }
 
