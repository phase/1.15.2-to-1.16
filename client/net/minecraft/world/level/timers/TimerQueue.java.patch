--- net/minecraft/world/level/timers/TimerQueue.java
+++ net/minecraft/world/level/timers/TimerQueue.java
@@ -1,27 +1,28 @@
 package net.minecraft.world.level.timers;
 
 import com.google.common.collect.HashBasedTable;
 import com.google.common.collect.Table;
 import com.google.common.primitives.UnsignedLong;
+import com.mojang.serialization.Dynamic;
 import java.util.Collection;
 import java.util.Collections;
 import java.util.Comparator;
-import java.util.Iterator;
 import java.util.PriorityQueue;
 import java.util.Queue;
 import java.util.Set;
+import java.util.stream.Stream;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.ListTag;
 import net.minecraft.nbt.Tag;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
 public class TimerQueue<T> {
    private static final Logger LOGGER = LogManager.getLogger();
    private final TimerCallbacks<T> callbacksRegistry;
-   private final Queue<TimerQueue.Event<T>> queue = new PriorityQueue(createComparator());
+   private final Queue<TimerQueue.Event<T>> queue;
    private UnsignedLong sequentialId;
    private final Table<String, Long, TimerQueue.Event<T>> events;
 
    private static <T> Comparator<TimerQueue.Event<T>> createComparator() {
       return Comparator.comparingLong((var0) -> {
@@ -29,11 +30,26 @@
       }).thenComparing((var0) -> {
          return var0.sequentialId;
       });
    }
 
+   public TimerQueue(TimerCallbacks<T> var1, Stream<Dynamic<Tag>> var2) {
+      this(var1);
+      this.queue.clear();
+      this.events.clear();
+      this.sequentialId = UnsignedLong.ZERO;
+      var2.forEach((var1x) -> {
+         if (!(var1x.getValue() instanceof CompoundTag)) {
+            LOGGER.warn("Invalid format of events: {}", var1x);
+         } else {
+            this.loadEvent((CompoundTag)var1x.getValue());
+         }
+      });
+   }
+
    public TimerQueue(TimerCallbacks<T> var1) {
+      this.queue = new PriorityQueue(createComparator());
       this.sequentialId = UnsignedLong.ZERO;
       this.events = HashBasedTable.create();
       this.callbacksRegistry = var1;
    }
 
@@ -81,29 +97,10 @@
          this.schedule(var4, var5, var3);
       }
 
    }
 
-   public void load(ListTag var1) {
-      this.queue.clear();
-      this.events.clear();
-      this.sequentialId = UnsignedLong.ZERO;
-      if (!var1.isEmpty()) {
-         if (var1.getElementType() != 10) {
-            LOGGER.warn("Invalid format of events: " + var1);
-         } else {
-            Iterator var2 = var1.iterator();
-
-            while(var2.hasNext()) {
-               Tag var3 = (Tag)var2.next();
-               this.loadEvent((CompoundTag)var3);
-            }
-
-         }
-      }
-   }
-
    private CompoundTag storeEvent(TimerQueue.Event<T> var1) {
       CompoundTag var2 = new CompoundTag();
       var2.putString("Name", var1.id);
       var2.putLong("TriggerTime", var1.triggerTime);
       var2.put("Callback", this.callbacksRegistry.serialize(var1.callback));
