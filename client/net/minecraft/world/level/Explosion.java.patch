--- net/minecraft/world/level/Explosion.java
+++ net/minecraft/world/level/Explosion.java
@@ -9,10 +9,11 @@
 import java.util.Collections;
 import java.util.HashSet;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
+import java.util.Optional;
 import java.util.Random;
 import javax.annotation.Nullable;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.particles.ParticleTypes;
 import net.minecraft.server.level.ServerLevel;
@@ -23,13 +24,14 @@
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.item.ItemEntity;
 import net.minecraft.world.entity.item.PrimedTnt;
 import net.minecraft.world.entity.player.Player;
-import net.minecraft.world.entity.projectile.AbstractHurtingProjectile;
+import net.minecraft.world.entity.projectile.Projectile;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.enchantment.ProtectionEnchantment;
+import net.minecraft.world.level.block.BaseFireBlock;
 import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.entity.BlockEntity;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.material.FluidState;
@@ -38,21 +40,23 @@
 import net.minecraft.world.phys.AABB;
 import net.minecraft.world.phys.HitResult;
 import net.minecraft.world.phys.Vec3;
 
 public class Explosion {
+   private static final ExplosionDamageCalculator EXPLOSION_DAMAGE_CALCULATOR = new ExplosionDamageCalculator();
    private final boolean fire;
    private final Explosion.BlockInteraction blockInteraction;
    private final Random random;
    private final Level level;
    private final double x;
    private final double y;
    private final double z;
    @Nullable
    private final Entity source;
    private final float radius;
-   private DamageSource damageSource;
+   private final DamageSource damageSource;
+   private final ExplosionDamageCalculator damageCalculator;
    private final List<BlockPos> toBlow;
    private final Map<Player, Vec3> hitPlayers;
 
    public Explosion(Level var1, @Nullable Entity var2, double var3, double var5, double var7, float var9, List<BlockPos> var10) {
       this(var1, var2, var3, var5, var7, var9, false, Explosion.BlockInteraction.DESTROY, var10);
@@ -62,24 +66,33 @@
       this(var1, var2, var3, var5, var7, var9, var10, var11);
       this.toBlow.addAll(var12);
    }
 
    public Explosion(Level var1, @Nullable Entity var2, double var3, double var5, double var7, float var9, boolean var10, Explosion.BlockInteraction var11) {
+      this(var1, var2, (DamageSource)null, (ExplosionDamageCalculator)null, var3, var5, var7, var9, var10, var11);
+   }
+
+   public Explosion(Level var1, @Nullable Entity var2, @Nullable DamageSource var3, @Nullable ExplosionDamageCalculator var4, double var5, double var7, double var9, float var11, boolean var12, Explosion.BlockInteraction var13) {
       this.random = new Random();
       this.toBlow = Lists.newArrayList();
       this.hitPlayers = Maps.newHashMap();
       this.level = var1;
       this.source = var2;
-      this.radius = var9;
-      this.x = var3;
-      this.y = var5;
-      this.z = var7;
-      this.fire = var10;
-      this.blockInteraction = var11;
-      this.damageSource = DamageSource.explosion(this);
+      this.radius = var11;
+      this.x = var5;
+      this.y = var7;
+      this.z = var9;
+      this.fire = var12;
+      this.blockInteraction = var13;
+      this.damageSource = var3 == null ? DamageSource.explosion(this) : var3;
+      this.damageCalculator = var4 == null ? this.makeDamageCalculator(var2) : var4;
    }
 
+   private ExplosionDamageCalculator makeDamageCalculator(@Nullable Entity var1) {
+      return (ExplosionDamageCalculator)(var1 == null ? EXPLOSION_DAMAGE_CALCULATOR : new EntityBasedExplosionDamageCalculator(var1));
+   }
+
    public static float getSeenPercent(Vec3 var0, Entity var1) {
       AABB var2 = var1.getBoundingBox();
       double var3 = 1.0D / ((var2.maxX - var2.minX) * 2.0D + 1.0D);
       double var5 = 1.0D / ((var2.maxY - var2.minY) * 2.0D + 1.0D);
       double var7 = 1.0D / ((var2.maxZ - var2.minZ) * 2.0D + 1.0D);
@@ -94,11 +107,11 @@
                for(float var17 = 0.0F; var17 <= 1.0F; var17 = (float)((double)var17 + var7)) {
                   double var18 = Mth.lerp((double)var15, var2.minX, var2.maxX);
                   double var20 = Mth.lerp((double)var16, var2.minY, var2.maxY);
                   double var22 = Mth.lerp((double)var17, var2.minZ, var2.maxZ);
                   Vec3 var24 = new Vec3(var18 + var9, var20, var22 + var11);
-                  if (var1.level.clip(new ClipContext(var24, var0, ClipContext.Block.OUTLINE, ClipContext.Fluid.NONE, var1)).getType() == HitResult.Type.MISS) {
+                  if (var1.level.clip(new ClipContext(var24, var0, ClipContext.Block.COLLIDER, ClipContext.Fluid.NONE, var1)).getType() == HitResult.Type.MISS) {
                      ++var13;
                   }
 
                   ++var14;
                }
@@ -135,20 +148,16 @@
 
                   for(float var21 = 0.3F; var14 > 0.0F; var14 -= 0.22500001F) {
                      BlockPos var22 = new BlockPos(var15, var17, var19);
                      BlockState var23 = this.level.getBlockState(var22);
                      FluidState var24 = this.level.getFluidState(var22);
-                     if (!var23.isAir() || !var24.isEmpty()) {
-                        float var25 = Math.max(var23.getBlock().getExplosionResistance(), var24.getExplosionResistance());
-                        if (this.source != null) {
-                           var25 = this.source.getBlockExplosionResistance(this, this.level, var22, var23, var24, var25);
-                        }
-
-                        var14 -= (var25 + 0.3F) * 0.3F;
+                     Optional var25 = this.damageCalculator.getBlockExplosionResistance(this, this.level, var22, var23, var24);
+                     if (var25.isPresent()) {
+                        var14 -= ((Float)var25.get() + 0.3F) * 0.3F;
                      }
 
-                     if (var14 > 0.0F && (this.source == null || this.source.shouldBlockExplode(this, this.level, var22, var23, var14))) {
+                     if (var14 > 0.0F && this.damageCalculator.shouldBlockExplode(this, this.level, var22, var23, var14)) {
                         var1.add(var22);
                      }
 
                      var15 += var6 * 0.30000001192092896D;
                      var17 += var8 * 0.30000001192092896D;
@@ -174,11 +183,11 @@
          Entity var13 = (Entity)var34.get(var35);
          if (!var13.ignoreExplosion()) {
             double var36 = (double)(Mth.sqrt(var13.distanceToSqr(var11)) / var31);
             if (var36 <= 1.0D) {
                double var16 = var13.getX() - this.x;
-               double var18 = var13.getEyeY() - this.y;
+               double var18 = (var13 instanceof PrimedTnt ? var13.getY() : var13.getEyeY()) - this.y;
                double var20 = var13.getZ() - this.z;
                double var37 = (double)Mth.sqrt(var16 * var16 + var18 * var18 + var20 * var20);
                if (var37 != 0.0D) {
                   var16 /= var37;
                   var18 /= var37;
@@ -261,11 +270,11 @@
          Iterator var11 = this.toBlow.iterator();
 
          while(var11.hasNext()) {
             BlockPos var13 = (BlockPos)var11.next();
             if (this.random.nextInt(3) == 0 && this.level.getBlockState(var13).isAir() && this.level.getBlockState(var13.below()).isSolidRender(this.level, var13.below())) {
-               this.level.setBlockAndUpdate(var13, Blocks.FIRE.defaultBlockState());
+               this.level.setBlockAndUpdate(var13, BaseFireBlock.getState(this.level, var13));
             }
          }
       }
 
    }
@@ -290,14 +299,10 @@
 
    public DamageSource getDamageSource() {
       return this.damageSource;
    }
 
-   public void setDamageSource(DamageSource var1) {
-      this.damageSource = var1;
-   }
-
    public Map<Player, Vec3> getHitPlayers() {
       return this.hitPlayers;
    }
 
    @Nullable
@@ -307,11 +312,18 @@
       } else if (this.source instanceof PrimedTnt) {
          return ((PrimedTnt)this.source).getOwner();
       } else if (this.source instanceof LivingEntity) {
          return (LivingEntity)this.source;
       } else {
-         return this.source instanceof AbstractHurtingProjectile ? ((AbstractHurtingProjectile)this.source).owner : null;
+         if (this.source instanceof Projectile) {
+            Entity var1 = ((Projectile)this.source).getOwner();
+            if (var1 instanceof LivingEntity) {
+               return (LivingEntity)var1;
+            }
+         }
+
+         return null;
       }
    }
 
    public void clearToBlow() {
       this.toBlow.clear();
