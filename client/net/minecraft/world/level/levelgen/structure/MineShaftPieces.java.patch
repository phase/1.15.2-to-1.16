--- net/minecraft/world/level/levelgen/structure/MineShaftPieces.java
+++ net/minecraft/world/level/levelgen/structure/MineShaftPieces.java
@@ -12,11 +12,12 @@
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.entity.vehicle.MinecartChest;
 import net.minecraft.world.level.BlockGetter;
 import net.minecraft.world.level.ChunkPos;
-import net.minecraft.world.level.LevelAccessor;
+import net.minecraft.world.level.StructureFeatureManager;
+import net.minecraft.world.level.WorldGenLevel;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.FenceBlock;
 import net.minecraft.world.level.block.RailBlock;
 import net.minecraft.world.level.block.WallTorchBlock;
 import net.minecraft.world.level.block.entity.BlockEntity;
@@ -125,19 +126,19 @@
             }
          }
 
       }
 
-      public boolean postProcess(LevelAccessor var1, ChunkGenerator<?> var2, Random var3, BoundingBox var4, ChunkPos var5) {
-         if (this.edgesLiquid(var1, var4)) {
+      public boolean postProcess(WorldGenLevel var1, StructureFeatureManager var2, ChunkGenerator var3, Random var4, BoundingBox var5, ChunkPos var6, BlockPos var7) {
+         if (this.edgesLiquid(var1, var5)) {
             return false;
          } else {
-            this.generateBox(var1, var4, 0, 5, 0, 2, 7, 1, CAVE_AIR, CAVE_AIR, false);
-            this.generateBox(var1, var4, 0, 0, 7, 2, 2, 8, CAVE_AIR, CAVE_AIR, false);
+            this.generateBox(var1, var5, 0, 5, 0, 2, 7, 1, CAVE_AIR, CAVE_AIR, false);
+            this.generateBox(var1, var5, 0, 0, 7, 2, 2, 8, CAVE_AIR, CAVE_AIR, false);
 
-            for(int var6 = 0; var6 < 5; ++var6) {
-               this.generateBox(var1, var4, 0, 5 - var6 - (var6 < 4 ? 1 : 0), 2 + var6, 2, 7 - var6, 2 + var6, CAVE_AIR, CAVE_AIR, false);
+            for(int var8 = 0; var8 < 5; ++var8) {
+               this.generateBox(var1, var5, 0, 5 - var8 - (var8 < 4 ? 1 : 0), 2 + var8, 2, 7 - var8, 2 + var8, CAVE_AIR, CAVE_AIR, false);
             }
 
             return true;
          }
       }
@@ -241,44 +242,44 @@
             }
          }
 
       }
 
-      public boolean postProcess(LevelAccessor var1, ChunkGenerator<?> var2, Random var3, BoundingBox var4, ChunkPos var5) {
-         if (this.edgesLiquid(var1, var4)) {
+      public boolean postProcess(WorldGenLevel var1, StructureFeatureManager var2, ChunkGenerator var3, Random var4, BoundingBox var5, ChunkPos var6, BlockPos var7) {
+         if (this.edgesLiquid(var1, var5)) {
             return false;
          } else {
-            BlockState var6 = this.getPlanksBlock();
+            BlockState var8 = this.getPlanksBlock();
             if (this.isTwoFloored) {
-               this.generateBox(var1, var4, this.boundingBox.x0 + 1, this.boundingBox.y0, this.boundingBox.z0, this.boundingBox.x1 - 1, this.boundingBox.y0 + 3 - 1, this.boundingBox.z1, CAVE_AIR, CAVE_AIR, false);
-               this.generateBox(var1, var4, this.boundingBox.x0, this.boundingBox.y0, this.boundingBox.z0 + 1, this.boundingBox.x1, this.boundingBox.y0 + 3 - 1, this.boundingBox.z1 - 1, CAVE_AIR, CAVE_AIR, false);
-               this.generateBox(var1, var4, this.boundingBox.x0 + 1, this.boundingBox.y1 - 2, this.boundingBox.z0, this.boundingBox.x1 - 1, this.boundingBox.y1, this.boundingBox.z1, CAVE_AIR, CAVE_AIR, false);
-               this.generateBox(var1, var4, this.boundingBox.x0, this.boundingBox.y1 - 2, this.boundingBox.z0 + 1, this.boundingBox.x1, this.boundingBox.y1, this.boundingBox.z1 - 1, CAVE_AIR, CAVE_AIR, false);
-               this.generateBox(var1, var4, this.boundingBox.x0 + 1, this.boundingBox.y0 + 3, this.boundingBox.z0 + 1, this.boundingBox.x1 - 1, this.boundingBox.y0 + 3, this.boundingBox.z1 - 1, CAVE_AIR, CAVE_AIR, false);
+               this.generateBox(var1, var5, this.boundingBox.x0 + 1, this.boundingBox.y0, this.boundingBox.z0, this.boundingBox.x1 - 1, this.boundingBox.y0 + 3 - 1, this.boundingBox.z1, CAVE_AIR, CAVE_AIR, false);
+               this.generateBox(var1, var5, this.boundingBox.x0, this.boundingBox.y0, this.boundingBox.z0 + 1, this.boundingBox.x1, this.boundingBox.y0 + 3 - 1, this.boundingBox.z1 - 1, CAVE_AIR, CAVE_AIR, false);
+               this.generateBox(var1, var5, this.boundingBox.x0 + 1, this.boundingBox.y1 - 2, this.boundingBox.z0, this.boundingBox.x1 - 1, this.boundingBox.y1, this.boundingBox.z1, CAVE_AIR, CAVE_AIR, false);
+               this.generateBox(var1, var5, this.boundingBox.x0, this.boundingBox.y1 - 2, this.boundingBox.z0 + 1, this.boundingBox.x1, this.boundingBox.y1, this.boundingBox.z1 - 1, CAVE_AIR, CAVE_AIR, false);
+               this.generateBox(var1, var5, this.boundingBox.x0 + 1, this.boundingBox.y0 + 3, this.boundingBox.z0 + 1, this.boundingBox.x1 - 1, this.boundingBox.y0 + 3, this.boundingBox.z1 - 1, CAVE_AIR, CAVE_AIR, false);
             } else {
-               this.generateBox(var1, var4, this.boundingBox.x0 + 1, this.boundingBox.y0, this.boundingBox.z0, this.boundingBox.x1 - 1, this.boundingBox.y1, this.boundingBox.z1, CAVE_AIR, CAVE_AIR, false);
-               this.generateBox(var1, var4, this.boundingBox.x0, this.boundingBox.y0, this.boundingBox.z0 + 1, this.boundingBox.x1, this.boundingBox.y1, this.boundingBox.z1 - 1, CAVE_AIR, CAVE_AIR, false);
+               this.generateBox(var1, var5, this.boundingBox.x0 + 1, this.boundingBox.y0, this.boundingBox.z0, this.boundingBox.x1 - 1, this.boundingBox.y1, this.boundingBox.z1, CAVE_AIR, CAVE_AIR, false);
+               this.generateBox(var1, var5, this.boundingBox.x0, this.boundingBox.y0, this.boundingBox.z0 + 1, this.boundingBox.x1, this.boundingBox.y1, this.boundingBox.z1 - 1, CAVE_AIR, CAVE_AIR, false);
             }
 
-            this.placeSupportPillar(var1, var4, this.boundingBox.x0 + 1, this.boundingBox.y0, this.boundingBox.z0 + 1, this.boundingBox.y1);
-            this.placeSupportPillar(var1, var4, this.boundingBox.x0 + 1, this.boundingBox.y0, this.boundingBox.z1 - 1, this.boundingBox.y1);
-            this.placeSupportPillar(var1, var4, this.boundingBox.x1 - 1, this.boundingBox.y0, this.boundingBox.z0 + 1, this.boundingBox.y1);
-            this.placeSupportPillar(var1, var4, this.boundingBox.x1 - 1, this.boundingBox.y0, this.boundingBox.z1 - 1, this.boundingBox.y1);
+            this.placeSupportPillar(var1, var5, this.boundingBox.x0 + 1, this.boundingBox.y0, this.boundingBox.z0 + 1, this.boundingBox.y1);
+            this.placeSupportPillar(var1, var5, this.boundingBox.x0 + 1, this.boundingBox.y0, this.boundingBox.z1 - 1, this.boundingBox.y1);
+            this.placeSupportPillar(var1, var5, this.boundingBox.x1 - 1, this.boundingBox.y0, this.boundingBox.z0 + 1, this.boundingBox.y1);
+            this.placeSupportPillar(var1, var5, this.boundingBox.x1 - 1, this.boundingBox.y0, this.boundingBox.z1 - 1, this.boundingBox.y1);
 
-            for(int var7 = this.boundingBox.x0; var7 <= this.boundingBox.x1; ++var7) {
-               for(int var8 = this.boundingBox.z0; var8 <= this.boundingBox.z1; ++var8) {
-                  if (this.getBlock(var1, var7, this.boundingBox.y0 - 1, var8, var4).isAir() && this.isInterior(var1, var7, this.boundingBox.y0 - 1, var8, var4)) {
-                     this.placeBlock(var1, var6, var7, this.boundingBox.y0 - 1, var8, var4);
+            for(int var9 = this.boundingBox.x0; var9 <= this.boundingBox.x1; ++var9) {
+               for(int var10 = this.boundingBox.z0; var10 <= this.boundingBox.z1; ++var10) {
+                  if (this.getBlock(var1, var9, this.boundingBox.y0 - 1, var10, var5).isAir() && this.isInterior(var1, var9, this.boundingBox.y0 - 1, var10, var5)) {
+                     this.placeBlock(var1, var8, var9, this.boundingBox.y0 - 1, var10, var5);
                   }
                }
             }
 
             return true;
          }
       }
 
-      private void placeSupportPillar(LevelAccessor var1, BoundingBox var2, int var3, int var4, int var5, int var6) {
+      private void placeSupportPillar(WorldGenLevel var1, BoundingBox var2, int var3, int var4, int var5, int var6) {
          if (!this.getBlock(var1, var3, var6 + 1, var5, var2).isAir()) {
             this.generateBox(var1, var2, var3, var4, var5, var3, var6, var5, this.getPlanksBlock(), CAVE_AIR, false);
          }
 
       }
@@ -422,106 +423,106 @@
             }
          }
 
       }
 
-      protected boolean createChest(LevelAccessor var1, BoundingBox var2, Random var3, int var4, int var5, int var6, ResourceLocation var7) {
+      protected boolean createChest(WorldGenLevel var1, BoundingBox var2, Random var3, int var4, int var5, int var6, ResourceLocation var7) {
          BlockPos var8 = new BlockPos(this.getWorldX(var4, var6), this.getWorldY(var5), this.getWorldZ(var4, var6));
          if (var2.isInside(var8) && var1.getBlockState(var8).isAir() && !var1.getBlockState(var8.below()).isAir()) {
             BlockState var9 = (BlockState)Blocks.RAIL.defaultBlockState().setValue(RailBlock.SHAPE, var3.nextBoolean() ? RailShape.NORTH_SOUTH : RailShape.EAST_WEST);
             this.placeBlock(var1, var9, var4, var5, var6, var2);
-            MinecartChest var10 = new MinecartChest(var1.getLevel(), (double)((float)var8.getX() + 0.5F), (double)((float)var8.getY() + 0.5F), (double)((float)var8.getZ() + 0.5F));
+            MinecartChest var10 = new MinecartChest(var1.getLevel(), (double)var8.getX() + 0.5D, (double)var8.getY() + 0.5D, (double)var8.getZ() + 0.5D);
             var10.setLootTable(var7, var3.nextLong());
             var1.addFreshEntity(var10);
             return true;
          } else {
             return false;
          }
       }
 
-      public boolean postProcess(LevelAccessor var1, ChunkGenerator<?> var2, Random var3, BoundingBox var4, ChunkPos var5) {
-         if (this.edgesLiquid(var1, var4)) {
+      public boolean postProcess(WorldGenLevel var1, StructureFeatureManager var2, ChunkGenerator var3, Random var4, BoundingBox var5, ChunkPos var6, BlockPos var7) {
+         if (this.edgesLiquid(var1, var5)) {
             return false;
          } else {
-            boolean var6 = false;
-            boolean var7 = true;
             boolean var8 = false;
             boolean var9 = true;
-            int var10 = this.numSections * 5 - 1;
-            BlockState var11 = this.getPlanksBlock();
-            this.generateBox(var1, var4, 0, 0, 0, 2, 1, var10, CAVE_AIR, CAVE_AIR, false);
-            this.generateMaybeBox(var1, var4, var3, 0.8F, 0, 2, 0, 2, 2, var10, CAVE_AIR, CAVE_AIR, false, false);
+            boolean var10 = false;
+            boolean var11 = true;
+            int var12 = this.numSections * 5 - 1;
+            BlockState var13 = this.getPlanksBlock();
+            this.generateBox(var1, var5, 0, 0, 0, 2, 1, var12, CAVE_AIR, CAVE_AIR, false);
+            this.generateMaybeBox(var1, var5, var4, 0.8F, 0, 2, 0, 2, 2, var12, CAVE_AIR, CAVE_AIR, false, false);
             if (this.spiderCorridor) {
-               this.generateMaybeBox(var1, var4, var3, 0.6F, 0, 0, 0, 2, 1, var10, Blocks.COBWEB.defaultBlockState(), CAVE_AIR, false, true);
+               this.generateMaybeBox(var1, var5, var4, 0.6F, 0, 0, 0, 2, 1, var12, Blocks.COBWEB.defaultBlockState(), CAVE_AIR, false, true);
             }
 
-            int var12;
-            int var13;
-            for(var12 = 0; var12 < this.numSections; ++var12) {
-               var13 = 2 + var12 * 5;
-               this.placeSupport(var1, var4, 0, 0, var13, 2, 2, var3);
-               this.placeCobWeb(var1, var4, var3, 0.1F, 0, 2, var13 - 1);
-               this.placeCobWeb(var1, var4, var3, 0.1F, 2, 2, var13 - 1);
-               this.placeCobWeb(var1, var4, var3, 0.1F, 0, 2, var13 + 1);
-               this.placeCobWeb(var1, var4, var3, 0.1F, 2, 2, var13 + 1);
-               this.placeCobWeb(var1, var4, var3, 0.05F, 0, 2, var13 - 2);
-               this.placeCobWeb(var1, var4, var3, 0.05F, 2, 2, var13 - 2);
-               this.placeCobWeb(var1, var4, var3, 0.05F, 0, 2, var13 + 2);
-               this.placeCobWeb(var1, var4, var3, 0.05F, 2, 2, var13 + 2);
-               if (var3.nextInt(100) == 0) {
-                  this.createChest(var1, var4, var3, 2, 0, var13 - 1, BuiltInLootTables.ABANDONED_MINESHAFT);
+            int var14;
+            int var15;
+            for(var14 = 0; var14 < this.numSections; ++var14) {
+               var15 = 2 + var14 * 5;
+               this.placeSupport(var1, var5, 0, 0, var15, 2, 2, var4);
+               this.placeCobWeb(var1, var5, var4, 0.1F, 0, 2, var15 - 1);
+               this.placeCobWeb(var1, var5, var4, 0.1F, 2, 2, var15 - 1);
+               this.placeCobWeb(var1, var5, var4, 0.1F, 0, 2, var15 + 1);
+               this.placeCobWeb(var1, var5, var4, 0.1F, 2, 2, var15 + 1);
+               this.placeCobWeb(var1, var5, var4, 0.05F, 0, 2, var15 - 2);
+               this.placeCobWeb(var1, var5, var4, 0.05F, 2, 2, var15 - 2);
+               this.placeCobWeb(var1, var5, var4, 0.05F, 0, 2, var15 + 2);
+               this.placeCobWeb(var1, var5, var4, 0.05F, 2, 2, var15 + 2);
+               if (var4.nextInt(100) == 0) {
+                  this.createChest(var1, var5, var4, 2, 0, var15 - 1, BuiltInLootTables.ABANDONED_MINESHAFT);
                }
 
-               if (var3.nextInt(100) == 0) {
-                  this.createChest(var1, var4, var3, 0, 0, var13 + 1, BuiltInLootTables.ABANDONED_MINESHAFT);
+               if (var4.nextInt(100) == 0) {
+                  this.createChest(var1, var5, var4, 0, 0, var15 + 1, BuiltInLootTables.ABANDONED_MINESHAFT);
                }
 
                if (this.spiderCorridor && !this.hasPlacedSpider) {
-                  int var14 = this.getWorldY(0);
-                  int var15 = var13 - 1 + var3.nextInt(3);
-                  int var16 = this.getWorldX(1, var15);
-                  int var17 = this.getWorldZ(1, var15);
-                  BlockPos var18 = new BlockPos(var16, var14, var17);
-                  if (var4.isInside(var18) && this.isInterior(var1, 1, 0, var15, var4)) {
+                  int var16 = this.getWorldY(0);
+                  int var17 = var15 - 1 + var4.nextInt(3);
+                  int var18 = this.getWorldX(1, var17);
+                  int var19 = this.getWorldZ(1, var17);
+                  BlockPos var20 = new BlockPos(var18, var16, var19);
+                  if (var5.isInside(var20) && this.isInterior(var1, 1, 0, var17, var5)) {
                      this.hasPlacedSpider = true;
-                     var1.setBlock(var18, Blocks.SPAWNER.defaultBlockState(), 2);
-                     BlockEntity var19 = var1.getBlockEntity(var18);
-                     if (var19 instanceof SpawnerBlockEntity) {
-                        ((SpawnerBlockEntity)var19).getSpawner().setEntityId(EntityType.CAVE_SPIDER);
+                     var1.setBlock(var20, Blocks.SPAWNER.defaultBlockState(), 2);
+                     BlockEntity var21 = var1.getBlockEntity(var20);
+                     if (var21 instanceof SpawnerBlockEntity) {
+                        ((SpawnerBlockEntity)var21).getSpawner().setEntityId(EntityType.CAVE_SPIDER);
                      }
                   }
                }
             }
 
-            for(var12 = 0; var12 <= 2; ++var12) {
-               for(var13 = 0; var13 <= var10; ++var13) {
-                  boolean var21 = true;
-                  BlockState var23 = this.getBlock(var1, var12, -1, var13, var4);
-                  if (var23.isAir() && this.isInterior(var1, var12, -1, var13, var4)) {
-                     boolean var25 = true;
-                     this.placeBlock(var1, var11, var12, -1, var13, var4);
+            for(var14 = 0; var14 <= 2; ++var14) {
+               for(var15 = 0; var15 <= var12; ++var15) {
+                  boolean var23 = true;
+                  BlockState var25 = this.getBlock(var1, var14, -1, var15, var5);
+                  if (var25.isAir() && this.isInterior(var1, var14, -1, var15, var5)) {
+                     boolean var27 = true;
+                     this.placeBlock(var1, var13, var14, -1, var15, var5);
                   }
                }
             }
 
             if (this.hasRails) {
-               BlockState var20 = (BlockState)Blocks.RAIL.defaultBlockState().setValue(RailBlock.SHAPE, RailShape.NORTH_SOUTH);
+               BlockState var22 = (BlockState)Blocks.RAIL.defaultBlockState().setValue(RailBlock.SHAPE, RailShape.NORTH_SOUTH);
 
-               for(var13 = 0; var13 <= var10; ++var13) {
-                  BlockState var22 = this.getBlock(var1, 1, -1, var13, var4);
-                  if (!var22.isAir() && var22.isSolidRender(var1, new BlockPos(this.getWorldX(1, var13), this.getWorldY(-1), this.getWorldZ(1, var13)))) {
-                     float var24 = this.isInterior(var1, 1, 0, var13, var4) ? 0.7F : 0.9F;
-                     this.maybeGenerateBlock(var1, var4, var3, var24, 1, 0, var13, var20);
+               for(var15 = 0; var15 <= var12; ++var15) {
+                  BlockState var24 = this.getBlock(var1, 1, -1, var15, var5);
+                  if (!var24.isAir() && var24.isSolidRender(var1, new BlockPos(this.getWorldX(1, var15), this.getWorldY(-1), this.getWorldZ(1, var15)))) {
+                     float var26 = this.isInterior(var1, 1, 0, var15, var5) ? 0.7F : 0.9F;
+                     this.maybeGenerateBlock(var1, var5, var4, var26, 1, 0, var15, var22);
                   }
                }
             }
 
             return true;
          }
       }
 
-      private void placeSupport(LevelAccessor var1, BoundingBox var2, int var3, int var4, int var5, int var6, int var7, Random var8) {
+      private void placeSupport(WorldGenLevel var1, BoundingBox var2, int var3, int var4, int var5, int var6, int var7, Random var8) {
          if (this.isSupportingBox(var1, var2, var3, var7, var6, var5)) {
             BlockState var9 = this.getPlanksBlock();
             BlockState var10 = this.getFenceBlock();
             this.generateBox(var1, var2, var3, var4, var5, var3, var6 - 1, var5, (BlockState)var10.setValue(FenceBlock.WEST, true), CAVE_AIR, false);
             this.generateBox(var1, var2, var7, var4, var5, var7, var6 - 1, var5, (BlockState)var10.setValue(FenceBlock.EAST, true), CAVE_AIR, false);
@@ -535,11 +536,11 @@
             }
 
          }
       }
 
-      private void placeCobWeb(LevelAccessor var1, BoundingBox var2, Random var3, float var4, int var5, int var6, int var7) {
+      private void placeCobWeb(WorldGenLevel var1, BoundingBox var2, Random var3, float var4, int var5, int var6, int var7) {
          if (this.isInterior(var1, var5, var6, var7, var2)) {
             this.maybeGenerateBlock(var1, var2, var3, var4, var5, var6, var7, Blocks.COBWEB.defaultBlockState());
          }
 
       }
@@ -626,24 +627,24 @@
             }
          }
 
       }
 
-      public boolean postProcess(LevelAccessor var1, ChunkGenerator<?> var2, Random var3, BoundingBox var4, ChunkPos var5) {
-         if (this.edgesLiquid(var1, var4)) {
+      public boolean postProcess(WorldGenLevel var1, StructureFeatureManager var2, ChunkGenerator var3, Random var4, BoundingBox var5, ChunkPos var6, BlockPos var7) {
+         if (this.edgesLiquid(var1, var5)) {
             return false;
          } else {
-            this.generateBox(var1, var4, this.boundingBox.x0, this.boundingBox.y0, this.boundingBox.z0, this.boundingBox.x1, this.boundingBox.y0, this.boundingBox.z1, Blocks.DIRT.defaultBlockState(), CAVE_AIR, true);
-            this.generateBox(var1, var4, this.boundingBox.x0, this.boundingBox.y0 + 1, this.boundingBox.z0, this.boundingBox.x1, Math.min(this.boundingBox.y0 + 3, this.boundingBox.y1), this.boundingBox.z1, CAVE_AIR, CAVE_AIR, false);
-            Iterator var6 = this.childEntranceBoxes.iterator();
+            this.generateBox(var1, var5, this.boundingBox.x0, this.boundingBox.y0, this.boundingBox.z0, this.boundingBox.x1, this.boundingBox.y0, this.boundingBox.z1, Blocks.DIRT.defaultBlockState(), CAVE_AIR, true);
+            this.generateBox(var1, var5, this.boundingBox.x0, this.boundingBox.y0 + 1, this.boundingBox.z0, this.boundingBox.x1, Math.min(this.boundingBox.y0 + 3, this.boundingBox.y1), this.boundingBox.z1, CAVE_AIR, CAVE_AIR, false);
+            Iterator var8 = this.childEntranceBoxes.iterator();
 
-            while(var6.hasNext()) {
-               BoundingBox var7 = (BoundingBox)var6.next();
-               this.generateBox(var1, var4, var7.x0, var7.y1 - 2, var7.z0, var7.x1, var7.y1, var7.z1, CAVE_AIR, CAVE_AIR, false);
+            while(var8.hasNext()) {
+               BoundingBox var9 = (BoundingBox)var8.next();
+               this.generateBox(var1, var5, var9.x0, var9.y1 - 2, var9.z0, var9.x1, var9.y1, var9.z1, CAVE_AIR, CAVE_AIR, false);
             }
 
-            this.generateUpperHalfSphere(var1, var4, this.boundingBox.x0, this.boundingBox.y0 + 4, this.boundingBox.z0, this.boundingBox.x1, this.boundingBox.y1, this.boundingBox.z1, CAVE_AIR, false);
+            this.generateUpperHalfSphere(var1, var5, this.boundingBox.x0, this.boundingBox.y0 + 4, this.boundingBox.z0, this.boundingBox.x1, this.boundingBox.y1, this.boundingBox.z1, CAVE_AIR, false);
             return true;
          }
       }
 
       public void move(int var1, int var2, int var3) {
