--- net/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplate.java
+++ net/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplate.java
@@ -1,14 +1,19 @@
 package net.minecraft.world.level.levelgen.structure.templatesystem;
 
 import com.google.common.collect.Lists;
+import com.google.common.collect.Maps;
 import com.mojang.datafixers.util.Pair;
 import java.util.ArrayList;
+import java.util.Collections;
 import java.util.Comparator;
 import java.util.Iterator;
 import java.util.List;
+import java.util.Map;
 import java.util.Optional;
+import java.util.Random;
+import java.util.stream.Collectors;
 import javax.annotation.Nullable;
 import net.minecraft.SharedConstants;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.core.IdMapper;
@@ -18,30 +23,36 @@
 import net.minecraft.nbt.ListTag;
 import net.minecraft.nbt.NbtUtils;
 import net.minecraft.world.Clearable;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EntityType;
+import net.minecraft.world.entity.Mob;
+import net.minecraft.world.entity.MobSpawnType;
+import net.minecraft.world.entity.SpawnGroupData;
 import net.minecraft.world.entity.decoration.Painting;
 import net.minecraft.world.entity.player.Player;
+import net.minecraft.world.level.EmptyBlockGetter;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.LevelAccessor;
+import net.minecraft.world.level.ServerLevelAccessor;
 import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.LiquidBlockContainer;
 import net.minecraft.world.level.block.Mirror;
 import net.minecraft.world.level.block.Rotation;
 import net.minecraft.world.level.block.entity.BlockEntity;
+import net.minecraft.world.level.block.entity.RandomizableContainerBlockEntity;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.levelgen.structure.BoundingBox;
 import net.minecraft.world.level.material.FluidState;
 import net.minecraft.world.phys.AABB;
 import net.minecraft.world.phys.Vec3;
 import net.minecraft.world.phys.shapes.BitSetDiscreteVoxelShape;
 import net.minecraft.world.phys.shapes.DiscreteVoxelShape;
 
 public class StructureTemplate {
-   private final List<List<StructureTemplate.StructureBlockInfo>> palettes = Lists.newArrayList();
+   private final List<StructureTemplate.Palette> palettes = Lists.newArrayList();
    private final List<StructureTemplate.StructureEntityInfo> entityInfoList = Lists.newArrayList();
    private BlockPos size;
    private String author;
 
    public StructureTemplate() {
@@ -71,63 +82,88 @@
          BlockPos var11 = new BlockPos(Math.max(var2.getX(), var6.getX()), Math.max(var2.getY(), var6.getY()), Math.max(var2.getZ(), var6.getZ()));
          this.size = var3;
          Iterator var12 = BlockPos.betweenClosed(var10, var11).iterator();
 
          while(true) {
-            while(true) {
-               BlockPos var13;
-               BlockPos var14;
-               BlockState var15;
-               do {
-                  if (!var12.hasNext()) {
-                     ArrayList var18 = Lists.newArrayList();
-                     var18.addAll(var7);
-                     var18.addAll(var8);
-                     var18.addAll(var9);
-                     this.palettes.clear();
-                     this.palettes.add(var18);
-                     if (var4) {
-                        this.fillEntityList(var1, var10, var11.offset(1, 1, 1));
-                     } else {
-                        this.entityInfoList.clear();
-                     }
-
-                     return;
+            BlockPos var13;
+            BlockPos var14;
+            BlockState var15;
+            do {
+               if (!var12.hasNext()) {
+                  List var19 = buildInfoList(var7, var8, var9);
+                  this.palettes.clear();
+                  this.palettes.add(new StructureTemplate.Palette(var19));
+                  if (var4) {
+                     this.fillEntityList(var1, var10, var11.offset(1, 1, 1));
+                  } else {
+                     this.entityInfoList.clear();
                   }
 
-                  var13 = (BlockPos)var12.next();
-                  var14 = var13.subtract(var10);
-                  var15 = var1.getBlockState(var13);
-               } while(var5 != null && var5 == var15.getBlock());
-
-               BlockEntity var16 = var1.getBlockEntity(var13);
-               if (var16 != null) {
-                  CompoundTag var17 = var16.save(new CompoundTag());
-                  var17.remove("x");
-                  var17.remove("y");
-                  var17.remove("z");
-                  var8.add(new StructureTemplate.StructureBlockInfo(var14, var15, var17));
-               } else if (!var15.isSolidRender(var1, var13) && !var15.isCollisionShapeFullBlock(var1, var13)) {
-                  var9.add(new StructureTemplate.StructureBlockInfo(var14, var15, (CompoundTag)null));
-               } else {
-                  var7.add(new StructureTemplate.StructureBlockInfo(var14, var15, (CompoundTag)null));
+                  return;
                }
+
+               var13 = (BlockPos)var12.next();
+               var14 = var13.subtract(var10);
+               var15 = var1.getBlockState(var13);
+            } while(var5 != null && var5 == var15.getBlock());
+
+            BlockEntity var16 = var1.getBlockEntity(var13);
+            StructureTemplate.StructureBlockInfo var17;
+            if (var16 != null) {
+               CompoundTag var18 = var16.save(new CompoundTag());
+               var18.remove("x");
+               var18.remove("y");
+               var18.remove("z");
+               var17 = new StructureTemplate.StructureBlockInfo(var14, var15, var18.copy());
+            } else {
+               var17 = new StructureTemplate.StructureBlockInfo(var14, var15, (CompoundTag)null);
             }
+
+            addToLists(var17, var7, var8, var9);
          }
       }
    }
 
+   private static void addToLists(StructureTemplate.StructureBlockInfo var0, List<StructureTemplate.StructureBlockInfo> var1, List<StructureTemplate.StructureBlockInfo> var2, List<StructureTemplate.StructureBlockInfo> var3) {
+      if (var0.nbt != null) {
+         var2.add(var0);
+      } else if (!var0.state.getBlock().hasDynamicShape() && var0.state.isCollisionShapeFullBlock(EmptyBlockGetter.INSTANCE, BlockPos.ZERO)) {
+         var1.add(var0);
+      } else {
+         var3.add(var0);
+      }
+
+   }
+
+   private static List<StructureTemplate.StructureBlockInfo> buildInfoList(List<StructureTemplate.StructureBlockInfo> var0, List<StructureTemplate.StructureBlockInfo> var1, List<StructureTemplate.StructureBlockInfo> var2) {
+      Comparator var3 = Comparator.comparingInt((var0x) -> {
+         return var0x.pos.getY();
+      }).thenComparingInt((var0x) -> {
+         return var0x.pos.getX();
+      }).thenComparingInt((var0x) -> {
+         return var0x.pos.getZ();
+      });
+      var0.sort(var3);
+      var2.sort(var3);
+      var1.sort(var3);
+      ArrayList var4 = Lists.newArrayList();
+      var4.addAll(var0);
+      var4.addAll(var2);
+      var4.addAll(var1);
+      return var4;
+   }
+
    private void fillEntityList(Level var1, BlockPos var2, BlockPos var3) {
       List var4 = var1.getEntitiesOfClass(Entity.class, new AABB(var2, var3), (var0) -> {
          return !(var0 instanceof Player);
       });
       this.entityInfoList.clear();
 
       Vec3 var7;
       CompoundTag var8;
       BlockPos var9;
-      for(Iterator var5 = var4.iterator(); var5.hasNext(); this.entityInfoList.add(new StructureTemplate.StructureEntityInfo(var7, var9, var8))) {
+      for(Iterator var5 = var4.iterator(); var5.hasNext(); this.entityInfoList.add(new StructureTemplate.StructureEntityInfo(var7, var9, var8.copy()))) {
          Entity var6 = (Entity)var5.next();
          var7 = new Vec3(var6.getX() - (double)var2.getX(), var6.getY() - (double)var2.getY(), var6.getZ() - (double)var2.getZ());
          var8 = new CompoundTag();
          var6.save(var8);
          if (var6 instanceof Painting) {
@@ -144,27 +180,28 @@
    }
 
    public List<StructureTemplate.StructureBlockInfo> filterBlocks(BlockPos var1, StructurePlaceSettings var2, Block var3, boolean var4) {
       ArrayList var5 = Lists.newArrayList();
       BoundingBox var6 = var2.getBoundingBox();
-      Iterator var7 = var2.getRandomPalette(this.palettes, var1).iterator();
+      if (this.palettes.isEmpty()) {
+         return Collections.emptyList();
+      } else {
+         Iterator var7 = var2.getRandomPalette(this.palettes, var1).blocks(var3).iterator();
 
-      while(true) {
-         StructureTemplate.StructureBlockInfo var8;
-         BlockPos var9;
-         do {
-            if (!var7.hasNext()) {
-               return var5;
-            }
+         while(true) {
+            StructureTemplate.StructureBlockInfo var8;
+            BlockPos var9;
+            do {
+               if (!var7.hasNext()) {
+                  return var5;
+               }
 
-            var8 = (StructureTemplate.StructureBlockInfo)var7.next();
-            var9 = var4 ? calculateRelativePosition(var2, var8.pos).offset(var1) : var8.pos;
-         } while(var6 != null && !var6.isInside(var9));
+               var8 = (StructureTemplate.StructureBlockInfo)var7.next();
+               var9 = var4 ? calculateRelativePosition(var2, var8.pos).offset(var1) : var8.pos;
+            } while(var6 != null && !var6.isInside(var9));
 
-         BlockState var10 = var8.state;
-         if (var10.getBlock() == var3) {
-            var5.add(new StructureTemplate.StructureBlockInfo(var9, var10.rotate(var2.getRotation()), var8.nbt));
+            var5.add(new StructureTemplate.StructureBlockInfo(var9, var8.state.rotate(var2.getRotation()), var8.nbt));
          }
       }
    }
 
    public BlockPos calculateConnectedPosition(StructurePlaceSettings var1, BlockPos var2, StructurePlaceSettings var3, BlockPos var4) {
@@ -175,163 +212,167 @@
 
    public static BlockPos calculateRelativePosition(StructurePlaceSettings var0, BlockPos var1) {
       return transform(var1, var0.getMirror(), var0.getRotation(), var0.getRotationPivot());
    }
 
-   public void placeInWorldChunk(LevelAccessor var1, BlockPos var2, StructurePlaceSettings var3) {
+   public void placeInWorldChunk(ServerLevelAccessor var1, BlockPos var2, StructurePlaceSettings var3, Random var4) {
       var3.updateBoundingBoxFromChunkPos();
-      this.placeInWorld(var1, var2, var3);
+      this.placeInWorld(var1, var2, var3, var4);
    }
 
-   public void placeInWorld(LevelAccessor var1, BlockPos var2, StructurePlaceSettings var3) {
-      this.placeInWorld(var1, var2, var3, 2);
+   public void placeInWorld(ServerLevelAccessor var1, BlockPos var2, StructurePlaceSettings var3, Random var4) {
+      this.placeInWorld(var1, var2, var2, var3, var4, 2);
    }
 
-   public boolean placeInWorld(LevelAccessor var1, BlockPos var2, StructurePlaceSettings var3, int var4) {
+   public boolean placeInWorld(ServerLevelAccessor var1, BlockPos var2, BlockPos var3, StructurePlaceSettings var4, Random var5, int var6) {
       if (this.palettes.isEmpty()) {
          return false;
       } else {
-         List var5 = var3.getRandomPalette(this.palettes, var2);
-         if ((!var5.isEmpty() || !var3.isIgnoreEntities() && !this.entityInfoList.isEmpty()) && this.size.getX() >= 1 && this.size.getY() >= 1 && this.size.getZ() >= 1) {
-            BoundingBox var6 = var3.getBoundingBox();
-            ArrayList var7 = Lists.newArrayListWithCapacity(var3.shouldKeepLiquids() ? var5.size() : 0);
-            ArrayList var8 = Lists.newArrayListWithCapacity(var5.size());
-            int var9 = Integer.MAX_VALUE;
-            int var10 = Integer.MAX_VALUE;
+         List var7 = var4.getRandomPalette(this.palettes, var2).blocks();
+         if ((!var7.isEmpty() || !var4.isIgnoreEntities() && !this.entityInfoList.isEmpty()) && this.size.getX() >= 1 && this.size.getY() >= 1 && this.size.getZ() >= 1) {
+            BoundingBox var8 = var4.getBoundingBox();
+            ArrayList var9 = Lists.newArrayListWithCapacity(var4.shouldKeepLiquids() ? var7.size() : 0);
+            ArrayList var10 = Lists.newArrayListWithCapacity(var7.size());
             int var11 = Integer.MAX_VALUE;
-            int var12 = Integer.MIN_VALUE;
-            int var13 = Integer.MIN_VALUE;
+            int var12 = Integer.MAX_VALUE;
+            int var13 = Integer.MAX_VALUE;
             int var14 = Integer.MIN_VALUE;
-            List var15 = processBlockInfos(var1, var2, var3, var5);
-            Iterator var16 = var15.iterator();
+            int var15 = Integer.MIN_VALUE;
+            int var16 = Integer.MIN_VALUE;
+            List var17 = processBlockInfos(var1, var2, var3, var4, var7);
+            Iterator var18 = var17.iterator();
 
             while(true) {
-               StructureTemplate.StructureBlockInfo var17;
-               BlockPos var18;
-               BlockEntity var21;
+               StructureTemplate.StructureBlockInfo var19;
+               BlockPos var20;
+               BlockEntity var23;
                do {
-                  if (!var16.hasNext()) {
-                     boolean var25 = true;
-                     Direction[] var26 = new Direction[]{Direction.UP, Direction.NORTH, Direction.EAST, Direction.SOUTH, Direction.WEST};
+                  if (!var18.hasNext()) {
+                     boolean var27 = true;
+                     Direction[] var28 = new Direction[]{Direction.UP, Direction.NORTH, Direction.EAST, Direction.SOUTH, Direction.WEST};
 
-                     Iterator var27;
-                     BlockPos var32;
-                     BlockState var36;
-                     while(var25 && !var7.isEmpty()) {
-                        var25 = false;
-                        var27 = var7.iterator();
+                     Iterator var29;
+                     BlockPos var34;
+                     BlockState var38;
+                     while(var27 && !var9.isEmpty()) {
+                        var27 = false;
+                        var29 = var9.iterator();
 
-                        while(var27.hasNext()) {
-                           BlockPos var29 = (BlockPos)var27.next();
-                           var32 = var29;
-                           FluidState var34 = var1.getFluidState(var29);
+                        while(var29.hasNext()) {
+                           BlockPos var31 = (BlockPos)var29.next();
+                           var34 = var31;
+                           FluidState var36 = var1.getFluidState(var31);
 
-                           for(int var22 = 0; var22 < var26.length && !var34.isSource(); ++var22) {
-                              BlockPos var23 = var32.relative(var26[var22]);
-                              FluidState var24 = var1.getFluidState(var23);
-                              if (var24.getHeight(var1, var23) > var34.getHeight(var1, var32) || var24.isSource() && !var34.isSource()) {
-                                 var34 = var24;
-                                 var32 = var23;
+                           for(int var24 = 0; var24 < var28.length && !var36.isSource(); ++var24) {
+                              BlockPos var25 = var34.relative(var28[var24]);
+                              FluidState var26 = var1.getFluidState(var25);
+                              if (var26.getHeight(var1, var25) > var36.getHeight(var1, var34) || var26.isSource() && !var36.isSource()) {
+                                 var36 = var26;
+                                 var34 = var25;
                               }
                            }
 
-                           if (var34.isSource()) {
-                              var36 = var1.getBlockState(var29);
-                              Block var39 = var36.getBlock();
-                              if (var39 instanceof LiquidBlockContainer) {
-                                 ((LiquidBlockContainer)var39).placeLiquid(var1, var29, var36, var34);
-                                 var25 = true;
-                                 var27.remove();
+                           if (var36.isSource()) {
+                              var38 = var1.getBlockState(var31);
+                              Block var41 = var38.getBlock();
+                              if (var41 instanceof LiquidBlockContainer) {
+                                 ((LiquidBlockContainer)var41).placeLiquid(var1, var31, var38, var36);
+                                 var27 = true;
+                                 var29.remove();
                               }
                            }
                         }
                      }
 
-                     if (var9 <= var12) {
-                        if (!var3.getKnownShape()) {
-                           BitSetDiscreteVoxelShape var28 = new BitSetDiscreteVoxelShape(var12 - var9 + 1, var13 - var10 + 1, var14 - var11 + 1);
-                           int var30 = var9;
-                           int var33 = var10;
-                           int var35 = var11;
-                           Iterator var38 = var8.iterator();
+                     if (var11 <= var14) {
+                        if (!var4.getKnownShape()) {
+                           BitSetDiscreteVoxelShape var30 = new BitSetDiscreteVoxelShape(var14 - var11 + 1, var15 - var12 + 1, var16 - var13 + 1);
+                           int var32 = var11;
+                           int var35 = var12;
+                           int var37 = var13;
+                           Iterator var40 = var10.iterator();
 
-                           while(var38.hasNext()) {
-                              Pair var40 = (Pair)var38.next();
-                              BlockPos var41 = (BlockPos)var40.getFirst();
-                              var28.setFull(var41.getX() - var30, var41.getY() - var33, var41.getZ() - var35, true, true);
+                           while(var40.hasNext()) {
+                              Pair var42 = (Pair)var40.next();
+                              BlockPos var43 = (BlockPos)var42.getFirst();
+                              var30.setFull(var43.getX() - var32, var43.getY() - var35, var43.getZ() - var37, true, true);
                            }
 
-                           updateShapeAtEdge(var1, var4, var28, var30, var33, var35);
+                           updateShapeAtEdge(var1, var6, var30, var32, var35, var37);
                         }
 
-                        var27 = var8.iterator();
+                        var29 = var10.iterator();
 
-                        while(var27.hasNext()) {
-                           Pair var31 = (Pair)var27.next();
-                           var32 = (BlockPos)var31.getFirst();
-                           if (!var3.getKnownShape()) {
-                              BlockState var37 = var1.getBlockState(var32);
-                              var36 = Block.updateFromNeighbourShapes(var37, var1, var32);
-                              if (var37 != var36) {
-                                 var1.setBlock(var32, var36, var4 & -2 | 16);
+                        while(var29.hasNext()) {
+                           Pair var33 = (Pair)var29.next();
+                           var34 = (BlockPos)var33.getFirst();
+                           if (!var4.getKnownShape()) {
+                              BlockState var39 = var1.getBlockState(var34);
+                              var38 = Block.updateFromNeighbourShapes(var39, var1, var34);
+                              if (var39 != var38) {
+                                 var1.setBlock(var34, var38, var6 & -2 | 16);
                               }
 
-                              var1.blockUpdated(var32, var36.getBlock());
+                              var1.blockUpdated(var34, var38.getBlock());
                            }
 
-                           if (var31.getSecond() != null) {
-                              var21 = var1.getBlockEntity(var32);
-                              if (var21 != null) {
-                                 var21.setChanged();
+                           if (var33.getSecond() != null) {
+                              var23 = var1.getBlockEntity(var34);
+                              if (var23 != null) {
+                                 var23.setChanged();
                               }
                            }
                         }
                      }
 
-                     if (!var3.isIgnoreEntities()) {
-                        this.placeEntities(var1, var2, var3.getMirror(), var3.getRotation(), var3.getRotationPivot(), var6);
+                     if (!var4.isIgnoreEntities()) {
+                        this.placeEntities(var1, var2, var4.getMirror(), var4.getRotation(), var4.getRotationPivot(), var8, var4.shouldFinalizeEntities());
                      }
 
                      return true;
                   }
 
-                  var17 = (StructureTemplate.StructureBlockInfo)var16.next();
-                  var18 = var17.pos;
-               } while(var6 != null && !var6.isInside(var18));
+                  var19 = (StructureTemplate.StructureBlockInfo)var18.next();
+                  var20 = var19.pos;
+               } while(var8 != null && !var8.isInside(var20));
 
-               FluidState var19 = var3.shouldKeepLiquids() ? var1.getFluidState(var18) : null;
-               BlockState var20 = var17.state.mirror(var3.getMirror()).rotate(var3.getRotation());
-               if (var17.nbt != null) {
-                  var21 = var1.getBlockEntity(var18);
-                  Clearable.tryClear(var21);
-                  var1.setBlock(var18, Blocks.BARRIER.defaultBlockState(), 20);
+               FluidState var21 = var4.shouldKeepLiquids() ? var1.getFluidState(var20) : null;
+               BlockState var22 = var19.state.mirror(var4.getMirror()).rotate(var4.getRotation());
+               if (var19.nbt != null) {
+                  var23 = var1.getBlockEntity(var20);
+                  Clearable.tryClear(var23);
+                  var1.setBlock(var20, Blocks.BARRIER.defaultBlockState(), 20);
                }
 
-               if (var1.setBlock(var18, var20, var4)) {
-                  var9 = Math.min(var9, var18.getX());
-                  var10 = Math.min(var10, var18.getY());
-                  var11 = Math.min(var11, var18.getZ());
-                  var12 = Math.max(var12, var18.getX());
-                  var13 = Math.max(var13, var18.getY());
-                  var14 = Math.max(var14, var18.getZ());
-                  var8.add(Pair.of(var18, var17.nbt));
-                  if (var17.nbt != null) {
-                     var21 = var1.getBlockEntity(var18);
-                     if (var21 != null) {
-                        var17.nbt.putInt("x", var18.getX());
-                        var17.nbt.putInt("y", var18.getY());
-                        var17.nbt.putInt("z", var18.getZ());
-                        var21.load(var17.nbt);
-                        var21.mirror(var3.getMirror());
-                        var21.rotate(var3.getRotation());
+               if (var1.setBlock(var20, var22, var6)) {
+                  var11 = Math.min(var11, var20.getX());
+                  var12 = Math.min(var12, var20.getY());
+                  var13 = Math.min(var13, var20.getZ());
+                  var14 = Math.max(var14, var20.getX());
+                  var15 = Math.max(var15, var20.getY());
+                  var16 = Math.max(var16, var20.getZ());
+                  var10.add(Pair.of(var20, var19.nbt));
+                  if (var19.nbt != null) {
+                     var23 = var1.getBlockEntity(var20);
+                     if (var23 != null) {
+                        var19.nbt.putInt("x", var20.getX());
+                        var19.nbt.putInt("y", var20.getY());
+                        var19.nbt.putInt("z", var20.getZ());
+                        if (var23 instanceof RandomizableContainerBlockEntity) {
+                           var19.nbt.putLong("LootTableSeed", var5.nextLong());
+                        }
+
+                        var23.load(var19.state, var19.nbt);
+                        var23.mirror(var4.getMirror());
+                        var23.rotate(var4.getRotation());
                      }
                   }
 
-                  if (var19 != null && var20.getBlock() instanceof LiquidBlockContainer) {
-                     ((LiquidBlockContainer)var20.getBlock()).placeLiquid(var1, var18, var20, var19);
-                     if (!var19.isSource()) {
-                        var7.add(var18);
+                  if (var21 != null && var22.getBlock() instanceof LiquidBlockContainer) {
+                     ((LiquidBlockContainer)var22.getBlock()).placeLiquid(var1, var20, var22, var21);
+                     if (!var21.isSource()) {
+                        var9.add(var20);
                      }
                   }
                }
             }
          } else {
@@ -346,76 +387,79 @@
          BlockPos var10 = var9.relative(var5x);
          BlockState var11 = var0.getBlockState(var9);
          BlockState var12 = var0.getBlockState(var10);
          BlockState var13 = var11.updateShape(var5x, var12, var0, var9, var10);
          if (var11 != var13) {
-            var0.setBlock(var9, var13, var1 & -2 | 16);
+            var0.setBlock(var9, var13, var1 & -2);
          }
 
          BlockState var14 = var12.updateShape(var5x.getOpposite(), var13, var0, var10, var9);
          if (var12 != var14) {
-            var0.setBlock(var10, var14, var1 & -2 | 16);
+            var0.setBlock(var10, var14, var1 & -2);
          }
 
       });
    }
 
-   public static List<StructureTemplate.StructureBlockInfo> processBlockInfos(LevelAccessor var0, BlockPos var1, StructurePlaceSettings var2, List<StructureTemplate.StructureBlockInfo> var3) {
-      ArrayList var4 = Lists.newArrayList();
-      Iterator var5 = var3.iterator();
+   public static List<StructureTemplate.StructureBlockInfo> processBlockInfos(LevelAccessor var0, BlockPos var1, BlockPos var2, StructurePlaceSettings var3, List<StructureTemplate.StructureBlockInfo> var4) {
+      ArrayList var5 = Lists.newArrayList();
+      Iterator var6 = var4.iterator();
 
-      while(var5.hasNext()) {
-         StructureTemplate.StructureBlockInfo var6 = (StructureTemplate.StructureBlockInfo)var5.next();
-         BlockPos var7 = calculateRelativePosition(var2, var6.pos).offset(var1);
-         StructureTemplate.StructureBlockInfo var8 = new StructureTemplate.StructureBlockInfo(var7, var6.state, var6.nbt);
+      while(var6.hasNext()) {
+         StructureTemplate.StructureBlockInfo var7 = (StructureTemplate.StructureBlockInfo)var6.next();
+         BlockPos var8 = calculateRelativePosition(var3, var7.pos).offset(var1);
+         StructureTemplate.StructureBlockInfo var9 = new StructureTemplate.StructureBlockInfo(var8, var7.state, var7.nbt != null ? var7.nbt.copy() : null);
 
-         for(Iterator var9 = var2.getProcessors().iterator(); var8 != null && var9.hasNext(); var8 = ((StructureProcessor)var9.next()).processBlock(var0, var1, var6, var8, var2)) {
+         for(Iterator var10 = var3.getProcessors().iterator(); var9 != null && var10.hasNext(); var9 = ((StructureProcessor)var10.next()).processBlock(var0, var1, var2, var7, var9, var3)) {
          }
 
-         if (var8 != null) {
-            var4.add(var8);
+         if (var9 != null) {
+            var5.add(var9);
          }
       }
 
-      return var4;
+      return var5;
    }
 
-   private void placeEntities(LevelAccessor var1, BlockPos var2, Mirror var3, Rotation var4, BlockPos var5, @Nullable BoundingBox var6) {
-      Iterator var7 = this.entityInfoList.iterator();
+   private void placeEntities(ServerLevelAccessor var1, BlockPos var2, Mirror var3, Rotation var4, BlockPos var5, @Nullable BoundingBox var6, boolean var7) {
+      Iterator var8 = this.entityInfoList.iterator();
 
       while(true) {
-         StructureTemplate.StructureEntityInfo var8;
-         BlockPos var9;
+         StructureTemplate.StructureEntityInfo var9;
+         BlockPos var10;
          do {
-            if (!var7.hasNext()) {
+            if (!var8.hasNext()) {
                return;
             }
 
-            var8 = (StructureTemplate.StructureEntityInfo)var7.next();
-            var9 = transform(var8.blockPos, var3, var4, var5).offset(var2);
-         } while(var6 != null && !var6.isInside(var9));
+            var9 = (StructureTemplate.StructureEntityInfo)var8.next();
+            var10 = transform(var9.blockPos, var3, var4, var5).offset(var2);
+         } while(var6 != null && !var6.isInside(var10));
 
-         CompoundTag var10 = var8.nbt;
-         Vec3 var11 = transform(var8.pos, var3, var4, var5);
-         Vec3 var12 = var11.add((double)var2.getX(), (double)var2.getY(), (double)var2.getZ());
-         ListTag var13 = new ListTag();
-         var13.add(DoubleTag.valueOf(var12.x));
-         var13.add(DoubleTag.valueOf(var12.y));
-         var13.add(DoubleTag.valueOf(var12.z));
-         var10.put("Pos", var13);
-         var10.remove("UUIDMost");
-         var10.remove("UUIDLeast");
-         createEntityIgnoreException(var1, var10).ifPresent((var4x) -> {
-            float var5 = var4x.mirror(var3);
-            var5 += var4x.yRot - var4x.rotate(var4);
-            var4x.moveTo(var12.x, var12.y, var12.z, var5, var4x.xRot);
-            var1.addFreshEntity(var4x);
+         CompoundTag var11 = var9.nbt.copy();
+         Vec3 var12 = transform(var9.pos, var3, var4, var5);
+         Vec3 var13 = var12.add((double)var2.getX(), (double)var2.getY(), (double)var2.getZ());
+         ListTag var14 = new ListTag();
+         var14.add(DoubleTag.valueOf(var13.x));
+         var14.add(DoubleTag.valueOf(var13.y));
+         var14.add(DoubleTag.valueOf(var13.z));
+         var11.put("Pos", var14);
+         var11.remove("UUID");
+         createEntityIgnoreException(var1, var11).ifPresent((var6x) -> {
+            float var7x = var6x.mirror(var3);
+            var7x += var6x.yRot - var6x.rotate(var4);
+            var6x.moveTo(var13.x, var13.y, var13.z, var7x, var6x.xRot);
+            if (var7 && var6x instanceof Mob) {
+               ((Mob)var6x).finalizeSpawn(var1, var1.getCurrentDifficultyAt(new BlockPos(var13)), MobSpawnType.STRUCTURE, (SpawnGroupData)null, var11);
+            }
+
+            var1.addFreshEntity(var6x);
          });
       }
    }
 
-   private static Optional<Entity> createEntityIgnoreException(LevelAccessor var0, CompoundTag var1) {
+   private static Optional<Entity> createEntityIgnoreException(ServerLevelAccessor var0, CompoundTag var1) {
       try {
          return EntityType.create(var1, var0.getLevel());
       } catch (Exception var3) {
          return Optional.empty();
       }
@@ -459,11 +503,11 @@
       default:
          return var7 ? new BlockPos(var4, var5, var6) : var0;
       }
    }
 
-   private static Vec3 transform(Vec3 var0, Mirror var1, Rotation var2, BlockPos var3) {
+   public static Vec3 transform(Vec3 var0, Mirror var1, Rotation var2, BlockPos var3) {
       double var4 = var0.x;
       double var6 = var0.y;
       double var8 = var0.z;
       boolean var10 = true;
       switch(var1) {
@@ -517,45 +561,46 @@
 
       return var7;
    }
 
    public BoundingBox getBoundingBox(StructurePlaceSettings var1, BlockPos var2) {
-      Rotation var3 = var1.getRotation();
-      BlockPos var4 = var1.getRotationPivot();
-      BlockPos var5 = this.getSize(var3);
-      Mirror var6 = var1.getMirror();
-      int var7 = var4.getX();
-      int var8 = var4.getZ();
-      int var9 = var5.getX() - 1;
-      int var10 = var5.getY() - 1;
-      int var11 = var5.getZ() - 1;
-      BoundingBox var12 = new BoundingBox(0, 0, 0, 0, 0, 0);
-      switch(var3) {
+      return this.getBoundingBox(var2, var1.getRotation(), var1.getRotationPivot(), var1.getMirror());
+   }
+
+   public BoundingBox getBoundingBox(BlockPos var1, Rotation var2, BlockPos var3, Mirror var4) {
+      BlockPos var5 = this.getSize(var2);
+      int var6 = var3.getX();
+      int var7 = var3.getZ();
+      int var8 = var5.getX() - 1;
+      int var9 = var5.getY() - 1;
+      int var10 = var5.getZ() - 1;
+      BoundingBox var11 = new BoundingBox(0, 0, 0, 0, 0, 0);
+      switch(var2) {
       case COUNTERCLOCKWISE_90:
-         var12 = new BoundingBox(var7 - var8, 0, var7 + var8 - var11, var7 - var8 + var9, var10, var7 + var8);
+         var11 = new BoundingBox(var6 - var7, 0, var6 + var7 - var10, var6 - var7 + var8, var9, var6 + var7);
          break;
       case CLOCKWISE_90:
-         var12 = new BoundingBox(var7 + var8 - var9, 0, var8 - var7, var7 + var8, var10, var8 - var7 + var11);
+         var11 = new BoundingBox(var6 + var7 - var8, 0, var7 - var6, var6 + var7, var9, var7 - var6 + var10);
          break;
       case CLOCKWISE_180:
-         var12 = new BoundingBox(var7 + var7 - var9, 0, var8 + var8 - var11, var7 + var7, var10, var8 + var8);
+         var11 = new BoundingBox(var6 + var6 - var8, 0, var7 + var7 - var10, var6 + var6, var9, var7 + var7);
          break;
       case NONE:
-         var12 = new BoundingBox(0, 0, 0, var9, var10, var11);
+         var11 = new BoundingBox(0, 0, 0, var8, var9, var10);
       }
 
-      switch(var6) {
+      switch(var4) {
       case LEFT_RIGHT:
-         this.mirrorAABB(var3, var11, var9, var12, Direction.NORTH, Direction.SOUTH);
+         this.mirrorAABB(var2, var10, var8, var11, Direction.NORTH, Direction.SOUTH);
          break;
       case FRONT_BACK:
-         this.mirrorAABB(var3, var9, var11, var12, Direction.WEST, Direction.EAST);
+         this.mirrorAABB(var2, var8, var10, var11, Direction.WEST, Direction.EAST);
       case NONE:
       }
 
-      var12.move(var2.getX(), var2.getY(), var2.getZ());
-      return var12;
+      var11.move(var1.getX(), var1.getY(), var1.getZ());
+      return var11;
    }
 
    private void mirrorAABB(Rotation var1, int var2, int var3, BoundingBox var4, Direction var5, Direction var6) {
       BlockPos var7 = BlockPos.ZERO;
       if (var1 != Rotation.CLOCKWISE_90 && var1 != Rotation.COUNTERCLOCKWISE_90) {
@@ -583,11 +628,11 @@
          for(int var4 = 1; var4 < this.palettes.size(); ++var4) {
             var2.add(new StructureTemplate.SimplePalette());
          }
 
          ListTag var14 = new ListTag();
-         List var5 = (List)this.palettes.get(0);
+         List var5 = ((StructureTemplate.Palette)this.palettes.get(0)).blocks();
 
          for(int var6 = 0; var6 < var5.size(); ++var6) {
             StructureTemplate.StructureBlockInfo var7 = (StructureTemplate.StructureBlockInfo)var5.get(var6);
             CompoundTag var8 = new CompoundTag();
             var8.put("pos", this.newIntegerList(var7.pos.getX(), var7.pos.getY(), var7.pos.getZ()));
@@ -599,11 +644,11 @@
 
             var14.add(var8);
 
             for(int var10 = 1; var10 < this.palettes.size(); ++var10) {
                StructureTemplate.SimplePalette var11 = (StructureTemplate.SimplePalette)var2.get(var10);
-               var11.addMapping(((StructureTemplate.StructureBlockInfo)((List)this.palettes.get(var10)).get(var6)).state, var9);
+               var11.addMapping(((StructureTemplate.StructureBlockInfo)((StructureTemplate.Palette)this.palettes.get(var10)).blocks().get(var6)).state, var9);
             }
          }
 
          var1.put("blocks", var14);
          ListTag var17;
@@ -692,36 +737,37 @@
 
    }
 
    private void loadPalette(ListTag var1, ListTag var2) {
       StructureTemplate.SimplePalette var3 = new StructureTemplate.SimplePalette();
-      ArrayList var4 = Lists.newArrayList();
 
-      int var5;
-      for(var5 = 0; var5 < var1.size(); ++var5) {
-         var3.addMapping(NbtUtils.readBlockState(var1.getCompound(var5)), var5);
+      for(int var4 = 0; var4 < var1.size(); ++var4) {
+         var3.addMapping(NbtUtils.readBlockState(var1.getCompound(var4)), var4);
       }
 
-      for(var5 = 0; var5 < var2.size(); ++var5) {
-         CompoundTag var6 = var2.getCompound(var5);
-         ListTag var7 = var6.getList("pos", 3);
-         BlockPos var8 = new BlockPos(var7.getInt(0), var7.getInt(1), var7.getInt(2));
-         BlockState var9 = var3.stateFor(var6.getInt("state"));
-         CompoundTag var10;
-         if (var6.contains("nbt")) {
-            var10 = var6.getCompound("nbt");
+      ArrayList var14 = Lists.newArrayList();
+      ArrayList var5 = Lists.newArrayList();
+      ArrayList var6 = Lists.newArrayList();
+
+      for(int var7 = 0; var7 < var2.size(); ++var7) {
+         CompoundTag var8 = var2.getCompound(var7);
+         ListTag var9 = var8.getList("pos", 3);
+         BlockPos var10 = new BlockPos(var9.getInt(0), var9.getInt(1), var9.getInt(2));
+         BlockState var11 = var3.stateFor(var8.getInt("state"));
+         CompoundTag var12;
+         if (var8.contains("nbt")) {
+            var12 = var8.getCompound("nbt");
          } else {
-            var10 = null;
+            var12 = null;
          }
 
-         var4.add(new StructureTemplate.StructureBlockInfo(var8, var9, var10));
+         StructureTemplate.StructureBlockInfo var13 = new StructureTemplate.StructureBlockInfo(var10, var11, var12);
+         addToLists(var13, var14, var5, var6);
       }
 
-      var4.sort(Comparator.comparingInt((var0) -> {
-         return var0.pos.getY();
-      }));
-      this.palettes.add(var4);
+      List var15 = buildInfoList(var14, var5, var6);
+      this.palettes.add(new StructureTemplate.Palette(var15));
    }
 
    private ListTag newIntegerList(int... var1) {
       ListTag var2 = new ListTag();
       int[] var3 = var1;
@@ -746,10 +792,32 @@
       }
 
       return var2;
    }
 
+   public static final class Palette {
+      private final List<StructureTemplate.StructureBlockInfo> blocks;
+      private final Map<Block, List<StructureTemplate.StructureBlockInfo>> cache;
+
+      private Palette(List<StructureTemplate.StructureBlockInfo> var1) {
+         this.cache = Maps.newHashMap();
+         this.blocks = var1;
+      }
+
+      public List<StructureTemplate.StructureBlockInfo> blocks() {
+         return this.blocks;
+      }
+
+      public List<StructureTemplate.StructureBlockInfo> blocks(Block var1) {
+         return (List)this.cache.computeIfAbsent(var1, (var1x) -> {
+            return (List)this.blocks.stream().filter((var1) -> {
+               return var1.state.is(var1x);
+            }).collect(Collectors.toList());
+         });
+      }
+   }
+
    public static class StructureEntityInfo {
       public final Vec3 pos;
       public final BlockPos blockPos;
       public final CompoundTag nbt;
 
