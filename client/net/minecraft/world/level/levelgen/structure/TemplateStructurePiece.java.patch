--- net/minecraft/world/level/levelgen/structure/TemplateStructurePiece.java
+++ net/minecraft/world/level/levelgen/structure/TemplateStructurePiece.java
@@ -8,11 +8,13 @@
 import net.minecraft.commands.arguments.blocks.BlockStateParser;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.world.level.ChunkPos;
-import net.minecraft.world.level.LevelAccessor;
+import net.minecraft.world.level.ServerLevelAccessor;
+import net.minecraft.world.level.StructureFeatureManager;
+import net.minecraft.world.level.WorldGenLevel;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.Rotation;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.block.state.properties.StructureMode;
 import net.minecraft.world.level.chunk.ChunkGenerator;
@@ -49,58 +51,58 @@
       var1.putInt("TPX", this.templatePosition.getX());
       var1.putInt("TPY", this.templatePosition.getY());
       var1.putInt("TPZ", this.templatePosition.getZ());
    }
 
-   public boolean postProcess(LevelAccessor var1, ChunkGenerator<?> var2, Random var3, BoundingBox var4, ChunkPos var5) {
-      this.placeSettings.setBoundingBox(var4);
+   public boolean postProcess(WorldGenLevel var1, StructureFeatureManager var2, ChunkGenerator var3, Random var4, BoundingBox var5, ChunkPos var6, BlockPos var7) {
+      this.placeSettings.setBoundingBox(var5);
       this.boundingBox = this.template.getBoundingBox(this.placeSettings, this.templatePosition);
-      if (this.template.placeInWorld(var1, this.templatePosition, this.placeSettings, 2)) {
-         List var6 = this.template.filterBlocks(this.templatePosition, this.placeSettings, Blocks.STRUCTURE_BLOCK);
-         Iterator var7 = var6.iterator();
+      if (this.template.placeInWorld(var1, this.templatePosition, var7, this.placeSettings, var4, 2)) {
+         List var8 = this.template.filterBlocks(this.templatePosition, this.placeSettings, Blocks.STRUCTURE_BLOCK);
+         Iterator var9 = var8.iterator();
 
-         while(var7.hasNext()) {
-            StructureTemplate.StructureBlockInfo var8 = (StructureTemplate.StructureBlockInfo)var7.next();
-            if (var8.nbt != null) {
-               StructureMode var9 = StructureMode.valueOf(var8.nbt.getString("mode"));
-               if (var9 == StructureMode.DATA) {
-                  this.handleDataMarker(var8.nbt.getString("metadata"), var8.pos, var1, var3, var4);
+         while(var9.hasNext()) {
+            StructureTemplate.StructureBlockInfo var10 = (StructureTemplate.StructureBlockInfo)var9.next();
+            if (var10.nbt != null) {
+               StructureMode var11 = StructureMode.valueOf(var10.nbt.getString("mode"));
+               if (var11 == StructureMode.DATA) {
+                  this.handleDataMarker(var10.nbt.getString("metadata"), var10.pos, var1, var4, var5);
                }
             }
          }
 
-         List var15 = this.template.filterBlocks(this.templatePosition, this.placeSettings, Blocks.JIGSAW);
-         Iterator var16 = var15.iterator();
+         List var17 = this.template.filterBlocks(this.templatePosition, this.placeSettings, Blocks.JIGSAW);
+         Iterator var18 = var17.iterator();
 
-         while(var16.hasNext()) {
-            StructureTemplate.StructureBlockInfo var17 = (StructureTemplate.StructureBlockInfo)var16.next();
-            if (var17.nbt != null) {
-               String var10 = var17.nbt.getString("final_state");
-               BlockStateParser var11 = new BlockStateParser(new StringReader(var10), false);
-               BlockState var12 = Blocks.AIR.defaultBlockState();
+         while(var18.hasNext()) {
+            StructureTemplate.StructureBlockInfo var19 = (StructureTemplate.StructureBlockInfo)var18.next();
+            if (var19.nbt != null) {
+               String var12 = var19.nbt.getString("final_state");
+               BlockStateParser var13 = new BlockStateParser(new StringReader(var12), false);
+               BlockState var14 = Blocks.AIR.defaultBlockState();
 
                try {
-                  var11.parse(true);
-                  BlockState var13 = var11.getState();
-                  if (var13 != null) {
-                     var12 = var13;
+                  var13.parse(true);
+                  BlockState var15 = var13.getState();
+                  if (var15 != null) {
+                     var14 = var15;
                   } else {
-                     LOGGER.error("Error while parsing blockstate {} in jigsaw block @ {}", var10, var17.pos);
+                     LOGGER.error("Error while parsing blockstate {} in jigsaw block @ {}", var12, var19.pos);
                   }
-               } catch (CommandSyntaxException var14) {
-                  LOGGER.error("Error while parsing blockstate {} in jigsaw block @ {}", var10, var17.pos);
+               } catch (CommandSyntaxException var16) {
+                  LOGGER.error("Error while parsing blockstate {} in jigsaw block @ {}", var12, var19.pos);
                }
 
-               var1.setBlock(var17.pos, var12, 3);
+               var1.setBlock(var19.pos, var14, 3);
             }
          }
       }
 
       return true;
    }
 
-   protected abstract void handleDataMarker(String var1, BlockPos var2, LevelAccessor var3, Random var4, BoundingBox var5);
+   protected abstract void handleDataMarker(String var1, BlockPos var2, ServerLevelAccessor var3, Random var4, BoundingBox var5);
 
    public void move(int var1, int var2, int var3) {
       super.move(var1, var2, var3);
       this.templatePosition = this.templatePosition.offset(var1, var2, var3);
    }
