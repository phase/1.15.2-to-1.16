--- net/minecraft/world/level/levelgen/structure/StructureStart.java
+++ net/minecraft/world/level/levelgen/structure/StructureStart.java
@@ -4,63 +4,71 @@
 import java.util.Iterator;
 import java.util.List;
 import java.util.Random;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Registry;
+import net.minecraft.core.Vec3i;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.ListTag;
 import net.minecraft.world.level.ChunkPos;
-import net.minecraft.world.level.LevelAccessor;
+import net.minecraft.world.level.StructureFeatureManager;
+import net.minecraft.world.level.WorldGenLevel;
 import net.minecraft.world.level.biome.Biome;
 import net.minecraft.world.level.chunk.ChunkGenerator;
 import net.minecraft.world.level.levelgen.WorldgenRandom;
-import net.minecraft.world.level.levelgen.feature.Feature;
 import net.minecraft.world.level.levelgen.feature.StructureFeature;
+import net.minecraft.world.level.levelgen.feature.configurations.FeatureConfiguration;
+import net.minecraft.world.level.levelgen.feature.configurations.MineshaftConfiguration;
 import net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager;
 
-public abstract class StructureStart {
-   public static final StructureStart INVALID_START;
-   private final StructureFeature<?> feature;
+public abstract class StructureStart<C extends FeatureConfiguration> {
+   public static final StructureStart<?> INVALID_START;
+   private final StructureFeature<C> feature;
    protected final List<StructurePiece> pieces = Lists.newArrayList();
    protected BoundingBox boundingBox;
    private final int chunkX;
    private final int chunkZ;
    private int references;
    protected final WorldgenRandom random;
 
-   public StructureStart(StructureFeature<?> var1, int var2, int var3, BoundingBox var4, int var5, long var6) {
+   public StructureStart(StructureFeature<C> var1, int var2, int var3, BoundingBox var4, int var5, long var6) {
       this.feature = var1;
       this.chunkX = var2;
       this.chunkZ = var3;
       this.references = var5;
       this.random = new WorldgenRandom();
       this.random.setLargeFeatureSeed(var6, var2, var3);
       this.boundingBox = var4;
    }
 
-   public abstract void generatePieces(ChunkGenerator<?> var1, StructureManager var2, int var3, int var4, Biome var5);
+   public abstract void generatePieces(ChunkGenerator var1, StructureManager var2, int var3, int var4, Biome var5, C var6);
 
    public BoundingBox getBoundingBox() {
       return this.boundingBox;
    }
 
    public List<StructurePiece> getPieces() {
       return this.pieces;
    }
 
-   public void postProcess(LevelAccessor var1, ChunkGenerator<?> var2, Random var3, BoundingBox var4, ChunkPos var5) {
+   public void placeInChunk(WorldGenLevel var1, StructureFeatureManager var2, ChunkGenerator var3, Random var4, BoundingBox var5, ChunkPos var6) {
       synchronized(this.pieces) {
-         Iterator var7 = this.pieces.iterator();
+         if (!this.pieces.isEmpty()) {
+            BoundingBox var8 = ((StructurePiece)this.pieces.get(0)).boundingBox;
+            Vec3i var9 = var8.getCenter();
+            BlockPos var10 = new BlockPos(var9.getX(), var8.y0, var9.getZ());
+            Iterator var11 = this.pieces.iterator();
 
-         while(var7.hasNext()) {
-            StructurePiece var8 = (StructurePiece)var7.next();
-            if (var8.getBoundingBox().intersects(var4) && !var8.postProcess(var1, var2, var3, var4, var5)) {
-               var7.remove();
+            while(var11.hasNext()) {
+               StructurePiece var12 = (StructurePiece)var11.next();
+               if (var12.getBoundingBox().intersects(var5) && !var12.postProcess(var1, var2, var3, var4, var5, var6, var10)) {
+                  var11.remove();
+               }
             }
-         }
 
-         this.calculateBoundingBox();
+            this.calculateBoundingBox();
+         }
       }
    }
 
    protected void calculateBoundingBox() {
       this.boundingBox = BoundingBox.getUnknownBox();
@@ -176,11 +184,11 @@
    public StructureFeature<?> getFeature() {
       return this.feature;
    }
 
    static {
-      INVALID_START = new StructureStart(Feature.MINESHAFT, 0, 0, BoundingBox.getUnknownBox(), 0, 0L) {
-         public void generatePieces(ChunkGenerator<?> var1, StructureManager var2, int var3, int var4, Biome var5) {
+      INVALID_START = new StructureStart<MineshaftConfiguration>(StructureFeature.MINESHAFT, 0, 0, BoundingBox.getUnknownBox(), 0, 0L) {
+         public void generatePieces(ChunkGenerator var1, StructureManager var2, int var3, int var4, Biome var5, MineshaftConfiguration var6) {
          }
       };
    }
 }
