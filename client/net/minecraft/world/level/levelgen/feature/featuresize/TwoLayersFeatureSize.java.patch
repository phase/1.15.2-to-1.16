--- net/minecraft/world/level/levelgen/feature/featuresize/TwoLayersFeatureSize.java
+++ net/minecraft/world/level/levelgen/feature/featuresize/TwoLayersFeatureSize.java
@@ -1,0 +1,39 @@
+package net.minecraft.world.level.levelgen.feature.featuresize;
+
+import com.mojang.serialization.Codec;
+import com.mojang.serialization.codecs.RecordCodecBuilder;
+import java.util.OptionalInt;
+
+public class TwoLayersFeatureSize extends FeatureSize {
+   public static final Codec<TwoLayersFeatureSize> CODEC = RecordCodecBuilder.create((var0) -> {
+      return var0.group(Codec.INT.fieldOf("limit").withDefault(1).forGetter((var0x) -> {
+         return var0x.limit;
+      }), Codec.INT.fieldOf("lower_size").withDefault(0).forGetter((var0x) -> {
+         return var0x.lowerSize;
+      }), Codec.INT.fieldOf("upper_size").withDefault(1).forGetter((var0x) -> {
+         return var0x.upperSize;
+      }), minClippedHeightCodec()).apply(var0, TwoLayersFeatureSize::new);
+   });
+   private final int limit;
+   private final int lowerSize;
+   private final int upperSize;
+
+   public TwoLayersFeatureSize(int var1, int var2, int var3) {
+      this(var1, var2, var3, OptionalInt.empty());
+   }
+
+   public TwoLayersFeatureSize(int var1, int var2, int var3, OptionalInt var4) {
+      super(var4);
+      this.limit = var1;
+      this.lowerSize = var2;
+      this.upperSize = var3;
+   }
+
+   protected FeatureSizeType<?> type() {
+      return FeatureSizeType.TWO_LAYERS_FEATURE_SIZE;
+   }
+
+   public int getSizeAtHeight(int var1, int var2) {
+      return var2 < this.limit ? this.lowerSize : this.upperSize;
+   }
+}
