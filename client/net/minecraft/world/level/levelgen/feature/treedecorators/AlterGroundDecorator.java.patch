--- net/minecraft/world/level/levelgen/feature/treedecorators/AlterGroundDecorator.java
+++ net/minecraft/world/level/levelgen/feature/treedecorators/AlterGroundDecorator.java
@@ -1,33 +1,28 @@
 package net.minecraft.world.level.levelgen.feature.treedecorators;
 
-import com.google.common.collect.ImmutableMap;
-import com.mojang.datafixers.Dynamic;
-import com.mojang.datafixers.types.DynamicOps;
+import com.mojang.serialization.Codec;
 import java.util.List;
 import java.util.Random;
 import java.util.Set;
 import net.minecraft.core.BlockPos;
-import net.minecraft.core.Registry;
-import net.minecraft.resources.ResourceLocation;
 import net.minecraft.world.level.LevelAccessor;
 import net.minecraft.world.level.LevelSimulatedRW;
-import net.minecraft.world.level.levelgen.feature.AbstractTreeFeature;
+import net.minecraft.world.level.levelgen.feature.Feature;
 import net.minecraft.world.level.levelgen.feature.stateproviders.BlockStateProvider;
-import net.minecraft.world.level.levelgen.feature.stateproviders.BlockStateProviderType;
 import net.minecraft.world.level.levelgen.structure.BoundingBox;
 
 public class AlterGroundDecorator extends TreeDecorator {
+   public static final Codec<AlterGroundDecorator> CODEC;
    private final BlockStateProvider provider;
 
    public AlterGroundDecorator(BlockStateProvider var1) {
-      super(TreeDecoratorType.ALTER_GROUND);
       this.provider = var1;
    }
 
-   public <T> AlterGroundDecorator(Dynamic<T> var1) {
-      this(((BlockStateProviderType)Registry.BLOCKSTATE_PROVIDER_TYPES.get(new ResourceLocation((String)var1.get("provider").get("type").asString().orElseThrow(RuntimeException::new)))).deserialize(var1.get("provider").orElseEmptyMap()));
+   protected TreeDecoratorType<?> type() {
+      return TreeDecoratorType.ALTER_GROUND;
    }
 
    public void place(LevelAccessor var1, Random var2, List<BlockPos> var3, List<BlockPos> var4, Set<BlockPos> var5, BoundingBox var6) {
       int var7 = ((BlockPos)var3.get(0)).getY();
       var3.stream().filter((var1x) -> {
@@ -62,21 +57,23 @@
    }
 
    private void placeBlockAt(LevelSimulatedRW var1, Random var2, BlockPos var3) {
       for(int var4 = 2; var4 >= -3; --var4) {
          BlockPos var5 = var3.above(var4);
-         if (AbstractTreeFeature.isGrassOrDirt(var1, var5)) {
+         if (Feature.isGrassOrDirt(var1, var5)) {
             var1.setBlock(var5, this.provider.getState(var2, var3), 19);
             break;
          }
 
-         if (!AbstractTreeFeature.isAir(var1, var5) && var4 < 0) {
+         if (!Feature.isAir(var1, var5) && var4 < 0) {
             break;
          }
       }
 
    }
 
-   public <T> T serialize(DynamicOps<T> var1) {
-      return (new Dynamic(var1, var1.createMap(ImmutableMap.of(var1.createString("type"), var1.createString(Registry.TREE_DECORATOR_TYPES.getKey(this.type).toString()), var1.createString("provider"), this.provider.serialize(var1))))).getValue();
+   static {
+      CODEC = BlockStateProvider.CODEC.fieldOf("provider").xmap(AlterGroundDecorator::new, (var0) -> {
+         return var0.provider;
+      }).codec();
    }
 }
