--- net/minecraft/world/level/levelgen/feature/ConfiguredFeature.java
+++ net/minecraft/world/level/levelgen/feature/ConfiguredFeature.java
@@ -1,62 +1,49 @@
 package net.minecraft.world.level.levelgen.feature;
 
-import com.google.common.collect.ImmutableMap;
-import com.mojang.datafixers.Dynamic;
-import com.mojang.datafixers.types.DynamicOps;
+import com.mojang.serialization.Codec;
 import java.util.Random;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Registry;
-import net.minecraft.resources.ResourceLocation;
-import net.minecraft.world.level.LevelAccessor;
+import net.minecraft.world.level.StructureFeatureManager;
+import net.minecraft.world.level.WorldGenLevel;
 import net.minecraft.world.level.chunk.ChunkGenerator;
-import net.minecraft.world.level.levelgen.ChunkGeneratorSettings;
 import net.minecraft.world.level.levelgen.feature.configurations.DecoratedFeatureConfiguration;
 import net.minecraft.world.level.levelgen.feature.configurations.FeatureConfiguration;
 import net.minecraft.world.level.levelgen.feature.configurations.NoneFeatureConfiguration;
 import net.minecraft.world.level.levelgen.placement.ConfiguredDecorator;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
 public class ConfiguredFeature<FC extends FeatureConfiguration, F extends Feature<FC>> {
-   public static final Logger LOGGER = LogManager.getLogger();
+   public static final ConfiguredFeature<?, ?> NOPE;
+   public static final Codec<ConfiguredFeature<?, ?>> CODEC;
+   public static final Logger LOGGER;
    public final F feature;
    public final FC config;
 
    public ConfiguredFeature(F var1, FC var2) {
       this.feature = var1;
       this.config = var2;
    }
 
-   public ConfiguredFeature(F var1, Dynamic<?> var2) {
-      this(var1, var1.createSettings(var2));
-   }
-
    public ConfiguredFeature<?, ?> decorated(ConfiguredDecorator<?> var1) {
       Feature var2 = this.feature instanceof AbstractFlowerFeature ? Feature.DECORATED_FLOWER : Feature.DECORATED;
       return var2.configured(new DecoratedFeatureConfiguration(this, var1));
    }
 
    public WeightedConfiguredFeature<FC> weighted(float var1) {
       return new WeightedConfiguredFeature(this, var1);
    }
 
-   public <T> Dynamic<T> serialize(DynamicOps<T> var1) {
-      return new Dynamic(var1, var1.createMap(ImmutableMap.of(var1.createString("name"), var1.createString(Registry.FEATURE.getKey(this.feature).toString()), var1.createString("config"), this.config.serialize(var1).getValue())));
+   public boolean place(WorldGenLevel var1, StructureFeatureManager var2, ChunkGenerator var3, Random var4, BlockPos var5) {
+      return this.feature.place(var1, var2, var3, var4, var5, this.config);
    }
 
-   public boolean place(LevelAccessor var1, ChunkGenerator<? extends ChunkGeneratorSettings> var2, Random var3, BlockPos var4) {
-      return this.feature.place(var1, var2, var3, var4, this.config);
+   static {
+      NOPE = new ConfiguredFeature(Feature.NO_OP, NoneFeatureConfiguration.NONE);
+      CODEC = Registry.FEATURE.dispatch("name", (var0) -> {
+         return var0.feature;
+      }, Feature::configuredCodec).withDefault(NOPE);
+      LOGGER = LogManager.getLogger();
    }
-
-   public static <T> ConfiguredFeature<?, ?> deserialize(Dynamic<T> var0) {
-      String var1 = var0.get("name").asString("");
-      Feature var2 = (Feature)Registry.FEATURE.get(new ResourceLocation(var1));
-
-      try {
-         return new ConfiguredFeature(var2, var0.get("config").orElseEmptyMap());
-      } catch (RuntimeException var4) {
-         LOGGER.warn("Error while deserializing {}", var1);
-         return new ConfiguredFeature(Feature.NO_OP, NoneFeatureConfiguration.NONE);
-      }
-   }
 }
