--- net/minecraft/world/level/levelgen/feature/Feature.java
+++ net/minecraft/world/level/levelgen/feature/Feature.java
@@ -1,184 +1,193 @@
 package net.minecraft.world.level.levelgen.feature;
 
-import com.google.common.collect.BiMap;
-import com.google.common.collect.HashBiMap;
-import com.google.common.collect.ImmutableList;
-import com.mojang.datafixers.Dynamic;
-import java.util.Collections;
-import java.util.List;
-import java.util.Locale;
+import com.mojang.serialization.Codec;
 import java.util.Random;
-import java.util.function.Function;
-import net.minecraft.Util;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Registry;
-import net.minecraft.world.level.LevelAccessor;
+import net.minecraft.world.level.LevelSimulatedReader;
 import net.minecraft.world.level.LevelWriter;
-import net.minecraft.world.level.biome.Biome;
+import net.minecraft.world.level.WorldGenLevel;
 import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.Blocks;
+import net.minecraft.world.level.block.state.BlockBehaviour;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.chunk.ChunkGenerator;
-import net.minecraft.world.level.levelgen.ChunkGeneratorSettings;
-import net.minecraft.world.level.levelgen.feature.configurations.BlockBlobConfiguration;
 import net.minecraft.world.level.levelgen.feature.configurations.BlockPileConfiguration;
 import net.minecraft.world.level.levelgen.feature.configurations.BlockStateConfiguration;
-import net.minecraft.world.level.levelgen.feature.configurations.BuriedTreasureConfiguration;
-import net.minecraft.world.level.levelgen.feature.configurations.CountFeatureConfiguration;
+import net.minecraft.world.level.levelgen.feature.configurations.ColumnFeatureConfiguration;
+import net.minecraft.world.level.levelgen.feature.configurations.CountConfiguration;
 import net.minecraft.world.level.levelgen.feature.configurations.DecoratedFeatureConfiguration;
+import net.minecraft.world.level.levelgen.feature.configurations.DeltaFeatureConfiguration;
 import net.minecraft.world.level.levelgen.feature.configurations.DiskConfiguration;
 import net.minecraft.world.level.levelgen.feature.configurations.EndGatewayConfiguration;
 import net.minecraft.world.level.levelgen.feature.configurations.FeatureConfiguration;
-import net.minecraft.world.level.levelgen.feature.configurations.FeatureRadiusConfiguration;
 import net.minecraft.world.level.levelgen.feature.configurations.HugeMushroomFeatureConfiguration;
 import net.minecraft.world.level.levelgen.feature.configurations.LayerConfiguration;
-import net.minecraft.world.level.levelgen.feature.configurations.MegaTreeConfiguration;
-import net.minecraft.world.level.levelgen.feature.configurations.MineshaftConfiguration;
 import net.minecraft.world.level.levelgen.feature.configurations.NoneFeatureConfiguration;
-import net.minecraft.world.level.levelgen.feature.configurations.OceanRuinConfiguration;
 import net.minecraft.world.level.levelgen.feature.configurations.OreConfiguration;
 import net.minecraft.world.level.levelgen.feature.configurations.ProbabilityFeatureConfiguration;
 import net.minecraft.world.level.levelgen.feature.configurations.RandomBooleanFeatureConfiguration;
 import net.minecraft.world.level.levelgen.feature.configurations.RandomFeatureConfiguration;
 import net.minecraft.world.level.levelgen.feature.configurations.RandomPatchConfiguration;
-import net.minecraft.world.level.levelgen.feature.configurations.RandomRandomFeatureConfiguration;
 import net.minecraft.world.level.levelgen.feature.configurations.ReplaceBlockConfiguration;
-import net.minecraft.world.level.levelgen.feature.configurations.SeagrassFeatureConfiguration;
-import net.minecraft.world.level.levelgen.feature.configurations.ShipwreckConfiguration;
+import net.minecraft.world.level.levelgen.feature.configurations.ReplaceSphereConfiguration;
 import net.minecraft.world.level.levelgen.feature.configurations.SimpleBlockConfiguration;
 import net.minecraft.world.level.levelgen.feature.configurations.SimpleRandomFeatureConfiguration;
-import net.minecraft.world.level.levelgen.feature.configurations.SmallTreeConfiguration;
 import net.minecraft.world.level.levelgen.feature.configurations.SpikeConfiguration;
 import net.minecraft.world.level.levelgen.feature.configurations.SpringConfiguration;
 import net.minecraft.world.level.levelgen.feature.configurations.TreeConfiguration;
-import net.minecraft.world.level.levelgen.feature.configurations.VillageConfiguration;
-import net.minecraft.world.level.levelgen.structure.OceanRuinFeature;
 
 public abstract class Feature<FC extends FeatureConfiguration> {
-   public static final StructureFeature<NoneFeatureConfiguration> PILLAGER_OUTPOST = (StructureFeature)register("pillager_outpost", new PillagerOutpostFeature(NoneFeatureConfiguration::deserialize));
-   public static final StructureFeature<MineshaftConfiguration> MINESHAFT = (StructureFeature)register("mineshaft", new MineshaftFeature(MineshaftConfiguration::deserialize));
-   public static final StructureFeature<NoneFeatureConfiguration> WOODLAND_MANSION = (StructureFeature)register("woodland_mansion", new WoodlandMansionFeature(NoneFeatureConfiguration::deserialize));
-   public static final StructureFeature<NoneFeatureConfiguration> JUNGLE_TEMPLE = (StructureFeature)register("jungle_temple", new JunglePyramidFeature(NoneFeatureConfiguration::deserialize));
-   public static final StructureFeature<NoneFeatureConfiguration> DESERT_PYRAMID = (StructureFeature)register("desert_pyramid", new DesertPyramidFeature(NoneFeatureConfiguration::deserialize));
-   public static final StructureFeature<NoneFeatureConfiguration> IGLOO = (StructureFeature)register("igloo", new IglooFeature(NoneFeatureConfiguration::deserialize));
-   public static final StructureFeature<ShipwreckConfiguration> SHIPWRECK = (StructureFeature)register("shipwreck", new ShipwreckFeature(ShipwreckConfiguration::deserialize));
-   public static final SwamplandHutFeature SWAMP_HUT = (SwamplandHutFeature)register("swamp_hut", new SwamplandHutFeature(NoneFeatureConfiguration::deserialize));
-   public static final StructureFeature<NoneFeatureConfiguration> STRONGHOLD = (StructureFeature)register("stronghold", new StrongholdFeature(NoneFeatureConfiguration::deserialize));
-   public static final StructureFeature<NoneFeatureConfiguration> OCEAN_MONUMENT = (StructureFeature)register("ocean_monument", new OceanMonumentFeature(NoneFeatureConfiguration::deserialize));
-   public static final StructureFeature<OceanRuinConfiguration> OCEAN_RUIN = (StructureFeature)register("ocean_ruin", new OceanRuinFeature(OceanRuinConfiguration::deserialize));
-   public static final StructureFeature<NoneFeatureConfiguration> NETHER_BRIDGE = (StructureFeature)register("nether_bridge", new NetherFortressFeature(NoneFeatureConfiguration::deserialize));
-   public static final StructureFeature<NoneFeatureConfiguration> END_CITY = (StructureFeature)register("end_city", new EndCityFeature(NoneFeatureConfiguration::deserialize));
-   public static final StructureFeature<BuriedTreasureConfiguration> BURIED_TREASURE = (StructureFeature)register("buried_treasure", new BuriedTreasureFeature(BuriedTreasureConfiguration::deserialize));
-   public static final StructureFeature<VillageConfiguration> VILLAGE = (StructureFeature)register("village", new VillageFeature(VillageConfiguration::deserialize));
-   public static final Feature<NoneFeatureConfiguration> NO_OP = register("no_op", new NoOpFeature(NoneFeatureConfiguration::deserialize));
-   public static final Feature<SmallTreeConfiguration> NORMAL_TREE = register("normal_tree", new TreeFeature(SmallTreeConfiguration::deserialize));
-   public static final Feature<SmallTreeConfiguration> ACACIA_TREE = register("acacia_tree", new AcaciaFeature(SmallTreeConfiguration::deserialize));
-   public static final Feature<SmallTreeConfiguration> FANCY_TREE = register("fancy_tree", new FancyTreeFeature(SmallTreeConfiguration::deserialize));
-   public static final Feature<TreeConfiguration> JUNGLE_GROUND_BUSH = register("jungle_ground_bush", new GroundBushFeature(TreeConfiguration::deserialize));
-   public static final Feature<MegaTreeConfiguration> DARK_OAK_TREE = register("dark_oak_tree", new DarkOakFeature(MegaTreeConfiguration::deserialize));
-   public static final Feature<MegaTreeConfiguration> MEGA_JUNGLE_TREE = register("mega_jungle_tree", new MegaJungleTreeFeature(MegaTreeConfiguration::deserialize));
-   public static final Feature<MegaTreeConfiguration> MEGA_SPRUCE_TREE = register("mega_spruce_tree", new MegaPineTreeFeature(MegaTreeConfiguration::deserialize));
-   public static final AbstractFlowerFeature<RandomPatchConfiguration> FLOWER = (AbstractFlowerFeature)register("flower", new DefaultFlowerFeature(RandomPatchConfiguration::deserialize));
-   public static final Feature<RandomPatchConfiguration> RANDOM_PATCH = register("random_patch", new RandomPatchFeature(RandomPatchConfiguration::deserialize));
-   public static final Feature<BlockPileConfiguration> BLOCK_PILE = register("block_pile", new BlockPileFeature(BlockPileConfiguration::deserialize));
-   public static final Feature<SpringConfiguration> SPRING = register("spring_feature", new SpringFeature(SpringConfiguration::deserialize));
-   public static final Feature<NoneFeatureConfiguration> CHORUS_PLANT = register("chorus_plant", new ChorusPlantFeature(NoneFeatureConfiguration::deserialize));
-   public static final Feature<ReplaceBlockConfiguration> EMERALD_ORE = register("emerald_ore", new ReplaceBlockFeature(ReplaceBlockConfiguration::deserialize));
-   public static final Feature<NoneFeatureConfiguration> VOID_START_PLATFORM = register("void_start_platform", new VoidStartPlatformFeature(NoneFeatureConfiguration::deserialize));
-   public static final Feature<NoneFeatureConfiguration> DESERT_WELL = register("desert_well", new DesertWellFeature(NoneFeatureConfiguration::deserialize));
-   public static final Feature<NoneFeatureConfiguration> FOSSIL = register("fossil", new FossilFeature(NoneFeatureConfiguration::deserialize));
-   public static final Feature<HugeMushroomFeatureConfiguration> HUGE_RED_MUSHROOM = register("huge_red_mushroom", new HugeRedMushroomFeature(HugeMushroomFeatureConfiguration::deserialize));
-   public static final Feature<HugeMushroomFeatureConfiguration> HUGE_BROWN_MUSHROOM = register("huge_brown_mushroom", new HugeBrownMushroomFeature(HugeMushroomFeatureConfiguration::deserialize));
-   public static final Feature<NoneFeatureConfiguration> ICE_SPIKE = register("ice_spike", new IceSpikeFeature(NoneFeatureConfiguration::deserialize));
-   public static final Feature<NoneFeatureConfiguration> GLOWSTONE_BLOB = register("glowstone_blob", new GlowstoneFeature(NoneFeatureConfiguration::deserialize));
-   public static final Feature<NoneFeatureConfiguration> FREEZE_TOP_LAYER = register("freeze_top_layer", new SnowAndFreezeFeature(NoneFeatureConfiguration::deserialize));
-   public static final Feature<NoneFeatureConfiguration> VINES = register("vines", new VinesFeature(NoneFeatureConfiguration::deserialize));
-   public static final Feature<NoneFeatureConfiguration> MONSTER_ROOM = register("monster_room", new MonsterRoomFeature(NoneFeatureConfiguration::deserialize));
-   public static final Feature<NoneFeatureConfiguration> BLUE_ICE = register("blue_ice", new BlueIceFeature(NoneFeatureConfiguration::deserialize));
-   public static final Feature<BlockStateConfiguration> ICEBERG = register("iceberg", new IcebergFeature(BlockStateConfiguration::deserialize));
-   public static final Feature<BlockBlobConfiguration> FOREST_ROCK = register("forest_rock", new BlockBlobFeature(BlockBlobConfiguration::deserialize));
-   public static final Feature<DiskConfiguration> DISK = register("disk", new DiskReplaceFeature(DiskConfiguration::deserialize));
-   public static final Feature<FeatureRadiusConfiguration> ICE_PATCH = register("ice_patch", new IcePatchFeature(FeatureRadiusConfiguration::deserialize));
-   public static final Feature<BlockStateConfiguration> LAKE = register("lake", new LakeFeature(BlockStateConfiguration::deserialize));
-   public static final Feature<OreConfiguration> ORE = register("ore", new OreFeature(OreConfiguration::deserialize));
-   public static final Feature<SpikeConfiguration> END_SPIKE = register("end_spike", new SpikeFeature(SpikeConfiguration::deserialize));
-   public static final Feature<NoneFeatureConfiguration> END_ISLAND = register("end_island", new EndIslandFeature(NoneFeatureConfiguration::deserialize));
-   public static final Feature<EndGatewayConfiguration> END_GATEWAY = register("end_gateway", new EndGatewayFeature(EndGatewayConfiguration::deserialize));
-   public static final Feature<SeagrassFeatureConfiguration> SEAGRASS = register("seagrass", new SeagrassFeature(SeagrassFeatureConfiguration::deserialize));
-   public static final Feature<NoneFeatureConfiguration> KELP = register("kelp", new KelpFeature(NoneFeatureConfiguration::deserialize));
-   public static final Feature<NoneFeatureConfiguration> CORAL_TREE = register("coral_tree", new CoralTreeFeature(NoneFeatureConfiguration::deserialize));
-   public static final Feature<NoneFeatureConfiguration> CORAL_MUSHROOM = register("coral_mushroom", new CoralMushroomFeature(NoneFeatureConfiguration::deserialize));
-   public static final Feature<NoneFeatureConfiguration> CORAL_CLAW = register("coral_claw", new CoralClawFeature(NoneFeatureConfiguration::deserialize));
-   public static final Feature<CountFeatureConfiguration> SEA_PICKLE = register("sea_pickle", new SeaPickleFeature(CountFeatureConfiguration::deserialize));
-   public static final Feature<SimpleBlockConfiguration> SIMPLE_BLOCK = register("simple_block", new SimpleBlockFeature(SimpleBlockConfiguration::deserialize));
-   public static final Feature<ProbabilityFeatureConfiguration> BAMBOO = register("bamboo", new BambooFeature(ProbabilityFeatureConfiguration::deserialize));
-   public static final Feature<LayerConfiguration> FILL_LAYER = register("fill_layer", new FillLayerFeature(LayerConfiguration::deserialize));
-   public static final BonusChestFeature BONUS_CHEST = (BonusChestFeature)register("bonus_chest", new BonusChestFeature(NoneFeatureConfiguration::deserialize));
-   public static final Feature<RandomRandomFeatureConfiguration> RANDOM_RANDOM_SELECTOR = register("random_random_selector", new RandomRandomFeature(RandomRandomFeatureConfiguration::deserialize));
-   public static final Feature<RandomFeatureConfiguration> RANDOM_SELECTOR = register("random_selector", new RandomSelectorFeature(RandomFeatureConfiguration::deserialize));
-   public static final Feature<SimpleRandomFeatureConfiguration> SIMPLE_RANDOM_SELECTOR = register("simple_random_selector", new SimpleRandomSelectorFeature(SimpleRandomFeatureConfiguration::deserialize));
-   public static final Feature<RandomBooleanFeatureConfiguration> RANDOM_BOOLEAN_SELECTOR = register("random_boolean_selector", new RandomBooleanSelectorFeature(RandomBooleanFeatureConfiguration::deserialize));
-   public static final Feature<DecoratedFeatureConfiguration> DECORATED = register("decorated", new DecoratedFeature(DecoratedFeatureConfiguration::deserialize));
-   public static final Feature<DecoratedFeatureConfiguration> DECORATED_FLOWER = register("decorated_flower", new DecoratedFlowerFeature(DecoratedFeatureConfiguration::deserialize));
-   public static final BiMap<String, StructureFeature<?>> STRUCTURES_REGISTRY = (BiMap)Util.make(HashBiMap.create(), (var0) -> {
-      var0.put("Pillager_Outpost".toLowerCase(Locale.ROOT), PILLAGER_OUTPOST);
-      var0.put("Mineshaft".toLowerCase(Locale.ROOT), MINESHAFT);
-      var0.put("Mansion".toLowerCase(Locale.ROOT), WOODLAND_MANSION);
-      var0.put("Jungle_Pyramid".toLowerCase(Locale.ROOT), JUNGLE_TEMPLE);
-      var0.put("Desert_Pyramid".toLowerCase(Locale.ROOT), DESERT_PYRAMID);
-      var0.put("Igloo".toLowerCase(Locale.ROOT), IGLOO);
-      var0.put("Shipwreck".toLowerCase(Locale.ROOT), SHIPWRECK);
-      var0.put("Swamp_Hut".toLowerCase(Locale.ROOT), SWAMP_HUT);
-      var0.put("Stronghold".toLowerCase(Locale.ROOT), STRONGHOLD);
-      var0.put("Monument".toLowerCase(Locale.ROOT), OCEAN_MONUMENT);
-      var0.put("Ocean_Ruin".toLowerCase(Locale.ROOT), OCEAN_RUIN);
-      var0.put("Fortress".toLowerCase(Locale.ROOT), NETHER_BRIDGE);
-      var0.put("EndCity".toLowerCase(Locale.ROOT), END_CITY);
-      var0.put("Buried_Treasure".toLowerCase(Locale.ROOT), BURIED_TREASURE);
-      var0.put("Village".toLowerCase(Locale.ROOT), VILLAGE);
-   });
-   public static final List<StructureFeature<?>> NOISE_AFFECTING_FEATURES;
-   private final Function<Dynamic<?>, ? extends FC> configurationFactory;
+   public static final Feature<NoneFeatureConfiguration> NO_OP;
+   public static final Feature<TreeConfiguration> TREE;
+   public static final AbstractFlowerFeature<RandomPatchConfiguration> FLOWER;
+   public static final Feature<RandomPatchConfiguration> RANDOM_PATCH;
+   public static final Feature<BlockPileConfiguration> BLOCK_PILE;
+   public static final Feature<SpringConfiguration> SPRING;
+   public static final Feature<NoneFeatureConfiguration> CHORUS_PLANT;
+   public static final Feature<ReplaceBlockConfiguration> EMERALD_ORE;
+   public static final Feature<NoneFeatureConfiguration> VOID_START_PLATFORM;
+   public static final Feature<NoneFeatureConfiguration> DESERT_WELL;
+   public static final Feature<NoneFeatureConfiguration> FOSSIL;
+   public static final Feature<HugeMushroomFeatureConfiguration> HUGE_RED_MUSHROOM;
+   public static final Feature<HugeMushroomFeatureConfiguration> HUGE_BROWN_MUSHROOM;
+   public static final Feature<NoneFeatureConfiguration> ICE_SPIKE;
+   public static final Feature<NoneFeatureConfiguration> GLOWSTONE_BLOB;
+   public static final Feature<NoneFeatureConfiguration> FREEZE_TOP_LAYER;
+   public static final Feature<NoneFeatureConfiguration> VINES;
+   public static final Feature<NoneFeatureConfiguration> MONSTER_ROOM;
+   public static final Feature<NoneFeatureConfiguration> BLUE_ICE;
+   public static final Feature<BlockStateConfiguration> ICEBERG;
+   public static final Feature<BlockStateConfiguration> FOREST_ROCK;
+   public static final Feature<DiskConfiguration> DISK;
+   public static final Feature<DiskConfiguration> ICE_PATCH;
+   public static final Feature<BlockStateConfiguration> LAKE;
+   public static final Feature<OreConfiguration> ORE;
+   public static final Feature<SpikeConfiguration> END_SPIKE;
+   public static final Feature<NoneFeatureConfiguration> END_ISLAND;
+   public static final Feature<EndGatewayConfiguration> END_GATEWAY;
+   public static final SeagrassFeature SEAGRASS;
+   public static final Feature<NoneFeatureConfiguration> KELP;
+   public static final Feature<NoneFeatureConfiguration> CORAL_TREE;
+   public static final Feature<NoneFeatureConfiguration> CORAL_MUSHROOM;
+   public static final Feature<NoneFeatureConfiguration> CORAL_CLAW;
+   public static final Feature<CountConfiguration> SEA_PICKLE;
+   public static final Feature<SimpleBlockConfiguration> SIMPLE_BLOCK;
+   public static final Feature<ProbabilityFeatureConfiguration> BAMBOO;
+   public static final Feature<HugeFungusConfiguration> HUGE_FUNGUS;
+   public static final Feature<BlockPileConfiguration> NETHER_FOREST_VEGETATION;
+   public static final Feature<NoneFeatureConfiguration> WEEPING_VINES;
+   public static final Feature<NoneFeatureConfiguration> TWISTING_VINES;
+   public static final Feature<ColumnFeatureConfiguration> BASALT_COLUMNS;
+   public static final Feature<DeltaFeatureConfiguration> DELTA_FEATURE;
+   public static final Feature<ReplaceSphereConfiguration> REPLACE_BLOBS;
+   public static final Feature<LayerConfiguration> FILL_LAYER;
+   public static final BonusChestFeature BONUS_CHEST;
+   public static final Feature<NoneFeatureConfiguration> BASALT_PILLAR;
+   public static final Feature<OreConfiguration> NO_SURFACE_ORE;
+   public static final Feature<RandomFeatureConfiguration> RANDOM_SELECTOR;
+   public static final Feature<SimpleRandomFeatureConfiguration> SIMPLE_RANDOM_SELECTOR;
+   public static final Feature<RandomBooleanFeatureConfiguration> RANDOM_BOOLEAN_SELECTOR;
+   public static final Feature<DecoratedFeatureConfiguration> DECORATED;
+   public static final Feature<DecoratedFeatureConfiguration> DECORATED_FLOWER;
+   private final Codec<ConfiguredFeature<FC, Feature<FC>>> configuredCodec;
 
    private static <C extends FeatureConfiguration, F extends Feature<C>> F register(String var0, F var1) {
       return (Feature)Registry.register(Registry.FEATURE, (String)var0, var1);
    }
 
-   public Feature(Function<Dynamic<?>, ? extends FC> var1) {
-      this.configurationFactory = var1;
+   public Feature(Codec<FC> var1) {
+      this.configuredCodec = var1.fieldOf("config").xmap((var1x) -> {
+         return new ConfiguredFeature(this, var1x);
+      }, (var0) -> {
+         return var0.config;
+      }).codec();
    }
 
+   public Codec<ConfiguredFeature<FC, Feature<FC>>> configuredCodec() {
+      return this.configuredCodec;
+   }
+
    public ConfiguredFeature<FC, ?> configured(FC var1) {
       return new ConfiguredFeature(this, var1);
    }
 
-   public FC createSettings(Dynamic<?> var1) {
-      return (FeatureConfiguration)this.configurationFactory.apply(var1);
-   }
-
    protected void setBlock(LevelWriter var1, BlockPos var2, BlockState var3) {
       var1.setBlock(var2, var3, 3);
    }
 
-   public abstract boolean place(LevelAccessor var1, ChunkGenerator<? extends ChunkGeneratorSettings> var2, Random var3, BlockPos var4, FC var5);
+   public abstract boolean place(WorldGenLevel var1, ChunkGenerator var2, Random var3, BlockPos var4, FC var5);
 
-   public List<Biome.SpawnerData> getSpecialEnemies() {
-      return Collections.emptyList();
+   protected static boolean isStone(Block var0) {
+      return var0 == Blocks.STONE || var0 == Blocks.GRANITE || var0 == Blocks.DIORITE || var0 == Blocks.ANDESITE;
    }
 
-   public List<Biome.SpawnerData> getSpecialAnimals() {
-      return Collections.emptyList();
+   public static boolean isDirt(Block var0) {
+      return var0 == Blocks.DIRT || var0 == Blocks.GRASS_BLOCK || var0 == Blocks.PODZOL || var0 == Blocks.COARSE_DIRT || var0 == Blocks.MYCELIUM;
    }
 
-   protected static boolean isStone(Block var0) {
-      return var0 == Blocks.STONE || var0 == Blocks.GRANITE || var0 == Blocks.DIORITE || var0 == Blocks.ANDESITE;
+   public static boolean isGrassOrDirt(LevelSimulatedReader var0, BlockPos var1) {
+      return var0.isStateAtPosition(var1, (var0x) -> {
+         return isDirt(var0x.getBlock());
+      });
    }
 
-   protected static boolean isDirt(Block var0) {
-      return var0 == Blocks.DIRT || var0 == Blocks.GRASS_BLOCK || var0 == Blocks.PODZOL || var0 == Blocks.COARSE_DIRT || var0 == Blocks.MYCELIUM;
+   public static boolean isAir(LevelSimulatedReader var0, BlockPos var1) {
+      return var0.isStateAtPosition(var1, BlockBehaviour.BlockStateBase::isAir);
    }
 
    static {
-      NOISE_AFFECTING_FEATURES = ImmutableList.of(PILLAGER_OUTPOST, VILLAGE);
+      NO_OP = register("no_op", new NoOpFeature(NoneFeatureConfiguration.CODEC));
+      TREE = register("tree", new TreeFeature(TreeConfiguration.CODEC));
+      FLOWER = (AbstractFlowerFeature)register("flower", new DefaultFlowerFeature(RandomPatchConfiguration.CODEC));
+      RANDOM_PATCH = register("random_patch", new RandomPatchFeature(RandomPatchConfiguration.CODEC));
+      BLOCK_PILE = register("block_pile", new BlockPileFeature(BlockPileConfiguration.CODEC));
+      SPRING = register("spring_feature", new SpringFeature(SpringConfiguration.CODEC));
+      CHORUS_PLANT = register("chorus_plant", new ChorusPlantFeature(NoneFeatureConfiguration.CODEC));
+      EMERALD_ORE = register("emerald_ore", new ReplaceBlockFeature(ReplaceBlockConfiguration.CODEC));
+      VOID_START_PLATFORM = register("void_start_platform", new VoidStartPlatformFeature(NoneFeatureConfiguration.CODEC));
+      DESERT_WELL = register("desert_well", new DesertWellFeature(NoneFeatureConfiguration.CODEC));
+      FOSSIL = register("fossil", new FossilFeature(NoneFeatureConfiguration.CODEC));
+      HUGE_RED_MUSHROOM = register("huge_red_mushroom", new HugeRedMushroomFeature(HugeMushroomFeatureConfiguration.CODEC));
+      HUGE_BROWN_MUSHROOM = register("huge_brown_mushroom", new HugeBrownMushroomFeature(HugeMushroomFeatureConfiguration.CODEC));
+      ICE_SPIKE = register("ice_spike", new IceSpikeFeature(NoneFeatureConfiguration.CODEC));
+      GLOWSTONE_BLOB = register("glowstone_blob", new GlowstoneFeature(NoneFeatureConfiguration.CODEC));
+      FREEZE_TOP_LAYER = register("freeze_top_layer", new SnowAndFreezeFeature(NoneFeatureConfiguration.CODEC));
+      VINES = register("vines", new VinesFeature(NoneFeatureConfiguration.CODEC));
+      MONSTER_ROOM = register("monster_room", new MonsterRoomFeature(NoneFeatureConfiguration.CODEC));
+      BLUE_ICE = register("blue_ice", new BlueIceFeature(NoneFeatureConfiguration.CODEC));
+      ICEBERG = register("iceberg", new IcebergFeature(BlockStateConfiguration.CODEC));
+      FOREST_ROCK = register("forest_rock", new BlockBlobFeature(BlockStateConfiguration.CODEC));
+      DISK = register("disk", new DiskReplaceFeature(DiskConfiguration.CODEC));
+      ICE_PATCH = register("ice_patch", new IcePatchFeature(DiskConfiguration.CODEC));
+      LAKE = register("lake", new LakeFeature(BlockStateConfiguration.CODEC));
+      ORE = register("ore", new OreFeature(OreConfiguration.CODEC));
+      END_SPIKE = register("end_spike", new SpikeFeature(SpikeConfiguration.CODEC));
+      END_ISLAND = register("end_island", new EndIslandFeature(NoneFeatureConfiguration.CODEC));
+      END_GATEWAY = register("end_gateway", new EndGatewayFeature(EndGatewayConfiguration.CODEC));
+      SEAGRASS = (SeagrassFeature)register("seagrass", new SeagrassFeature(ProbabilityFeatureConfiguration.CODEC));
+      KELP = register("kelp", new KelpFeature(NoneFeatureConfiguration.CODEC));
+      CORAL_TREE = register("coral_tree", new CoralTreeFeature(NoneFeatureConfiguration.CODEC));
+      CORAL_MUSHROOM = register("coral_mushroom", new CoralMushroomFeature(NoneFeatureConfiguration.CODEC));
+      CORAL_CLAW = register("coral_claw", new CoralClawFeature(NoneFeatureConfiguration.CODEC));
+      SEA_PICKLE = register("sea_pickle", new SeaPickleFeature(CountConfiguration.CODEC));
+      SIMPLE_BLOCK = register("simple_block", new SimpleBlockFeature(SimpleBlockConfiguration.CODEC));
+      BAMBOO = register("bamboo", new BambooFeature(ProbabilityFeatureConfiguration.CODEC));
+      HUGE_FUNGUS = register("huge_fungus", new HugeFungusFeature(HugeFungusConfiguration.CODEC));
+      NETHER_FOREST_VEGETATION = register("nether_forest_vegetation", new NetherForestVegetationFeature(BlockPileConfiguration.CODEC));
+      WEEPING_VINES = register("weeping_vines", new WeepingVinesFeature(NoneFeatureConfiguration.CODEC));
+      TWISTING_VINES = register("twisting_vines", new TwistingVinesFeature(NoneFeatureConfiguration.CODEC));
+      BASALT_COLUMNS = register("basalt_columns", new BasaltColumnsFeature(ColumnFeatureConfiguration.CODEC));
+      DELTA_FEATURE = register("delta_feature", new DeltaFeature(DeltaFeatureConfiguration.CODEC));
+      REPLACE_BLOBS = register("netherrack_replace_blobs", new ReplaceBlobsFeature(ReplaceSphereConfiguration.CODEC));
+      FILL_LAYER = register("fill_layer", new FillLayerFeature(LayerConfiguration.CODEC));
+      BONUS_CHEST = (BonusChestFeature)register("bonus_chest", new BonusChestFeature(NoneFeatureConfiguration.CODEC));
+      BASALT_PILLAR = register("basalt_pillar", new BasaltPillarFeature(NoneFeatureConfiguration.CODEC));
+      NO_SURFACE_ORE = register("no_surface_ore", new NoSurfaceOreFeature(OreConfiguration.CODEC));
+      RANDOM_SELECTOR = register("random_selector", new RandomSelectorFeature(RandomFeatureConfiguration.CODEC));
+      SIMPLE_RANDOM_SELECTOR = register("simple_random_selector", new SimpleRandomSelectorFeature(SimpleRandomFeatureConfiguration.CODEC));
+      RANDOM_BOOLEAN_SELECTOR = register("random_boolean_selector", new RandomBooleanSelectorFeature(RandomBooleanFeatureConfiguration.CODEC));
+      DECORATED = register("decorated", new DecoratedFeature(DecoratedFeatureConfiguration.CODEC));
+      DECORATED_FLOWER = register("decorated_flower", new DecoratedFlowerFeature(DecoratedFeatureConfiguration.CODEC));
    }
 }
