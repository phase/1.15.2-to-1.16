--- net/minecraft/world/level/levelgen/feature/SeagrassFeature.java
+++ net/minecraft/world/level/levelgen/feature/SeagrassFeature.java
@@ -1,52 +1,51 @@
 package net.minecraft.world.level.levelgen.feature;
 
-import com.mojang.datafixers.Dynamic;
+import com.mojang.serialization.Codec;
 import java.util.Random;
-import java.util.function.Function;
 import net.minecraft.core.BlockPos;
-import net.minecraft.world.level.LevelAccessor;
+import net.minecraft.world.level.StructureFeatureManager;
+import net.minecraft.world.level.WorldGenLevel;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.TallSeagrass;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.block.state.properties.DoubleBlockHalf;
 import net.minecraft.world.level.chunk.ChunkGenerator;
-import net.minecraft.world.level.levelgen.ChunkGeneratorSettings;
 import net.minecraft.world.level.levelgen.Heightmap;
 import net.minecraft.world.level.levelgen.feature.configurations.SeagrassFeatureConfiguration;
 
 public class SeagrassFeature extends Feature<SeagrassFeatureConfiguration> {
-   public SeagrassFeature(Function<Dynamic<?>, ? extends SeagrassFeatureConfiguration> var1) {
+   public SeagrassFeature(Codec<SeagrassFeatureConfiguration> var1) {
       super(var1);
    }
 
-   public boolean place(LevelAccessor var1, ChunkGenerator<? extends ChunkGeneratorSettings> var2, Random var3, BlockPos var4, SeagrassFeatureConfiguration var5) {
-      int var6 = 0;
+   public boolean place(WorldGenLevel var1, StructureFeatureManager var2, ChunkGenerator var3, Random var4, BlockPos var5, SeagrassFeatureConfiguration var6) {
+      int var7 = 0;
 
-      for(int var7 = 0; var7 < var5.count; ++var7) {
-         int var8 = var3.nextInt(8) - var3.nextInt(8);
-         int var9 = var3.nextInt(8) - var3.nextInt(8);
-         int var10 = var1.getHeight(Heightmap.Types.OCEAN_FLOOR, var4.getX() + var8, var4.getZ() + var9);
-         BlockPos var11 = new BlockPos(var4.getX() + var8, var10, var4.getZ() + var9);
-         if (var1.getBlockState(var11).getBlock() == Blocks.WATER) {
-            boolean var12 = var3.nextDouble() < var5.tallSeagrassProbability;
-            BlockState var13 = var12 ? Blocks.TALL_SEAGRASS.defaultBlockState() : Blocks.SEAGRASS.defaultBlockState();
-            if (var13.canSurvive(var1, var11)) {
-               if (var12) {
-                  BlockState var14 = (BlockState)var13.setValue(TallSeagrass.HALF, DoubleBlockHalf.UPPER);
-                  BlockPos var15 = var11.above();
-                  if (var1.getBlockState(var15).getBlock() == Blocks.WATER) {
-                     var1.setBlock(var11, var13, 2);
-                     var1.setBlock(var15, var14, 2);
+      for(int var8 = 0; var8 < var6.count; ++var8) {
+         int var9 = var4.nextInt(8) - var4.nextInt(8);
+         int var10 = var4.nextInt(8) - var4.nextInt(8);
+         int var11 = var1.getHeight(Heightmap.Types.OCEAN_FLOOR, var5.getX() + var9, var5.getZ() + var10);
+         BlockPos var12 = new BlockPos(var5.getX() + var9, var11, var5.getZ() + var10);
+         if (var1.getBlockState(var12).is(Blocks.WATER)) {
+            boolean var13 = var4.nextDouble() < var6.tallSeagrassProbability;
+            BlockState var14 = var13 ? Blocks.TALL_SEAGRASS.defaultBlockState() : Blocks.SEAGRASS.defaultBlockState();
+            if (var14.canSurvive(var1, var12)) {
+               if (var13) {
+                  BlockState var15 = (BlockState)var14.setValue(TallSeagrass.HALF, DoubleBlockHalf.UPPER);
+                  BlockPos var16 = var12.above();
+                  if (var1.getBlockState(var16).is(Blocks.WATER)) {
+                     var1.setBlock(var12, var14, 2);
+                     var1.setBlock(var16, var15, 2);
                   }
                } else {
-                  var1.setBlock(var11, var13, 2);
+                  var1.setBlock(var12, var14, 2);
                }
 
-               ++var6;
+               ++var7;
             }
          }
       }
 
-      return var6 > 0;
+      return var7 > 0;
    }
 }
