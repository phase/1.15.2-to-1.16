--- net/minecraft/world/level/levelgen/feature/AbstractHugeMushroomFeature.java
+++ net/minecraft/world/level/levelgen/feature/AbstractHugeMushroomFeature.java
@@ -1,29 +1,28 @@
 package net.minecraft.world.level.levelgen.feature;
 
-import com.mojang.datafixers.Dynamic;
+import com.mojang.serialization.Codec;
 import java.util.Random;
-import java.util.function.Function;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
-import net.minecraft.core.Vec3i;
 import net.minecraft.tags.BlockTags;
+import net.minecraft.tags.Tag;
 import net.minecraft.world.level.LevelAccessor;
+import net.minecraft.world.level.WorldGenLevel;
 import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.chunk.ChunkGenerator;
-import net.minecraft.world.level.levelgen.ChunkGeneratorSettings;
 import net.minecraft.world.level.levelgen.feature.configurations.HugeMushroomFeatureConfiguration;
 
 public abstract class AbstractHugeMushroomFeature extends Feature<HugeMushroomFeatureConfiguration> {
-   public AbstractHugeMushroomFeature(Function<Dynamic<?>, ? extends HugeMushroomFeatureConfiguration> var1) {
+   public AbstractHugeMushroomFeature(Codec<HugeMushroomFeatureConfiguration> var1) {
       super(var1);
    }
 
    protected void placeTrunk(LevelAccessor var1, Random var2, BlockPos var3, HugeMushroomFeatureConfiguration var4, int var5, BlockPos.MutableBlockPos var6) {
       for(int var7 = 0; var7 < var5; ++var7) {
-         var6.set((Vec3i)var3).move(Direction.UP, var7);
+         var6.set(var3).move(Direction.UP, var7);
          if (!var1.getBlockState(var6).isSolidRender(var1, var6)) {
             this.setBlock(var1, var6, var4.stemProvider.getState(var2, var3));
          }
       }
 
@@ -40,19 +39,19 @@
 
    protected boolean isValidPosition(LevelAccessor var1, BlockPos var2, int var3, BlockPos.MutableBlockPos var4, HugeMushroomFeatureConfiguration var5) {
       int var6 = var2.getY();
       if (var6 >= 1 && var6 + var3 + 1 < 256) {
          Block var7 = var1.getBlockState(var2.below()).getBlock();
-         if (!isDirt(var7)) {
+         if (!isDirt(var7) && !var7.is((Tag)BlockTags.MUSHROOM_GROW_BLOCK)) {
             return false;
          } else {
             for(int var8 = 0; var8 <= var3; ++var8) {
                int var9 = this.getTreeRadiusForHeight(-1, -1, var5.foliageRadius, var8);
 
                for(int var10 = -var9; var10 <= var9; ++var10) {
                   for(int var11 = -var9; var11 <= var9; ++var11) {
-                     BlockState var12 = var1.getBlockState(var4.set((Vec3i)var2).move(var10, var8, var11));
+                     BlockState var12 = var1.getBlockState(var4.setWithOffset(var2, var10, var8, var11));
                      if (!var12.isAir() && !var12.is(BlockTags.LEAVES)) {
                         return false;
                      }
                   }
                }
@@ -63,11 +62,11 @@
       } else {
          return false;
       }
    }
 
-   public boolean place(LevelAccessor var1, ChunkGenerator<? extends ChunkGeneratorSettings> var2, Random var3, BlockPos var4, HugeMushroomFeatureConfiguration var5) {
+   public boolean place(WorldGenLevel var1, ChunkGenerator var2, Random var3, BlockPos var4, HugeMushroomFeatureConfiguration var5) {
       int var6 = this.getTreeHeight(var3);
       BlockPos.MutableBlockPos var7 = new BlockPos.MutableBlockPos();
       if (!this.isValidPosition(var1, var4, var6, var7, var5)) {
          return false;
       } else {
