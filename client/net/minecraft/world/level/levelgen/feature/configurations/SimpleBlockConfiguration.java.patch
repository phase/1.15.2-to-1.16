--- net/minecraft/world/level/levelgen/feature/configurations/SimpleBlockConfiguration.java
+++ net/minecraft/world/level/levelgen/feature/configurations/SimpleBlockConfiguration.java
@@ -1,16 +1,24 @@
 package net.minecraft.world.level.levelgen.feature.configurations;
 
-import com.google.common.collect.ImmutableMap;
-import com.google.common.collect.Lists;
-import com.mojang.datafixers.Dynamic;
-import com.mojang.datafixers.types.DynamicOps;
+import com.mojang.serialization.Codec;
+import com.mojang.serialization.codecs.RecordCodecBuilder;
 import java.util.List;
-import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.state.BlockState;
 
 public class SimpleBlockConfiguration implements FeatureConfiguration {
+   public static final Codec<SimpleBlockConfiguration> CODEC = RecordCodecBuilder.create((var0) -> {
+      return var0.group(BlockState.CODEC.fieldOf("to_place").forGetter((var0x) -> {
+         return var0x.toPlace;
+      }), BlockState.CODEC.listOf().fieldOf("place_on").forGetter((var0x) -> {
+         return var0x.placeOn;
+      }), BlockState.CODEC.listOf().fieldOf("place_in").forGetter((var0x) -> {
+         return var0x.placeIn;
+      }), BlockState.CODEC.listOf().fieldOf("place_under").forGetter((var0x) -> {
+         return var0x.placeUnder;
+      })).apply(var0, SimpleBlockConfiguration::new);
+   });
    public final BlockState toPlace;
    public final List<BlockState> placeOn;
    public final List<BlockState> placeIn;
    public final List<BlockState> placeUnder;
 
@@ -18,32 +26,6 @@
       this.toPlace = var1;
       this.placeOn = var2;
       this.placeIn = var3;
       this.placeUnder = var4;
    }
-
-   public SimpleBlockConfiguration(BlockState var1, BlockState[] var2, BlockState[] var3, BlockState[] var4) {
-      this(var1, (List)Lists.newArrayList(var2), (List)Lists.newArrayList(var3), (List)Lists.newArrayList(var4));
-   }
-
-   public <T> Dynamic<T> serialize(DynamicOps<T> var1) {
-      Object var2 = BlockState.serialize(var1, this.toPlace).getValue();
-      Object var3 = var1.createList(this.placeOn.stream().map((var1x) -> {
-         return BlockState.serialize(var1, var1x).getValue();
-      }));
-      Object var4 = var1.createList(this.placeIn.stream().map((var1x) -> {
-         return BlockState.serialize(var1, var1x).getValue();
-      }));
-      Object var5 = var1.createList(this.placeUnder.stream().map((var1x) -> {
-         return BlockState.serialize(var1, var1x).getValue();
-      }));
-      return new Dynamic(var1, var1.createMap(ImmutableMap.of(var1.createString("to_place"), var2, var1.createString("place_on"), var3, var1.createString("place_in"), var4, var1.createString("place_under"), var5)));
-   }
-
-   public static <T> SimpleBlockConfiguration deserialize(Dynamic<T> var0) {
-      BlockState var1 = (BlockState)var0.get("to_place").map(BlockState::deserialize).orElse(Blocks.AIR.defaultBlockState());
-      List var2 = var0.get("place_on").asList(BlockState::deserialize);
-      List var3 = var0.get("place_in").asList(BlockState::deserialize);
-      List var4 = var0.get("place_under").asList(BlockState::deserialize);
-      return new SimpleBlockConfiguration(var1, var2, var3, var4);
-   }
 }
