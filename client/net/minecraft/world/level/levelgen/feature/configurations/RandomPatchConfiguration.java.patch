--- net/minecraft/world/level/levelgen/feature/configurations/RandomPatchConfiguration.java
+++ net/minecraft/world/level/levelgen/feature/configurations/RandomPatchConfiguration.java
@@ -1,25 +1,46 @@
 package net.minecraft.world.level.levelgen.feature.configurations;
 
-import com.google.common.collect.ImmutableMap;
+import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableSet;
-import com.google.common.collect.Sets;
-import com.google.common.collect.ImmutableMap.Builder;
-import com.mojang.datafixers.Dynamic;
-import com.mojang.datafixers.types.DynamicOps;
+import com.mojang.serialization.Codec;
+import com.mojang.serialization.codecs.RecordCodecBuilder;
+import java.util.List;
 import java.util.Set;
 import java.util.stream.Collectors;
-import net.minecraft.core.Registry;
-import net.minecraft.resources.ResourceLocation;
 import net.minecraft.world.level.block.Block;
+import net.minecraft.world.level.block.state.BlockBehaviour;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.levelgen.feature.blockplacers.BlockPlacer;
-import net.minecraft.world.level.levelgen.feature.blockplacers.BlockPlacerType;
 import net.minecraft.world.level.levelgen.feature.stateproviders.BlockStateProvider;
-import net.minecraft.world.level.levelgen.feature.stateproviders.BlockStateProviderType;
 
 public class RandomPatchConfiguration implements FeatureConfiguration {
+   public static final Codec<RandomPatchConfiguration> CODEC = RecordCodecBuilder.create((var0) -> {
+      return var0.group(BlockStateProvider.CODEC.fieldOf("state_provider").forGetter((var0x) -> {
+         return var0x.stateProvider;
+      }), BlockPlacer.CODEC.fieldOf("block_placer").forGetter((var0x) -> {
+         return var0x.blockPlacer;
+      }), BlockState.CODEC.listOf().fieldOf("whitelist").forGetter((var0x) -> {
+         return (List)var0x.whitelist.stream().map(Block::defaultBlockState).collect(Collectors.toList());
+      }), BlockState.CODEC.listOf().fieldOf("blacklist").forGetter((var0x) -> {
+         return ImmutableList.copyOf(var0x.blacklist);
+      }), Codec.INT.fieldOf("tries").orElse(128).forGetter((var0x) -> {
+         return var0x.tries;
+      }), Codec.INT.fieldOf("xspread").orElse(7).forGetter((var0x) -> {
+         return var0x.xspread;
+      }), Codec.INT.fieldOf("yspread").orElse(3).forGetter((var0x) -> {
+         return var0x.yspread;
+      }), Codec.INT.fieldOf("zspread").orElse(7).forGetter((var0x) -> {
+         return var0x.zspread;
+      }), Codec.BOOL.fieldOf("can_replace").orElse(false).forGetter((var0x) -> {
+         return var0x.canReplace;
+      }), Codec.BOOL.fieldOf("project").orElse(true).forGetter((var0x) -> {
+         return var0x.project;
+      }), Codec.BOOL.fieldOf("need_water").orElse(false).forGetter((var0x) -> {
+         return var0x.needWater;
+      })).apply(var0, RandomPatchConfiguration::new);
+   });
    public final BlockStateProvider stateProvider;
    public final BlockPlacer blockPlacer;
    public final Set<Block> whitelist;
    public final Set<BlockState> blacklist;
    public final int tries;
@@ -28,10 +49,14 @@
    public final int zspread;
    public final boolean canReplace;
    public final boolean project;
    public final boolean needWater;
 
+   private RandomPatchConfiguration(BlockStateProvider var1, BlockPlacer var2, List<BlockState> var3, List<BlockState> var4, int var5, int var6, int var7, int var8, boolean var9, boolean var10, boolean var11) {
+      this(var1, var2, (Set)((Set)var3.stream().map(BlockBehaviour.BlockStateBase::getBlock).collect(Collectors.toSet())), (Set)ImmutableSet.copyOf(var4), var5, var6, var7, var8, var9, var10, var11);
+   }
+
    private RandomPatchConfiguration(BlockStateProvider var1, BlockPlacer var2, Set<Block> var3, Set<BlockState> var4, int var5, int var6, int var7, int var8, boolean var9, boolean var10, boolean var11) {
       this.stateProvider = var1;
       this.blockPlacer = var2;
       this.whitelist = var3;
       this.blacklist = var4;
@@ -42,26 +67,10 @@
       this.canReplace = var9;
       this.project = var10;
       this.needWater = var11;
    }
 
-   public <T> Dynamic<T> serialize(DynamicOps<T> var1) {
-      Builder var2 = ImmutableMap.builder();
-      var2.put(var1.createString("state_provider"), this.stateProvider.serialize(var1)).put(var1.createString("block_placer"), this.blockPlacer.serialize(var1)).put(var1.createString("whitelist"), var1.createList(this.whitelist.stream().map((var1x) -> {
-         return BlockState.serialize(var1, var1x.defaultBlockState()).getValue();
-      }))).put(var1.createString("blacklist"), var1.createList(this.blacklist.stream().map((var1x) -> {
-         return BlockState.serialize(var1, var1x).getValue();
-      }))).put(var1.createString("tries"), var1.createInt(this.tries)).put(var1.createString("xspread"), var1.createInt(this.xspread)).put(var1.createString("yspread"), var1.createInt(this.yspread)).put(var1.createString("zspread"), var1.createInt(this.zspread)).put(var1.createString("can_replace"), var1.createBoolean(this.canReplace)).put(var1.createString("project"), var1.createBoolean(this.project)).put(var1.createString("need_water"), var1.createBoolean(this.needWater));
-      return new Dynamic(var1, var1.createMap(var2.build()));
-   }
-
-   public static <T> RandomPatchConfiguration deserialize(Dynamic<T> var0) {
-      BlockStateProviderType var1 = (BlockStateProviderType)Registry.BLOCKSTATE_PROVIDER_TYPES.get(new ResourceLocation((String)var0.get("state_provider").get("type").asString().orElseThrow(RuntimeException::new)));
-      BlockPlacerType var2 = (BlockPlacerType)Registry.BLOCK_PLACER_TYPES.get(new ResourceLocation((String)var0.get("block_placer").get("type").asString().orElseThrow(RuntimeException::new)));
-      return new RandomPatchConfiguration(var1.deserialize(var0.get("state_provider").orElseEmptyMap()), var2.deserialize(var0.get("block_placer").orElseEmptyMap()), (Set)var0.get("whitelist").asList(BlockState::deserialize).stream().map(BlockState::getBlock).collect(Collectors.toSet()), Sets.newHashSet(var0.get("blacklist").asList(BlockState::deserialize)), var0.get("tries").asInt(128), var0.get("xspread").asInt(7), var0.get("yspread").asInt(3), var0.get("zspread").asInt(7), var0.get("can_replace").asBoolean(false), var0.get("project").asBoolean(true), var0.get("need_water").asBoolean(false));
-   }
-
    public static class GrassConfigurationBuilder {
       private final BlockStateProvider stateProvider;
       private final BlockPlacer blockPlacer;
       private Set<Block> whitelist = ImmutableSet.of();
       private Set<BlockState> blacklist = ImmutableSet.of();
