--- net/minecraft/world/level/levelgen/feature/configurations/DecoratedFeatureConfiguration.java
+++ net/minecraft/world/level/levelgen/feature/configurations/DecoratedFeatureConfiguration.java
@@ -1,32 +1,28 @@
 package net.minecraft.world.level.levelgen.feature.configurations;
 
-import com.google.common.collect.ImmutableMap;
-import com.mojang.datafixers.Dynamic;
-import com.mojang.datafixers.types.DynamicOps;
+import com.mojang.serialization.Codec;
+import com.mojang.serialization.codecs.RecordCodecBuilder;
 import net.minecraft.core.Registry;
 import net.minecraft.world.level.levelgen.feature.ConfiguredFeature;
 import net.minecraft.world.level.levelgen.placement.ConfiguredDecorator;
 
 public class DecoratedFeatureConfiguration implements FeatureConfiguration {
+   public static final Codec<DecoratedFeatureConfiguration> CODEC = RecordCodecBuilder.create((var0) -> {
+      return var0.group(ConfiguredFeature.CODEC.fieldOf("feature").forGetter((var0x) -> {
+         return var0x.feature;
+      }), ConfiguredDecorator.CODEC.fieldOf("decorator").forGetter((var0x) -> {
+         return var0x.decorator;
+      })).apply(var0, DecoratedFeatureConfiguration::new);
+   });
    public final ConfiguredFeature<?, ?> feature;
    public final ConfiguredDecorator<?> decorator;
 
    public DecoratedFeatureConfiguration(ConfiguredFeature<?, ?> var1, ConfiguredDecorator<?> var2) {
       this.feature = var1;
       this.decorator = var2;
    }
 
-   public <T> Dynamic<T> serialize(DynamicOps<T> var1) {
-      return new Dynamic(var1, var1.createMap(ImmutableMap.of(var1.createString("feature"), this.feature.serialize(var1).getValue(), var1.createString("decorator"), this.decorator.serialize(var1).getValue())));
-   }
-
    public String toString() {
       return String.format("< %s [%s | %s] >", this.getClass().getSimpleName(), Registry.FEATURE.getKey(this.feature.feature), Registry.DECORATOR.getKey(this.decorator.decorator));
    }
-
-   public static <T> DecoratedFeatureConfiguration deserialize(Dynamic<T> var0) {
-      ConfiguredFeature var1 = ConfiguredFeature.deserialize(var0.get("feature").orElseEmptyMap());
-      ConfiguredDecorator var2 = ConfiguredDecorator.deserialize(var0.get("decorator").orElseEmptyMap());
-      return new DecoratedFeatureConfiguration(var1, var2);
-   }
 }
