--- net/minecraft/world/level/levelgen/feature/OreFeature.java
+++ net/minecraft/world/level/levelgen/feature/OreFeature.java
@@ -1,45 +1,45 @@
 package net.minecraft.world.level.levelgen.feature;
 
-import com.mojang.datafixers.Dynamic;
+import com.mojang.serialization.Codec;
 import java.util.BitSet;
 import java.util.Random;
-import java.util.function.Function;
 import net.minecraft.core.BlockPos;
 import net.minecraft.util.Mth;
 import net.minecraft.world.level.LevelAccessor;
+import net.minecraft.world.level.StructureFeatureManager;
+import net.minecraft.world.level.WorldGenLevel;
 import net.minecraft.world.level.chunk.ChunkGenerator;
-import net.minecraft.world.level.levelgen.ChunkGeneratorSettings;
 import net.minecraft.world.level.levelgen.Heightmap;
 import net.minecraft.world.level.levelgen.feature.configurations.OreConfiguration;
 
 public class OreFeature extends Feature<OreConfiguration> {
-   public OreFeature(Function<Dynamic<?>, ? extends OreConfiguration> var1) {
+   public OreFeature(Codec<OreConfiguration> var1) {
       super(var1);
    }
 
-   public boolean place(LevelAccessor var1, ChunkGenerator<? extends ChunkGeneratorSettings> var2, Random var3, BlockPos var4, OreConfiguration var5) {
-      float var6 = var3.nextFloat() * 3.1415927F;
-      float var7 = (float)var5.size / 8.0F;
-      int var8 = Mth.ceil(((float)var5.size / 16.0F * 2.0F + 1.0F) / 2.0F);
-      double var9 = (double)((float)var4.getX() + Mth.sin(var6) * var7);
-      double var11 = (double)((float)var4.getX() - Mth.sin(var6) * var7);
-      double var13 = (double)((float)var4.getZ() + Mth.cos(var6) * var7);
-      double var15 = (double)((float)var4.getZ() - Mth.cos(var6) * var7);
-      boolean var17 = true;
-      double var18 = (double)(var4.getY() + var3.nextInt(3) - 2);
-      double var20 = (double)(var4.getY() + var3.nextInt(3) - 2);
-      int var22 = var4.getX() - Mth.ceil(var7) - var8;
-      int var23 = var4.getY() - 2 - var8;
-      int var24 = var4.getZ() - Mth.ceil(var7) - var8;
-      int var25 = 2 * (Mth.ceil(var7) + var8);
-      int var26 = 2 * (2 + var8);
+   public boolean place(WorldGenLevel var1, StructureFeatureManager var2, ChunkGenerator var3, Random var4, BlockPos var5, OreConfiguration var6) {
+      float var7 = var4.nextFloat() * 3.1415927F;
+      float var8 = (float)var6.size / 8.0F;
+      int var9 = Mth.ceil(((float)var6.size / 16.0F * 2.0F + 1.0F) / 2.0F);
+      double var10 = (double)((float)var5.getX() + Mth.sin(var7) * var8);
+      double var12 = (double)((float)var5.getX() - Mth.sin(var7) * var8);
+      double var14 = (double)((float)var5.getZ() + Mth.cos(var7) * var8);
+      double var16 = (double)((float)var5.getZ() - Mth.cos(var7) * var8);
+      boolean var18 = true;
+      double var19 = (double)(var5.getY() + var4.nextInt(3) - 2);
+      double var21 = (double)(var5.getY() + var4.nextInt(3) - 2);
+      int var23 = var5.getX() - Mth.ceil(var8) - var9;
+      int var24 = var5.getY() - 2 - var9;
+      int var25 = var5.getZ() - Mth.ceil(var8) - var9;
+      int var26 = 2 * (Mth.ceil(var8) + var9);
+      int var27 = 2 * (2 + var9);
 
-      for(int var27 = var22; var27 <= var22 + var25; ++var27) {
-         for(int var28 = var24; var28 <= var24 + var25; ++var28) {
-            if (var23 <= var1.getHeight(Heightmap.Types.OCEAN_FLOOR_WG, var27, var28)) {
-               return this.doPlace(var1, var3, var5, var9, var11, var13, var15, var18, var20, var22, var23, var24, var25, var26);
+      for(int var28 = var23; var28 <= var23 + var26; ++var28) {
+         for(int var29 = var25; var29 <= var25 + var26; ++var29) {
+            if (var24 <= var1.getHeight(Heightmap.Types.OCEAN_FLOOR_WG, var28, var29)) {
+               return this.doPlace(var1, var4, var6, var10, var12, var14, var16, var19, var21, var23, var24, var25, var26, var27);
             }
          }
       }
 
       return false;
