--- net/minecraft/world/level/levelgen/feature/foliageplacers/BlobFoliagePlacer.java
+++ net/minecraft/world/level/levelgen/feature/foliageplacers/BlobFoliagePlacer.java
@@ -1,38 +1,55 @@
 package net.minecraft.world.level.levelgen.feature.foliageplacers;
 
-import com.mojang.datafixers.Dynamic;
+import com.mojang.datafixers.Products.P5;
+import com.mojang.serialization.Codec;
+import com.mojang.serialization.codecs.RecordCodecBuilder;
+import com.mojang.serialization.codecs.RecordCodecBuilder.Instance;
+import com.mojang.serialization.codecs.RecordCodecBuilder.Mu;
 import java.util.Random;
 import java.util.Set;
 import net.minecraft.core.BlockPos;
 import net.minecraft.world.level.LevelSimulatedRW;
-import net.minecraft.world.level.levelgen.feature.configurations.SmallTreeConfiguration;
+import net.minecraft.world.level.levelgen.feature.configurations.TreeConfiguration;
+import net.minecraft.world.level.levelgen.structure.BoundingBox;
 
 public class BlobFoliagePlacer extends FoliagePlacer {
-   public BlobFoliagePlacer(int var1, int var2) {
-      super(var1, var2, FoliagePlacerType.BLOB_FOLIAGE_PLACER);
+   public static final Codec<BlobFoliagePlacer> CODEC = RecordCodecBuilder.create((var0) -> {
+      return blobParts(var0).apply(var0, BlobFoliagePlacer::new);
+   });
+   protected final int height;
+
+   protected static <P extends BlobFoliagePlacer> P5<Mu<P>, Integer, Integer, Integer, Integer, Integer> blobParts(Instance<P> var0) {
+      return foliagePlacerParts(var0).and(Codec.INT.fieldOf("height").forGetter((var0x) -> {
+         return var0x.height;
+      }));
    }
 
-   public <T> BlobFoliagePlacer(Dynamic<T> var1) {
-      this(var1.get("radius").asInt(0), var1.get("radius_random").asInt(0));
+   protected BlobFoliagePlacer(int var1, int var2, int var3, int var4, int var5, FoliagePlacerType<?> var6) {
+      super(var1, var2, var3, var4);
+      this.height = var5;
    }
 
-   public void createFoliage(LevelSimulatedRW var1, Random var2, SmallTreeConfiguration var3, int var4, int var5, int var6, BlockPos var7, Set<BlockPos> var8) {
-      for(int var9 = var4; var9 >= var5; --var9) {
-         int var10 = Math.max(var6 - 1 - (var9 - var4) / 2, 0);
-         this.placeLeavesRow(var1, var2, var3, var4, var7, var9, var10, var8);
-      }
+   public BlobFoliagePlacer(int var1, int var2, int var3, int var4, int var5) {
+      this(var1, var2, var3, var4, var5, FoliagePlacerType.BLOB_FOLIAGE_PLACER);
+   }
 
+   protected FoliagePlacerType<?> type() {
+      return FoliagePlacerType.BLOB_FOLIAGE_PLACER;
    }
 
-   public int foliageRadius(Random var1, int var2, int var3, SmallTreeConfiguration var4) {
-      return this.radius + var1.nextInt(this.radiusRandom + 1);
+   protected void createFoliage(LevelSimulatedRW var1, Random var2, TreeConfiguration var3, int var4, FoliagePlacer.FoliageAttachment var5, int var6, int var7, Set<BlockPos> var8, int var9, BoundingBox var10) {
+      for(int var11 = var9; var11 >= var9 - var6; --var11) {
+         int var12 = Math.max(var7 + var5.radiusOffset() - 1 - var11 / 2, 0);
+         this.placeLeavesRow(var1, var2, var3, var5.foliagePos(), var12, var8, var11, var5.doubleTrunk(), var10);
+      }
+
    }
 
-   protected boolean shouldSkipLocation(Random var1, int var2, int var3, int var4, int var5, int var6) {
-      return Math.abs(var3) == var6 && Math.abs(var5) == var6 && (var1.nextInt(2) == 0 || var4 == var2);
+   public int foliageHeight(Random var1, int var2, TreeConfiguration var3) {
+      return this.height;
    }
 
-   public int getTreeRadiusForHeight(int var1, int var2, int var3, int var4) {
-      return var4 == 0 ? 0 : 1;
+   protected boolean shouldSkipLocation(Random var1, int var2, int var3, int var4, int var5, boolean var6) {
+      return var2 == var5 && var4 == var5 && (var1.nextInt(2) == 0 || var3 == 0);
    }
 }
