--- net/minecraft/world/level/levelgen/feature/stateproviders/WeightedStateProvider.java
+++ net/minecraft/world/level/levelgen/feature/stateproviders/WeightedStateProvider.java
@@ -1,45 +1,44 @@
 package net.minecraft.world.level.levelgen.feature.stateproviders;
 
-import com.google.common.collect.ImmutableMap;
-import com.google.common.collect.ImmutableMap.Builder;
-import com.mojang.datafixers.Dynamic;
-import com.mojang.datafixers.types.DynamicOps;
+import com.mojang.serialization.Codec;
+import com.mojang.serialization.DataResult;
 import java.util.Random;
 import net.minecraft.core.BlockPos;
-import net.minecraft.core.Registry;
 import net.minecraft.world.entity.ai.behavior.WeightedList;
 import net.minecraft.world.level.block.state.BlockState;
 
 public class WeightedStateProvider extends BlockStateProvider {
+   public static final Codec<WeightedStateProvider> CODEC;
    private final WeightedList<BlockState> weightedList;
 
+   private static DataResult<WeightedStateProvider> create(WeightedList<BlockState> var0) {
+      return var0.isEmpty() ? DataResult.error("WeightedStateProvider with no states") : DataResult.success(new WeightedStateProvider(var0));
+   }
+
    private WeightedStateProvider(WeightedList<BlockState> var1) {
-      super(BlockStateProviderType.WEIGHTED_STATE_PROVIDER);
       this.weightedList = var1;
    }
 
+   protected BlockStateProviderType<?> type() {
+      return BlockStateProviderType.WEIGHTED_STATE_PROVIDER;
+   }
+
    public WeightedStateProvider() {
       this(new WeightedList());
    }
 
-   public <T> WeightedStateProvider(Dynamic<T> var1) {
-      this(new WeightedList(var1.get("entries").orElseEmptyList(), BlockState::deserialize));
-   }
-
    public WeightedStateProvider add(BlockState var1, int var2) {
       this.weightedList.add(var1, var2);
       return this;
    }
 
    public BlockState getState(Random var1, BlockPos var2) {
       return (BlockState)this.weightedList.getOne(var1);
    }
 
-   public <T> T serialize(DynamicOps<T> var1) {
-      Builder var2 = ImmutableMap.builder();
-      var2.put(var1.createString("type"), var1.createString(Registry.BLOCKSTATE_PROVIDER_TYPES.getKey(this.type).toString())).put(var1.createString("entries"), this.weightedList.serialize(var1, (var1x) -> {
-         return BlockState.serialize(var1, var1x);
-      }));
-      return (new Dynamic(var1, var1.createMap(var2.build()))).getValue();
+   static {
+      CODEC = WeightedList.codec(BlockState.CODEC).comapFlatMap(WeightedStateProvider::create, (var0) -> {
+         return var0.weightedList;
+      }).fieldOf("entries").codec();
    }
 }
