--- net/minecraft/world/level/levelgen/DebugLevelSource.java
+++ net/minecraft/world/level/levelgen/DebugLevelSource.java
@@ -1,69 +1,89 @@
 package net.minecraft.world.level.levelgen;
 
+import com.mojang.serialization.Codec;
+import com.mojang.serialization.Decoder;
+import com.mojang.serialization.Encoder;
+import com.mojang.serialization.MapCodec;
 import java.util.List;
 import java.util.stream.Collectors;
 import java.util.stream.StreamSupport;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Registry;
 import net.minecraft.server.level.WorldGenRegion;
 import net.minecraft.util.Mth;
+import net.minecraft.world.level.BlockGetter;
 import net.minecraft.world.level.LevelAccessor;
+import net.minecraft.world.level.NoiseColumn;
+import net.minecraft.world.level.StructureFeatureManager;
 import net.minecraft.world.level.biome.BiomeManager;
-import net.minecraft.world.level.biome.BiomeSource;
+import net.minecraft.world.level.biome.Biomes;
+import net.minecraft.world.level.biome.FixedBiomeSource;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.chunk.ChunkAccess;
 import net.minecraft.world.level.chunk.ChunkGenerator;
 
-public class DebugLevelSource extends ChunkGenerator<DebugGeneratorSettings> {
+public class DebugLevelSource extends ChunkGenerator {
+   public static final DebugLevelSource INSTANCE = new DebugLevelSource();
+   public static final Codec<DebugLevelSource> CODEC = MapCodec.of(Encoder.empty(), Decoder.unit(() -> {
+      return INSTANCE;
+   })).stable().codec();
    private static final List<BlockState> ALL_BLOCKS;
    private static final int GRID_WIDTH;
    private static final int GRID_HEIGHT;
    protected static final BlockState AIR;
    protected static final BlockState BARRIER;
 
-   public DebugLevelSource(LevelAccessor var1, BiomeSource var2, DebugGeneratorSettings var3) {
-      super(var1, var2, var3);
+   private DebugLevelSource() {
+      super(new FixedBiomeSource(Biomes.PLAINS), new StructureSettings(false));
    }
 
-   public void buildSurfaceAndBedrock(WorldGenRegion var1, ChunkAccess var2) {
+   protected Codec<? extends ChunkGenerator> codec() {
+      return CODEC;
    }
 
-   public void applyCarvers(BiomeManager var1, ChunkAccess var2, GenerationStep.Carving var3) {
+   public ChunkGenerator withSeed(long var1) {
+      return this;
    }
 
-   public int getSpawnHeight() {
-      return this.level.getSeaLevel() + 1;
+   public void buildSurfaceAndBedrock(WorldGenRegion var1, ChunkAccess var2) {
    }
 
-   public void applyBiomeDecoration(WorldGenRegion var1) {
-      BlockPos.MutableBlockPos var2 = new BlockPos.MutableBlockPos();
-      int var3 = var1.getCenterX();
-      int var4 = var1.getCenterZ();
+   public void applyCarvers(long var1, BiomeManager var3, ChunkAccess var4, GenerationStep.Carving var5) {
+   }
 
-      for(int var5 = 0; var5 < 16; ++var5) {
-         for(int var6 = 0; var6 < 16; ++var6) {
-            int var7 = (var3 << 4) + var5;
+   public void applyBiomeDecoration(WorldGenRegion var1, StructureFeatureManager var2) {
+      BlockPos.MutableBlockPos var3 = new BlockPos.MutableBlockPos();
+      int var4 = var1.getCenterX();
+      int var5 = var1.getCenterZ();
+
+      for(int var6 = 0; var6 < 16; ++var6) {
+         for(int var7 = 0; var7 < 16; ++var7) {
             int var8 = (var4 << 4) + var6;
-            var1.setBlock(var2.set(var7, 60, var8), BARRIER, 2);
-            BlockState var9 = getBlockStateFor(var7, var8);
-            if (var9 != null) {
-               var1.setBlock(var2.set(var7, 70, var8), var9, 2);
+            int var9 = (var5 << 4) + var7;
+            var1.setBlock(var3.set(var8, 60, var9), BARRIER, 2);
+            BlockState var10 = getBlockStateFor(var8, var9);
+            if (var10 != null) {
+               var1.setBlock(var3.set(var8, 70, var9), var10, 2);
             }
          }
       }
 
    }
 
-   public void fillFromNoise(LevelAccessor var1, ChunkAccess var2) {
+   public void fillFromNoise(LevelAccessor var1, StructureFeatureManager var2, ChunkAccess var3) {
    }
 
    public int getBaseHeight(int var1, int var2, Heightmap.Types var3) {
       return 0;
    }
 
+   public BlockGetter getBaseColumn(int var1, int var2) {
+      return new NoiseColumn(new BlockState[0]);
+   }
+
    public static BlockState getBlockStateFor(int var0, int var1) {
       BlockState var2 = AIR;
       if (var0 > 0 && var1 > 0 && var0 % 2 != 0 && var1 % 2 != 0) {
          var0 /= 2;
          var1 /= 2;
