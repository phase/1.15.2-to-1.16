--- net/minecraft/world/level/levelgen/carver/WorldCarver.java
+++ net/minecraft/world/level/levelgen/carver/WorldCarver.java
@@ -1,18 +1,16 @@
 package net.minecraft.world.level.levelgen.carver;
 
 import com.google.common.collect.ImmutableSet;
-import com.mojang.datafixers.Dynamic;
+import com.mojang.serialization.Codec;
 import java.util.BitSet;
 import java.util.Random;
 import java.util.Set;
-import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.function.Function;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.core.Registry;
-import net.minecraft.core.Vec3i;
 import net.minecraft.tags.FluidTags;
 import net.minecraft.util.Mth;
 import net.minecraft.world.level.biome.Biome;
 import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.Blocks;
@@ -20,37 +18,46 @@
 import net.minecraft.world.level.chunk.ChunkAccess;
 import net.minecraft.world.level.levelgen.feature.configurations.ProbabilityFeatureConfiguration;
 import net.minecraft.world.level.material.Fluid;
 import net.minecraft.world.level.material.FluidState;
 import net.minecraft.world.level.material.Fluids;
+import org.apache.commons.lang3.mutable.MutableBoolean;
 
 public abstract class WorldCarver<C extends CarverConfiguration> {
-   public static final WorldCarver<ProbabilityFeatureConfiguration> CAVE = register("cave", new CaveWorldCarver(ProbabilityFeatureConfiguration::deserialize, 256));
-   public static final WorldCarver<ProbabilityFeatureConfiguration> HELL_CAVE = register("hell_cave", new HellCaveWorldCarver(ProbabilityFeatureConfiguration::deserialize));
-   public static final WorldCarver<ProbabilityFeatureConfiguration> CANYON = register("canyon", new CanyonWorldCarver(ProbabilityFeatureConfiguration::deserialize));
-   public static final WorldCarver<ProbabilityFeatureConfiguration> UNDERWATER_CANYON = register("underwater_canyon", new UnderwaterCanyonWorldCarver(ProbabilityFeatureConfiguration::deserialize));
-   public static final WorldCarver<ProbabilityFeatureConfiguration> UNDERWATER_CAVE = register("underwater_cave", new UnderwaterCaveWorldCarver(ProbabilityFeatureConfiguration::deserialize));
+   public static final WorldCarver<ProbabilityFeatureConfiguration> CAVE;
+   public static final WorldCarver<ProbabilityFeatureConfiguration> NETHER_CAVE;
+   public static final WorldCarver<ProbabilityFeatureConfiguration> CANYON;
+   public static final WorldCarver<ProbabilityFeatureConfiguration> UNDERWATER_CANYON;
+   public static final WorldCarver<ProbabilityFeatureConfiguration> UNDERWATER_CAVE;
    protected static final BlockState AIR;
    protected static final BlockState CAVE_AIR;
    protected static final FluidState WATER;
    protected static final FluidState LAVA;
    protected Set<Block> replaceableBlocks;
    protected Set<Fluid> liquids;
-   private final Function<Dynamic<?>, ? extends C> configurationFactory;
+   private final Codec<ConfiguredWorldCarver<C>> configuredCodec;
    protected final int genHeight;
 
    private static <C extends CarverConfiguration, F extends WorldCarver<C>> F register(String var0, F var1) {
       return (WorldCarver)Registry.register(Registry.CARVER, (String)var0, var1);
    }
 
-   public WorldCarver(Function<Dynamic<?>, ? extends C> var1, int var2) {
+   public WorldCarver(Codec<C> var1, int var2) {
       this.replaceableBlocks = ImmutableSet.of(Blocks.STONE, Blocks.GRANITE, Blocks.DIORITE, Blocks.ANDESITE, Blocks.DIRT, Blocks.COARSE_DIRT, new Block[]{Blocks.PODZOL, Blocks.GRASS_BLOCK, Blocks.TERRACOTTA, Blocks.WHITE_TERRACOTTA, Blocks.ORANGE_TERRACOTTA, Blocks.MAGENTA_TERRACOTTA, Blocks.LIGHT_BLUE_TERRACOTTA, Blocks.YELLOW_TERRACOTTA, Blocks.LIME_TERRACOTTA, Blocks.PINK_TERRACOTTA, Blocks.GRAY_TERRACOTTA, Blocks.LIGHT_GRAY_TERRACOTTA, Blocks.CYAN_TERRACOTTA, Blocks.PURPLE_TERRACOTTA, Blocks.BLUE_TERRACOTTA, Blocks.BROWN_TERRACOTTA, Blocks.GREEN_TERRACOTTA, Blocks.RED_TERRACOTTA, Blocks.BLACK_TERRACOTTA, Blocks.SANDSTONE, Blocks.RED_SANDSTONE, Blocks.MYCELIUM, Blocks.SNOW, Blocks.PACKED_ICE});
       this.liquids = ImmutableSet.of(Fluids.WATER);
-      this.configurationFactory = var1;
       this.genHeight = var2;
+      this.configuredCodec = var1.fieldOf("config").xmap((var1x) -> {
+         return new ConfiguredWorldCarver(this, var1x);
+      }, (var0) -> {
+         return var0.config;
+      }).codec();
    }
 
+   public Codec<ConfiguredWorldCarver<C>> configuredCodec() {
+      return this.configuredCodec;
+   }
+
    public int getRange() {
       return 4;
    }
 
    protected boolean carveSphere(ChunkAccess var1, Function<BlockPos, Biome> var2, long var3, int var5, int var6, int var7, double var8, double var10, double var12, double var14, double var16, BitSet var18) {
@@ -78,11 +85,11 @@
 
                for(int var38 = var28; var38 < var29; ++var38) {
                   int var39 = var38 + var7 * 16;
                   double var40 = ((double)var39 + 0.5D - var12) / var14;
                   if (var36 * var36 + var40 * var40 < 1.0D) {
-                     AtomicBoolean var42 = new AtomicBoolean(false);
+                     MutableBoolean var42 = new MutableBoolean(false);
 
                      for(int var43 = var27; var43 > var26; --var43) {
                         double var44 = ((double)var43 - 0.5D - var10) / var16;
                         if (!this.skip(var36, var44, var40, var43)) {
                            var30 |= this.carveBlock(var1, var2, var18, var19, var31, var32, var33, var5, var6, var7, var35, var39, var34, var43, var38, var42);
@@ -97,33 +104,33 @@
       } else {
          return false;
       }
    }
 
-   protected boolean carveBlock(ChunkAccess var1, Function<BlockPos, Biome> var2, BitSet var3, Random var4, BlockPos.MutableBlockPos var5, BlockPos.MutableBlockPos var6, BlockPos.MutableBlockPos var7, int var8, int var9, int var10, int var11, int var12, int var13, int var14, int var15, AtomicBoolean var16) {
+   protected boolean carveBlock(ChunkAccess var1, Function<BlockPos, Biome> var2, BitSet var3, Random var4, BlockPos.MutableBlockPos var5, BlockPos.MutableBlockPos var6, BlockPos.MutableBlockPos var7, int var8, int var9, int var10, int var11, int var12, int var13, int var14, int var15, MutableBoolean var16) {
       int var17 = var13 | var15 << 4 | var14 << 8;
       if (var3.get(var17)) {
          return false;
       } else {
          var3.set(var17);
          var5.set(var11, var14, var12);
          BlockState var18 = var1.getBlockState(var5);
-         BlockState var19 = var1.getBlockState(var6.set((Vec3i)var5).move(Direction.UP));
-         if (var18.getBlock() == Blocks.GRASS_BLOCK || var18.getBlock() == Blocks.MYCELIUM) {
-            var16.set(true);
+         BlockState var19 = var1.getBlockState(var6.setWithOffset(var5, Direction.UP));
+         if (var18.is(Blocks.GRASS_BLOCK) || var18.is(Blocks.MYCELIUM)) {
+            var16.setTrue();
          }
 
          if (!this.canReplaceBlock(var18, var19)) {
             return false;
          } else {
             if (var14 < 11) {
                var1.setBlockState(var5, LAVA.createLegacyBlock(), false);
             } else {
                var1.setBlockState(var5, CAVE_AIR, false);
-               if (var16.get()) {
-                  var7.set((Vec3i)var5).move(Direction.DOWN);
-                  if (var1.getBlockState(var7).getBlock() == Blocks.DIRT) {
+               if (var16.isTrue()) {
+                  var7.setWithOffset(var5, Direction.DOWN);
+                  if (var1.getBlockState(var7).is(Blocks.DIRT)) {
                      var1.setBlockState(var7, ((Biome)var2.apply(var5)).getSurfaceBuilderConfig().getTopMaterial(), false);
                   }
                }
             }
 
@@ -139,12 +146,11 @@
    protected boolean canReplaceBlock(BlockState var1) {
       return this.replaceableBlocks.contains(var1.getBlock());
    }
 
    protected boolean canReplaceBlock(BlockState var1, BlockState var2) {
-      Block var3 = var1.getBlock();
-      return this.canReplaceBlock(var1) || (var3 == Blocks.SAND || var3 == Blocks.GRAVEL) && !var2.getFluidState().is(FluidTags.WATER);
+      return this.canReplaceBlock(var1) || (var1.is(Blocks.SAND) || var1.is(Blocks.GRAVEL)) && !var2.getFluidState().is(FluidTags.WATER);
    }
 
    protected boolean hasWater(ChunkAccess var1, int var2, int var3, int var4, int var5, int var6, int var7, int var8, int var9) {
       BlockPos.MutableBlockPos var10 = new BlockPos.MutableBlockPos();
 
@@ -180,10 +186,15 @@
    }
 
    protected abstract boolean skip(double var1, double var3, double var5, int var7);
 
    static {
+      CAVE = register("cave", new CaveWorldCarver(ProbabilityFeatureConfiguration.CODEC, 256));
+      NETHER_CAVE = register("nether_cave", new NetherWorldCarver(ProbabilityFeatureConfiguration.CODEC));
+      CANYON = register("canyon", new CanyonWorldCarver(ProbabilityFeatureConfiguration.CODEC));
+      UNDERWATER_CANYON = register("underwater_canyon", new UnderwaterCanyonWorldCarver(ProbabilityFeatureConfiguration.CODEC));
+      UNDERWATER_CAVE = register("underwater_cave", new UnderwaterCaveWorldCarver(ProbabilityFeatureConfiguration.CODEC));
       AIR = Blocks.AIR.defaultBlockState();
       CAVE_AIR = Blocks.CAVE_AIR.defaultBlockState();
       WATER = Fluids.WATER.defaultFluidState();
       LAVA = Fluids.LAVA.defaultFluidState();
    }
