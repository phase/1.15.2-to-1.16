--- net/minecraft/world/level/levelgen/placement/IcebergPlacementDecorator.java
+++ net/minecraft/world/level/levelgen/placement/IcebergPlacementDecorator.java
@@ -1,28 +1,19 @@
 package net.minecraft.world.level.levelgen.placement;
 
-import com.mojang.datafixers.Dynamic;
+import com.mojang.serialization.Codec;
 import java.util.Random;
-import java.util.function.Function;
 import java.util.stream.Stream;
 import net.minecraft.core.BlockPos;
-import net.minecraft.world.level.LevelAccessor;
-import net.minecraft.world.level.chunk.ChunkGenerator;
-import net.minecraft.world.level.levelgen.ChunkGeneratorSettings;
-import net.minecraft.world.level.levelgen.Heightmap;
+import net.minecraft.world.level.levelgen.feature.configurations.NoneDecoratorConfiguration;
 
-public class IcebergPlacementDecorator extends FeatureDecorator<ChanceDecoratorConfiguration> {
-   public IcebergPlacementDecorator(Function<Dynamic<?>, ? extends ChanceDecoratorConfiguration> var1) {
+public class IcebergPlacementDecorator extends SimpleFeatureDecorator<NoneDecoratorConfiguration> {
+   public IcebergPlacementDecorator(Codec<NoneDecoratorConfiguration> var1) {
       super(var1);
    }
 
-   public Stream<BlockPos> getPositions(LevelAccessor var1, ChunkGenerator<? extends ChunkGeneratorSettings> var2, Random var3, ChanceDecoratorConfiguration var4, BlockPos var5) {
-      if (var3.nextFloat() < 1.0F / (float)var4.chance) {
-         int var6 = var3.nextInt(8) + 4 + var5.getX();
-         int var7 = var3.nextInt(8) + 4 + var5.getZ();
-         int var8 = var1.getHeight(Heightmap.Types.MOTION_BLOCKING, var6, var7);
-         return Stream.of(new BlockPos(var6, var8, var7));
-      } else {
-         return Stream.empty();
-      }
+   public Stream<BlockPos> place(Random var1, NoneDecoratorConfiguration var2, BlockPos var3) {
+      int var4 = var1.nextInt(8) + 4 + var3.getX();
+      int var5 = var1.nextInt(8) + 4 + var3.getZ();
+      return Stream.of(new BlockPos(var4, var3.getY(), var5));
    }
 }
