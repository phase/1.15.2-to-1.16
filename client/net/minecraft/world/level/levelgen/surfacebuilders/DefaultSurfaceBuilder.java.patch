--- net/minecraft/world/level/levelgen/surfacebuilders/DefaultSurfaceBuilder.java
+++ net/minecraft/world/level/levelgen/surfacebuilders/DefaultSurfaceBuilder.java
@@ -1,18 +1,17 @@
 package net.minecraft.world.level.levelgen.surfacebuilders;
 
-import com.mojang.datafixers.Dynamic;
+import com.mojang.serialization.Codec;
 import java.util.Random;
-import java.util.function.Function;
 import net.minecraft.core.BlockPos;
 import net.minecraft.world.level.biome.Biome;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.chunk.ChunkAccess;
 
 public class DefaultSurfaceBuilder extends SurfaceBuilder<SurfaceBuilderBaseConfiguration> {
-   public DefaultSurfaceBuilder(Function<Dynamic<?>, ? extends SurfaceBuilderBaseConfiguration> var1) {
+   public DefaultSurfaceBuilder(Codec<SurfaceBuilderBaseConfiguration> var1) {
       super(var1);
    }
 
    public void apply(Random var1, ChunkAccess var2, Biome var3, int var4, int var5, int var6, double var7, BlockState var9, BlockState var10, int var11, long var12, SurfaceBuilderBaseConfiguration var14) {
       this.apply(var1, var2, var3, var4, var5, var6, var7, var9, var10, var14.getTopMaterial(), var14.getUnderMaterial(), var14.getUnderwaterMaterial(), var11);
@@ -30,11 +29,11 @@
       for(int var22 = var6; var22 >= 0; --var22) {
          var17.set(var20, var22, var21);
          BlockState var23 = var2.getBlockState(var17);
          if (var23.isAir()) {
             var18 = -1;
-         } else if (var23.getBlock() == var9.getBlock()) {
+         } else if (var23.is(var9.getBlock())) {
             if (var18 == -1) {
                if (var19 <= 0) {
                   var15 = Blocks.AIR.defaultBlockState();
                   var16 = var9;
                } else if (var22 >= var14 - 4 && var22 <= var14 + 1) {
@@ -63,13 +62,13 @@
                   var2.setBlockState(var17, var16, false);
                }
             } else if (var18 > 0) {
                --var18;
                var2.setBlockState(var17, var16, false);
-               if (var18 == 0 && var16.getBlock() == Blocks.SAND && var19 > 1) {
+               if (var18 == 0 && var16.is(Blocks.SAND) && var19 > 1) {
                   var18 = var1.nextInt(4) + Math.max(0, var22 - 63);
-                  var16 = var16.getBlock() == Blocks.RED_SAND ? Blocks.RED_SANDSTONE.defaultBlockState() : Blocks.SANDSTONE.defaultBlockState();
+                  var16 = var16.is(Blocks.RED_SAND) ? Blocks.RED_SANDSTONE.defaultBlockState() : Blocks.SANDSTONE.defaultBlockState();
                }
             }
          }
       }
 
