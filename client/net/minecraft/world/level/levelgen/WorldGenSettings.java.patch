--- net/minecraft/world/level/levelgen/WorldGenSettings.java
+++ net/minecraft/world/level/levelgen/WorldGenSettings.java
@@ -1,0 +1,249 @@
+package net.minecraft.world.level.levelgen;
+
+import com.google.common.base.MoreObjects;
+import com.google.common.collect.ImmutableSet;
+import com.google.gson.JsonObject;
+import com.mojang.serialization.Codec;
+import com.mojang.serialization.DataResult;
+import com.mojang.serialization.Dynamic;
+import com.mojang.serialization.JsonOps;
+import com.mojang.serialization.Lifecycle;
+import com.mojang.serialization.codecs.RecordCodecBuilder;
+import java.util.Iterator;
+import java.util.Locale;
+import java.util.Objects;
+import java.util.Optional;
+import java.util.OptionalLong;
+import java.util.Properties;
+import java.util.Random;
+import java.util.Map.Entry;
+import java.util.function.Function;
+import java.util.function.Supplier;
+import net.minecraft.core.MappedRegistry;
+import net.minecraft.core.Registry;
+import net.minecraft.resources.ResourceKey;
+import net.minecraft.util.GsonHelper;
+import net.minecraft.world.level.Level;
+import net.minecraft.world.level.biome.OverworldBiomeSource;
+import net.minecraft.world.level.chunk.ChunkGenerator;
+import net.minecraft.world.level.dimension.DimensionType;
+import net.minecraft.world.level.dimension.LevelStem;
+import net.minecraft.world.level.levelgen.flat.FlatLevelGeneratorSettings;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+
+public class WorldGenSettings {
+   public static final Codec<WorldGenSettings> CODEC = RecordCodecBuilder.create((var0) -> {
+      return var0.group(Codec.LONG.fieldOf("seed").stable().forGetter(WorldGenSettings::seed), Codec.BOOL.fieldOf("generate_features").withDefault(true).stable().forGetter(WorldGenSettings::generateFeatures), Codec.BOOL.fieldOf("bonus_chest").withDefault(false).stable().forGetter(WorldGenSettings::generateBonusChest), MappedRegistry.dataPackCodec(Registry.LEVEL_STEM_REGISTRY, Lifecycle.stable(), LevelStem.CODEC).xmap(LevelStem::sortMap, Function.identity()).fieldOf("dimensions").forGetter(WorldGenSettings::dimensions), Codec.STRING.optionalFieldOf("legacy_custom_options").stable().forGetter((var0x) -> {
+         return var0x.legacyCustomOptions;
+      })).apply(var0, var0.stable(WorldGenSettings::new));
+   }).comapFlatMap(WorldGenSettings::guardExperimental, Function.identity());
+   private static final Logger LOGGER = LogManager.getLogger();
+   private static final int DEMO_SEED = "North Carolina".hashCode();
+   public static final WorldGenSettings DEMO_SETTINGS;
+   private final long seed;
+   private final boolean generateFeatures;
+   private final boolean generateBonusChest;
+   private final MappedRegistry<LevelStem> dimensions;
+   private final Optional<String> legacyCustomOptions;
+
+   private DataResult<WorldGenSettings> guardExperimental() {
+      return this.stable() ? DataResult.success(this, Lifecycle.stable()) : DataResult.success(this);
+   }
+
+   private boolean stable() {
+      return LevelStem.stable(this.seed, this.dimensions);
+   }
+
+   public WorldGenSettings(long var1, boolean var3, boolean var4, MappedRegistry<LevelStem> var5) {
+      this(var1, var3, var4, var5, Optional.empty());
+   }
+
+   private WorldGenSettings(long var1, boolean var3, boolean var4, MappedRegistry<LevelStem> var5, Optional<String> var6) {
+      this.seed = var1;
+      this.generateFeatures = var3;
+      this.generateBonusChest = var4;
+      this.dimensions = var5;
+      this.legacyCustomOptions = var6;
+   }
+
+   public static WorldGenSettings makeDefault() {
+      long var0 = (new Random()).nextLong();
+      return new WorldGenSettings(var0, true, false, withOverworld(DimensionType.defaultDimensions(var0), makeDefaultOverworld(var0)));
+   }
+
+   public static NoiseBasedChunkGenerator makeDefaultOverworld(long var0) {
+      return new NoiseBasedChunkGenerator(new OverworldBiomeSource(var0, false, false), var0, NoiseGeneratorSettings.Preset.OVERWORLD.settings());
+   }
+
+   public long seed() {
+      return this.seed;
+   }
+
+   public boolean generateFeatures() {
+      return this.generateFeatures;
+   }
+
+   public boolean generateBonusChest() {
+      return this.generateBonusChest;
+   }
+
+   public static MappedRegistry<LevelStem> withOverworld(MappedRegistry<LevelStem> var0, ChunkGenerator var1) {
+      LevelStem var2 = (LevelStem)var0.get(LevelStem.OVERWORLD);
+      Supplier var3 = () -> {
+         return var2 == null ? DimensionType.defaultOverworld() : var2.type();
+      };
+      return withOverworld(var0, var3, var1);
+   }
+
+   public static MappedRegistry<LevelStem> withOverworld(MappedRegistry<LevelStem> var0, Supplier<DimensionType> var1, ChunkGenerator var2) {
+      MappedRegistry var3 = new MappedRegistry(Registry.LEVEL_STEM_REGISTRY, Lifecycle.experimental());
+      var3.register(LevelStem.OVERWORLD, new LevelStem(var1, var2));
+      var3.setPersistent(LevelStem.OVERWORLD);
+      Iterator var4 = var0.entrySet().iterator();
+
+      while(var4.hasNext()) {
+         Entry var5 = (Entry)var4.next();
+         ResourceKey var6 = (ResourceKey)var5.getKey();
+         if (var6 != LevelStem.OVERWORLD) {
+            var3.register(var6, var5.getValue());
+            if (var0.persistent(var6)) {
+               var3.setPersistent(var6);
+            }
+         }
+      }
+
+      return var3;
+   }
+
+   public MappedRegistry<LevelStem> dimensions() {
+      return this.dimensions;
+   }
+
+   public ChunkGenerator overworld() {
+      LevelStem var1 = (LevelStem)this.dimensions.get(LevelStem.OVERWORLD);
+      return (ChunkGenerator)(var1 == null ? makeDefaultOverworld((new Random()).nextLong()) : var1.generator());
+   }
+
+   public ImmutableSet<ResourceKey<Level>> levels() {
+      return (ImmutableSet)this.dimensions().entrySet().stream().map((var0) -> {
+         return ResourceKey.create(Registry.DIMENSION_REGISTRY, ((ResourceKey)var0.getKey()).location());
+      }).collect(ImmutableSet.toImmutableSet());
+   }
+
+   public boolean isDebug() {
+      return this.overworld() instanceof DebugLevelSource;
+   }
+
+   public boolean isFlatWorld() {
+      return this.overworld() instanceof FlatLevelSource;
+   }
+
+   public boolean isOldCustomizedWorld() {
+      return this.legacyCustomOptions.isPresent();
+   }
+
+   public WorldGenSettings withBonusChest() {
+      return new WorldGenSettings(this.seed, this.generateFeatures, true, this.dimensions, this.legacyCustomOptions);
+   }
+
+   public WorldGenSettings withFeaturesToggled() {
+      return new WorldGenSettings(this.seed, !this.generateFeatures, this.generateBonusChest, this.dimensions);
+   }
+
+   public WorldGenSettings withBonusChestToggled() {
+      return new WorldGenSettings(this.seed, this.generateFeatures, !this.generateBonusChest, this.dimensions);
+   }
+
+   public WorldGenSettings withDimensions(MappedRegistry<LevelStem> var1) {
+      return new WorldGenSettings(this.seed, this.generateFeatures, this.generateBonusChest, var1);
+   }
+
+   public static WorldGenSettings create(Properties var0) {
+      String var1 = (String)MoreObjects.firstNonNull((String)var0.get("generator-settings"), "");
+      var0.put("generator-settings", var1);
+      String var2 = (String)MoreObjects.firstNonNull((String)var0.get("level-seed"), "");
+      var0.put("level-seed", var2);
+      String var3 = (String)var0.get("generate-structures");
+      boolean var4 = var3 == null || Boolean.parseBoolean(var3);
+      var0.put("generate-structures", Objects.toString(var4));
+      String var5 = (String)var0.get("level-type");
+      String var6 = (String)Optional.ofNullable(var5).map((var0x) -> {
+         return var0x.toLowerCase(Locale.ROOT);
+      }).orElse("default");
+      var0.put("level-type", var6);
+      long var7 = (new Random()).nextLong();
+      if (!var2.isEmpty()) {
+         try {
+            long var9 = Long.parseLong(var2);
+            if (var9 != 0L) {
+               var7 = var9;
+            }
+         } catch (NumberFormatException var14) {
+            var7 = (long)var2.hashCode();
+         }
+      }
+
+      MappedRegistry var15 = DimensionType.defaultDimensions(var7);
+      byte var11 = -1;
+      switch(var6.hashCode()) {
+      case 3145593:
+         if (var6.equals("flat")) {
+            var11 = 0;
+         }
+         break;
+      case 1045526590:
+         if (var6.equals("debug_all_block_states")) {
+            var11 = 1;
+         }
+      }
+
+      switch(var11) {
+      case 0:
+         JsonObject var12 = !var1.isEmpty() ? GsonHelper.parse(var1) : new JsonObject();
+         Dynamic var13 = new Dynamic(JsonOps.INSTANCE, var12);
+         DataResult var10008 = FlatLevelGeneratorSettings.CODEC.parse(var13);
+         Logger var10009 = LOGGER;
+         var10009.getClass();
+         return new WorldGenSettings(var7, var4, false, withOverworld(var15, new FlatLevelSource((FlatLevelGeneratorSettings)var10008.resultOrPartial(var10009::error).orElseGet(FlatLevelGeneratorSettings::getDefault))));
+      case 1:
+         return new WorldGenSettings(var7, var4, false, withOverworld(var15, DebugLevelSource.INSTANCE));
+      default:
+         return new WorldGenSettings(var7, var4, false, withOverworld(var15, makeDefaultOverworld(var7)));
+      }
+   }
+
+   public WorldGenSettings withSeed(boolean var1, OptionalLong var2) {
+      long var4 = var2.orElse(this.seed);
+      MappedRegistry var6;
+      if (var2.isPresent()) {
+         var6 = new MappedRegistry(Registry.LEVEL_STEM_REGISTRY, Lifecycle.experimental());
+         long var7 = var2.getAsLong();
+         Iterator var9 = this.dimensions.entrySet().iterator();
+
+         while(var9.hasNext()) {
+            Entry var10 = (Entry)var9.next();
+            ResourceKey var11 = (ResourceKey)var10.getKey();
+            var6.register(var11, new LevelStem(((LevelStem)var10.getValue()).typeSupplier(), ((LevelStem)var10.getValue()).generator().withSeed(var7)));
+            if (this.dimensions.persistent(var11)) {
+               var6.setPersistent(var11);
+            }
+         }
+      } else {
+         var6 = this.dimensions;
+      }
+
+      WorldGenSettings var3;
+      if (this.isDebug()) {
+         var3 = new WorldGenSettings(var4, false, false, var6);
+      } else {
+         var3 = new WorldGenSettings(var4, this.generateFeatures(), this.generateBonusChest() && !var1, var6);
+      }
+
+      return var3;
+   }
+
+   static {
+      DEMO_SETTINGS = new WorldGenSettings((long)DEMO_SEED, true, true, withOverworld(DimensionType.defaultDimensions((long)DEMO_SEED), makeDefaultOverworld((long)DEMO_SEED)));
+   }
+}
