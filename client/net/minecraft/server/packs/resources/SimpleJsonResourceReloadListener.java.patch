--- net/minecraft/server/packs/resources/SimpleJsonResourceReloadListener.java
+++ net/minecraft/server/packs/resources/SimpleJsonResourceReloadListener.java
@@ -1,10 +1,10 @@
 package net.minecraft.server.packs.resources;
 
 import com.google.common.collect.Maps;
 import com.google.gson.Gson;
-import com.google.gson.JsonObject;
+import com.google.gson.JsonElement;
 import com.google.gson.JsonParseException;
 import java.io.BufferedReader;
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.InputStreamReader;
@@ -17,22 +17,22 @@
 import net.minecraft.util.GsonHelper;
 import net.minecraft.util.profiling.ProfilerFiller;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
-public abstract class SimpleJsonResourceReloadListener extends SimplePreparableReloadListener<Map<ResourceLocation, JsonObject>> {
+public abstract class SimpleJsonResourceReloadListener extends SimplePreparableReloadListener<Map<ResourceLocation, JsonElement>> {
    private static final Logger LOGGER = LogManager.getLogger();
    private static final int PATH_SUFFIX_LENGTH = ".json".length();
    private final Gson gson;
    private final String directory;
 
    public SimpleJsonResourceReloadListener(Gson var1, String var2) {
       this.gson = var1;
       this.directory = var2;
    }
 
-   protected Map<ResourceLocation, JsonObject> prepare(ResourceManager var1, ProfilerFiller var2) {
+   protected Map<ResourceLocation, JsonElement> prepare(ResourceManager var1, ProfilerFiller var2) {
       HashMap var3 = Maps.newHashMap();
       int var4 = this.directory.length() + 1;
       Iterator var5 = var1.listResources(this.directory, (var0) -> {
          return var0.endsWith(".json");
       }).iterator();
@@ -53,13 +53,13 @@
                try {
                   BufferedReader var13 = new BufferedReader(new InputStreamReader(var11, StandardCharsets.UTF_8));
                   Throwable var14 = null;
 
                   try {
-                     JsonObject var15 = (JsonObject)GsonHelper.fromJson(this.gson, (Reader)var13, (Class)JsonObject.class);
+                     JsonElement var15 = (JsonElement)GsonHelper.fromJson(this.gson, (Reader)var13, (Class)JsonElement.class);
                      if (var15 != null) {
-                        JsonObject var16 = (JsonObject)var3.put(var8, var15);
+                        JsonElement var16 = (JsonElement)var3.put(var8, var15);
                         if (var16 != null) {
                            throw new IllegalStateException("Duplicate data file ignored with ID " + var8);
                         }
                      } else {
                         LOGGER.error("Couldn't load data file {} from {} as it's null or empty", var8, var6);
