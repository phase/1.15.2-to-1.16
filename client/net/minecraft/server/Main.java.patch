--- net/minecraft/server/Main.java
+++ net/minecraft/server/Main.java
@@ -1,0 +1,195 @@
+package net.minecraft.server;
+
+import com.mojang.authlib.GameProfileRepository;
+import com.mojang.authlib.minecraft.MinecraftSessionService;
+import com.mojang.authlib.yggdrasil.YggdrasilAuthenticationService;
+import com.mojang.datafixers.DataFixer;
+import java.awt.GraphicsEnvironment;
+import java.io.File;
+import java.net.Proxy;
+import java.nio.file.Path;
+import java.nio.file.Paths;
+import java.util.Optional;
+import java.util.UUID;
+import java.util.concurrent.CompletableFuture;
+import java.util.function.BooleanSupplier;
+import joptsimple.AbstractOptionSpec;
+import joptsimple.ArgumentAcceptingOptionSpec;
+import joptsimple.NonOptionArgumentSpec;
+import joptsimple.OptionParser;
+import joptsimple.OptionSet;
+import joptsimple.OptionSpecBuilder;
+import net.minecraft.CrashReport;
+import net.minecraft.DefaultUncaughtExceptionHandler;
+import net.minecraft.Util;
+import net.minecraft.network.chat.Component;
+import net.minecraft.server.dedicated.DedicatedServer;
+import net.minecraft.server.dedicated.DedicatedServerProperties;
+import net.minecraft.server.dedicated.DedicatedServerSettings;
+import net.minecraft.server.level.progress.LoggerChunkProgressListener;
+import net.minecraft.server.packs.repository.PackRepository;
+import net.minecraft.server.players.GameProfileCache;
+import net.minecraft.util.Mth;
+import net.minecraft.util.datafix.DataFixers;
+import net.minecraft.util.worldupdate.WorldUpgrader;
+import net.minecraft.world.level.GameRules;
+import net.minecraft.world.level.LevelSettings;
+import net.minecraft.world.level.storage.LevelResource;
+import net.minecraft.world.level.storage.LevelStorageSource;
+import net.minecraft.world.level.storage.PrimaryLevelData;
+import net.minecraft.world.level.storage.WorldData;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+
+public class Main {
+   private static final Logger LOGGER = LogManager.getLogger();
+
+   public Main() {
+   }
+
+   public static void main(String[] var0) {
+      OptionParser var1 = new OptionParser();
+      OptionSpecBuilder var2 = var1.accepts("nogui");
+      OptionSpecBuilder var3 = var1.accepts("initSettings", "Initializes 'server.properties' and 'eula.txt', then quits");
+      OptionSpecBuilder var4 = var1.accepts("demo");
+      OptionSpecBuilder var5 = var1.accepts("bonusChest");
+      OptionSpecBuilder var6 = var1.accepts("forceUpgrade");
+      OptionSpecBuilder var7 = var1.accepts("eraseCache");
+      OptionSpecBuilder var8 = var1.accepts("safeMode", "Loads level with vanilla datapack only");
+      AbstractOptionSpec var9 = var1.accepts("help").forHelp();
+      ArgumentAcceptingOptionSpec var10 = var1.accepts("singleplayer").withRequiredArg();
+      ArgumentAcceptingOptionSpec var11 = var1.accepts("universe").withRequiredArg().defaultsTo(".", new String[0]);
+      ArgumentAcceptingOptionSpec var12 = var1.accepts("world").withRequiredArg();
+      ArgumentAcceptingOptionSpec var13 = var1.accepts("port").withRequiredArg().ofType(Integer.class).defaultsTo(-1, new Integer[0]);
+      ArgumentAcceptingOptionSpec var14 = var1.accepts("serverId").withRequiredArg();
+      NonOptionArgumentSpec var15 = var1.nonOptions();
+
+      try {
+         OptionSet var16 = var1.parse(var0);
+         if (var16.has(var9)) {
+            var1.printHelpOn(System.err);
+            return;
+         }
+
+         CrashReport.preload();
+         Bootstrap.bootStrap();
+         Bootstrap.validate();
+         Util.startTimerHackThread();
+         Path var17 = Paths.get("server.properties");
+         DedicatedServerSettings var18 = new DedicatedServerSettings(var17);
+         var18.forceSave();
+         Path var19 = Paths.get("eula.txt");
+         Eula var20 = new Eula(var19);
+         if (var16.has(var3)) {
+            LOGGER.info("Initialized '{}' and '{}'", var17.toAbsolutePath(), var19.toAbsolutePath());
+            return;
+         }
+
+         if (!var20.hasAgreedToEULA()) {
+            LOGGER.info("You need to agree to the EULA in order to run the server. Go to eula.txt for more info.");
+            return;
+         }
+
+         File var21 = new File((String)var16.valueOf(var11));
+         YggdrasilAuthenticationService var22 = new YggdrasilAuthenticationService(Proxy.NO_PROXY, UUID.randomUUID().toString());
+         MinecraftSessionService var23 = var22.createMinecraftSessionService();
+         GameProfileRepository var24 = var22.createProfileRepository();
+         GameProfileCache var25 = new GameProfileCache(var24, new File(var21, MinecraftServer.USERID_CACHE_FILE.getName()));
+         String var26 = (String)Optional.ofNullable(var16.valueOf(var12)).orElse(var18.getProperties().levelName);
+         LevelStorageSource var27 = LevelStorageSource.createDefault(var21.toPath());
+         LevelStorageSource.LevelStorageAccess var28 = var27.createAccess(var26);
+         MinecraftServer.convertFromRegionFormatIfNeeded(var28);
+         if (var16.has(var6)) {
+            forceUpgrade(var28, DataFixers.getDataFixer(), var16.has(var7), () -> {
+               return true;
+            });
+         }
+
+         Object var29 = var28.getDataTag();
+         if (var29 == null) {
+            LevelSettings var30;
+            if (var16.has(var4)) {
+               var30 = MinecraftServer.DEMO_SETTINGS;
+            } else {
+               DedicatedServerProperties var31 = var18.getProperties();
+               var30 = new LevelSettings(var31.levelName, var31.gamemode, var31.hardcore, var31.difficulty, false, new GameRules(), var16.has(var5) ? var31.worldGenSettings.withBonusChest() : var31.worldGenSettings);
+            }
+
+            var29 = new PrimaryLevelData(var30);
+         }
+
+         boolean var39 = var16.has(var8);
+         if (var39) {
+            LOGGER.warn("Safe mode active, only vanilla datapack will be loaded");
+         }
+
+         PackRepository var40 = MinecraftServer.createPackRepository(var28.getLevelPath(LevelResource.DATAPACK_DIR), (WorldData)var29, var39);
+         CompletableFuture var32 = ServerResources.loadResources(var40.openAllSelected(), true, var18.getProperties().functionPermissionLevel, Util.backgroundExecutor(), Runnable::run);
+
+         ServerResources var33;
+         try {
+            var33 = (ServerResources)var32.get();
+         } catch (Exception var37) {
+            LOGGER.warn("Failed to load datapacks, can't proceed with server load. You can either fix your datapacks or reset to vanilla with --safeMode", var37);
+            var40.close();
+            return;
+         }
+
+         var33.updateGlobals();
+         final DedicatedServer var34 = new DedicatedServer(var28, var40, var33, (WorldData)var29, var18, DataFixers.getDataFixer(), var23, var24, var25, LoggerChunkProgressListener::new);
+         var34.setSingleplayerName((String)var16.valueOf(var10));
+         var34.setPort((Integer)var16.valueOf(var13));
+         var34.setDemo(var16.has(var4));
+         var34.setId((String)var16.valueOf(var14));
+         boolean var35 = !var16.has(var2) && !var16.valuesOf(var15).contains("nogui");
+         if (var35 && !GraphicsEnvironment.isHeadless()) {
+            var34.showGui();
+         }
+
+         var34.forkAndRun();
+         Thread var36 = new Thread("Server Shutdown Thread") {
+            public void run() {
+               var34.halt(true);
+            }
+         };
+         var36.setUncaughtExceptionHandler(new DefaultUncaughtExceptionHandler(LOGGER));
+         Runtime.getRuntime().addShutdownHook(var36);
+      } catch (Exception var38) {
+         LOGGER.fatal("Failed to start the minecraft server", var38);
+      }
+
+   }
+
+   private static void forceUpgrade(LevelStorageSource.LevelStorageAccess var0, DataFixer var1, boolean var2, BooleanSupplier var3) {
+      LOGGER.info("Forcing world upgrade!");
+      WorldData var4 = var0.getDataTag();
+      if (var4 != null) {
+         WorldUpgrader var5 = new WorldUpgrader(var0, var1, var4, var2);
+         Component var6 = null;
+
+         while(!var5.isFinished()) {
+            Component var7 = var5.getStatus();
+            if (var6 != var7) {
+               var6 = var7;
+               LOGGER.info(var5.getStatus().getString());
+            }
+
+            int var8 = var5.getTotalChunks();
+            if (var8 > 0) {
+               int var9 = var5.getConverted() + var5.getSkipped();
+               LOGGER.info("{}% completed ({} / {} chunks)...", Mth.floor((float)var9 / (float)var8 * 100.0F), var9, var8);
+            }
+
+            if (!var3.getAsBoolean()) {
+               var5.cancel();
+            } else {
+               try {
+                  Thread.sleep(1000L);
+               } catch (InterruptedException var10) {
+               }
+            }
+         }
+      }
+
+   }
+}
