--- net/minecraft/server/commands/LocateBiomeCommand.java
+++ net/minecraft/server/commands/LocateBiomeCommand.java
@@ -1,0 +1,50 @@
+package net.minecraft.server.commands;
+
+import com.mojang.brigadier.CommandDispatcher;
+import com.mojang.brigadier.builder.LiteralArgumentBuilder;
+import com.mojang.brigadier.context.CommandContext;
+import com.mojang.brigadier.exceptions.CommandSyntaxException;
+import com.mojang.brigadier.exceptions.DynamicCommandExceptionType;
+import net.minecraft.commands.CommandSourceStack;
+import net.minecraft.commands.Commands;
+import net.minecraft.commands.arguments.ResourceLocationArgument;
+import net.minecraft.commands.synchronization.SuggestionProviders;
+import net.minecraft.core.BlockPos;
+import net.minecraft.core.Registry;
+import net.minecraft.network.chat.TranslatableComponent;
+import net.minecraft.resources.ResourceLocation;
+import net.minecraft.world.level.biome.Biome;
+
+public class LocateBiomeCommand {
+   public static final DynamicCommandExceptionType ERROR_INVALID_BIOME = new DynamicCommandExceptionType((var0) -> {
+      return new TranslatableComponent("commands.locatebiome.invalid", new Object[]{var0});
+   });
+   private static final DynamicCommandExceptionType ERROR_BIOME_NOT_FOUND = new DynamicCommandExceptionType((var0) -> {
+      return new TranslatableComponent("commands.locatebiome.notFound", new Object[]{var0});
+   });
+
+   public static void register(CommandDispatcher<CommandSourceStack> var0) {
+      var0.register((LiteralArgumentBuilder)((LiteralArgumentBuilder)Commands.literal("locatebiome").requires((var0x) -> {
+         return var0x.hasPermission(2);
+      })).then(Commands.argument("biome", ResourceLocationArgument.id()).suggests(SuggestionProviders.AVAILABLE_BIOMES).executes((var0x) -> {
+         return locateBiome((CommandSourceStack)var0x.getSource(), getBiome(var0x, "biome"));
+      })));
+   }
+
+   private static int locateBiome(CommandSourceStack var0, Biome var1) throws CommandSyntaxException {
+      BlockPos var2 = new BlockPos(var0.getPosition());
+      BlockPos var3 = var0.getLevel().findNearestBiome(var1, var2, 6400, 8);
+      if (var3 == null) {
+         throw ERROR_BIOME_NOT_FOUND.create(var1.getName().getString());
+      } else {
+         return LocateCommand.showLocateResult(var0, var1.getName().getString(), var2, var3, "commands.locatebiome.success");
+      }
+   }
+
+   private static Biome getBiome(CommandContext<CommandSourceStack> var0, String var1) throws CommandSyntaxException {
+      ResourceLocation var2 = (ResourceLocation)var0.getArgument(var1, ResourceLocation.class);
+      return (Biome)Registry.BIOME.getOptional(var2).orElseThrow(() -> {
+         return ERROR_INVALID_BIOME.create(var2);
+      });
+   }
+}
