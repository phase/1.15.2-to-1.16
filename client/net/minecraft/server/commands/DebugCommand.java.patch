--- net/minecraft/server/commands/DebugCommand.java
+++ net/minecraft/server/commands/DebugCommand.java
@@ -19,19 +19,18 @@
 import net.minecraft.commands.CommandSourceStack;
 import net.minecraft.commands.Commands;
 import net.minecraft.network.chat.TranslatableComponent;
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.util.Mth;
-import net.minecraft.util.profiling.GameProfiler;
 import net.minecraft.util.profiling.ProfileResults;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
 public class DebugCommand {
    private static final Logger LOGGER = LogManager.getLogger();
-   private static final SimpleCommandExceptionType ERROR_NOT_RUNNING = new SimpleCommandExceptionType(new TranslatableComponent("commands.debug.notRunning", new Object[0]));
-   private static final SimpleCommandExceptionType ERROR_ALREADY_RUNNING = new SimpleCommandExceptionType(new TranslatableComponent("commands.debug.alreadyRunning", new Object[0]));
+   private static final SimpleCommandExceptionType ERROR_NOT_RUNNING = new SimpleCommandExceptionType(new TranslatableComponent("commands.debug.notRunning"));
+   private static final SimpleCommandExceptionType ERROR_ALREADY_RUNNING = new SimpleCommandExceptionType(new TranslatableComponent("commands.debug.alreadyRunning"));
    @Nullable
    private static final FileSystemProvider ZIP_FS_PROVIDER = (FileSystemProvider)FileSystemProvider.installedProviders().stream().filter((var0) -> {
       return var0.getScheme().equalsIgnoreCase("jar");
    }).findFirst().orElse((Object)null);
 
@@ -47,33 +46,31 @@
       })));
    }
 
    private static int start(CommandSourceStack var0) throws CommandSyntaxException {
       MinecraftServer var1 = var0.getServer();
-      GameProfiler var2 = var1.getProfiler();
-      if (var2.continuous().isEnabled()) {
+      if (var1.isProfiling()) {
          throw ERROR_ALREADY_RUNNING.create();
       } else {
-         var1.delayStartProfiler();
+         var1.startProfiling();
          var0.sendSuccess(new TranslatableComponent("commands.debug.started", new Object[]{"Started the debug profiler. Type '/debug stop' to stop it."}), true);
          return 0;
       }
    }
 
    private static int stop(CommandSourceStack var0) throws CommandSyntaxException {
       MinecraftServer var1 = var0.getServer();
-      GameProfiler var2 = var1.getProfiler();
-      if (!var2.continuous().isEnabled()) {
+      if (!var1.isProfiling()) {
          throw ERROR_NOT_RUNNING.create();
       } else {
-         ProfileResults var3 = var2.continuous().disable();
-         File var4 = new File(var1.getFile("debug"), "profile-results-" + (new SimpleDateFormat("yyyy-MM-dd_HH.mm.ss")).format(new Date()) + ".txt");
-         var3.saveResults(var4);
-         float var5 = (float)var3.getNanoDuration() / 1.0E9F;
-         float var6 = (float)var3.getTickDuration() / var5;
-         var0.sendSuccess(new TranslatableComponent("commands.debug.stopped", new Object[]{String.format(Locale.ROOT, "%.2f", var5), var3.getTickDuration(), String.format("%.2f", var6)}), true);
-         return Mth.floor(var6);
+         ProfileResults var2 = var1.finishProfiling();
+         File var3 = new File(var1.getFile("debug"), "profile-results-" + (new SimpleDateFormat("yyyy-MM-dd_HH.mm.ss")).format(new Date()) + ".txt");
+         var2.saveResults(var3);
+         float var4 = (float)var2.getNanoDuration() / 1.0E9F;
+         float var5 = (float)var2.getTickDuration() / var4;
+         var0.sendSuccess(new TranslatableComponent("commands.debug.stopped", new Object[]{String.format(Locale.ROOT, "%.2f", var4), var2.getTickDuration(), String.format("%.2f", var5)}), true);
+         return Mth.floor(var5);
       }
    }
 
    private static int report(CommandSourceStack var0) {
       MinecraftServer var1 = var0.getServer();
@@ -114,10 +111,10 @@
 
          var0.sendSuccess(new TranslatableComponent("commands.debug.reportSaved", new Object[]{var2}), false);
          return 1;
       } catch (IOException var18) {
          LOGGER.error("Failed to save debug dump", var18);
-         var0.sendFailure(new TranslatableComponent("commands.debug.reportFailed", new Object[0]));
+         var0.sendFailure(new TranslatableComponent("commands.debug.reportFailed"));
          return 0;
       }
    }
 }
