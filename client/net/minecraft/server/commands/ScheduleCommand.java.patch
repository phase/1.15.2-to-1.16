--- net/minecraft/server/commands/ScheduleCommand.java
+++ net/minecraft/server/commands/ScheduleCommand.java
@@ -8,10 +8,11 @@
 import com.mojang.brigadier.exceptions.CommandSyntaxException;
 import com.mojang.brigadier.exceptions.DynamicCommandExceptionType;
 import com.mojang.brigadier.exceptions.SimpleCommandExceptionType;
 import com.mojang.brigadier.suggestion.SuggestionProvider;
 import com.mojang.datafixers.util.Either;
+import com.mojang.datafixers.util.Pair;
 import net.minecraft.commands.CommandFunction;
 import net.minecraft.commands.CommandSourceStack;
 import net.minecraft.commands.Commands;
 import net.minecraft.commands.SharedSuggestionProvider;
 import net.minecraft.commands.arguments.TimeArgument;
@@ -22,16 +23,16 @@
 import net.minecraft.world.level.timers.FunctionCallback;
 import net.minecraft.world.level.timers.FunctionTagCallback;
 import net.minecraft.world.level.timers.TimerQueue;
 
 public class ScheduleCommand {
-   private static final SimpleCommandExceptionType ERROR_SAME_TICK = new SimpleCommandExceptionType(new TranslatableComponent("commands.schedule.same_tick", new Object[0]));
+   private static final SimpleCommandExceptionType ERROR_SAME_TICK = new SimpleCommandExceptionType(new TranslatableComponent("commands.schedule.same_tick"));
    private static final DynamicCommandExceptionType ERROR_CANT_REMOVE = new DynamicCommandExceptionType((var0) -> {
       return new TranslatableComponent("commands.schedule.cleared.failure", new Object[]{var0});
    });
    private static final SuggestionProvider<CommandSourceStack> SUGGEST_SCHEDULE = (var0, var1) -> {
-      return SharedSuggestionProvider.suggest((Iterable)((CommandSourceStack)var0.getSource()).getLevel().getLevelData().getScheduledEvents().getEventsIds(), var1);
+      return SharedSuggestionProvider.suggest((Iterable)((CommandSourceStack)var0.getSource()).getServer().getWorldData().overworldData().getScheduledEvents().getEventsIds(), var1);
    };
 
    public static void register(CommandDispatcher<CommandSourceStack> var0) {
       var0.register((LiteralArgumentBuilder)((LiteralArgumentBuilder)((LiteralArgumentBuilder)Commands.literal("schedule").requires((var0x) -> {
          return var0x.hasPermission(2);
@@ -44,41 +45,40 @@
       })))))).then(Commands.literal("clear").then(Commands.argument("function", StringArgumentType.greedyString()).suggests(SUGGEST_SCHEDULE).executes((var0x) -> {
          return remove((CommandSourceStack)var0x.getSource(), StringArgumentType.getString(var0x, "function"));
       }))));
    }
 
-   private static int schedule(CommandSourceStack var0, Either<CommandFunction, Tag<CommandFunction>> var1, int var2, boolean var3) throws CommandSyntaxException {
+   private static int schedule(CommandSourceStack var0, Pair<ResourceLocation, Either<CommandFunction, Tag<CommandFunction>>> var1, int var2, boolean var3) throws CommandSyntaxException {
       if (var2 == 0) {
          throw ERROR_SAME_TICK.create();
       } else {
          long var4 = var0.getLevel().getGameTime() + (long)var2;
-         TimerQueue var6 = var0.getLevel().getLevelData().getScheduledEvents();
-         var1.ifLeft((var6x) -> {
-            ResourceLocation var7 = var6x.getId();
-            String var8 = var7.toString();
+         ResourceLocation var6 = (ResourceLocation)var1.getFirst();
+         TimerQueue var7 = var0.getServer().getWorldData().overworldData().getScheduledEvents();
+         ((Either)var1.getSecond()).ifLeft((var7x) -> {
+            String var8 = var6.toString();
             if (var3) {
-               var6.remove(var8);
+               var7.remove(var8);
             }
 
-            var6.schedule(var8, var4, new FunctionCallback(var7));
-            var0.sendSuccess(new TranslatableComponent("commands.schedule.created.function", new Object[]{var7, var2, var4}), true);
-         }).ifRight((var6x) -> {
-            ResourceLocation var7 = var6x.getId();
-            String var8 = "#" + var7.toString();
+            var7.schedule(var8, var4, new FunctionCallback(var6));
+            var0.sendSuccess(new TranslatableComponent("commands.schedule.created.function", new Object[]{var6, var2, var4}), true);
+         }).ifRight((var7x) -> {
+            String var8 = "#" + var6.toString();
             if (var3) {
-               var6.remove(var8);
+               var7.remove(var8);
             }
 
-            var6.schedule(var8, var4, new FunctionTagCallback(var7));
-            var0.sendSuccess(new TranslatableComponent("commands.schedule.created.tag", new Object[]{var7, var2, var4}), true);
+            var7.schedule(var8, var4, new FunctionTagCallback(var6));
+            var0.sendSuccess(new TranslatableComponent("commands.schedule.created.tag", new Object[]{var6, var2, var4}), true);
          });
          return (int)Math.floorMod(var4, 2147483647L);
       }
    }
 
    private static int remove(CommandSourceStack var0, String var1) throws CommandSyntaxException {
-      int var2 = var0.getLevel().getLevelData().getScheduledEvents().remove(var1);
+      int var2 = var0.getServer().getWorldData().overworldData().getScheduledEvents().remove(var1);
       if (var2 == 0) {
          throw ERROR_CANT_REMOVE.create(var1);
       } else {
          var0.sendSuccess(new TranslatableComponent("commands.schedule.cleared.success", new Object[]{var2, var1}), true);
          return var2;
