--- net/minecraft/server/commands/ExecuteCommand.java
+++ net/minecraft/server/commands/ExecuteCommand.java
@@ -26,11 +26,11 @@
 import java.util.function.IntFunction;
 import net.minecraft.advancements.critereon.MinMaxBounds;
 import net.minecraft.commands.CommandSourceStack;
 import net.minecraft.commands.Commands;
 import net.minecraft.commands.SharedSuggestionProvider;
-import net.minecraft.commands.arguments.DimensionTypeArgument;
+import net.minecraft.commands.arguments.DimensionArgument;
 import net.minecraft.commands.arguments.EntityAnchorArgument;
 import net.minecraft.commands.arguments.EntityArgument;
 import net.minecraft.commands.arguments.NbtPathArgument;
 import net.minecraft.commands.arguments.ObjectiveArgument;
 import net.minecraft.commands.arguments.RangeArgument;
@@ -72,11 +72,11 @@
 
 public class ExecuteCommand {
    private static final Dynamic2CommandExceptionType ERROR_AREA_TOO_LARGE = new Dynamic2CommandExceptionType((var0, var1) -> {
       return new TranslatableComponent("commands.execute.blocks.toobig", new Object[]{var0, var1});
    });
-   private static final SimpleCommandExceptionType ERROR_CONDITIONAL_FAILED = new SimpleCommandExceptionType(new TranslatableComponent("commands.execute.conditional.fail", new Object[0]));
+   private static final SimpleCommandExceptionType ERROR_CONDITIONAL_FAILED = new SimpleCommandExceptionType(new TranslatableComponent("commands.execute.conditional.fail"));
    private static final DynamicCommandExceptionType ERROR_CONDITIONAL_FAILED_COUNT = new DynamicCommandExceptionType((var0) -> {
       return new TranslatableComponent("commands.execute.conditional.fail_count", new Object[]{var0});
    });
    private static final BinaryOperator<ResultConsumer<CommandSourceStack>> CALLBACK_CHAINER = (var0, var1) -> {
       return (var2, var3, var4) -> {
@@ -109,11 +109,11 @@
          ArrayList var1 = Lists.newArrayList();
          Iterator var2 = EntityArgument.getOptionalEntities(var0x, "targets").iterator();
 
          while(var2.hasNext()) {
             Entity var3 = (Entity)var2.next();
-            var1.add(((CommandSourceStack)var0x.getSource()).withLevel((ServerLevel)var3.level).withPosition(var3.getCommandSenderWorldPosition()).withRotation(var3.getRotationVector()));
+            var1.add(((CommandSourceStack)var0x.getSource()).withLevel((ServerLevel)var3.level).withPosition(var3.position()).withRotation(var3.getRotationVector()));
          }
 
          return var1;
       })))).then(((LiteralArgumentBuilder)Commands.literal("store").then(wrapStores(var1, Commands.literal("result"), true))).then(wrapStores(var1, Commands.literal("success"), false)))).then(((LiteralArgumentBuilder)Commands.literal("positioned").then(Commands.argument("pos", Vec3Argument.vec3()).redirect(var1, (var0x) -> {
          return ((CommandSourceStack)var0x.getSource()).withPosition(Vec3Argument.getVec3(var0x, "pos")).withAnchor(EntityAnchorArgument.Anchor.FEET);
@@ -121,11 +121,11 @@
          ArrayList var1 = Lists.newArrayList();
          Iterator var2 = EntityArgument.getOptionalEntities(var0x, "targets").iterator();
 
          while(var2.hasNext()) {
             Entity var3 = (Entity)var2.next();
-            var1.add(((CommandSourceStack)var0x.getSource()).withPosition(var3.getCommandSenderWorldPosition()));
+            var1.add(((CommandSourceStack)var0x.getSource()).withPosition(var3.position()));
          }
 
          return var1;
       }))))).then(((LiteralArgumentBuilder)Commands.literal("rotated").then(Commands.argument("rot", RotationArgument.rotation()).redirect(var1, (var0x) -> {
          return ((CommandSourceStack)var0x.getSource()).withRotation(RotationArgument.getRotation(var0x, "rot").getRotation((CommandSourceStack)var0x.getSource()));
@@ -154,12 +154,12 @@
          return ((CommandSourceStack)var0x.getSource()).facing(Vec3Argument.getVec3(var0x, "pos"));
       })))).then(Commands.literal("align").then(Commands.argument("axes", SwizzleArgument.swizzle()).redirect(var1, (var0x) -> {
          return ((CommandSourceStack)var0x.getSource()).withPosition(((CommandSourceStack)var0x.getSource()).getPosition().align(SwizzleArgument.getSwizzle(var0x, "axes")));
       })))).then(Commands.literal("anchored").then(Commands.argument("anchor", EntityAnchorArgument.anchor()).redirect(var1, (var0x) -> {
          return ((CommandSourceStack)var0x.getSource()).withAnchor(EntityAnchorArgument.getAnchor(var0x, "anchor"));
-      })))).then(Commands.literal("in").then(Commands.argument("dimension", DimensionTypeArgument.dimension()).redirect(var1, (var0x) -> {
-         return ((CommandSourceStack)var0x.getSource()).withLevel(((CommandSourceStack)var0x.getSource()).getServer().getLevel(DimensionTypeArgument.getDimension(var0x, "dimension")));
+      })))).then(Commands.literal("in").then(Commands.argument("dimension", DimensionArgument.dimension()).redirect(var1, (var0x) -> {
+         return ((CommandSourceStack)var0x.getSource()).withLevel(DimensionArgument.getDimension(var0x, "dimension"));
       }))));
    }
 
    private static ArgumentBuilder<CommandSourceStack, ?> wrapStores(LiteralCommandNode<CommandSourceStack> var0, LiteralArgumentBuilder<CommandSourceStack> var1, boolean var2) {
       var1.then(Commands.literal("score").then(Commands.argument("targets", ScoreHolderArgument.scoreHolders()).suggests(ScoreHolderArgument.SUGGEST_SCORE_HOLDERS).then(Commands.argument("objective", ObjectiveArgument.objective()).redirect(var0, (var1x) -> {
@@ -304,11 +304,11 @@
             throw ERROR_CONDITIONAL_FAILED.create();
          }
       } : (var1x) -> {
          int var2 = var1.test(var1x);
          if (var2 == 0) {
-            ((CommandSourceStack)var1x.getSource()).sendSuccess(new TranslatableComponent("commands.execute.conditional.pass", new Object[0]), false);
+            ((CommandSourceStack)var1x.getSource()).sendSuccess(new TranslatableComponent("commands.execute.conditional.pass"), false);
             return 1;
          } else {
             throw ERROR_CONDITIONAL_FAILED_COUNT.create(var2);
          }
       };
@@ -353,11 +353,11 @@
    private static ArgumentBuilder<CommandSourceStack, ?> addConditional(CommandNode<CommandSourceStack> var0, ArgumentBuilder<CommandSourceStack, ?> var1, boolean var2, ExecuteCommand.CommandPredicate var3) {
       return var1.fork(var0, (var2x) -> {
          return expect(var2x, var2, var3.test(var2x));
       }).executes((var2x) -> {
          if (var2 == var3.test(var2x)) {
-            ((CommandSourceStack)var2x.getSource()).sendSuccess(new TranslatableComponent("commands.execute.conditional.pass", new Object[0]), false);
+            ((CommandSourceStack)var2x.getSource()).sendSuccess(new TranslatableComponent("commands.execute.conditional.pass"), false);
             return 1;
          } else {
             throw ERROR_CONDITIONAL_FAILED.create();
          }
       });
@@ -386,11 +386,11 @@
    private static int checkUnlessRegions(CommandContext<CommandSourceStack> var0, boolean var1) throws CommandSyntaxException {
       OptionalInt var2 = checkRegions(var0, var1);
       if (var2.isPresent()) {
          throw ERROR_CONDITIONAL_FAILED_COUNT.create(var2.getAsInt());
       } else {
-         ((CommandSourceStack)var0.getSource()).sendSuccess(new TranslatableComponent("commands.execute.conditional.pass", new Object[0]), false);
+         ((CommandSourceStack)var0.getSource()).sendSuccess(new TranslatableComponent("commands.execute.conditional.pass"), false);
          return 1;
       }
    }
 
    private static OptionalInt checkRegions(CommandContext<CommandSourceStack> var0, boolean var1) throws CommandSyntaxException {
@@ -411,11 +411,11 @@
             for(int var11 = var5.y0; var11 <= var5.y1; ++var11) {
                for(int var12 = var5.x0; var12 <= var5.x1; ++var12) {
                   BlockPos var13 = new BlockPos(var12, var11, var10);
                   BlockPos var14 = var13.offset(var7);
                   BlockState var15 = var0.getBlockState(var13);
-                  if (!var4 || var15.getBlock() != Blocks.AIR) {
+                  if (!var4 || !var15.is(Blocks.AIR)) {
                      if (var15 != var0.getBlockState(var14)) {
                         return OptionalInt.empty();
                      }
 
                      BlockEntity var16 = var0.getBlockEntity(var13);
