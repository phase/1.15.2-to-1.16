--- net/minecraft/server/players/OldUsersConverter.java
+++ net/minecraft/server/players/OldUsersConverter.java
@@ -6,11 +6,10 @@
 import com.mojang.authlib.Agent;
 import com.mojang.authlib.GameProfile;
 import com.mojang.authlib.ProfileLookupCallback;
 import com.mojang.authlib.yggdrasil.ProfileNotFoundException;
 import java.io.File;
-import java.io.FileNotFoundException;
 import java.io.IOException;
 import java.nio.charset.StandardCharsets;
 import java.text.ParseException;
 import java.util.ArrayList;
 import java.util.Collection;
@@ -19,14 +18,16 @@
 import java.util.Iterator;
 import java.util.List;
 import java.util.Locale;
 import java.util.Map;
 import java.util.UUID;
+import javax.annotation.Nullable;
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.dedicated.DedicatedServer;
 import net.minecraft.util.StringUtil;
 import net.minecraft.world.entity.player.Player;
+import net.minecraft.world.level.storage.LevelResource;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
 public class OldUsersConverter {
    private static final Logger LOGGER = LogManager.getLogger();
@@ -77,11 +78,11 @@
       final UserBanList var1 = new UserBanList(PlayerList.USERBANLIST_FILE);
       if (OLD_USERBANLIST.exists() && OLD_USERBANLIST.isFile()) {
          if (var1.getFile().exists()) {
             try {
                var1.load();
-            } catch (FileNotFoundException var6) {
+            } catch (IOException var6) {
                LOGGER.warn("Could not load existing file {}", var1.getFile().getName(), var6);
             }
          }
 
          try {
@@ -130,11 +131,11 @@
       IpBanList var1 = new IpBanList(PlayerList.IPBANLIST_FILE);
       if (OLD_IPBANLIST.exists() && OLD_IPBANLIST.isFile()) {
          if (var1.getFile().exists()) {
             try {
                var1.load();
-            } catch (FileNotFoundException var11) {
+            } catch (IOException var11) {
                LOGGER.warn("Could not load existing file {}", var1.getFile().getName(), var11);
             }
          }
 
          try {
@@ -168,11 +169,11 @@
       final ServerOpList var1 = new ServerOpList(PlayerList.OPLIST_FILE);
       if (OLD_OPLIST.exists() && OLD_OPLIST.isFile()) {
          if (var1.getFile().exists()) {
             try {
                var1.load();
-            } catch (FileNotFoundException var6) {
+            } catch (IOException var6) {
                LOGGER.warn("Could not load existing file {}", var1.getFile().getName(), var6);
             }
          }
 
          try {
@@ -210,11 +211,11 @@
       final UserWhiteList var1 = new UserWhiteList(PlayerList.WHITELIST_FILE);
       if (OLD_WHITELIST.exists() && OLD_WHITELIST.isFile()) {
          if (var1.getFile().exists()) {
             try {
                var1.load();
-            } catch (FileNotFoundException var6) {
+            } catch (IOException var6) {
                LOGGER.warn("Could not load existing file {}", var1.getFile().getName(), var6);
             }
          }
 
          try {
@@ -246,15 +247,16 @@
       } else {
          return true;
       }
    }
 
-   public static String convertMobOwnerIfNecessary(final MinecraftServer var0, String var1) {
+   @Nullable
+   public static UUID convertMobOwnerIfNecessary(final MinecraftServer var0, String var1) {
       if (!StringUtil.isNullOrEmpty(var1) && var1.length() <= 16) {
          GameProfile var2 = var0.getProfileCache().get(var1);
          if (var2 != null && var2.getId() != null) {
-            return var2.getId().toString();
+            return var2.getId();
          } else if (!var0.isSingleplayer() && var0.usesAuthentication()) {
             final ArrayList var3 = Lists.newArrayList();
             ProfileLookupCallback var4 = new ProfileLookupCallback() {
                public void onProfileLookupSucceeded(GameProfile var1) {
                   var0.getProfileCache().add(var1);
@@ -264,16 +266,20 @@
                public void onProfileLookupFailed(GameProfile var1, Exception var2) {
                   OldUsersConverter.LOGGER.warn("Could not lookup user whitelist entry for {}", var1.getName(), var2);
                }
             };
             lookupPlayers(var0, Lists.newArrayList(new String[]{var1}), var4);
-            return !var3.isEmpty() && ((GameProfile)var3.get(0)).getId() != null ? ((GameProfile)var3.get(0)).getId().toString() : "";
+            return !var3.isEmpty() && ((GameProfile)var3.get(0)).getId() != null ? ((GameProfile)var3.get(0)).getId() : null;
          } else {
-            return Player.createPlayerUUID(new GameProfile((UUID)null, var1)).toString();
+            return Player.createPlayerUUID(new GameProfile((UUID)null, var1));
          }
       } else {
-         return var1;
+         try {
+            return UUID.fromString(var1);
+         } catch (IllegalArgumentException var5) {
+            return null;
+         }
       }
    }
 
    public static boolean convertPlayers(final DedicatedServer var0) {
       final File var1 = getWorldPlayersDirectory(var0);
@@ -432,13 +438,11 @@
          return false;
       }
    }
 
    private static File getWorldPlayersDirectory(MinecraftServer var0) {
-      String var1 = var0.getLevelIdName();
-      File var2 = new File(var1);
-      return new File(var2, "players");
+      return var0.getWorldPath(LevelResource.PLAYER_OLD_DATA_DIR).toFile();
    }
 
    private static void renameOldFile(File var0) {
       File var1 = new File(var0.getName() + ".converted");
       var0.renameTo(var1);
