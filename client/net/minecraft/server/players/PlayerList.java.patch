--- net/minecraft/server/players/PlayerList.java
+++ net/minecraft/server/players/PlayerList.java
@@ -2,10 +2,12 @@
 
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.google.common.collect.Sets;
 import com.mojang.authlib.GameProfile;
+import com.mojang.serialization.DataResult;
+import com.mojang.serialization.Dynamic;
 import io.netty.buffer.Unpooled;
 import java.io.File;
 import java.net.SocketAddress;
 import java.text.SimpleDateFormat;
 import java.util.ArrayList;
@@ -16,12 +18,15 @@
 import java.util.Map;
 import java.util.Optional;
 import java.util.UUID;
 import javax.annotation.Nullable;
 import net.minecraft.ChatFormatting;
+import net.minecraft.Util;
 import net.minecraft.core.BlockPos;
+import net.minecraft.core.RegistryAccess;
 import net.minecraft.nbt.CompoundTag;
+import net.minecraft.nbt.NbtOps;
 import net.minecraft.network.Connection;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.network.chat.ChatType;
 import net.minecraft.network.chat.Component;
 import net.minecraft.network.chat.TranslatableComponent;
@@ -36,39 +41,46 @@
 import net.minecraft.network.protocol.game.ClientboundPlayerInfoPacket;
 import net.minecraft.network.protocol.game.ClientboundRespawnPacket;
 import net.minecraft.network.protocol.game.ClientboundSetBorderPacket;
 import net.minecraft.network.protocol.game.ClientboundSetCarriedItemPacket;
 import net.minecraft.network.protocol.game.ClientboundSetChunkCacheRadiusPacket;
+import net.minecraft.network.protocol.game.ClientboundSetDefaultSpawnPositionPacket;
 import net.minecraft.network.protocol.game.ClientboundSetExperiencePacket;
 import net.minecraft.network.protocol.game.ClientboundSetPlayerTeamPacket;
-import net.minecraft.network.protocol.game.ClientboundSetSpawnPositionPacket;
 import net.minecraft.network.protocol.game.ClientboundSetTimePacket;
+import net.minecraft.network.protocol.game.ClientboundSoundPacket;
 import net.minecraft.network.protocol.game.ClientboundUpdateMobEffectPacket;
 import net.minecraft.network.protocol.game.ClientboundUpdateRecipesPacket;
 import net.minecraft.network.protocol.game.ClientboundUpdateTagsPacket;
+import net.minecraft.resources.ResourceKey;
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.PlayerAdvancements;
 import net.minecraft.server.ServerScoreboard;
 import net.minecraft.server.level.DemoMode;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.server.level.ServerPlayerGameMode;
 import net.minecraft.server.network.ServerGamePacketListenerImpl;
+import net.minecraft.sounds.SoundEvents;
+import net.minecraft.sounds.SoundSource;
 import net.minecraft.stats.ServerStatsCounter;
 import net.minecraft.stats.Stats;
 import net.minecraft.world.effect.MobEffectInstance;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.level.GameRules;
 import net.minecraft.world.level.GameType;
-import net.minecraft.world.level.LevelAccessor;
+import net.minecraft.world.level.Level;
+import net.minecraft.world.level.biome.BiomeManager;
+import net.minecraft.world.level.block.RespawnAnchorBlock;
 import net.minecraft.world.level.border.BorderChangeListener;
 import net.minecraft.world.level.border.WorldBorder;
 import net.minecraft.world.level.dimension.DimensionType;
 import net.minecraft.world.level.storage.LevelData;
-import net.minecraft.world.level.storage.PlayerIO;
+import net.minecraft.world.level.storage.LevelResource;
+import net.minecraft.world.level.storage.PlayerDataStorage;
 import net.minecraft.world.phys.Vec3;
 import net.minecraft.world.scores.Objective;
 import net.minecraft.world.scores.PlayerTeam;
 import net.minecraft.world.scores.Team;
 import org.apache.logging.log4j.LogManager;
@@ -88,127 +100,153 @@
    private final IpBanList ipBans;
    private final ServerOpList ops;
    private final UserWhiteList whitelist;
    private final Map<UUID, ServerStatsCounter> stats;
    private final Map<UUID, PlayerAdvancements> advancements;
-   private PlayerIO playerIo;
+   private final PlayerDataStorage playerIo;
    private boolean doWhiteList;
+   private final RegistryAccess.RegistryHolder registryHolder;
    protected final int maxPlayers;
    private int viewDistance;
    private GameType overrideGameMode;
    private boolean allowCheatsForAllPlayers;
    private int sendAllPlayerInfoIn;
 
-   public PlayerList(MinecraftServer var1, int var2) {
+   public PlayerList(MinecraftServer var1, RegistryAccess.RegistryHolder var2, PlayerDataStorage var3, int var4) {
       this.bans = new UserBanList(USERBANLIST_FILE);
       this.ipBans = new IpBanList(IPBANLIST_FILE);
       this.ops = new ServerOpList(OPLIST_FILE);
       this.whitelist = new UserWhiteList(WHITELIST_FILE);
       this.stats = Maps.newHashMap();
       this.advancements = Maps.newHashMap();
       this.server = var1;
-      this.maxPlayers = var2;
-      this.getBans().setEnabled(true);
-      this.getIpBans().setEnabled(true);
+      this.registryHolder = var2;
+      this.maxPlayers = var4;
+      this.playerIo = var3;
    }
 
    public void placeNewPlayer(Connection var1, ServerPlayer var2) {
       GameProfile var3 = var2.getGameProfile();
       GameProfileCache var4 = this.server.getProfileCache();
       GameProfile var5 = var4.get(var3.getId());
       String var6 = var5 == null ? var3.getName() : var5.getName();
       var4.add(var3);
       CompoundTag var7 = this.load(var2);
-      ServerLevel var8 = this.server.getLevel(var2.dimension);
-      var2.setLevel(var8);
+      ResourceKey var23;
+      if (var7 != null) {
+         DataResult var10000 = DimensionType.parseLegacy(new Dynamic(NbtOps.INSTANCE, var7.get("Dimension")));
+         Logger var10001 = LOGGER;
+         var10001.getClass();
+         var23 = (ResourceKey)var10000.resultOrPartial(var10001::error).orElse(Level.OVERWORLD);
+      } else {
+         var23 = Level.OVERWORLD;
+      }
+
+      ResourceKey var8 = var23;
+      ServerLevel var9 = this.server.getLevel(var8);
+      ServerLevel var10;
+      if (var9 == null) {
+         LOGGER.warn("Unknown respawn dimension {}, defaulting to overworld", var8);
+         var10 = this.server.overworld();
+      } else {
+         var10 = var9;
+      }
+
+      var2.setLevel(var10);
       var2.gameMode.setLevel((ServerLevel)var2.level);
-      String var9 = "local";
+      String var11 = "local";
       if (var1.getRemoteAddress() != null) {
-         var9 = var1.getRemoteAddress().toString();
+         var11 = var1.getRemoteAddress().toString();
       }
 
-      LOGGER.info("{}[{}] logged in with entity id {} at ({}, {}, {})", var2.getName().getString(), var9, var2.getId(), var2.getX(), var2.getY(), var2.getZ());
-      LevelData var10 = var8.getLevelData();
-      this.updatePlayerGameMode(var2, (ServerPlayer)null, var8);
-      ServerGamePacketListenerImpl var11 = new ServerGamePacketListenerImpl(this.server, var1, var2);
-      GameRules var12 = var8.getGameRules();
-      boolean var13 = var12.getBoolean(GameRules.RULE_DO_IMMEDIATE_RESPAWN);
-      boolean var14 = var12.getBoolean(GameRules.RULE_REDUCEDDEBUGINFO);
-      var11.send(new ClientboundLoginPacket(var2.getId(), var2.gameMode.getGameModeForPlayer(), LevelData.obfuscateSeed(var10.getSeed()), var10.isHardcore(), var8.dimension.getType(), this.getMaxPlayers(), var10.getGeneratorType(), this.viewDistance, var14, !var13));
-      var11.send(new ClientboundCustomPayloadPacket(ClientboundCustomPayloadPacket.BRAND, (new FriendlyByteBuf(Unpooled.buffer())).writeUtf(this.getServer().getServerModName())));
-      var11.send(new ClientboundChangeDifficultyPacket(var10.getDifficulty(), var10.isDifficultyLocked()));
-      var11.send(new ClientboundPlayerAbilitiesPacket(var2.abilities));
-      var11.send(new ClientboundSetCarriedItemPacket(var2.inventory.selected));
-      var11.send(new ClientboundUpdateRecipesPacket(this.server.getRecipeManager().getRecipes()));
-      var11.send(new ClientboundUpdateTagsPacket(this.server.getTags()));
+      LOGGER.info("{}[{}] logged in with entity id {} at ({}, {}, {})", var2.getName().getString(), var11, var2.getId(), var2.getX(), var2.getY(), var2.getZ());
+      LevelData var12 = var10.getLevelData();
+      this.updatePlayerGameMode(var2, (ServerPlayer)null, var10);
+      ServerGamePacketListenerImpl var13 = new ServerGamePacketListenerImpl(this.server, var1, var2);
+      GameRules var14 = var10.getGameRules();
+      boolean var15 = var14.getBoolean(GameRules.RULE_DO_IMMEDIATE_RESPAWN);
+      boolean var16 = var14.getBoolean(GameRules.RULE_REDUCEDDEBUGINFO);
+      var13.send(new ClientboundLoginPacket(var2.getId(), var2.gameMode.getGameModeForPlayer(), var2.gameMode.getPreviousGameModeForPlayer(), BiomeManager.obfuscateSeed(var10.getSeed()), var12.isHardcore(), this.server.levelKeys(), this.registryHolder, var10.dimensionTypeKey(), var10.dimension(), this.getMaxPlayers(), this.viewDistance, var16, !var15, var10.isDebug(), var10.isFlat()));
+      var13.send(new ClientboundCustomPayloadPacket(ClientboundCustomPayloadPacket.BRAND, (new FriendlyByteBuf(Unpooled.buffer())).writeUtf(this.getServer().getServerModName())));
+      var13.send(new ClientboundChangeDifficultyPacket(var12.getDifficulty(), var12.isDifficultyLocked()));
+      var13.send(new ClientboundPlayerAbilitiesPacket(var2.abilities));
+      var13.send(new ClientboundSetCarriedItemPacket(var2.inventory.selected));
+      var13.send(new ClientboundUpdateRecipesPacket(this.server.getRecipeManager().getRecipes()));
+      var13.send(new ClientboundUpdateTagsPacket(this.server.getTags()));
       this.sendPlayerPermissionLevel(var2);
       var2.getStats().markAllDirty();
       var2.getRecipeBook().sendInitialRecipeBook(var2);
-      this.updateEntireScoreboard(var8.getScoreboard(), var2);
+      this.updateEntireScoreboard(var10.getScoreboard(), var2);
       this.server.invalidateStatus();
-      TranslatableComponent var15;
+      TranslatableComponent var17;
       if (var2.getGameProfile().getName().equalsIgnoreCase(var6)) {
-         var15 = new TranslatableComponent("multiplayer.player.joined", new Object[]{var2.getDisplayName()});
+         var17 = new TranslatableComponent("multiplayer.player.joined", new Object[]{var2.getDisplayName()});
       } else {
-         var15 = new TranslatableComponent("multiplayer.player.joined.renamed", new Object[]{var2.getDisplayName(), var6});
+         var17 = new TranslatableComponent("multiplayer.player.joined.renamed", new Object[]{var2.getDisplayName(), var6});
       }
 
-      this.broadcastMessage(var15.withStyle(ChatFormatting.YELLOW));
-      var11.teleport(var2.getX(), var2.getY(), var2.getZ(), var2.yRot, var2.xRot);
+      this.broadcastMessage(var17.withStyle(ChatFormatting.YELLOW), ChatType.SYSTEM, Util.NIL_UUID);
+      var13.teleport(var2.getX(), var2.getY(), var2.getZ(), var2.yRot, var2.xRot);
       this.players.add(var2);
       this.playersByUUID.put(var2.getUUID(), var2);
       this.broadcastAll(new ClientboundPlayerInfoPacket(ClientboundPlayerInfoPacket.Action.ADD_PLAYER, new ServerPlayer[]{var2}));
 
-      for(int var16 = 0; var16 < this.players.size(); ++var16) {
-         var2.connection.send(new ClientboundPlayerInfoPacket(ClientboundPlayerInfoPacket.Action.ADD_PLAYER, new ServerPlayer[]{(ServerPlayer)this.players.get(var16)}));
+      for(int var18 = 0; var18 < this.players.size(); ++var18) {
+         var2.connection.send(new ClientboundPlayerInfoPacket(ClientboundPlayerInfoPacket.Action.ADD_PLAYER, new ServerPlayer[]{(ServerPlayer)this.players.get(var18)}));
       }
 
-      var8.addNewPlayer(var2);
+      var10.addNewPlayer(var2);
       this.server.getCustomBossEvents().onPlayerConnect(var2);
-      this.sendLevelInfo(var2, var8);
+      this.sendLevelInfo(var2, var10);
       if (!this.server.getResourcePack().isEmpty()) {
          var2.sendTexturePack(this.server.getResourcePack(), this.server.getResourcePackHash());
       }
 
-      Iterator var21 = var2.getActiveEffects().iterator();
+      Iterator var24 = var2.getActiveEffects().iterator();
 
-      while(var21.hasNext()) {
-         MobEffectInstance var17 = (MobEffectInstance)var21.next();
-         var11.send(new ClientboundUpdateMobEffectPacket(var2.getId(), var17));
+      while(var24.hasNext()) {
+         MobEffectInstance var19 = (MobEffectInstance)var24.next();
+         var13.send(new ClientboundUpdateMobEffectPacket(var2.getId(), var19));
       }
 
       if (var7 != null && var7.contains("RootVehicle", 10)) {
-         CompoundTag var22 = var7.getCompound("RootVehicle");
-         Entity var23 = EntityType.loadEntityRecursive(var22.getCompound("Entity"), var8, (var1x) -> {
-            return !var8.addWithUUID(var1x) ? null : var1x;
+         CompoundTag var25 = var7.getCompound("RootVehicle");
+         Entity var26 = EntityType.loadEntityRecursive(var25.getCompound("Entity"), var10, (var1x) -> {
+            return !var10.addWithUUID(var1x) ? null : var1x;
          });
-         if (var23 != null) {
-            UUID var18 = var22.getUUID("Attach");
-            Iterator var19;
-            Entity var20;
-            if (var23.getUUID().equals(var18)) {
-               var2.startRiding(var23, true);
+         if (var26 != null) {
+            UUID var20;
+            if (var25.hasUUID("Attach")) {
+               var20 = var25.getUUID("Attach");
             } else {
-               var19 = var23.getIndirectPassengers().iterator();
+               var20 = null;
+            }
 
-               while(var19.hasNext()) {
-                  var20 = (Entity)var19.next();
-                  if (var20.getUUID().equals(var18)) {
-                     var2.startRiding(var20, true);
+            Iterator var21;
+            Entity var22;
+            if (var26.getUUID().equals(var20)) {
+               var2.startRiding(var26, true);
+            } else {
+               var21 = var26.getIndirectPassengers().iterator();
+
+               while(var21.hasNext()) {
+                  var22 = (Entity)var21.next();
+                  if (var22.getUUID().equals(var20)) {
+                     var2.startRiding(var22, true);
                      break;
                   }
                }
             }
 
             if (!var2.isPassenger()) {
                LOGGER.warn("Couldn't reattach entity to player");
-               var8.despawn(var23);
-               var19 = var23.getIndirectPassengers().iterator();
+               var10.despawn(var26);
+               var21 = var26.getIndirectPassengers().iterator();
 
-               while(var19.hasNext()) {
-                  var20 = (Entity)var19.next();
-                  var8.despawn(var20);
+               while(var21.hasNext()) {
+                  var22 = (Entity)var21.next();
+                  var10.despawn(var22);
                }
             }
          }
       }
 
@@ -240,11 +278,10 @@
       }
 
    }
 
    public void setLevel(ServerLevel var1) {
-      this.playerIo = var1.getLevelStorage();
       var1.getWorldBorder().addListener(new BorderChangeListener() {
          public void onBorderSizeSet(WorldBorder var1, double var2) {
             PlayerList.this.broadcastAll(new ClientboundSetBorderPacket(var1, ClientboundSetBorderPacket.Type.SET_SIZE));
          }
 
@@ -272,11 +309,11 @@
       });
    }
 
    @Nullable
    public CompoundTag load(ServerPlayer var1) {
-      CompoundTag var2 = this.server.getLevel(DimensionType.OVERWORLD).getLevelData().getLoadedPlayerTag();
+      CompoundTag var2 = this.server.getWorldData().getLoadedPlayerTag();
       CompoundTag var3;
       if (var1.getName().getString().equals(this.server.getSingleplayerName()) && var2 != null) {
          var3 = var2;
          var1.load(var2);
          LOGGER.debug("loading single player");
@@ -309,14 +346,15 @@
          Entity var3 = var1.getRootVehicle();
          if (var3.hasOnePlayerPassenger()) {
             LOGGER.debug("Removing player mount");
             var1.stopRiding();
             var2.despawn(var3);
-            Iterator var4 = var3.getIndirectPassengers().iterator();
+            var3.removed = true;
 
-            while(var4.hasNext()) {
-               Entity var5 = (Entity)var4.next();
+            Entity var5;
+            for(Iterator var4 = var3.getIndirectPassengers().iterator(); var4.hasNext(); var5.removed = true) {
+               var5 = (Entity)var4.next();
                var2.despawn(var5);
             }
 
             var2.getChunk(var1.xChunk, var1.zChunk).markUnsaved();
          }
@@ -348,21 +386,21 @@
             var4.append((Component)(new TranslatableComponent("multiplayer.disconnect.banned.expiration", new Object[]{BAN_DATE_FORMAT.format(var5.getExpires())})));
          }
 
          return var4;
       } else if (!this.isWhiteListed(var2)) {
-         return new TranslatableComponent("multiplayer.disconnect.not_whitelisted", new Object[0]);
+         return new TranslatableComponent("multiplayer.disconnect.not_whitelisted");
       } else if (this.ipBans.isBanned(var1)) {
          IpBanListEntry var3 = this.ipBans.get(var1);
          var4 = new TranslatableComponent("multiplayer.disconnect.banned_ip.reason", new Object[]{var3.getReason()});
          if (var3.getExpires() != null) {
             var4.append((Component)(new TranslatableComponent("multiplayer.disconnect.banned_ip.expiration", new Object[]{BAN_DATE_FORMAT.format(var3.getExpires())})));
          }
 
          return var4;
       } else {
-         return this.players.size() >= this.maxPlayers && !this.canBypassPlayerLimit(var2) ? new TranslatableComponent("multiplayer.disconnect.server_full", new Object[0]) : null;
+         return this.players.size() >= this.maxPlayers && !this.canBypassPlayerLimit(var2) ? new TranslatableComponent("multiplayer.disconnect.server_full") : null;
       }
    }
 
    public ServerPlayer getPlayerForLogin(GameProfile var1) {
       UUID var2 = Player.createPlayerUUID(var1);
@@ -382,80 +420,90 @@
 
       Iterator var8 = var3.iterator();
 
       while(var8.hasNext()) {
          ServerPlayer var6 = (ServerPlayer)var8.next();
-         var6.connection.disconnect(new TranslatableComponent("multiplayer.disconnect.duplicate_login", new Object[0]));
+         var6.connection.disconnect(new TranslatableComponent("multiplayer.disconnect.duplicate_login"));
       }
 
+      ServerLevel var10 = this.server.overworld();
       Object var9;
       if (this.server.isDemo()) {
-         var9 = new DemoMode(this.server.getLevel(DimensionType.OVERWORLD));
+         var9 = new DemoMode(var10);
       } else {
-         var9 = new ServerPlayerGameMode(this.server.getLevel(DimensionType.OVERWORLD));
+         var9 = new ServerPlayerGameMode(var10);
       }
 
-      return new ServerPlayer(this.server, this.server.getLevel(DimensionType.OVERWORLD), var1, (ServerPlayerGameMode)var9);
+      return new ServerPlayer(this.server, var10, var1, (ServerPlayerGameMode)var9);
    }
 
-   public ServerPlayer respawn(ServerPlayer var1, DimensionType var2, boolean var3) {
+   public ServerPlayer respawn(ServerPlayer var1, boolean var2) {
       this.players.remove(var1);
       var1.getLevel().removePlayerImmediately(var1);
-      BlockPos var4 = var1.getRespawnPosition();
-      boolean var5 = var1.isRespawnForced();
-      var1.dimension = var2;
-      Object var6;
+      BlockPos var3 = var1.getRespawnPosition();
+      boolean var4 = var1.isRespawnForced();
+      ServerLevel var5 = this.server.getLevel(var1.getRespawnDimension());
+      Optional var6;
+      if (var5 != null && var3 != null) {
+         var6 = Player.findRespawnPositionAndUseSpawnBlock(var5, var3, var4, var2);
+      } else {
+         var6 = Optional.empty();
+      }
+
+      ServerLevel var8 = var5 != null && var6.isPresent() ? var5 : this.server.overworld();
+      Object var7;
       if (this.server.isDemo()) {
-         var6 = new DemoMode(this.server.getLevel(var1.dimension));
+         var7 = new DemoMode(var8);
       } else {
-         var6 = new ServerPlayerGameMode(this.server.getLevel(var1.dimension));
+         var7 = new ServerPlayerGameMode(var8);
       }
 
-      ServerPlayer var7 = new ServerPlayer(this.server, this.server.getLevel(var1.dimension), var1.getGameProfile(), (ServerPlayerGameMode)var6);
-      var7.connection = var1.connection;
-      var7.restoreFrom(var1, var3);
-      var7.setId(var1.getId());
-      var7.setMainArm(var1.getMainArm());
-      Iterator var8 = var1.getTags().iterator();
+      ServerPlayer var9 = new ServerPlayer(this.server, var8, var1.getGameProfile(), (ServerPlayerGameMode)var7);
+      var9.connection = var1.connection;
+      var9.restoreFrom(var1, var2);
+      var9.setId(var1.getId());
+      var9.setMainArm(var1.getMainArm());
+      Iterator var10 = var1.getTags().iterator();
 
-      while(var8.hasNext()) {
-         String var9 = (String)var8.next();
-         var7.addTag(var9);
+      while(var10.hasNext()) {
+         String var11 = (String)var10.next();
+         var9.addTag(var11);
       }
 
-      ServerLevel var12 = this.server.getLevel(var1.dimension);
-      this.updatePlayerGameMode(var7, var1, var12);
-      if (var4 != null) {
-         Optional var13 = Player.checkBedValidRespawnPosition(this.server.getLevel(var1.dimension), var4, var5);
-         if (var13.isPresent()) {
-            Vec3 var10 = (Vec3)var13.get();
-            var7.moveTo(var10.x, var10.y, var10.z, 0.0F, 0.0F);
-            var7.setRespawnPosition(var4, var5, false);
-         } else {
-            var7.connection.send(new ClientboundGameEventPacket(0, 0.0F));
-         }
+      this.updatePlayerGameMode(var9, var1, var8);
+      boolean var12 = false;
+      if (var6.isPresent()) {
+         Vec3 var13 = (Vec3)var6.get();
+         var9.moveTo(var13.x, var13.y, var13.z, 0.0F, 0.0F);
+         var9.setRespawnPosition(var8.dimension(), var3, var4, false);
+         var12 = !var2 && var8.getBlockState(var3).getBlock() instanceof RespawnAnchorBlock;
+      } else if (var3 != null) {
+         var9.connection.send(new ClientboundGameEventPacket(ClientboundGameEventPacket.NO_RESPAWN_BLOCK_AVAILABLE, 0.0F));
       }
 
-      while(!var12.noCollision(var7) && var7.getY() < 256.0D) {
-         var7.setPos(var7.getX(), var7.getY() + 1.0D, var7.getZ());
+      while(!var8.noCollision(var9) && var9.getY() < 256.0D) {
+         var9.setPos(var9.getX(), var9.getY() + 1.0D, var9.getZ());
       }
 
-      LevelData var14 = var7.level.getLevelData();
-      var7.connection.send(new ClientboundRespawnPacket(var7.dimension, LevelData.obfuscateSeed(var14.getSeed()), var14.getGeneratorType(), var7.gameMode.getGameModeForPlayer()));
-      BlockPos var11 = var12.getSharedSpawnPos();
-      var7.connection.teleport(var7.getX(), var7.getY(), var7.getZ(), var7.yRot, var7.xRot);
-      var7.connection.send(new ClientboundSetSpawnPositionPacket(var11));
-      var7.connection.send(new ClientboundChangeDifficultyPacket(var14.getDifficulty(), var14.isDifficultyLocked()));
-      var7.connection.send(new ClientboundSetExperiencePacket(var7.experienceProgress, var7.totalExperience, var7.experienceLevel));
-      this.sendLevelInfo(var7, var12);
-      this.sendPlayerPermissionLevel(var7);
-      var12.addRespawnedPlayer(var7);
-      this.players.add(var7);
-      this.playersByUUID.put(var7.getUUID(), var7);
-      var7.initMenu();
-      var7.setHealth(var7.getHealth());
-      return var7;
+      LevelData var14 = var9.level.getLevelData();
+      var9.connection.send(new ClientboundRespawnPacket(var9.level.dimensionTypeKey(), var9.level.dimension(), BiomeManager.obfuscateSeed(var9.getLevel().getSeed()), var9.gameMode.getGameModeForPlayer(), var9.gameMode.getPreviousGameModeForPlayer(), var9.getLevel().isDebug(), var9.getLevel().isFlat(), var2));
+      var9.connection.teleport(var9.getX(), var9.getY(), var9.getZ(), var9.yRot, var9.xRot);
+      var9.connection.send(new ClientboundSetDefaultSpawnPositionPacket(var8.getSharedSpawnPos()));
+      var9.connection.send(new ClientboundChangeDifficultyPacket(var14.getDifficulty(), var14.isDifficultyLocked()));
+      var9.connection.send(new ClientboundSetExperiencePacket(var9.experienceProgress, var9.totalExperience, var9.experienceLevel));
+      this.sendLevelInfo(var9, var8);
+      this.sendPlayerPermissionLevel(var9);
+      var8.addRespawnedPlayer(var9);
+      this.players.add(var9);
+      this.playersByUUID.put(var9.getUUID(), var9);
+      var9.initMenu();
+      var9.setHealth(var9.getHealth());
+      if (var12) {
+         var9.connection.send(new ClientboundSoundPacket(SoundEvents.RESPAWN_ANCHOR_DEPLETE, SoundSource.BLOCKS, (double)var3.getX(), (double)var3.getY(), (double)var3.getZ(), 1.0F, 1.0F));
+      }
+
+      return var9;
    }
 
    public void sendPlayerPermissionLevel(ServerPlayer var1) {
       GameProfile var2 = var1.getGameProfile();
       int var3 = this.server.getProfilePermissions(var2);
@@ -475,14 +523,14 @@
          ((ServerPlayer)this.players.get(var2)).connection.send(var1);
       }
 
    }
 
-   public void broadcastAll(Packet<?> var1, DimensionType var2) {
+   public void broadcastAll(Packet<?> var1, ResourceKey<Level> var2) {
       for(int var3 = 0; var3 < this.players.size(); ++var3) {
          ServerPlayer var4 = (ServerPlayer)this.players.get(var3);
-         if (var4.dimension == var2) {
+         if (var4.level.dimension() == var2) {
             var4.connection.send(var1);
          }
       }
 
    }
@@ -495,26 +543,26 @@
 
          while(var5.hasNext()) {
             String var6 = (String)var5.next();
             ServerPlayer var7 = this.getPlayerByName(var6);
             if (var7 != null && var7 != var1) {
-               var7.sendMessage(var2);
+               var7.sendMessage(var2, var1.getUUID());
             }
          }
 
       }
    }
 
    public void broadcastToAllExceptTeam(Player var1, Component var2) {
       Team var3 = var1.getTeam();
       if (var3 == null) {
-         this.broadcastMessage(var2);
+         this.broadcastMessage(var2, ChatType.SYSTEM, var1.getUUID());
       } else {
          for(int var4 = 0; var4 < this.players.size(); ++var4) {
             ServerPlayer var5 = (ServerPlayer)this.players.get(var4);
             if (var5.getTeam() != var3) {
-               var5.sendMessage(var2);
+               var5.sendMessage(var2, var1.getUUID());
             }
          }
 
       }
    }
@@ -575,11 +623,11 @@
    public boolean isWhiteListed(GameProfile var1) {
       return !this.doWhiteList || this.ops.contains(var1) || this.whitelist.contains(var1);
    }
 
    public boolean isOp(GameProfile var1) {
-      return this.ops.contains(var1) || this.server.isSingleplayerOwner(var1) && this.server.getLevel(DimensionType.OVERWORLD).getLevelData().getAllowCommands() || this.allowCheatsForAllPlayers;
+      return this.ops.contains(var1) || this.server.isSingleplayerOwner(var1) && this.server.getWorldData().getAllowCommands() || this.allowCheatsForAllPlayers;
    }
 
    @Nullable
    public ServerPlayer getPlayerByName(String var1) {
       Iterator var2 = this.players.iterator();
@@ -594,14 +642,14 @@
       } while(!var3.getGameProfile().getName().equalsIgnoreCase(var1));
 
       return var3;
    }
 
-   public void broadcast(@Nullable Player var1, double var2, double var4, double var6, double var8, DimensionType var10, Packet<?> var11) {
+   public void broadcast(@Nullable Player var1, double var2, double var4, double var6, double var8, ResourceKey<Level> var10, Packet<?> var11) {
       for(int var12 = 0; var12 < this.players.size(); ++var12) {
          ServerPlayer var13 = (ServerPlayer)this.players.get(var12);
-         if (var13 != var1 && var13.dimension == var10) {
+         if (var13 != var1 && var13.level.dimension() == var10) {
             double var14 = var2 - var13.getX();
             double var16 = var4 - var13.getY();
             double var18 = var6 - var13.getZ();
             if (var14 * var14 + var16 * var16 + var18 * var18 < var8 * var8) {
                var13.connection.send(var11);
@@ -636,19 +684,18 @@
 
    public void reloadWhiteList() {
    }
 
    public void sendLevelInfo(ServerPlayer var1, ServerLevel var2) {
-      WorldBorder var3 = this.server.getLevel(DimensionType.OVERWORLD).getWorldBorder();
+      WorldBorder var3 = this.server.overworld().getWorldBorder();
       var1.connection.send(new ClientboundSetBorderPacket(var3, ClientboundSetBorderPacket.Type.INITIALIZE));
       var1.connection.send(new ClientboundSetTimePacket(var2.getGameTime(), var2.getDayTime(), var2.getGameRules().getBoolean(GameRules.RULE_DAYLIGHT)));
-      BlockPos var4 = var2.getSharedSpawnPos();
-      var1.connection.send(new ClientboundSetSpawnPositionPacket(var4));
+      var1.connection.send(new ClientboundSetDefaultSpawnPositionPacket(var2.getSharedSpawnPos()));
       if (var2.isRaining()) {
-         var1.connection.send(new ClientboundGameEventPacket(1, 0.0F));
-         var1.connection.send(new ClientboundGameEventPacket(7, var2.getRainLevel(1.0F)));
-         var1.connection.send(new ClientboundGameEventPacket(8, var2.getThunderLevel(1.0F)));
+         var1.connection.send(new ClientboundGameEventPacket(ClientboundGameEventPacket.START_RAINING, 0.0F));
+         var1.connection.send(new ClientboundGameEventPacket(ClientboundGameEventPacket.RAIN_LEVEL_CHANGE, var2.getRainLevel(1.0F)));
+         var1.connection.send(new ClientboundGameEventPacket(ClientboundGameEventPacket.THUNDER_LEVEL_CHANGE, var2.getThunderLevel(1.0F)));
       }
 
    }
 
    public void sendAllPlayerInfo(ServerPlayer var1) {
@@ -701,46 +748,41 @@
 
    public void setOverrideGameMode(GameType var1) {
       this.overrideGameMode = var1;
    }
 
-   private void updatePlayerGameMode(ServerPlayer var1, ServerPlayer var2, LevelAccessor var3) {
+   private void updatePlayerGameMode(ServerPlayer var1, @Nullable ServerPlayer var2, ServerLevel var3) {
       if (var2 != null) {
-         var1.gameMode.setGameModeForPlayer(var2.gameMode.getGameModeForPlayer());
+         var1.gameMode.setGameModeForPlayer(var2.gameMode.getGameModeForPlayer(), var2.gameMode.getPreviousGameModeForPlayer());
       } else if (this.overrideGameMode != null) {
-         var1.gameMode.setGameModeForPlayer(this.overrideGameMode);
+         var1.gameMode.setGameModeForPlayer(this.overrideGameMode, GameType.NOT_SET);
       }
 
-      var1.gameMode.updateGameMode(var3.getLevelData().getGameType());
+      var1.gameMode.updateGameMode(var3.getServer().getWorldData().getGameType());
    }
 
    public void setAllowCheatsForAllPlayers(boolean var1) {
       this.allowCheatsForAllPlayers = var1;
    }
 
    public void removeAll() {
       for(int var1 = 0; var1 < this.players.size(); ++var1) {
-         ((ServerPlayer)this.players.get(var1)).connection.disconnect(new TranslatableComponent("multiplayer.disconnect.server_shutdown", new Object[0]));
+         ((ServerPlayer)this.players.get(var1)).connection.disconnect(new TranslatableComponent("multiplayer.disconnect.server_shutdown"));
       }
 
    }
 
-   public void broadcastMessage(Component var1, boolean var2) {
-      this.server.sendMessage(var1);
-      ChatType var3 = var2 ? ChatType.SYSTEM : ChatType.CHAT;
-      this.broadcastAll(new ClientboundChatPacket(var1, var3));
+   public void broadcastMessage(Component var1, ChatType var2, UUID var3) {
+      this.server.sendMessage(var1, var3);
+      this.broadcastAll(new ClientboundChatPacket(var1, var2, var3));
    }
 
-   public void broadcastMessage(Component var1) {
-      this.broadcastMessage(var1, true);
-   }
-
    public ServerStatsCounter getPlayerStats(Player var1) {
       UUID var2 = var1.getUUID();
       ServerStatsCounter var3 = var2 == null ? null : (ServerStatsCounter)this.stats.get(var2);
       if (var3 == null) {
-         File var4 = new File(this.server.getLevel(DimensionType.OVERWORLD).getLevelStorage().getFolder(), "stats");
+         File var4 = this.server.getWorldPath(LevelResource.PLAYER_STATS_DIR).toFile();
          File var5 = new File(var4, var2 + ".json");
          if (!var5.exists()) {
             File var6 = new File(var4, var1.getName().getString() + ".json");
             if (var6.exists() && var6.isFile()) {
                var6.renameTo(var5);
@@ -756,13 +798,13 @@
 
    public PlayerAdvancements getPlayerAdvancements(ServerPlayer var1) {
       UUID var2 = var1.getUUID();
       PlayerAdvancements var3 = (PlayerAdvancements)this.advancements.get(var2);
       if (var3 == null) {
-         File var4 = new File(this.server.getLevel(DimensionType.OVERWORLD).getLevelStorage().getFolder(), "advancements");
+         File var4 = this.server.getWorldPath(LevelResource.PLAYER_ADVANCEMENTS_DIR).toFile();
          File var5 = new File(var4, var2 + ".json");
-         var3 = new PlayerAdvancements(this.server, var5, var1);
+         var3 = new PlayerAdvancements(this.server.getFixerUpper(), this, this.server.getAdvancements(), var5, var1);
          this.advancements.put(var2, var3);
       }
 
       var3.setPlayer(var1);
       return var3;
@@ -798,11 +840,11 @@
    public void reloadResources() {
       Iterator var1 = this.advancements.values().iterator();
 
       while(var1.hasNext()) {
          PlayerAdvancements var2 = (PlayerAdvancements)var1.next();
-         var2.reload();
+         var2.reload(this.server.getAdvancements());
       }
 
       this.broadcastAll(new ClientboundUpdateTagsPacket(this.server.getTags()));
       ClientboundUpdateRecipesPacket var4 = new ClientboundUpdateRecipesPacket(this.server.getRecipeManager().getRecipes());
       Iterator var5 = this.players.iterator();
