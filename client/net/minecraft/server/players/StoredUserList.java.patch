--- net/minecraft/server/players/StoredUserList.java
+++ net/minecraft/server/players/StoredUserList.java
@@ -3,72 +3,38 @@
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.google.common.io.Files;
 import com.google.gson.Gson;
 import com.google.gson.GsonBuilder;
-import com.google.gson.JsonDeserializationContext;
-import com.google.gson.JsonDeserializer;
+import com.google.gson.JsonArray;
 import com.google.gson.JsonElement;
 import com.google.gson.JsonObject;
-import com.google.gson.JsonParseException;
-import com.google.gson.JsonSerializationContext;
-import com.google.gson.JsonSerializer;
 import java.io.BufferedReader;
 import java.io.BufferedWriter;
 import java.io.File;
-import java.io.FileNotFoundException;
 import java.io.IOException;
-import java.io.Reader;
-import java.lang.reflect.ParameterizedType;
-import java.lang.reflect.Type;
 import java.nio.charset.StandardCharsets;
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Iterator;
-import java.util.List;
 import java.util.Map;
 import javax.annotation.Nullable;
+import net.minecraft.Util;
 import net.minecraft.util.GsonHelper;
-import org.apache.commons.io.IOUtils;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
-public class StoredUserList<K, V extends StoredUserEntry<K>> {
+public abstract class StoredUserList<K, V extends StoredUserEntry<K>> {
    protected static final Logger LOGGER = LogManager.getLogger();
-   protected final Gson gson;
+   private static final Gson GSON = (new GsonBuilder()).setPrettyPrinting().create();
    private final File file;
    private final Map<String, V> map = Maps.newHashMap();
-   private boolean enabled = true;
-   private static final ParameterizedType USERLIST_ENTRY_TYPE = new ParameterizedType() {
-      public Type[] getActualTypeArguments() {
-         return new Type[]{StoredUserEntry.class};
-      }
 
-      public Type getRawType() {
-         return List.class;
-      }
-
-      public Type getOwnerType() {
-         return null;
-      }
-   };
-
    public StoredUserList(File var1) {
       this.file = var1;
-      GsonBuilder var2 = (new GsonBuilder()).setPrettyPrinting();
-      var2.registerTypeHierarchyAdapter(StoredUserEntry.class, new StoredUserList.Serializer());
-      this.gson = var2.create();
    }
 
-   public boolean isEnabled() {
-      return this.enabled;
-   }
-
-   public void setEnabled(boolean var1) {
-      this.enabled = var1;
-   }
-
    public File getFile() {
       return this.file;
    }
 
    public void add(V var1) {
@@ -137,72 +103,82 @@
          this.map.remove(this.getKeyForUser(var4));
       }
 
    }
 
-   protected StoredUserEntry<K> createEntry(JsonObject var1) {
-      return new StoredUserEntry((Object)null, var1);
-   }
+   protected abstract StoredUserEntry<K> createEntry(JsonObject var1);
 
    public Collection<V> getEntries() {
       return this.map.values();
    }
 
    public void save() throws IOException {
-      Collection var1 = this.map.values();
-      String var2 = this.gson.toJson(var1);
-      BufferedWriter var3 = null;
+      JsonArray var1 = new JsonArray();
+      this.map.values().stream().map((var0) -> {
+         JsonObject var10000 = new JsonObject();
+         var0.getClass();
+         return (JsonObject)Util.make(var10000, var0::serialize);
+      }).forEach(var1::add);
+      BufferedWriter var2 = Files.newWriter(this.file, StandardCharsets.UTF_8);
+      Throwable var3 = null;
 
       try {
-         var3 = Files.newWriter(this.file, StandardCharsets.UTF_8);
-         var3.write(var2);
+         GSON.toJson(var1, var2);
+      } catch (Throwable var12) {
+         var3 = var12;
+         throw var12;
       } finally {
-         IOUtils.closeQuietly(var3);
+         if (var2 != null) {
+            if (var3 != null) {
+               try {
+                  var2.close();
+               } catch (Throwable var11) {
+                  var3.addSuppressed(var11);
+               }
+            } else {
+               var2.close();
+            }
+         }
+
       }
 
    }
 
-   public void load() throws FileNotFoundException {
+   public void load() throws IOException {
       if (this.file.exists()) {
-         BufferedReader var1 = null;
+         BufferedReader var1 = Files.newReader(this.file, StandardCharsets.UTF_8);
+         Throwable var2 = null;
 
          try {
-            var1 = Files.newReader(this.file, StandardCharsets.UTF_8);
-            Collection var2 = (Collection)GsonHelper.fromJson(this.gson, (Reader)var1, (Type)USERLIST_ENTRY_TYPE);
-            if (var2 != null) {
-               this.map.clear();
-               Iterator var3 = var2.iterator();
+            JsonArray var3 = (JsonArray)GSON.fromJson(var1, JsonArray.class);
+            this.map.clear();
+            Iterator var4 = var3.iterator();
 
-               while(var3.hasNext()) {
-                  StoredUserEntry var4 = (StoredUserEntry)var3.next();
-                  if (var4.getUser() != null) {
-                     this.map.put(this.getKeyForUser(var4.getUser()), var4);
-                  }
+            while(var4.hasNext()) {
+               JsonElement var5 = (JsonElement)var4.next();
+               JsonObject var6 = GsonHelper.convertToJsonObject(var5, "entry");
+               StoredUserEntry var7 = this.createEntry(var6);
+               if (var7.getUser() != null) {
+                  this.map.put(this.getKeyForUser(var7.getUser()), var7);
                }
             }
+         } catch (Throwable var15) {
+            var2 = var15;
+            throw var15;
          } finally {
-            IOUtils.closeQuietly(var1);
+            if (var1 != null) {
+               if (var2 != null) {
+                  try {
+                     var1.close();
+                  } catch (Throwable var14) {
+                     var2.addSuppressed(var14);
+                  }
+               } else {
+                  var1.close();
+               }
+            }
+
          }
 
       }
    }
-
-   class Serializer implements JsonDeserializer<StoredUserEntry<K>>, JsonSerializer<StoredUserEntry<K>> {
-      private Serializer() {
-      }
-
-      public JsonElement serialize(StoredUserEntry<K> var1, Type var2, JsonSerializationContext var3) {
-         JsonObject var4 = new JsonObject();
-         var1.serialize(var4);
-         return var4;
-      }
-
-      public StoredUserEntry<K> deserialize(JsonElement var1, Type var2, JsonDeserializationContext var3) throws JsonParseException {
-         if (var1.isJsonObject()) {
-            JsonObject var4 = var1.getAsJsonObject();
-            return StoredUserList.this.createEntry(var4);
-         } else {
-            return null;
-         }
-      }
-   }
 }
