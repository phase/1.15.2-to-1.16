--- net/minecraft/server/network/ServerConnectionListener.java
+++ net/minecraft/server/network/ServerConnectionListener.java
@@ -4,10 +4,11 @@
 import com.google.common.util.concurrent.ThreadFactoryBuilder;
 import io.netty.bootstrap.ServerBootstrap;
 import io.netty.channel.Channel;
 import io.netty.channel.ChannelException;
 import io.netty.channel.ChannelFuture;
+import io.netty.channel.ChannelHandler;
 import io.netty.channel.ChannelInitializer;
 import io.netty.channel.ChannelOption;
 import io.netty.channel.EventLoopGroup;
 import io.netty.channel.epoll.Epoll;
 import io.netty.channel.epoll.EpollEventLoopGroup;
@@ -23,15 +24,15 @@
 import java.util.Collections;
 import java.util.Iterator;
 import java.util.List;
 import javax.annotation.Nullable;
 import net.minecraft.CrashReport;
-import net.minecraft.CrashReportCategory;
 import net.minecraft.ReportedException;
 import net.minecraft.network.Connection;
 import net.minecraft.network.PacketDecoder;
 import net.minecraft.network.PacketEncoder;
+import net.minecraft.network.RateKickingConnection;
 import net.minecraft.network.Varint21FrameDecoder;
 import net.minecraft.network.Varint21LengthFieldPrepender;
 import net.minecraft.network.chat.TextComponent;
 import net.minecraft.network.protocol.PacketFlow;
 import net.minecraft.network.protocol.game.ClientboundDisconnectPacket;
@@ -74,18 +75,19 @@
 
          this.channels.add(((ServerBootstrap)((ServerBootstrap)(new ServerBootstrap()).channel(var4)).childHandler(new ChannelInitializer<Channel>() {
             protected void initChannel(Channel var1) throws Exception {
                try {
                   var1.config().setOption(ChannelOption.TCP_NODELAY, true);
-               } catch (ChannelException var3) {
+               } catch (ChannelException var4) {
                }
 
                var1.pipeline().addLast("timeout", new ReadTimeoutHandler(30)).addLast("legacy_query", new LegacyQueryHandler(ServerConnectionListener.this)).addLast("splitter", new Varint21FrameDecoder()).addLast("decoder", new PacketDecoder(PacketFlow.SERVERBOUND)).addLast("prepender", new Varint21LengthFieldPrepender()).addLast("encoder", new PacketEncoder(PacketFlow.CLIENTBOUND));
-               Connection var2 = new Connection(PacketFlow.SERVERBOUND);
-               ServerConnectionListener.this.connections.add(var2);
-               var1.pipeline().addLast("packet_handler", var2);
-               var2.setListener(new ServerHandshakePacketListenerImpl(ServerConnectionListener.this.server, var2));
+               int var2 = ServerConnectionListener.this.server.getRateLimitPacketsPerSecond();
+               Object var3 = var2 > 0 ? new RateKickingConnection(var2) : new Connection(PacketFlow.SERVERBOUND);
+               ServerConnectionListener.this.connections.add(var3);
+               var1.pipeline().addLast("packet_handler", (ChannelHandler)var3);
+               ((Connection)var3).setListener(new ServerHandshakePacketListenerImpl(ServerConnectionListener.this.server, (Connection)var3));
             }
          }).group((EventLoopGroup)var5.get()).localAddress(var1, var2)).bind().syncUninterruptibly());
       }
    }
 
@@ -138,19 +140,16 @@
                } while(var3.isConnecting());
 
                if (var3.isConnected()) {
                   try {
                      var3.tick();
-                  } catch (Exception var8) {
+                  } catch (Exception var7) {
                      if (var3.isMemoryConnection()) {
-                        CrashReport var10 = CrashReport.forThrowable(var8, "Ticking memory connection");
-                        CrashReportCategory var6 = var10.addCategory("Ticking connection");
-                        var6.setDetail("Connection", var3::toString);
-                        throw new ReportedException(var10);
+                        throw new ReportedException(CrashReport.forThrowable(var7, "Ticking memory connection"));
                      }
 
-                     LOGGER.warn("Failed to handle packet for {}", var3.getRemoteAddress(), var8);
+                     LOGGER.warn("Failed to handle packet for {}", var3.getRemoteAddress(), var7);
                      TextComponent var5 = new TextComponent("Internal server error");
                      var3.send(new ClientboundDisconnectPacket(var5), (var2x) -> {
                         var3.disconnect(var5);
                      });
                      var3.setReadOnly();
