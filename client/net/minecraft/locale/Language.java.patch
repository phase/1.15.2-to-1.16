--- net/minecraft/locale/Language.java
+++ net/minecraft/locale/Language.java
@@ -1,94 +1,108 @@
 package net.minecraft.locale;
 
-import com.google.common.collect.Maps;
+import com.google.common.collect.ImmutableMap;
+import com.google.common.collect.ImmutableMap.Builder;
 import com.google.gson.Gson;
 import com.google.gson.JsonElement;
 import com.google.gson.JsonObject;
 import com.google.gson.JsonParseException;
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.InputStreamReader;
 import java.nio.charset.StandardCharsets;
 import java.util.Iterator;
-import java.util.Map;
 import java.util.Map.Entry;
+import java.util.function.BiConsumer;
 import java.util.regex.Pattern;
-import net.minecraft.Util;
 import net.minecraft.util.GsonHelper;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
-public class Language {
+public abstract class Language {
    private static final Logger LOGGER = LogManager.getLogger();
-   private static final Pattern UNSUPPORTED_FORMAT_PATTERN = Pattern.compile("%(\\d+\\$)?[\\d\\.]*[df]");
-   private static final Language SINGLETON = new Language();
-   private final Map<String, String> storage = Maps.newHashMap();
-   private long lastUpdateTime;
+   private static final Gson GSON = new Gson();
+   private static final Pattern UNSUPPORTED_FORMAT_PATTERN = Pattern.compile("%(\\d+\\$)?[\\d.]*[df]");
+   private static volatile Language instance = loadDefault();
 
    public Language() {
-      try {
-         InputStream var1 = Language.class.getResourceAsStream("/assets/minecraft/lang/en_us.json");
-         Throwable var2 = null;
+   }
 
-         try {
-            JsonElement var3 = (JsonElement)(new Gson()).fromJson(new InputStreamReader(var1, StandardCharsets.UTF_8), JsonElement.class);
-            JsonObject var4 = GsonHelper.convertToJsonObject(var3, "strings");
-            Iterator var5 = var4.entrySet().iterator();
+   private static Language loadDefault() {
+      Builder var0 = ImmutableMap.builder();
+      BiConsumer var1 = var0::put;
 
-            while(var5.hasNext()) {
-               Entry var6 = (Entry)var5.next();
-               String var7 = UNSUPPORTED_FORMAT_PATTERN.matcher(GsonHelper.convertToString((JsonElement)var6.getValue(), (String)var6.getKey())).replaceAll("%$1s");
-               this.storage.put(var6.getKey(), var7);
-            }
+      try {
+         InputStream var2 = Language.class.getResourceAsStream("/assets/minecraft/lang/en_us.json");
+         Throwable var3 = null;
 
-            this.lastUpdateTime = Util.getMillis();
-         } catch (Throwable var16) {
-            var2 = var16;
-            throw var16;
+         try {
+            loadFromJson(var2, var1);
+         } catch (Throwable var13) {
+            var3 = var13;
+            throw var13;
          } finally {
-            if (var1 != null) {
-               if (var2 != null) {
+            if (var2 != null) {
+               if (var3 != null) {
                   try {
-                     var1.close();
-                  } catch (Throwable var15) {
-                     var2.addSuppressed(var15);
+                     var2.close();
+                  } catch (Throwable var12) {
+                     var3.addSuppressed(var12);
                   }
                } else {
-                  var1.close();
+                  var2.close();
                }
             }
 
          }
-      } catch (JsonParseException | IOException var18) {
-         LOGGER.error("Couldn't read strings from /assets/minecraft/lang/en_us.json", var18);
+      } catch (JsonParseException | IOException var15) {
+         LOGGER.error("Couldn't read strings from /assets/minecraft/lang/en_us.json", var15);
       }
 
-   }
+      final ImmutableMap var16 = var0.build();
+      return new Language() {
+         public String getOrDefault(String var1) {
+            return (String)var16.getOrDefault(var1, var1);
+         }
 
-   public static Language getInstance() {
-      return SINGLETON;
-   }
+         public boolean has(String var1) {
+            return var16.containsKey(var1);
+         }
 
-   public static synchronized void forceData(Map<String, String> var0) {
-      SINGLETON.storage.clear();
-      SINGLETON.storage.putAll(var0);
-      SINGLETON.lastUpdateTime = Util.getMillis();
-   }
+         public boolean requiresReordering() {
+            return false;
+         }
 
-   public synchronized String getElement(String var1) {
-      return this.getProperty(var1);
+         public String reorder(String var1, boolean var2) {
+            return var1;
+         }
+      };
    }
 
-   private String getProperty(String var1) {
-      String var2 = (String)this.storage.get(var1);
-      return var2 == null ? var1 : var2;
+   public static void loadFromJson(InputStream var0, BiConsumer<String, String> var1) {
+      JsonObject var2 = (JsonObject)GSON.fromJson(new InputStreamReader(var0, StandardCharsets.UTF_8), JsonObject.class);
+      Iterator var3 = var2.entrySet().iterator();
+
+      while(var3.hasNext()) {
+         Entry var4 = (Entry)var3.next();
+         String var5 = UNSUPPORTED_FORMAT_PATTERN.matcher(GsonHelper.convertToString((JsonElement)var4.getValue(), (String)var4.getKey())).replaceAll("%$1s");
+         var1.accept(var4.getKey(), var5);
+      }
+
    }
 
-   public synchronized boolean exists(String var1) {
-      return this.storage.containsKey(var1);
+   public static Language getInstance() {
+      return instance;
    }
 
-   public long getLastUpdateTime() {
-      return this.lastUpdateTime;
+   public static void inject(Language var0) {
+      instance = var0;
    }
+
+   public abstract String getOrDefault(String var1);
+
+   public abstract boolean has(String var1);
+
+   public abstract boolean requiresReordering();
+
+   public abstract String reorder(String var1, boolean var2);
 }
