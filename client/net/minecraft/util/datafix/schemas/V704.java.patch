--- net/minecraft/util/datafix/schemas/V704.java
+++ net/minecraft/util/datafix/schemas/V704.java
@@ -1,17 +1,17 @@
 package net.minecraft.util.datafix.schemas;
 
 import com.google.common.collect.Maps;
 import com.mojang.datafixers.DSL;
 import com.mojang.datafixers.DataFixUtils;
-import com.mojang.datafixers.Dynamic;
 import com.mojang.datafixers.DSL.TypeReference;
 import com.mojang.datafixers.schemas.Schema;
-import com.mojang.datafixers.types.DynamicOps;
 import com.mojang.datafixers.types.Type;
 import com.mojang.datafixers.types.templates.TypeTemplate;
 import com.mojang.datafixers.types.templates.Hook.HookFunction;
+import com.mojang.serialization.Dynamic;
+import com.mojang.serialization.DynamicOps;
 import java.util.HashMap;
 import java.util.Map;
 import java.util.Objects;
 import java.util.function.Supplier;
 import net.minecraft.util.datafix.fixes.References;
@@ -145,11 +145,11 @@
    }
 
    public void registerTypes(Schema var1, Map<String, Supplier<TypeTemplate>> var2, Map<String, Supplier<TypeTemplate>> var3) {
       super.registerTypes(var1, var2, var3);
       var1.registerType(false, References.BLOCK_ENTITY, () -> {
-         return DSL.taggedChoiceLazy("id", DSL.namespacedString(), var3);
+         return DSL.taggedChoiceLazy("id", NamespacedSchema.namespacedString(), var3);
       });
       var1.registerType(true, References.ITEM_STACK, () -> {
          return DSL.hook(DSL.optionalFields("id", References.ITEM_NAME.in(var1), "tag", DSL.optionalFields("EntityTag", References.ENTITY_TREE.in(var1), "BlockEntityTag", References.BLOCK_ENTITY.in(var1), "CanDestroy", DSL.list(References.BLOCK_NAME.in(var1)), "CanPlaceOn", DSL.list(References.BLOCK_NAME.in(var1)))), ADD_NAMES, HookFunction.IDENTITY);
       });
    }
