--- net/minecraft/util/datafix/fixes/StatsCounterFix.java
+++ net/minecraft/util/datafix/fixes/StatsCounterFix.java
@@ -3,15 +3,16 @@
 import com.google.common.collect.ImmutableMap;
 import com.google.common.collect.ImmutableSet;
 import com.google.common.collect.Maps;
 import com.mojang.datafixers.DSL;
 import com.mojang.datafixers.DataFix;
-import com.mojang.datafixers.Dynamic;
 import com.mojang.datafixers.TypeRewriteRule;
 import com.mojang.datafixers.Typed;
 import com.mojang.datafixers.schemas.Schema;
 import com.mojang.datafixers.types.Type;
+import com.mojang.datafixers.util.Pair;
+import com.mojang.serialization.Dynamic;
 import java.util.HashMap;
 import java.util.Iterator;
 import java.util.Map;
 import java.util.Optional;
 import java.util.Set;
@@ -33,11 +34,11 @@
    public TypeRewriteRule makeRule() {
       Type var1 = this.getOutputSchema().getType(References.STATS);
       return this.fixTypeEverywhereTyped("StatsCounterFix", this.getInputSchema().getType(References.STATS), var1, (var2) -> {
          Dynamic var3 = (Dynamic)var2.get(DSL.remainderFinder());
          HashMap var4 = Maps.newHashMap();
-         Optional var5 = var3.getMapValues();
+         Optional var5 = var3.getMapValues().result();
          if (var5.isPresent()) {
             Iterator var6 = ((Map)var5.get()).entrySet().iterator();
 
             while(true) {
                Entry var7;
@@ -46,17 +47,17 @@
                while(true) {
                   String var8;
                   do {
                      do {
                         if (!var6.hasNext()) {
-                           return (Typed)((Optional)var1.readTyped(var3.emptyMap().set("stats", var3.createMap(var4))).getSecond()).orElseThrow(() -> {
+                           return (Typed)((Pair)var1.readTyped(var3.emptyMap().set("stats", var3.createMap(var4))).result().orElseThrow(() -> {
                               return new IllegalStateException("Could not parse new stats object.");
-                           });
+                           })).getFirst();
                         }
 
                         var7 = (Entry)var6.next();
-                     } while(!((Dynamic)var7.getValue()).asNumber().isPresent());
+                     } while(!((Dynamic)var7.getValue()).asNumber().result().isPresent());
 
                      var8 = ((Dynamic)var7.getKey()).asString("");
                   } while(SKIP.contains(var8));
 
                   if (CUSTOM_MAP.containsKey(var8)) {
@@ -97,13 +98,13 @@
                   return var3.emptyMap();
                });
                var4.put(var15, var16.set(var10, (Dynamic)var7.getValue()));
             }
          } else {
-            return (Typed)((Optional)var1.readTyped(var3.emptyMap().set("stats", var3.createMap(var4))).getSecond()).orElseThrow(() -> {
+            return (Typed)((Pair)var1.readTyped(var3.emptyMap().set("stats", var3.createMap(var4))).result().orElseThrow(() -> {
                return new IllegalStateException("Could not parse new stats object.");
-            });
+            })).getFirst();
          }
       });
    }
 
    @Nullable
