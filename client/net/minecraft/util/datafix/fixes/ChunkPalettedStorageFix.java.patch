--- net/minecraft/util/datafix/fixes/ChunkPalettedStorageFix.java
+++ net/minecraft/util/datafix/fixes/ChunkPalettedStorageFix.java
@@ -1,33 +1,36 @@
 package net.minecraft.util.datafix.fixes;
 
+import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.google.common.collect.Sets;
 import com.mojang.datafixers.DataFix;
 import com.mojang.datafixers.DataFixUtils;
-import com.mojang.datafixers.Dynamic;
 import com.mojang.datafixers.TypeRewriteRule;
 import com.mojang.datafixers.schemas.Schema;
 import com.mojang.datafixers.types.Type;
+import com.mojang.serialization.Dynamic;
 import it.unimi.dsi.fastutil.ints.Int2ObjectLinkedOpenHashMap;
 import it.unimi.dsi.fastutil.ints.Int2ObjectMap;
 import it.unimi.dsi.fastutil.ints.Int2ObjectOpenHashMap;
 import it.unimi.dsi.fastutil.ints.IntArrayList;
 import it.unimi.dsi.fastutil.ints.IntList;
 import it.unimi.dsi.fastutil.ints.IntListIterator;
 import it.unimi.dsi.fastutil.ints.Int2ObjectMap.Entry;
 import it.unimi.dsi.fastutil.objects.ObjectIterator;
 import java.nio.ByteBuffer;
+import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.BitSet;
+import java.util.List;
 import java.util.Map;
 import java.util.Objects;
 import java.util.Optional;
 import java.util.Set;
 import javax.annotation.Nullable;
-import net.minecraft.util.BitStorage;
 import net.minecraft.util.CrudeIncrementalIntIdentityHashBiMap;
+import net.minecraft.util.datafix.PackedBitStorage;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
 public class ChunkPalettedStorageFix extends DataFix {
    private static final Logger LOGGER = LogManager.getLogger();
@@ -258,12 +261,12 @@
 
       return var2;
    }
 
    private Dynamic<?> fix(Dynamic<?> var1) {
-      Optional var2 = var1.get("Level").get();
-      return var2.isPresent() && ((Dynamic)var2.get()).get("Sections").asStreamOpt().isPresent() ? var1.set("Level", (new ChunkPalettedStorageFix.UpgradeChunk((Dynamic)var2.get())).write()) : var1;
+      Optional var2 = var1.get("Level").result();
+      return var2.isPresent() && ((Dynamic)var2.get()).get("Sections").asStreamOpt().result().isPresent() ? var1.set("Level", (new ChunkPalettedStorageFix.UpgradeChunk((Dynamic)var2.get())).write()) : var1;
    }
 
    public TypeRewriteRule makeRule() {
       Type var1 = this.getInputSchema().getType(References.CHUNK);
       Type var2 = this.getOutputSchema().getType(References.CHUNK);
@@ -448,11 +451,11 @@
 
       public UpgradeChunk(Dynamic<?> var1) {
          this.level = var1;
          this.x = var1.get("xPos").asInt(0) << 4;
          this.z = var1.get("zPos").asInt(0) << 4;
-         var1.get("TileEntities").asStreamOpt().ifPresent((var1x) -> {
+         var1.get("TileEntities").asStreamOpt().result().ifPresent((var1x) -> {
             var1x.forEach((var1) -> {
                int var2 = var1.get("x").asInt(0) - this.x & 15;
                int var3 = var1.get("y").asInt(0);
                int var4 = var1.get("z").asInt(0) - this.z & 15;
                int var5 = var3 << 8 | var4 << 4 | var2;
@@ -461,11 +464,11 @@
                }
 
             });
          });
          boolean var2 = var1.get("convertedFromAlphaFormat").asBoolean(false);
-         var1.get("Sections").asStreamOpt().ifPresent((var1x) -> {
+         var1.get("Sections").asStreamOpt().result().ifPresent((var1x) -> {
             var1x.forEach((var1) -> {
                ChunkPalettedStorageFix.Section var2 = new ChunkPalettedStorageFix.Section(var1);
                this.sides = var2.upgrade(this.sides);
                this.sections[var2.y] = var2;
             });
@@ -805,45 +808,44 @@
          } else {
             var1 = var1.set("TileEntities", var1.createList(this.blockEntities.values().stream()));
          }
 
          Dynamic var2 = var1.emptyMap();
-         Dynamic var3 = var1.emptyList();
+         ArrayList var3 = Lists.newArrayList();
          ChunkPalettedStorageFix.Section[] var4 = this.sections;
          int var5 = var4.length;
 
          for(int var6 = 0; var6 < var5; ++var6) {
             ChunkPalettedStorageFix.Section var7 = var4[var6];
             if (var7 != null) {
-               var3 = var3.merge(var7.write());
+               var3.add(var7.write());
                var2 = var2.set(String.valueOf(var7.y), var2.createIntList(Arrays.stream(var7.update.toIntArray())));
             }
          }
 
          Dynamic var8 = var1.emptyMap();
          var8 = var8.set("Sides", var8.createByte((byte)this.sides));
          var8 = var8.set("Indices", var2);
-         return var1.set("UpgradeData", var8).set("Sections", var3);
+         return var1.set("UpgradeData", var8).set("Sections", var8.createList(var3.stream()));
       }
    }
 
    static class Section {
       private final CrudeIncrementalIntIdentityHashBiMap<Dynamic<?>> palette = new CrudeIncrementalIntIdentityHashBiMap(32);
-      private Dynamic<?> listTag;
+      private final List<Dynamic<?>> listTag = Lists.newArrayList();
       private final Dynamic<?> section;
       private final boolean hasData;
       private final Int2ObjectMap<IntList> toFix = new Int2ObjectLinkedOpenHashMap();
       private final IntList update = new IntArrayList();
       public final int y;
       private final Set<Dynamic<?>> seen = Sets.newIdentityHashSet();
       private final int[] buffer = new int[4096];
 
       public Section(Dynamic<?> var1) {
-         this.listTag = var1.emptyList();
          this.section = var1;
          this.y = var1.get("Y").asInt(0);
-         this.hasData = var1.get("Blocks").get().isPresent();
+         this.hasData = var1.get("Blocks").result().isPresent();
       }
 
       public Dynamic<?> getBlock(int var1) {
          if (var1 >= 0 && var1 <= 4095) {
             Dynamic var2 = (Dynamic)this.palette.byId(this.buffer[var1]);
@@ -853,30 +855,30 @@
          }
       }
 
       public void setBlock(int var1, Dynamic<?> var2) {
          if (this.seen.add(var2)) {
-            this.listTag = this.listTag.merge("%%FILTER_ME%%".equals(ChunkPalettedStorageFix.getName(var2)) ? ChunkPalettedStorageFix.AIR : var2);
+            this.listTag.add("%%FILTER_ME%%".equals(ChunkPalettedStorageFix.getName(var2)) ? ChunkPalettedStorageFix.AIR : var2);
          }
 
          this.buffer[var1] = ChunkPalettedStorageFix.idFor(this.palette, var2);
       }
 
       public int upgrade(int var1) {
          if (!this.hasData) {
             return var1;
          } else {
-            ByteBuffer var2 = (ByteBuffer)this.section.get("Blocks").asByteBufferOpt().get();
+            ByteBuffer var2 = (ByteBuffer)this.section.get("Blocks").asByteBufferOpt().result().get();
             ChunkPalettedStorageFix.DataLayer var3 = (ChunkPalettedStorageFix.DataLayer)this.section.get("Data").asByteBufferOpt().map((var0) -> {
                return new ChunkPalettedStorageFix.DataLayer(DataFixUtils.toArray(var0));
-            }).orElseGet(ChunkPalettedStorageFix.DataLayer::new);
+            }).result().orElseGet(ChunkPalettedStorageFix.DataLayer::new);
             ChunkPalettedStorageFix.DataLayer var4 = (ChunkPalettedStorageFix.DataLayer)this.section.get("Add").asByteBufferOpt().map((var0) -> {
                return new ChunkPalettedStorageFix.DataLayer(DataFixUtils.toArray(var0));
-            }).orElseGet(ChunkPalettedStorageFix.DataLayer::new);
+            }).result().orElseGet(ChunkPalettedStorageFix.DataLayer::new);
             this.seen.add(ChunkPalettedStorageFix.AIR);
             ChunkPalettedStorageFix.idFor(this.palette, ChunkPalettedStorageFix.AIR);
-            this.listTag = this.listTag.merge(ChunkPalettedStorageFix.AIR);
+            this.listTag.add(ChunkPalettedStorageFix.AIR);
 
             for(int var5 = 0; var5 < 4096; ++var5) {
                int var6 = var5 & 15;
                int var7 = var5 >> 8 & 15;
                int var8 = var5 >> 4 & 15;
@@ -914,13 +916,13 @@
       public Dynamic<?> write() {
          Dynamic var1 = this.section;
          if (!this.hasData) {
             return var1;
          } else {
-            var1 = var1.set("Palette", this.listTag);
+            var1 = var1.set("Palette", var1.createList(this.listTag.stream()));
             int var2 = Math.max(4, DataFixUtils.ceillog2(this.seen.size()));
-            BitStorage var3 = new BitStorage(var2, 4096);
+            PackedBitStorage var3 = new PackedBitStorage(var2, 4096);
 
             for(int var4 = 0; var4 < this.buffer.length; ++var4) {
                var3.set(var4, this.buffer[var4]);
             }
 
