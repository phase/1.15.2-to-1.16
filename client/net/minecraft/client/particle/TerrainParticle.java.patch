--- net/minecraft/client/particle/TerrainParticle.java
+++ net/minecraft/client/particle/TerrainParticle.java
@@ -1,24 +1,23 @@
 package net.minecraft.client.particle;
 
 import javax.annotation.Nullable;
 import net.minecraft.client.Minecraft;
+import net.minecraft.client.multiplayer.ClientLevel;
 import net.minecraft.client.renderer.LevelRenderer;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.particles.BlockParticleOption;
-import net.minecraft.world.level.Level;
-import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.state.BlockState;
 
 public class TerrainParticle extends TextureSheetParticle {
    private final BlockState blockState;
    private BlockPos pos;
    private final float uo;
    private final float vo;
 
-   public TerrainParticle(Level var1, double var2, double var4, double var6, double var8, double var10, double var12, BlockState var14) {
+   public TerrainParticle(ClientLevel var1, double var2, double var4, double var6, double var8, double var10, double var12, BlockState var14) {
       super(var1, var2, var4, var6, var8, var10, var12);
       this.blockState = var14;
       this.setSprite(Minecraft.getInstance().getBlockRenderer().getBlockModelShaper().getParticleIcon(var14));
       this.gravity = 1.0F;
       this.rCol = 0.6F;
@@ -33,22 +32,21 @@
       return ParticleRenderType.TERRAIN_SHEET;
    }
 
    public TerrainParticle init(BlockPos var1) {
       this.pos = var1;
-      if (this.blockState.getBlock() == Blocks.GRASS_BLOCK) {
+      if (this.blockState.is(Blocks.GRASS_BLOCK)) {
          return this;
       } else {
          this.multiplyColor(var1);
          return this;
       }
    }
 
    public TerrainParticle init() {
       this.pos = new BlockPos(this.x, this.y, this.z);
-      Block var1 = this.blockState.getBlock();
-      if (var1 == Blocks.GRASS_BLOCK) {
+      if (this.blockState.is(Blocks.GRASS_BLOCK)) {
          return this;
       } else {
          this.multiplyColor(this.pos);
          return this;
       }
@@ -89,11 +87,11 @@
 
    public static class Provider implements ParticleProvider<BlockParticleOption> {
       public Provider() {
       }
 
-      public Particle createParticle(BlockParticleOption var1, Level var2, double var3, double var5, double var7, double var9, double var11, double var13) {
+      public Particle createParticle(BlockParticleOption var1, ClientLevel var2, double var3, double var5, double var7, double var9, double var11, double var13) {
          BlockState var15 = var1.getState();
-         return !var15.isAir() && var15.getBlock() != Blocks.MOVING_PISTON ? (new TerrainParticle(var2, var3, var5, var7, var9, var11, var13, var15)).init() : null;
+         return !var15.isAir() && !var15.is(Blocks.MOVING_PISTON) ? (new TerrainParticle(var2, var3, var5, var7, var9, var11, var13, var15)).init() : null;
       }
    }
 }
