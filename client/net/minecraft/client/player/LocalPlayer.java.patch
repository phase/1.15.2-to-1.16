--- net/minecraft/client/player/LocalPlayer.java
+++ net/minecraft/client/player/LocalPlayer.java
@@ -1,11 +1,11 @@
 package net.minecraft.client.player;
 
 import com.google.common.collect.Lists;
-import java.util.Collections;
 import java.util.Iterator;
 import java.util.List;
+import java.util.UUID;
 import javax.annotation.Nullable;
 import net.minecraft.client.ClientRecipeBook;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.gui.screens.Screen;
 import net.minecraft.client.gui.screens.inventory.AbstractContainerScreen;
@@ -16,10 +16,11 @@
 import net.minecraft.client.gui.screens.inventory.SignEditScreen;
 import net.minecraft.client.gui.screens.inventory.StructureBlockEditScreen;
 import net.minecraft.client.multiplayer.ClientLevel;
 import net.minecraft.client.multiplayer.ClientPacketListener;
 import net.minecraft.client.resources.sounds.AmbientSoundHandler;
+import net.minecraft.client.resources.sounds.BiomeAmbientSoundsHandler;
 import net.minecraft.client.resources.sounds.BubbleColumnAmbientSoundHandler;
 import net.minecraft.client.resources.sounds.ElytraOnPlayerSoundInstance;
 import net.minecraft.client.resources.sounds.RidingMinecartSoundInstance;
 import net.minecraft.client.resources.sounds.SimpleSoundInstance;
 import net.minecraft.client.resources.sounds.UnderwaterAmbientSoundHandler;
@@ -36,11 +37,11 @@
 import net.minecraft.network.protocol.game.ServerboundMoveVehiclePacket;
 import net.minecraft.network.protocol.game.ServerboundPlayerAbilitiesPacket;
 import net.minecraft.network.protocol.game.ServerboundPlayerActionPacket;
 import net.minecraft.network.protocol.game.ServerboundPlayerCommandPacket;
 import net.minecraft.network.protocol.game.ServerboundPlayerInputPacket;
-import net.minecraft.network.protocol.game.ServerboundRecipeBookUpdatePacket;
+import net.minecraft.network.protocol.game.ServerboundRecipeBookSeenRecipePacket;
 import net.minecraft.network.protocol.game.ServerboundSwingPacket;
 import net.minecraft.network.syncher.EntityDataAccessor;
 import net.minecraft.sounds.SoundEvent;
 import net.minecraft.sounds.SoundEvents;
 import net.minecraft.sounds.SoundSource;
@@ -68,11 +69,10 @@
 import net.minecraft.world.level.block.entity.CommandBlockEntity;
 import net.minecraft.world.level.block.entity.JigsawBlockEntity;
 import net.minecraft.world.level.block.entity.SignBlockEntity;
 import net.minecraft.world.level.block.entity.StructureBlockEntity;
 import net.minecraft.world.level.block.state.BlockState;
-import net.minecraft.world.level.dimension.DimensionType;
 import net.minecraft.world.phys.AABB;
 import net.minecraft.world.phys.Vec2;
 import net.minecraft.world.phys.Vec3;
 import net.minecraft.world.phys.shapes.CollisionContext;
 import net.minecraft.world.phys.shapes.VoxelShape;
@@ -87,10 +87,11 @@
    private double yLast1;
    private double zLast;
    private float yRotLast;
    private float xRotLast;
    private boolean lastOnGround;
+   private boolean crouching;
    private boolean wasShiftKeyDown;
    private boolean wasSprinting;
    private int positionReminder;
    private boolean flashOnSetHealth;
    private String serverBrand;
@@ -113,25 +114,23 @@
    private int autoJumpTime;
    private boolean wasFallFlying;
    private int waterVisionTime;
    private boolean showDeathScreen = true;
 
-   public LocalPlayer(Minecraft var1, ClientLevel var2, ClientPacketListener var3, StatsCounter var4, ClientRecipeBook var5) {
+   public LocalPlayer(Minecraft var1, ClientLevel var2, ClientPacketListener var3, StatsCounter var4, ClientRecipeBook var5, boolean var6, boolean var7) {
       super(var2, var3.getLocalGameProfile());
+      this.minecraft = var1;
       this.connection = var3;
       this.stats = var4;
       this.recipeBook = var5;
-      this.minecraft = var1;
-      this.dimension = DimensionType.OVERWORLD;
+      this.wasShiftKeyDown = var6;
+      this.wasSprinting = var7;
       this.ambientSoundHandlers.add(new UnderwaterAmbientSoundHandler(this, var1.getSoundManager()));
       this.ambientSoundHandlers.add(new BubbleColumnAmbientSoundHandler(this));
+      this.ambientSoundHandlers.add(new BiomeAmbientSoundsHandler(this, var1.getSoundManager(), var2.getBiomeManager()));
    }
 
-   public boolean isGlowing() {
-      return super.isGlowing() || this.minecraft.player.isSpectator() && this.minecraft.options.keySpectatorOutlines.isDown();
-   }
-
    public boolean hurt(DamageSource var1, float var2) {
       return false;
    }
 
    public void heal(float var1) {
@@ -153,12 +152,12 @@
 
          return true;
       }
    }
 
-   public void stopRiding() {
-      super.stopRiding();
+   public void removeVehicle() {
+      super.removeVehicle();
       this.handsBusy = false;
    }
 
    public float getViewXRot(float var1) {
       return this.xRot;
@@ -190,10 +189,25 @@
          }
 
       }
    }
 
+   public float getCurrentMood() {
+      Iterator var1 = this.ambientSoundHandlers.iterator();
+
+      AmbientSoundHandler var2;
+      do {
+         if (!var1.hasNext()) {
+            return 0.0F;
+         }
+
+         var2 = (AmbientSoundHandler)var1.next();
+      } while(!(var2 instanceof BiomeAmbientSoundsHandler));
+
+      return ((BiomeAmbientSoundsHandler)var2).getMoodiness();
+   }
+
    private void sendPosition() {
       boolean var1 = this.isSprinting();
       if (var1 != this.wasSprinting) {
          ServerboundPlayerCommandPacket.Action var2 = var1 ? ServerboundPlayerCommandPacket.Action.START_SPRINTING : ServerboundPlayerCommandPacket.Action.STOP_SPRINTING;
          this.connection.send((Packet)(new ServerboundPlayerCommandPacket(this, var2)));
@@ -313,10 +327,22 @@
 
    public boolean isLocalPlayer() {
       return true;
    }
 
+   public boolean isSuppressingSlidingDownLadder() {
+      return !this.abilities.flying && super.isSuppressingSlidingDownLadder();
+   }
+
+   public boolean canSpawnSprintParticle() {
+      return !this.abilities.flying && super.canSpawnSprintParticle();
+   }
+
+   public boolean canSpawnSoulSpeedParticle() {
+      return !this.abilities.flying && super.canSpawnSoulSpeedParticle();
+   }
+
    protected void sendRidingJump() {
       this.connection.send((Packet)(new ServerboundPlayerCommandPacket(this, ServerboundPlayerCommandPacket.Action.START_RIDING_JUMP, Mth.floor(this.getJumpRidingScale() * 100.0F))));
    }
 
    public void sendOpenInventory() {
@@ -340,11 +366,11 @@
    }
 
    public void removeRecipeHighlight(Recipe<?> var1) {
       if (this.recipeBook.willHighlight(var1)) {
          this.recipeBook.removeHighlight(var1);
-         this.connection.send((Packet)(new ServerboundRecipeBookUpdatePacket(var1)));
+         this.connection.send((Packet)(new ServerboundRecipeBookSeenRecipePacket(var1)));
       }
 
    }
 
    protected int getPermissionLevel() {
@@ -411,11 +437,11 @@
 
    }
 
    private boolean blocked(BlockPos var1) {
       AABB var2 = this.getBoundingBox();
-      BlockPos.MutableBlockPos var3 = new BlockPos.MutableBlockPos(var1);
+      BlockPos.MutableBlockPos var3 = var1.mutable();
 
       for(int var4 = Mth.floor(var2.minY); var4 < Mth.ceil(var2.maxY); ++var4) {
          var3.setY(var4);
          if (!this.freeAt(var3)) {
             return true;
@@ -434,11 +460,11 @@
       this.experienceProgress = var1;
       this.totalExperience = var2;
       this.experienceLevel = var3;
    }
 
-   public void sendMessage(Component var1) {
+   public void sendMessage(Component var1, UUID var2) {
       this.minecraft.gui.getChat().addMessage(var1);
    }
 
    public void handleEntityEvent(byte var1) {
       if (var1 >= 24 && var1 <= 28) {
@@ -557,15 +583,11 @@
    public boolean isShiftKeyDown() {
       return this.input != null && this.input.shiftKeyDown;
    }
 
    public boolean isCrouching() {
-      if (!this.abilities.flying && !this.isSwimming() && this.canEnterPose(Pose.CROUCHING)) {
-         return this.isShiftKeyDown() || !this.isSleeping() && !this.canEnterPose(Pose.STANDING);
-      } else {
-         return false;
-      }
+      return this.crouching;
    }
 
    public boolean isMovingSlowly() {
       return this.isCrouching() || this.isVisuallyCrawling();
    }
@@ -596,10 +618,11 @@
 
       this.handleNetherPortalClient();
       boolean var1 = this.input.jumping;
       boolean var2 = this.input.shiftKeyDown;
       boolean var3 = this.hasEnoughImpulseToStartSprinting();
+      this.crouching = !this.abilities.flying && !this.isSwimming() && this.canEnterPose(Pose.CROUCHING) && (this.isShiftKeyDown() || !this.isSleeping() && !this.canEnterPose(Pose.STANDING));
       this.input.tick(this.isMovingSlowly());
       this.minecraft.getTutorial().onInput(this.input);
       if (this.isUsingItem() && !this.isPassenger()) {
          Input var10000 = this.input;
          var10000.leftImpulse *= 0.2F;
@@ -620,10 +643,14 @@
          this.checkInBlock(this.getX() - (double)this.getBbWidth() * 0.35D, this.getY() + 0.5D, this.getZ() - (double)this.getBbWidth() * 0.35D);
          this.checkInBlock(this.getX() + (double)this.getBbWidth() * 0.35D, this.getY() + 0.5D, this.getZ() - (double)this.getBbWidth() * 0.35D);
          this.checkInBlock(this.getX() + (double)this.getBbWidth() * 0.35D, this.getY() + 0.5D, this.getZ() + (double)this.getBbWidth() * 0.35D);
       }
 
+      if (var2) {
+         this.sprintTriggerTime = 0;
+      }
+
       boolean var5 = (float)this.getFoodData().getFoodLevel() > 6.0F || this.abilities.mayfly;
       if ((this.onGround || this.isUnderWater()) && !var2 && !var3 && this.hasEnoughImpulseToStartSprinting() && !this.isSprinting() && var5 && !this.isUsingItem() && !this.hasEffect(MobEffects.BLINDNESS)) {
          if (this.sprintTriggerTime <= 0 && !this.minecraft.options.keySprint.isDown()) {
             this.sprintTriggerTime = 7;
          } else {
@@ -666,28 +693,28 @@
                this.jumpTriggerTime = 0;
             }
          }
       }
 
-      if (this.input.jumping && !var6 && !var1 && !this.abilities.flying && !this.isPassenger() && !this.onLadder()) {
+      if (this.input.jumping && !var6 && !var1 && !this.abilities.flying && !this.isPassenger() && !this.onClimbable()) {
          ItemStack var8 = this.getItemBySlot(EquipmentSlot.CHEST);
          if (var8.getItem() == Items.ELYTRA && ElytraItem.isFlyEnabled(var8) && this.tryToStartFallFlying()) {
             this.connection.send((Packet)(new ServerboundPlayerCommandPacket(this, ServerboundPlayerCommandPacket.Action.START_FALL_FLYING)));
          }
       }
 
       this.wasFallFlying = this.isFallFlying();
-      if (this.isInWater() && this.input.shiftKeyDown) {
+      if (this.isInWater() && this.input.shiftKeyDown && this.isAffectedByFluids()) {
          this.goDownInWater();
       }
 
       int var9;
-      if (this.isUnderLiquid(FluidTags.WATER)) {
+      if (this.isEyeInFluid(FluidTags.WATER)) {
          var9 = this.isSpectator() ? 10 : 1;
          this.waterVisionTime = Mth.clamp(this.waterVisionTime + var9, 0, 600);
       } else if (this.waterVisionTime > 0) {
-         this.isUnderLiquid(FluidTags.WATER);
+         this.isEyeInFluid(FluidTags.WATER);
          this.waterVisionTime = Mth.clamp(this.waterVisionTime - 10, 0, 600);
       }
 
       if (this.abilities.flying && this.isControlledCamera()) {
          var9 = 0;
@@ -750,11 +777,11 @@
 
             this.minecraft.setScreen((Screen)null);
          }
 
          if (this.portalTime == 0.0F) {
-            this.minecraft.getSoundManager().play(SimpleSoundInstance.forUI(SoundEvents.PORTAL_TRIGGER, this.random.nextFloat() * 0.4F + 0.8F));
+            this.minecraft.getSoundManager().play(SimpleSoundInstance.forLocalAmbience(SoundEvents.PORTAL_TRIGGER, this.random.nextFloat() * 0.4F + 0.8F, 0.25F));
          }
 
          this.portalTime += 0.0125F;
          if (this.portalTime >= 1.0F) {
             this.portalTime = 1.0F;
@@ -774,11 +801,11 @@
          if (this.portalTime < 0.0F) {
             this.portalTime = 0.0F;
          }
       }
 
-      this.processDimensionDelay();
+      this.processPortalCooldown();
    }
 
    public void rideTick() {
       super.rideTick();
       this.handsBusy = false;
@@ -865,11 +892,13 @@
                   Vec3 var25 = var24.scale((double)(var21 * 0.5F));
                   Vec3 var26 = var19.subtract(var25);
                   Vec3 var27 = var20.subtract(var25);
                   Vec3 var28 = var19.add(var25);
                   Vec3 var29 = var20.add(var25);
-                  Iterator var30 = this.level.getCollisions(this, var23, Collections.emptySet()).flatMap((var0) -> {
+                  Iterator var30 = this.level.getCollisions(this, var23, (var0) -> {
+                     return true;
+                  }).flatMap((var0) -> {
                      return var0.toAabbs().stream();
                   }).iterator();
                   float var32 = Float.MIN_VALUE;
 
                   label73:
@@ -934,11 +963,11 @@
       double var1 = 0.8D;
       return this.isUnderWater() ? this.input.hasForwardImpulse() : (double)this.input.forwardImpulse >= 0.8D;
    }
 
    public float getWaterVision() {
-      if (!this.isUnderLiquid(FluidTags.WATER)) {
+      if (!this.isEyeInFluid(FluidTags.WATER)) {
          return 0.0F;
       } else {
          float var1 = 600.0F;
          float var2 = 100.0F;
          if ((float)this.waterVisionTime >= 600.0F) {
