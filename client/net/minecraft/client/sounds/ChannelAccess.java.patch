--- net/minecraft/client/sounds/ChannelAccess.java
+++ net/minecraft/client/sounds/ChannelAccess.java
@@ -4,13 +4,15 @@
 import com.mojang.blaze3d.audio.Channel;
 import com.mojang.blaze3d.audio.Library;
 import java.util.Iterator;
 import java.util.Objects;
 import java.util.Set;
+import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.Executor;
 import java.util.function.Consumer;
 import java.util.stream.Stream;
+import javax.annotation.Nullable;
 
 public class ChannelAccess {
    private final Set<ChannelAccess.ChannelHandle> channels = Sets.newIdentityHashSet();
    private final Library library;
    private final Executor executor;
@@ -18,17 +20,20 @@
    public ChannelAccess(Library var1, Executor var2) {
       this.library = var1;
       this.executor = var2;
    }
 
-   public ChannelAccess.ChannelHandle createHandle(Library.Pool var1) {
-      ChannelAccess.ChannelHandle var2 = new ChannelAccess.ChannelHandle();
+   public CompletableFuture<ChannelAccess.ChannelHandle> createHandle(Library.Pool var1) {
+      CompletableFuture var2 = new CompletableFuture();
       this.executor.execute(() -> {
          Channel var3 = this.library.acquireChannel(var1);
          if (var3 != null) {
-            var2.channel = var3;
-            this.channels.add(var2);
+            ChannelAccess.ChannelHandle var4 = new ChannelAccess.ChannelHandle(var3);
+            this.channels.add(var4);
+            var2.complete(var4);
+         } else {
+            var2.complete((Object)null);
          }
 
       });
       return var2;
    }
@@ -61,20 +66,22 @@
       this.channels.forEach(ChannelAccess.ChannelHandle::release);
       this.channels.clear();
    }
 
    public class ChannelHandle {
+      @Nullable
       private Channel channel;
       private boolean stopped;
 
-      public ChannelHandle() {
-      }
-
       public boolean isStopped() {
          return this.stopped;
       }
 
+      public ChannelHandle(Channel var2) {
+         this.channel = var2;
+      }
+
       public void execute(Consumer<Channel> var1) {
          ChannelAccess.this.executor.execute(() -> {
             if (this.channel != null) {
                var1.accept(this.channel);
             }
