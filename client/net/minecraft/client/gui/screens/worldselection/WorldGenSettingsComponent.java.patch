--- net/minecraft/client/gui/screens/worldselection/WorldGenSettingsComponent.java
+++ net/minecraft/client/gui/screens/worldselection/WorldGenSettingsComponent.java
@@ -1,0 +1,281 @@
+package net.minecraft.client.gui.screens.worldselection;
+
+import com.google.gson.JsonElement;
+import com.google.gson.JsonIOException;
+import com.google.gson.JsonParser;
+import com.google.gson.JsonSyntaxException;
+import com.mojang.blaze3d.vertex.PoseStack;
+import com.mojang.serialization.DataResult;
+import com.mojang.serialization.JsonOps;
+import com.mojang.serialization.Lifecycle;
+import com.mojang.serialization.DataResult.PartialResult;
+import it.unimi.dsi.fastutil.booleans.BooleanConsumer;
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.nio.file.Files;
+import java.nio.file.Paths;
+import java.util.Objects;
+import java.util.Optional;
+import java.util.OptionalLong;
+import net.minecraft.client.Minecraft;
+import net.minecraft.client.gui.Font;
+import net.minecraft.client.gui.components.Button;
+import net.minecraft.client.gui.components.EditBox;
+import net.minecraft.client.gui.components.TickableWidget;
+import net.minecraft.client.gui.components.Widget;
+import net.minecraft.client.gui.components.toasts.SystemToast;
+import net.minecraft.client.gui.screens.ConfirmScreen;
+import net.minecraft.client.gui.screens.Screen;
+import net.minecraft.client.resources.language.I18n;
+import net.minecraft.network.chat.CommonComponents;
+import net.minecraft.network.chat.Component;
+import net.minecraft.network.chat.MutableComponent;
+import net.minecraft.network.chat.TextComponent;
+import net.minecraft.network.chat.TranslatableComponent;
+import net.minecraft.world.level.levelgen.WorldGenSettings;
+import org.apache.commons.lang3.StringUtils;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+import org.lwjgl.PointerBuffer;
+import org.lwjgl.util.tinyfd.TinyFileDialogs;
+
+public class WorldGenSettingsComponent implements TickableWidget, Widget {
+   private static final Logger LOGGER = LogManager.getLogger();
+   private static final Component CUSTOM_WORLD_DESCRIPTION = new TranslatableComponent("generator.custom");
+   private static final Component AMPLIFIED_HELP_TEXT = new TranslatableComponent("generator.amplified.info");
+   private Font font;
+   private int width;
+   private EditBox seedEdit;
+   private Button featuresButton;
+   public Button bonusItemsButton;
+   private Button typeButton;
+   private Button customizeTypeButton;
+   private Button importSettingsButton;
+   private WorldGenSettings settings;
+   private Optional<WorldPreset> preset;
+   private String initSeed;
+
+   public WorldGenSettingsComponent() {
+      this.settings = WorldGenSettings.makeDefault();
+      this.preset = Optional.of(WorldPreset.NORMAL);
+      this.initSeed = "";
+   }
+
+   public WorldGenSettingsComponent(WorldGenSettings var1) {
+      this.settings = var1;
+      this.preset = WorldPreset.of(var1);
+      this.initSeed = Long.toString(var1.seed());
+   }
+
+   public void init(final CreateWorldScreen var1, Minecraft var2, Font var3) {
+      this.font = var3;
+      this.width = var1.width;
+      this.seedEdit = new EditBox(this.font, this.width / 2 - 100, 60, 200, 20, new TranslatableComponent("selectWorld.enterSeed"));
+      this.seedEdit.setValue(this.initSeed);
+      this.seedEdit.setResponder((var1x) -> {
+         this.initSeed = this.seedEdit.getValue();
+      });
+      var1.addWidget(this.seedEdit);
+      this.featuresButton = (Button)var1.addButton(new Button(this.width / 2 - 155, 100, 150, 20, new TranslatableComponent("selectWorld.mapFeatures"), (var1x) -> {
+         this.settings = this.settings.withFeaturesToggled();
+         var1x.queueNarration(250);
+      }) {
+         public Component getMessage() {
+            return super.getMessage().mutableCopy().append(" ").append(CommonComponents.optionStatus(WorldGenSettingsComponent.this.settings.generateFeatures()));
+         }
+
+         protected MutableComponent createNarrationMessage() {
+            return super.createNarrationMessage().append(". ").append((Component)(new TranslatableComponent("selectWorld.mapFeatures.info")));
+         }
+      });
+      this.featuresButton.visible = false;
+      this.typeButton = (Button)var1.addButton(new Button(this.width / 2 + 5, 100, 150, 20, new TranslatableComponent("selectWorld.mapType"), (var2x) -> {
+         while(true) {
+            if (this.preset.isPresent()) {
+               int var3 = WorldPreset.PRESETS.indexOf(this.preset.get()) + 1;
+               if (var3 >= WorldPreset.PRESETS.size()) {
+                  var3 = 0;
+               }
+
+               WorldPreset var4 = (WorldPreset)WorldPreset.PRESETS.get(var3);
+               this.preset = Optional.of(var4);
+               this.settings = var4.create(this.settings.seed(), this.settings.generateFeatures(), this.settings.generateBonusChest());
+               if (this.settings.isDebug() && !Screen.hasShiftDown()) {
+                  continue;
+               }
+            }
+
+            var1.updateDisplayOptions();
+            var2x.queueNarration(250);
+            return;
+         }
+      }) {
+         public Component getMessage() {
+            return super.getMessage().mutableCopy().append(" ").append((Component)WorldGenSettingsComponent.this.preset.map(WorldPreset::description).orElse(WorldGenSettingsComponent.CUSTOM_WORLD_DESCRIPTION));
+         }
+
+         protected MutableComponent createNarrationMessage() {
+            return Objects.equals(WorldGenSettingsComponent.this.preset, Optional.of(WorldPreset.AMPLIFIED)) ? super.createNarrationMessage().append(". ").append(WorldGenSettingsComponent.AMPLIFIED_HELP_TEXT) : super.createNarrationMessage();
+         }
+      });
+      this.typeButton.visible = false;
+      this.typeButton.active = this.preset.isPresent();
+      this.customizeTypeButton = (Button)var1.addButton(new Button(var1.width / 2 + 5, 120, 150, 20, new TranslatableComponent("selectWorld.customizeType"), (var3x) -> {
+         WorldPreset.PresetEditor var4 = (WorldPreset.PresetEditor)WorldPreset.EDITORS.get(this.preset);
+         if (var4 != null) {
+            var2.setScreen(var4.createEditScreen(var1, this.settings));
+         }
+
+      }));
+      this.customizeTypeButton.visible = false;
+      this.bonusItemsButton = (Button)var1.addButton(new Button(var1.width / 2 - 155, 151, 150, 20, new TranslatableComponent("selectWorld.bonusItems"), (var1x) -> {
+         this.settings = this.settings.withBonusChestToggled();
+         var1x.queueNarration(250);
+      }) {
+         public Component getMessage() {
+            return super.getMessage().mutableCopy().append(" ").append(CommonComponents.optionStatus(WorldGenSettingsComponent.this.settings.generateBonusChest() && !var1.hardCore));
+         }
+      });
+      this.bonusItemsButton.visible = false;
+      this.importSettingsButton = (Button)var1.addButton(new Button(this.width / 2 - 155, 185, 150, 20, new TranslatableComponent("selectWorld.import_worldgen_settings"), (var3x) -> {
+         TranslatableComponent var4 = new TranslatableComponent("selectWorld.import_worldgen_settings.select_file");
+         String var5 = TinyFileDialogs.tinyfd_openFileDialog(var4.getString(), (CharSequence)null, (PointerBuffer)null, (CharSequence)null, false);
+         if (var5 != null) {
+            JsonParser var6 = new JsonParser();
+
+            DataResult var7;
+            try {
+               BufferedReader var8 = Files.newBufferedReader(Paths.get(var5));
+               Throwable var9 = null;
+
+               try {
+                  JsonElement var10 = var6.parse(var8);
+                  var7 = WorldGenSettings.CODEC.parse(JsonOps.INSTANCE, var10);
+               } catch (Throwable var19) {
+                  var9 = var19;
+                  throw var19;
+               } finally {
+                  if (var8 != null) {
+                     if (var9 != null) {
+                        try {
+                           var8.close();
+                        } catch (Throwable var18) {
+                           var9.addSuppressed(var18);
+                        }
+                     } else {
+                        var8.close();
+                     }
+                  }
+
+               }
+            } catch (JsonIOException | JsonSyntaxException | IOException var21) {
+               var7 = DataResult.error("Failed to parse file: " + var21.getMessage());
+            }
+
+            if (var7.error().isPresent()) {
+               TranslatableComponent var23 = new TranslatableComponent("selectWorld.import_worldgen_settings.failure");
+               String var25 = ((PartialResult)var7.error().get()).message();
+               LOGGER.error("Error parsing world settings: {}", var25);
+               TextComponent var22 = new TextComponent(var25);
+               var2.getToasts().addToast(SystemToast.multiline(SystemToast.SystemToastIds.WORLD_GEN_SETTINGS_TRANSFER, var23, var22));
+            }
+
+            Lifecycle var24 = var7.lifecycle();
+            Logger var10001 = LOGGER;
+            var10001.getClass();
+            var7.resultOrPartial(var10001::error).ifPresent((var4x) -> {
+               BooleanConsumer var5 = (var4) -> {
+                  var2.setScreen(var1);
+                  if (var4) {
+                     this.importSettings(var4x);
+                  }
+
+               };
+               if (var24 == Lifecycle.stable()) {
+                  this.importSettings(var4x);
+               } else if (var24 == Lifecycle.experimental()) {
+                  var2.setScreen(new ConfirmScreen(var5, new TranslatableComponent("selectWorld.import_worldgen_settings.experimental.title"), new TranslatableComponent("selectWorld.import_worldgen_settings.experimental.question")));
+               } else {
+                  var2.setScreen(new ConfirmScreen(var5, new TranslatableComponent("selectWorld.import_worldgen_settings.deprecated.title"), new TranslatableComponent("selectWorld.import_worldgen_settings.deprecated.question")));
+               }
+
+            });
+         }
+      }));
+      this.importSettingsButton.visible = false;
+   }
+
+   private void importSettings(WorldGenSettings var1) {
+      this.settings = var1;
+      this.preset = WorldPreset.of(var1);
+      this.initSeed = Long.toString(var1.seed());
+      this.seedEdit.setValue(this.initSeed);
+      this.typeButton.active = this.preset.isPresent();
+   }
+
+   public void tick() {
+      this.seedEdit.tick();
+   }
+
+   public void render(PoseStack var1, int var2, int var3, float var4) {
+      if (this.featuresButton.visible) {
+         this.font.drawShadow(var1, I18n.get("selectWorld.mapFeatures.info"), (float)(this.width / 2 - 150), 122.0F, -6250336);
+      }
+
+      this.seedEdit.render(var1, var2, var3, var4);
+      if (this.preset.equals(Optional.of(WorldPreset.AMPLIFIED))) {
+         this.font.drawWordWrap(AMPLIFIED_HELP_TEXT, this.typeButton.x + 2, this.typeButton.y + 22, this.typeButton.getWidth(), 10526880);
+      }
+
+   }
+
+   protected void updateSettings(WorldGenSettings var1) {
+      this.settings = var1;
+   }
+
+   private static OptionalLong parseLong(String var0) {
+      try {
+         return OptionalLong.of(Long.parseLong(var0));
+      } catch (NumberFormatException var2) {
+         return OptionalLong.empty();
+      }
+   }
+
+   public WorldGenSettings makeSettings(boolean var1) {
+      String var2 = this.seedEdit.getValue();
+      OptionalLong var3;
+      if (StringUtils.isEmpty(var2)) {
+         var3 = OptionalLong.empty();
+      } else {
+         OptionalLong var4 = parseLong(var2);
+         if (var4.isPresent() && var4.getAsLong() != 0L) {
+            var3 = var4;
+         } else {
+            var3 = OptionalLong.of((long)var2.hashCode());
+         }
+      }
+
+      return this.settings.withSeed(var1, var3);
+   }
+
+   public boolean isDebug() {
+      return this.settings.isDebug();
+   }
+
+   public void setDisplayOptions(boolean var1) {
+      this.typeButton.visible = var1;
+      if (this.settings.isDebug()) {
+         this.featuresButton.visible = false;
+         this.bonusItemsButton.visible = false;
+         this.customizeTypeButton.visible = false;
+         this.importSettingsButton.visible = false;
+      } else {
+         this.featuresButton.visible = var1;
+         this.bonusItemsButton.visible = var1;
+         this.customizeTypeButton.visible = var1 && WorldPreset.EDITORS.containsKey(this.preset);
+         this.importSettingsButton.visible = var1;
+      }
+
+      this.seedEdit.setVisible(var1);
+   }
+}
