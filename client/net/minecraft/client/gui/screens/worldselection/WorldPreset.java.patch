--- net/minecraft/client/gui/screens/worldselection/WorldPreset.java
+++ net/minecraft/client/gui/screens/worldselection/WorldPreset.java
@@ -1,0 +1,137 @@
+package net.minecraft.client.gui.screens.worldselection;
+
+import com.google.common.collect.ImmutableMap;
+import com.google.common.collect.Lists;
+import java.util.List;
+import java.util.Map;
+import java.util.Optional;
+import net.minecraft.client.gui.screens.CreateBuffetWorldScreen;
+import net.minecraft.client.gui.screens.CreateFlatWorldScreen;
+import net.minecraft.client.gui.screens.Screen;
+import net.minecraft.network.chat.Component;
+import net.minecraft.network.chat.TranslatableComponent;
+import net.minecraft.world.level.biome.Biome;
+import net.minecraft.world.level.biome.Biomes;
+import net.minecraft.world.level.biome.FixedBiomeSource;
+import net.minecraft.world.level.biome.OverworldBiomeSource;
+import net.minecraft.world.level.chunk.ChunkGenerator;
+import net.minecraft.world.level.dimension.DimensionType;
+import net.minecraft.world.level.levelgen.DebugLevelSource;
+import net.minecraft.world.level.levelgen.FlatLevelSource;
+import net.minecraft.world.level.levelgen.NoiseBasedChunkGenerator;
+import net.minecraft.world.level.levelgen.NoiseGeneratorSettings;
+import net.minecraft.world.level.levelgen.WorldGenSettings;
+import net.minecraft.world.level.levelgen.flat.FlatLevelGeneratorSettings;
+
+public abstract class WorldPreset {
+   public static final WorldPreset NORMAL = new WorldPreset("default") {
+      protected ChunkGenerator generator(long var1) {
+         return new NoiseBasedChunkGenerator(new OverworldBiomeSource(var1, false, false), var1, NoiseGeneratorSettings.Preset.OVERWORLD.settings());
+      }
+   };
+   private static final WorldPreset FLAT = new WorldPreset("flat") {
+      protected ChunkGenerator generator(long var1) {
+         return new FlatLevelSource(FlatLevelGeneratorSettings.getDefault());
+      }
+   };
+   private static final WorldPreset LARGE_BIOMES = new WorldPreset("large_biomes") {
+      protected ChunkGenerator generator(long var1) {
+         return new NoiseBasedChunkGenerator(new OverworldBiomeSource(var1, false, true), var1, NoiseGeneratorSettings.Preset.OVERWORLD.settings());
+      }
+   };
+   public static final WorldPreset AMPLIFIED = new WorldPreset("amplified") {
+      protected ChunkGenerator generator(long var1) {
+         return new NoiseBasedChunkGenerator(new OverworldBiomeSource(var1, false, false), var1, NoiseGeneratorSettings.Preset.AMPLIFIED.settings());
+      }
+   };
+   private static final WorldPreset SINGLE_BIOME_SURFACE = new WorldPreset("single_biome_surface") {
+      protected ChunkGenerator generator(long var1) {
+         return new NoiseBasedChunkGenerator(new FixedBiomeSource(Biomes.OCEAN), var1, NoiseGeneratorSettings.Preset.OVERWORLD.settings());
+      }
+   };
+   private static final WorldPreset SINGLE_BIOME_CAVES = new WorldPreset("single_biome_caves") {
+      protected ChunkGenerator generator(long var1) {
+         return new NoiseBasedChunkGenerator(new FixedBiomeSource(Biomes.OCEAN), var1, NoiseGeneratorSettings.Preset.NETHER.settings());
+      }
+   };
+   private static final WorldPreset SINGLE_BIOME_FLOATING_ISLANDS = new WorldPreset("single_biome_floating_islands") {
+      protected ChunkGenerator generator(long var1) {
+         return new NoiseBasedChunkGenerator(new FixedBiomeSource(Biomes.OCEAN), var1, NoiseGeneratorSettings.Preset.END.settings());
+      }
+   };
+   private static final WorldPreset DEBUG = new WorldPreset("debug_all_block_states") {
+      protected ChunkGenerator generator(long var1) {
+         return DebugLevelSource.INSTANCE;
+      }
+   };
+   protected static final List<WorldPreset> PRESETS;
+   protected static final Map<Optional<WorldPreset>, WorldPreset.PresetEditor> EDITORS;
+   private final Component description;
+
+   private WorldPreset(String var1) {
+      this.description = new TranslatableComponent("generator." + var1);
+   }
+
+   private static WorldGenSettings fromBuffetSettings(WorldGenSettings var0, WorldPreset var1, Biome var2) {
+      FixedBiomeSource var3 = new FixedBiomeSource(var2);
+      NoiseGeneratorSettings var4;
+      if (var1 == SINGLE_BIOME_CAVES) {
+         var4 = NoiseGeneratorSettings.Preset.NETHER.settings();
+      } else if (var1 == SINGLE_BIOME_FLOATING_ISLANDS) {
+         var4 = NoiseGeneratorSettings.Preset.END.settings();
+      } else {
+         var4 = NoiseGeneratorSettings.Preset.OVERWORLD.settings();
+      }
+
+      return new WorldGenSettings(var0.seed(), var0.generateFeatures(), var0.generateBonusChest(), WorldGenSettings.withOverworld(var0.dimensions(), new NoiseBasedChunkGenerator(var3, var0.seed(), var4)));
+   }
+
+   private static Biome parseBuffetSettings(WorldGenSettings var0) {
+      return (Biome)var0.overworld().getBiomeSource().possibleBiomes().stream().findFirst().orElse(Biomes.OCEAN);
+   }
+
+   public static Optional<WorldPreset> of(WorldGenSettings var0) {
+      ChunkGenerator var1 = var0.overworld();
+      if (var1 instanceof FlatLevelSource) {
+         return Optional.of(FLAT);
+      } else {
+         return var1 instanceof DebugLevelSource ? Optional.of(DEBUG) : Optional.empty();
+      }
+   }
+
+   public Component description() {
+      return this.description;
+   }
+
+   public WorldGenSettings create(long var1, boolean var3, boolean var4) {
+      return new WorldGenSettings(var1, var3, var4, WorldGenSettings.withOverworld(DimensionType.defaultDimensions(var1), this.generator(var1)));
+   }
+
+   protected abstract ChunkGenerator generator(long var1);
+
+   static {
+      PRESETS = Lists.newArrayList(new WorldPreset[]{NORMAL, FLAT, LARGE_BIOMES, AMPLIFIED, SINGLE_BIOME_SURFACE, SINGLE_BIOME_CAVES, SINGLE_BIOME_FLOATING_ISLANDS, DEBUG});
+      EDITORS = ImmutableMap.of(Optional.of(FLAT), (var0, var1) -> {
+         ChunkGenerator var2 = var1.overworld();
+         return new CreateFlatWorldScreen(var0, (var2x) -> {
+            var0.worldGenSettingsComponent.updateSettings(new WorldGenSettings(var1.seed(), var1.generateFeatures(), var1.generateBonusChest(), WorldGenSettings.withOverworld(var1.dimensions(), new FlatLevelSource(var2x))));
+         }, var2 instanceof FlatLevelSource ? ((FlatLevelSource)var2).settings() : FlatLevelGeneratorSettings.getDefault());
+      }, Optional.of(SINGLE_BIOME_SURFACE), (var0, var1) -> {
+         return new CreateBuffetWorldScreen(var0, (var2) -> {
+            var0.worldGenSettingsComponent.updateSettings(fromBuffetSettings(var1, SINGLE_BIOME_SURFACE, var2));
+         }, parseBuffetSettings(var1));
+      }, Optional.of(SINGLE_BIOME_CAVES), (var0, var1) -> {
+         return new CreateBuffetWorldScreen(var0, (var2) -> {
+            var0.worldGenSettingsComponent.updateSettings(fromBuffetSettings(var1, SINGLE_BIOME_CAVES, var2));
+         }, parseBuffetSettings(var1));
+      }, Optional.of(SINGLE_BIOME_FLOATING_ISLANDS), (var0, var1) -> {
+         return new CreateBuffetWorldScreen(var0, (var2) -> {
+            var0.worldGenSettingsComponent.updateSettings(fromBuffetSettings(var1, SINGLE_BIOME_FLOATING_ISLANDS, var2));
+         }, parseBuffetSettings(var1));
+      });
+   }
+
+   public interface PresetEditor {
+      Screen createEditScreen(CreateWorldScreen var1, WorldGenSettings var2);
+   }
+}
