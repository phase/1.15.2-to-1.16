--- net/minecraft/client/gui/screens/worldselection/OptimizeWorldScreen.java
+++ net/minecraft/client/gui/screens/worldselection/OptimizeWorldScreen.java
@@ -1,41 +1,94 @@
 package net.minecraft.client.gui.screens.worldselection;
 
+import com.google.common.collect.ImmutableSet;
+import com.google.common.collect.UnmodifiableIterator;
+import com.mojang.blaze3d.vertex.PoseStack;
+import com.mojang.datafixers.DataFixer;
 import it.unimi.dsi.fastutil.booleans.BooleanConsumer;
 import it.unimi.dsi.fastutil.objects.Object2IntMap;
 import it.unimi.dsi.fastutil.objects.Object2IntOpenCustomHashMap;
-import java.util.Iterator;
+import javax.annotation.Nullable;
 import net.minecraft.Util;
+import net.minecraft.client.Minecraft;
 import net.minecraft.client.gui.Font;
 import net.minecraft.client.gui.components.Button;
 import net.minecraft.client.gui.screens.Screen;
 import net.minecraft.client.resources.language.I18n;
+import net.minecraft.core.RegistryAccess;
+import net.minecraft.network.chat.CommonComponents;
+import net.minecraft.network.chat.Component;
 import net.minecraft.network.chat.TranslatableComponent;
+import net.minecraft.resources.ResourceKey;
 import net.minecraft.util.Mth;
 import net.minecraft.util.worldupdate.WorldUpgrader;
-import net.minecraft.world.level.dimension.DimensionType;
+import net.minecraft.world.level.Level;
+import net.minecraft.world.level.LevelSettings;
 import net.minecraft.world.level.storage.LevelStorageSource;
+import net.minecraft.world.level.storage.WorldData;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
 
 public class OptimizeWorldScreen extends Screen {
-   private static final Object2IntMap<DimensionType> DIMENSION_COLORS = (Object2IntMap)Util.make(new Object2IntOpenCustomHashMap(Util.identityStrategy()), (var0) -> {
-      var0.put(DimensionType.OVERWORLD, -13408734);
-      var0.put(DimensionType.NETHER, -10075085);
-      var0.put(DimensionType.THE_END, -8943531);
+   private static final Logger LOGGER = LogManager.getLogger();
+   private static final Object2IntMap<ResourceKey<Level>> DIMENSION_COLORS = (Object2IntMap)Util.make(new Object2IntOpenCustomHashMap(Util.identityStrategy()), (var0) -> {
+      var0.put(Level.OVERWORLD, -13408734);
+      var0.put(Level.NETHER, -10075085);
+      var0.put(Level.END, -8943531);
       var0.defaultReturnValue(-2236963);
    });
    private final BooleanConsumer callback;
    private final WorldUpgrader upgrader;
 
-   public OptimizeWorldScreen(BooleanConsumer var1, String var2, LevelStorageSource var3, boolean var4) {
-      super(new TranslatableComponent("optimizeWorld.title", new Object[]{var3.getDataTagFor(var2).getLevelName()}));
+   @Nullable
+   public static OptimizeWorldScreen create(Minecraft var0, BooleanConsumer var1, DataFixer var2, LevelStorageSource.LevelStorageAccess var3, boolean var4) {
+      RegistryAccess.RegistryHolder var5 = RegistryAccess.builtin();
+
+      try {
+         Minecraft.ServerStem var6 = var0.makeServerStem(var5, Minecraft::loadDataPacks, Minecraft::loadWorldData, false, var3);
+         Throwable var7 = null;
+
+         OptimizeWorldScreen var10;
+         try {
+            WorldData var8 = var6.worldData();
+            var3.saveDataTag(var5, var8);
+            ImmutableSet var9 = var8.worldGenSettings().levels();
+            var10 = new OptimizeWorldScreen(var1, var2, var3, var8.getLevelSettings(), var4, var9);
+         } catch (Throwable var20) {
+            var7 = var20;
+            throw var20;
+         } finally {
+            if (var6 != null) {
+               if (var7 != null) {
+                  try {
+                     var6.close();
+                  } catch (Throwable var19) {
+                     var7.addSuppressed(var19);
+                  }
+               } else {
+                  var6.close();
+               }
+            }
+
+         }
+
+         return var10;
+      } catch (Exception var22) {
+         LOGGER.warn("Failed to load datapacks, can't optimize world", var22);
+         return null;
+      }
+   }
+
+   private OptimizeWorldScreen(BooleanConsumer var1, DataFixer var2, LevelStorageSource.LevelStorageAccess var3, LevelSettings var4, boolean var5, ImmutableSet<ResourceKey<Level>> var6) {
+      super(new TranslatableComponent("optimizeWorld.title", new Object[]{var4.levelName()}));
       this.callback = var1;
-      this.upgrader = new WorldUpgrader(var2, var3, var3.getDataTagFor(var2), var4);
+      this.upgrader = new WorldUpgrader(var3, var2, var6, var5);
    }
 
    protected void init() {
       super.init();
-      this.addButton(new Button(this.width / 2 - 100, this.height / 4 + 150, 200, 20, I18n.get("gui.cancel"), (var1) -> {
+      this.addButton(new Button(this.width / 2 - 100, this.height / 4 + 150, 200, 20, CommonComponents.GUI_CANCEL, (var1) -> {
          this.upgrader.cancel();
          this.callback.accept(false);
       }));
    }
 
@@ -44,58 +97,62 @@
          this.callback.accept(true);
       }
 
    }
 
+   public void onClose() {
+      this.callback.accept(false);
+   }
+
    public void removed() {
       this.upgrader.cancel();
    }
 
-   public void render(int var1, int var2, float var3) {
-      this.renderBackground();
-      this.drawCenteredString(this.font, this.title.getColoredString(), this.width / 2, 20, 16777215);
-      int var4 = this.width / 2 - 150;
-      int var5 = this.width / 2 + 150;
-      int var6 = this.height / 4 + 100;
-      int var7 = var6 + 10;
-      Font var10001 = this.font;
-      String var10002 = this.upgrader.getStatus().getColoredString();
-      int var10003 = this.width / 2;
+   public void render(PoseStack var1, int var2, int var3, float var4) {
+      this.renderBackground(var1);
+      this.drawCenteredString(var1, this.font, this.title, this.width / 2, 20, 16777215);
+      int var5 = this.width / 2 - 150;
+      int var6 = this.width / 2 + 150;
+      int var7 = this.height / 4 + 100;
+      int var8 = var7 + 10;
+      Font var10002 = this.font;
+      Component var10003 = this.upgrader.getStatus();
+      int var10004 = this.width / 2;
       this.font.getClass();
-      this.drawCenteredString(var10001, var10002, var10003, var6 - 9 - 2, 10526880);
+      this.drawCenteredString(var1, var10002, var10003, var10004, var7 - 9 - 2, 10526880);
       if (this.upgrader.getTotalChunks() > 0) {
-         fill(var4 - 1, var6 - 1, var5 + 1, var7 + 1, -16777216);
-         this.drawString(this.font, I18n.get("optimizeWorld.info.converted", this.upgrader.getConverted()), var4, 40, 10526880);
-         var10001 = this.font;
-         var10002 = I18n.get("optimizeWorld.info.skipped", this.upgrader.getSkipped());
+         fill(var1, var5 - 1, var7 - 1, var6 + 1, var8 + 1, -16777216);
+         this.drawString(var1, this.font, I18n.get("optimizeWorld.info.converted", this.upgrader.getConverted()), var5, 40, 10526880);
+         var10002 = this.font;
+         String var14 = I18n.get("optimizeWorld.info.skipped", this.upgrader.getSkipped());
          this.font.getClass();
-         this.drawString(var10001, var10002, var4, 40 + 9 + 3, 10526880);
-         var10001 = this.font;
-         var10002 = I18n.get("optimizeWorld.info.total", this.upgrader.getTotalChunks());
+         this.drawString(var1, var10002, var14, var5, 40 + 9 + 3, 10526880);
+         var10002 = this.font;
+         var14 = I18n.get("optimizeWorld.info.total", this.upgrader.getTotalChunks());
          this.font.getClass();
-         this.drawString(var10001, var10002, var4, 40 + (9 + 3) * 2, 10526880);
-         int var8 = 0;
+         this.drawString(var1, var10002, var14, var5, 40 + (9 + 3) * 2, 10526880);
+         int var9 = 0;
 
-         int var11;
-         for(Iterator var9 = DimensionType.getAllTypes().iterator(); var9.hasNext(); var8 += var11) {
-            DimensionType var10 = (DimensionType)var9.next();
-            var11 = Mth.floor(this.upgrader.dimensionProgress(var10) * (float)(var5 - var4));
-            fill(var4 + var8, var6, var4 + var8 + var11, var7, DIMENSION_COLORS.getInt(var10));
+         int var12;
+         for(UnmodifiableIterator var10 = this.upgrader.levels().iterator(); var10.hasNext(); var9 += var12) {
+            ResourceKey var11 = (ResourceKey)var10.next();
+            var12 = Mth.floor(this.upgrader.dimensionProgress(var11) * (float)(var6 - var5));
+            fill(var1, var5 + var9, var7, var5 + var9 + var12, var8, DIMENSION_COLORS.getInt(var11));
          }
 
-         int var12 = this.upgrader.getConverted() + this.upgrader.getSkipped();
-         var10001 = this.font;
-         var10002 = var12 + " / " + this.upgrader.getTotalChunks();
-         var10003 = this.width / 2;
+         int var13 = this.upgrader.getConverted() + this.upgrader.getSkipped();
+         var10002 = this.font;
+         var14 = var13 + " / " + this.upgrader.getTotalChunks();
+         var10004 = this.width / 2;
          this.font.getClass();
-         this.drawCenteredString(var10001, var10002, var10003, var6 + 2 * 9 + 2, 10526880);
-         var10001 = this.font;
-         var10002 = Mth.floor(this.upgrader.getProgress() * 100.0F) + "%";
-         var10003 = this.width / 2;
-         int var10004 = var6 + (var7 - var6) / 2;
+         this.drawCenteredString(var1, var10002, var14, var10004, var7 + 2 * 9 + 2, 10526880);
+         var10002 = this.font;
+         var14 = Mth.floor(this.upgrader.getProgress() * 100.0F) + "%";
+         var10004 = this.width / 2;
+         int var10005 = var7 + (var8 - var7) / 2;
          this.font.getClass();
-         this.drawCenteredString(var10001, var10002, var10003, var10004 - 9 / 2, 10526880);
+         this.drawCenteredString(var1, var10002, var14, var10004, var10005 - 9 / 2, 10526880);
       }
 
-      super.render(var1, var2, var3);
+      super.render(var1, var2, var3, var4);
    }
 }
