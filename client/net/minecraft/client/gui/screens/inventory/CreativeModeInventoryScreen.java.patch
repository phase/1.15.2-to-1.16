--- net/minecraft/client/gui/screens/inventory/CreativeModeInventoryScreen.java
+++ net/minecraft/client/gui/screens/inventory/CreativeModeInventoryScreen.java
@@ -1,11 +1,13 @@
 package net.minecraft.client.gui.screens.inventory;
 
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
+import com.mojang.blaze3d.platform.InputConstants;
 import com.mojang.blaze3d.systems.RenderSystem;
+import com.mojang.blaze3d.vertex.PoseStack;
 import com.mojang.datafixers.util.Pair;
 import java.util.ArrayList;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Locale;
@@ -65,11 +67,11 @@
    private boolean ignoreTextInput;
    private boolean hasClickedOutside;
    private final Map<ResourceLocation, Tag<Item>> visibleTags = Maps.newTreeMap();
 
    public CreativeModeInventoryScreen(Player var1) {
-      super(new CreativeModeInventoryScreen.ItemPickerMenu(var1), var1.inventory, new TextComponent(""));
+      super(new CreativeModeInventoryScreen.ItemPickerMenu(var1), var1.inventory, TextComponent.EMPTY);
       var1.containerMenu = this.menu;
       this.passEvents = true;
       this.imageHeight = 136;
       this.imageWidth = 195;
    }
@@ -141,11 +143,11 @@
                if (var4 != ClickType.QUICK_CRAFT && var1.container == CONTAINER) {
                   var10 = this.minecraft.player.inventory;
                   var7 = var10.getCarried();
                   ItemStack var13 = var1.getItem();
                   if (var4 == ClickType.SWAP) {
-                     if (!var13.isEmpty() && var3 >= 0 && var3 < 9) {
+                     if (!var13.isEmpty()) {
                         var9 = var13.copy();
                         var9.setCount(var9.getMaxStackSize());
                         this.minecraft.player.inventory.setItem(var3, var9);
                         this.minecraft.player.inventoryMenu.broadcastChanges();
                      }
@@ -243,11 +245,11 @@
          this.minecraft.keyboardHandler.setSendRepeatsToGui(true);
          Font var10003 = this.font;
          int var10004 = this.leftPos + 82;
          int var10005 = this.topPos + 6;
          this.font.getClass();
-         this.searchBox = new EditBox(var10003, var10004, var10005, 80, 9, I18n.get("itemGroup.search"));
+         this.searchBox = new EditBox(var10003, var10004, var10005, 80, 9, new TranslatableComponent("itemGroup.search"));
          this.searchBox.setMaxLength(50);
          this.searchBox.setBordered(false);
          this.searchBox.setVisible(false);
          this.searchBox.setTextColor(16777215);
          this.children.add(this.searchBox);
@@ -310,18 +312,19 @@
             return true;
          } else {
             return super.keyPressed(var1, var2, var3);
          }
       } else {
-         boolean var4 = !this.isCreativeSlot(this.hoveredSlot) || this.hoveredSlot != null && this.hoveredSlot.hasItem();
-         if (var4 && this.checkNumkeyPressed(var1, var2)) {
+         boolean var4 = !this.isCreativeSlot(this.hoveredSlot) || this.hoveredSlot.hasItem();
+         boolean var5 = InputConstants.getKey(var1, var2).getNumericKeyValue().isPresent();
+         if (var4 && var5 && this.checkHotbarKeyPressed(var1, var2)) {
             this.ignoreTextInput = true;
             return true;
          } else {
-            String var5 = this.searchBox.getValue();
+            String var6 = this.searchBox.getValue();
             if (this.searchBox.keyPressed(var1, var2, var3)) {
-               if (!Objects.equals(var5, this.searchBox.getValue())) {
+               if (!Objects.equals(var6, this.searchBox.getValue())) {
                   this.refreshSearchResults();
                }
 
                return true;
             } else {
@@ -383,15 +386,15 @@
       var6.getAvailableTags().stream().filter(var3).forEach((var2x) -> {
          Tag var10000 = (Tag)this.visibleTags.put(var2x, var6.getTag(var2x));
       });
    }
 
-   protected void renderLabels(int var1, int var2) {
-      CreativeModeTab var3 = CreativeModeTab.TABS[selectedTab];
-      if (var3.showTitle()) {
+   protected void renderLabels(PoseStack var1, int var2, int var3) {
+      CreativeModeTab var4 = CreativeModeTab.TABS[selectedTab];
+      if (var4.showTitle()) {
          RenderSystem.disableBlend();
-         this.font.draw(I18n.get(var3.getName()), 8.0F, 6.0F, 4210752);
+         this.font.draw(var1, I18n.get(var4.getName()), 8.0F, 6.0F, 4210752);
       }
 
    }
 
    public boolean mouseClicked(double var1, double var3, int var5) {
@@ -456,12 +459,12 @@
             if (var5.isEmpty()) {
                for(var6 = 0; var6 < 9; ++var6) {
                   if (var6 == var4) {
                      ItemStack var7 = new ItemStack(Items.PAPER);
                      var7.getOrCreateTagElement("CustomCreativeLock");
-                     String var8 = this.minecraft.options.keyHotbarSlots[var4].getTranslatedKeyMessage();
-                     String var9 = this.minecraft.options.keySaveHotbarActivator.getTranslatedKeyMessage();
+                     Component var8 = this.minecraft.options.keyHotbarSlots[var4].getTranslatedKeyMessage();
+                     Component var9 = this.minecraft.options.keySaveHotbarActivator.getTranslatedKeyMessage();
                      var7.setHoverName(new TranslatableComponent("inventory.hotbarInfo", new Object[]{var9, var8}));
                      ((CreativeModeInventoryScreen.ItemPickerMenu)this.menu).items.add(var7);
                   } else {
                      ((CreativeModeInventoryScreen.ItemPickerMenu)this.menu).items.add(ItemStack.EMPTY);
                   }
@@ -584,116 +587,101 @@
       } else {
          return super.mouseDragged(var1, var3, var5, var6, var8);
       }
    }
 
-   public void render(int var1, int var2, float var3) {
-      this.renderBackground();
-      super.render(var1, var2, var3);
-      CreativeModeTab[] var4 = CreativeModeTab.TABS;
-      int var5 = var4.length;
+   public void render(PoseStack var1, int var2, int var3, float var4) {
+      this.renderBackground(var1);
+      super.render(var1, var2, var3, var4);
+      CreativeModeTab[] var5 = CreativeModeTab.TABS;
+      int var6 = var5.length;
 
-      for(int var6 = 0; var6 < var5; ++var6) {
-         CreativeModeTab var7 = var4[var6];
-         if (this.checkTabHovering(var7, var1, var2)) {
+      for(int var7 = 0; var7 < var6; ++var7) {
+         CreativeModeTab var8 = var5[var7];
+         if (this.checkTabHovering(var1, var8, var2, var3)) {
             break;
          }
       }
 
-      if (this.destroyItemSlot != null && selectedTab == CreativeModeTab.TAB_INVENTORY.getId() && this.isHovering(this.destroyItemSlot.x, this.destroyItemSlot.y, 16, 16, (double)var1, (double)var2)) {
-         this.renderTooltip(I18n.get("inventory.binSlot"), var1, var2);
+      if (this.destroyItemSlot != null && selectedTab == CreativeModeTab.TAB_INVENTORY.getId() && this.isHovering(this.destroyItemSlot.x, this.destroyItemSlot.y, 16, 16, (double)var2, (double)var3)) {
+         this.renderTooltip(var1, new TranslatableComponent("inventory.binSlot"), var2, var3);
       }
 
       RenderSystem.color4f(1.0F, 1.0F, 1.0F, 1.0F);
-      this.renderTooltip(var1, var2);
+      this.renderTooltip(var1, var2, var3);
    }
 
-   protected void renderTooltip(ItemStack var1, int var2, int var3) {
+   protected void renderTooltip(PoseStack var1, ItemStack var2, int var3, int var4) {
       if (selectedTab == CreativeModeTab.TAB_SEARCH.getId()) {
-         List var4 = var1.getTooltipLines(this.minecraft.player, this.minecraft.options.advancedItemTooltips ? TooltipFlag.Default.ADVANCED : TooltipFlag.Default.NORMAL);
-         ArrayList var5 = Lists.newArrayListWithCapacity(var4.size());
-         Iterator var6 = var4.iterator();
+         List var5 = var2.getTooltipLines(this.minecraft.player, this.minecraft.options.advancedItemTooltips ? TooltipFlag.Default.ADVANCED : TooltipFlag.Default.NORMAL);
+         ArrayList var6 = Lists.newArrayList(var5);
+         Item var7 = var2.getItem();
+         CreativeModeTab var8 = var7.getItemCategory();
+         if (var8 == null && var7 == Items.ENCHANTED_BOOK) {
+            Map var9 = EnchantmentHelper.getEnchantments(var2);
+            if (var9.size() == 1) {
+               Enchantment var10 = (Enchantment)var9.keySet().iterator().next();
+               CreativeModeTab[] var11 = CreativeModeTab.TABS;
+               int var12 = var11.length;
 
-         while(var6.hasNext()) {
-            Component var7 = (Component)var6.next();
-            var5.add(var7.getColoredString());
-         }
-
-         Item var14 = var1.getItem();
-         CreativeModeTab var15 = var14.getItemCategory();
-         if (var15 == null && var14 == Items.ENCHANTED_BOOK) {
-            Map var8 = EnchantmentHelper.getEnchantments(var1);
-            if (var8.size() == 1) {
-               Enchantment var9 = (Enchantment)var8.keySet().iterator().next();
-               CreativeModeTab[] var10 = CreativeModeTab.TABS;
-               int var11 = var10.length;
-
-               for(int var12 = 0; var12 < var11; ++var12) {
-                  CreativeModeTab var13 = var10[var12];
-                  if (var13.hasEnchantmentCategory(var9.category)) {
-                     var15 = var13;
+               for(int var13 = 0; var13 < var12; ++var13) {
+                  CreativeModeTab var14 = var11[var13];
+                  if (var14.hasEnchantmentCategory(var10.category)) {
+                     var8 = var14;
                      break;
                   }
                }
             }
          }
 
          this.visibleTags.forEach((var2x, var3x) -> {
-            if (var3x.contains(var14)) {
-               var5.add(1, "" + ChatFormatting.BOLD + ChatFormatting.DARK_PURPLE + "#" + var2x);
+            if (var3x.contains(var7)) {
+               var6.add(1, (new TextComponent("#" + var2x)).withStyle(ChatFormatting.DARK_PURPLE));
             }
 
          });
-         if (var15 != null) {
-            var5.add(1, "" + ChatFormatting.BOLD + ChatFormatting.BLUE + I18n.get(var15.getName()));
+         if (var8 != null) {
+            var6.add(1, (new TranslatableComponent(var8.getName())).withStyle(ChatFormatting.BLUE));
          }
 
-         for(int var16 = 0; var16 < var5.size(); ++var16) {
-            if (var16 == 0) {
-               var5.set(var16, var1.getRarity().color + (String)var5.get(var16));
-            } else {
-               var5.set(var16, ChatFormatting.GRAY + (String)var5.get(var16));
-            }
-         }
-
-         this.renderTooltip(var5, var2, var3);
+         this.renderTooltip(var1, var6, var3, var4);
       } else {
-         super.renderTooltip(var1, var2, var3);
+         super.renderTooltip(var1, var2, var3, var4);
       }
 
    }
 
-   protected void renderBg(float var1, int var2, int var3) {
+   protected void renderBg(PoseStack var1, float var2, int var3, int var4) {
       RenderSystem.color4f(1.0F, 1.0F, 1.0F, 1.0F);
-      CreativeModeTab var4 = CreativeModeTab.TABS[selectedTab];
-      CreativeModeTab[] var5 = CreativeModeTab.TABS;
-      int var6 = var5.length;
+      CreativeModeTab var5 = CreativeModeTab.TABS[selectedTab];
+      CreativeModeTab[] var6 = CreativeModeTab.TABS;
+      int var7 = var6.length;
 
-      int var7;
-      for(var7 = 0; var7 < var6; ++var7) {
-         CreativeModeTab var8 = var5[var7];
+      int var8;
+      for(var8 = 0; var8 < var7; ++var8) {
+         CreativeModeTab var9 = var6[var8];
          this.minecraft.getTextureManager().bind(CREATIVE_TABS_LOCATION);
-         if (var8.getId() != selectedTab) {
-            this.renderTabButton(var8);
+         if (var9.getId() != selectedTab) {
+            this.renderTabButton(var1, var9);
          }
       }
 
-      this.minecraft.getTextureManager().bind(new ResourceLocation("textures/gui/container/creative_inventory/tab_" + var4.getBackgroundSuffix()));
-      this.blit(this.leftPos, this.topPos, 0, 0, this.imageWidth, this.imageHeight);
-      this.searchBox.render(var2, var3, var1);
+      this.minecraft.getTextureManager().bind(new ResourceLocation("textures/gui/container/creative_inventory/tab_" + var5.getBackgroundSuffix()));
+      this.blit(var1, this.leftPos, this.topPos, 0, 0, this.imageWidth, this.imageHeight);
+      this.searchBox.render(var1, var3, var4, var2);
       RenderSystem.color4f(1.0F, 1.0F, 1.0F, 1.0F);
-      int var9 = this.leftPos + 175;
-      var6 = this.topPos + 18;
-      var7 = var6 + 112;
+      int var10 = this.leftPos + 175;
+      var7 = this.topPos + 18;
+      var8 = var7 + 112;
       this.minecraft.getTextureManager().bind(CREATIVE_TABS_LOCATION);
-      if (var4.canScroll()) {
-         this.blit(var9, var6 + (int)((float)(var7 - var6 - 17) * this.scrollOffs), 232 + (this.canScroll() ? 0 : 12), 0, 12, 15);
+      if (var5.canScroll()) {
+         this.blit(var1, var10, var7 + (int)((float)(var8 - var7 - 17) * this.scrollOffs), 232 + (this.canScroll() ? 0 : 12), 0, 12, 15);
       }
 
-      this.renderTabButton(var4);
-      if (var4 == CreativeModeTab.TAB_INVENTORY) {
-         InventoryScreen.renderEntityInInventory(this.leftPos + 88, this.topPos + 45, 20, (float)(this.leftPos + 88 - var2), (float)(this.topPos + 45 - 30 - var3), this.minecraft.player);
+      this.renderTabButton(var1, var5);
+      if (var5 == CreativeModeTab.TAB_INVENTORY) {
+         InventoryScreen.renderEntityInInventory(this.leftPos + 88, this.topPos + 45, 20, (float)(this.leftPos + 88 - var3), (float)(this.topPos + 45 - 30 - var4), this.minecraft.player);
       }
 
    }
 
    protected boolean checkTabClicked(CreativeModeTab var1, double var2, double var4) {
@@ -714,72 +702,70 @@
       }
 
       return var2 >= (double)var7 && var2 <= (double)(var7 + 28) && var4 >= (double)var9 && var4 <= (double)(var9 + 32);
    }
 
-   protected boolean checkTabHovering(CreativeModeTab var1, int var2, int var3) {
-      int var4 = var1.getColumn();
-      int var5 = 28 * var4;
-      byte var6 = 0;
-      if (var1.isAlignedRight()) {
-         var5 = this.imageWidth - 28 * (6 - var4) + 2;
-      } else if (var4 > 0) {
-         var5 += var4;
+   protected boolean checkTabHovering(PoseStack var1, CreativeModeTab var2, int var3, int var4) {
+      int var5 = var2.getColumn();
+      int var6 = 28 * var5;
+      byte var7 = 0;
+      if (var2.isAlignedRight()) {
+         var6 = this.imageWidth - 28 * (6 - var5) + 2;
+      } else if (var5 > 0) {
+         var6 += var5;
       }
 
-      int var7;
-      if (var1.isTopRow()) {
-         var7 = var6 - 32;
+      int var8;
+      if (var2.isTopRow()) {
+         var8 = var7 - 32;
       } else {
-         var7 = var6 + this.imageHeight;
+         var8 = var7 + this.imageHeight;
       }
 
-      if (this.isHovering(var5 + 3, var7 + 3, 23, 27, (double)var2, (double)var3)) {
-         this.renderTooltip(I18n.get(var1.getName()), var2, var3);
+      if (this.isHovering(var6 + 3, var8 + 3, 23, 27, (double)var3, (double)var4)) {
+         this.renderTooltip(var1, new TranslatableComponent(var2.getName()), var3, var4);
          return true;
       } else {
          return false;
       }
    }
 
-   protected void renderTabButton(CreativeModeTab var1) {
-      boolean var2 = var1.getId() == selectedTab;
-      boolean var3 = var1.isTopRow();
-      int var4 = var1.getColumn();
-      int var5 = var4 * 28;
-      int var6 = 0;
-      int var7 = this.leftPos + 28 * var4;
-      int var8 = this.topPos;
-      boolean var9 = true;
-      if (var2) {
-         var6 += 32;
+   protected void renderTabButton(PoseStack var1, CreativeModeTab var2) {
+      boolean var3 = var2.getId() == selectedTab;
+      boolean var4 = var2.isTopRow();
+      int var5 = var2.getColumn();
+      int var6 = var5 * 28;
+      int var7 = 0;
+      int var8 = this.leftPos + 28 * var5;
+      int var9 = this.topPos;
+      boolean var10 = true;
+      if (var3) {
+         var7 += 32;
       }
 
-      if (var1.isAlignedRight()) {
-         var7 = this.leftPos + this.imageWidth - 28 * (6 - var4);
-      } else if (var4 > 0) {
-         var7 += var4;
+      if (var2.isAlignedRight()) {
+         var8 = this.leftPos + this.imageWidth - 28 * (6 - var5);
+      } else if (var5 > 0) {
+         var8 += var5;
       }
 
-      if (var3) {
-         var8 -= 28;
+      if (var4) {
+         var9 -= 28;
       } else {
-         var6 += 64;
-         var8 += this.imageHeight - 4;
+         var7 += 64;
+         var9 += this.imageHeight - 4;
       }
 
-      this.blit(var7, var8, var5, var6, 28, 32);
-      this.setBlitOffset(100);
+      this.blit(var1, var8, var9, var6, var7, 28, 32);
       this.itemRenderer.blitOffset = 100.0F;
-      var7 += 6;
-      var8 += 8 + (var3 ? 1 : -1);
+      var8 += 6;
+      var9 += 8 + (var4 ? 1 : -1);
       RenderSystem.enableRescaleNormal();
-      ItemStack var10 = var1.getIconItem();
-      this.itemRenderer.renderAndDecorateItem(var10, var7, var8);
-      this.itemRenderer.renderGuiItemDecorations(this.font, var10, var7, var8);
+      ItemStack var11 = var2.getIconItem();
+      this.itemRenderer.renderAndDecorateItem(var11, var8, var9);
+      this.itemRenderer.renderGuiItemDecorations(this.font, var11, var8, var9);
       this.itemRenderer.blitOffset = 0.0F;
-      this.setBlitOffset(0);
    }
 
    public int getSelectedTab() {
       return selectedTab;
    }
@@ -800,13 +786,13 @@
       } else if (var3) {
          for(var7 = 0; var7 < Inventory.getSelectionSize(); ++var7) {
             var6.set(var7, var4.inventory.getItem(var7).copy());
          }
 
-         String var9 = var0.options.keyHotbarSlots[var1].getTranslatedKeyMessage();
-         String var10 = var0.options.keyLoadHotbarActivator.getTranslatedKeyMessage();
-         var0.gui.setOverlayMessage((Component)(new TranslatableComponent("inventory.hotbarSaved", new Object[]{var10, var9})), false);
+         Component var9 = var0.options.keyHotbarSlots[var1].getTranslatedKeyMessage();
+         Component var10 = var0.options.keyLoadHotbarActivator.getTranslatedKeyMessage();
+         var0.gui.setOverlayMessage(new TranslatableComponent("inventory.hotbarSaved", new Object[]{var10, var9}), false);
          var5.save();
       }
 
    }
 
