--- net/minecraft/client/gui/screens/inventory/BookViewScreen.java
+++ net/minecraft/client/gui/screens/inventory/BookViewScreen.java
@@ -1,26 +1,28 @@
 package net.minecraft.client.gui.screens.inventory;
 
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableList.Builder;
 import com.mojang.blaze3d.systems.RenderSystem;
+import com.mojang.blaze3d.vertex.PoseStack;
 import java.util.Collections;
-import java.util.Iterator;
 import java.util.List;
 import javax.annotation.Nullable;
 import net.minecraft.ChatFormatting;
 import net.minecraft.client.gui.Font;
 import net.minecraft.client.gui.chat.NarratorChatListener;
 import net.minecraft.client.gui.components.Button;
-import net.minecraft.client.gui.components.ComponentRenderUtils;
 import net.minecraft.client.gui.screens.Screen;
 import net.minecraft.client.resources.language.I18n;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.ListTag;
 import net.minecraft.network.chat.ClickEvent;
+import net.minecraft.network.chat.CommonComponents;
 import net.minecraft.network.chat.Component;
-import net.minecraft.network.chat.TextComponent;
+import net.minecraft.network.chat.FormattedText;
+import net.minecraft.network.chat.MutableComponent;
+import net.minecraft.network.chat.Style;
 import net.minecraft.network.chat.TranslatableComponent;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.util.Mth;
 import net.minecraft.world.item.Item;
 import net.minecraft.world.item.ItemStack;
@@ -31,18 +33,18 @@
    public static final BookViewScreen.BookAccess EMPTY_ACCESS = new BookViewScreen.BookAccess() {
       public int getPageCount() {
          return 0;
       }
 
-      public Component getPageRaw(int var1) {
-         return new TextComponent("");
+      public FormattedText getPageRaw(int var1) {
+         return FormattedText.EMPTY;
       }
    };
    public static final ResourceLocation BOOK_LOCATION = new ResourceLocation("textures/gui/book.png");
    private BookViewScreen.BookAccess bookAccess;
    private int currentPage;
-   private List<Component> cachedPageComponents;
+   private List<FormattedText> cachedPageComponents;
    private int cachedPage;
    private PageButton forwardButton;
    private PageButton backButton;
    private final boolean playTurnSound;
 
@@ -89,11 +91,11 @@
       this.createMenuControls();
       this.createPageControlButtons();
    }
 
    protected void createMenuControls() {
-      this.addButton(new Button(this.width / 2 - 100, 196, 200, 20, I18n.get("gui.done"), (var1) -> {
+      this.addButton(new Button(this.width / 2 - 100, 196, 200, 20, CommonComponents.GUI_DONE, (var1) -> {
          this.minecraft.setScreen((Screen)null);
       }));
    }
 
    protected void createPageControlButtons() {
@@ -148,63 +150,62 @@
             return false;
          }
       }
    }
 
-   public void render(int var1, int var2, float var3) {
-      this.renderBackground();
+   public void render(PoseStack var1, int var2, int var3, float var4) {
+      this.renderBackground(var1);
       RenderSystem.color4f(1.0F, 1.0F, 1.0F, 1.0F);
       this.minecraft.getTextureManager().bind(BOOK_LOCATION);
-      int var4 = (this.width - 192) / 2;
-      boolean var5 = true;
-      this.blit(var4, 2, 0, 0, 192, 192);
-      String var6 = I18n.get("book.pageIndicator", this.currentPage + 1, Math.max(this.getNumPages(), 1));
+      int var5 = (this.width - 192) / 2;
+      boolean var6 = true;
+      this.blit(var1, var5, 2, 0, 0, 192, 192);
+      String var7 = I18n.get("book.pageIndicator", this.currentPage + 1, Math.max(this.getNumPages(), 1));
       if (this.cachedPage != this.currentPage) {
-         Component var7 = this.bookAccess.getPage(this.currentPage);
-         this.cachedPageComponents = ComponentRenderUtils.wrapComponents(var7, 114, this.font, true, true);
+         FormattedText var8 = this.bookAccess.getPage(this.currentPage);
+         this.cachedPageComponents = this.font.getSplitter().splitLines((FormattedText)var8, 114, Style.EMPTY);
       }
 
       this.cachedPage = this.currentPage;
-      int var11 = this.strWidth(var6);
-      this.font.draw(var6, (float)(var4 - var11 + 192 - 44), 18.0F, 0);
+      int var12 = this.strWidth(var7);
+      this.font.draw(var1, (String)var7, (float)(var5 - var12 + 192 - 44), 18.0F, 0);
       this.font.getClass();
-      int var8 = Math.min(128 / 9, this.cachedPageComponents.size());
+      int var9 = Math.min(128 / 9, this.cachedPageComponents.size());
 
-      for(int var9 = 0; var9 < var8; ++var9) {
-         Component var10 = (Component)this.cachedPageComponents.get(var9);
+      for(int var10 = 0; var10 < var9; ++var10) {
+         FormattedText var11 = (FormattedText)this.cachedPageComponents.get(var10);
          Font var10000 = this.font;
-         String var10001 = var10.getColoredString();
-         float var10002 = (float)(var4 + 36);
+         float var10003 = (float)(var5 + 36);
          this.font.getClass();
-         var10000.draw(var10001, var10002, (float)(32 + var9 * 9), 0);
+         var10000.draw(var1, (FormattedText)var11, var10003, (float)(32 + var10 * 9), 0);
       }
 
-      Component var12 = this.getClickedComponentAt((double)var1, (double)var2);
-      if (var12 != null) {
-         this.renderComponentHoverEffect(var12, var1, var2);
+      Style var13 = this.getClickedComponentStyleAt((double)var2, (double)var3);
+      if (var13 != null) {
+         this.renderComponentHoverEffect(var1, var13, var2, var3);
       }
 
-      super.render(var1, var2, var3);
+      super.render(var1, var2, var3, var4);
    }
 
    private int strWidth(String var1) {
       return this.font.width(this.font.isBidirectional() ? this.font.bidirectionalShaping(var1) : var1);
    }
 
    public boolean mouseClicked(double var1, double var3, int var5) {
       if (var5 == 0) {
-         Component var6 = this.getClickedComponentAt(var1, var3);
+         Style var6 = this.getClickedComponentStyleAt(var1, var3);
          if (var6 != null && this.handleComponentClicked(var6)) {
             return true;
          }
       }
 
       return super.mouseClicked(var1, var3, var5);
    }
 
-   public boolean handleComponentClicked(Component var1) {
-      ClickEvent var2 = var1.getStyle().getClickEvent();
+   public boolean handleComponentClicked(Style var1) {
+      ClickEvent var2 = var1.getClickEvent();
       if (var2 == null) {
          return false;
       } else if (var2.getAction() == ClickEvent.Action.CHANGE_PAGE) {
          String var6 = var2.getValue();
 
@@ -223,11 +224,11 @@
          return var3;
       }
    }
 
    @Nullable
-   public Component getClickedComponentAt(double var1, double var3) {
+   public Style getClickedComponentStyleAt(double var1, double var3) {
       if (this.cachedPageComponents == null) {
          return null;
       } else {
          int var5 = Mth.floor(var1 - (double)((this.width - 192) / 2) - 36.0D);
          int var6 = Mth.floor(var3 - 2.0D - 30.0D);
@@ -238,23 +239,12 @@
                this.minecraft.font.getClass();
                if (var6 < 9 * var7 + var7) {
                   this.minecraft.font.getClass();
                   int var8 = var6 / 9;
                   if (var8 >= 0 && var8 < this.cachedPageComponents.size()) {
-                     Component var9 = (Component)this.cachedPageComponents.get(var8);
-                     int var10 = 0;
-                     Iterator var11 = var9.iterator();
-
-                     while(var11.hasNext()) {
-                        Component var12 = (Component)var11.next();
-                        if (var12 instanceof TextComponent) {
-                           var10 += this.minecraft.font.width(var12.getColoredString());
-                           if (var10 > var5) {
-                              return var12;
-                           }
-                        }
-                     }
+                     FormattedText var9 = (FormattedText)this.cachedPageComponents.get(var8);
+                     return this.minecraft.font.getSplitter().componentStyleAtWidth(var9, var5);
                   }
 
                   return null;
                }
             }
@@ -291,12 +281,12 @@
 
       public int getPageCount() {
          return this.pages.size();
       }
 
-      public Component getPageRaw(int var1) {
-         return new TextComponent((String)this.pages.get(var1));
+      public FormattedText getPageRaw(int var1) {
+         return FormattedText.of((String)this.pages.get(var1));
       }
    }
 
    public static class WrittenBookAccess implements BookViewScreen.BookAccess {
       private final List<String> pages;
@@ -305,39 +295,39 @@
          this.pages = readPages(var1);
       }
 
       private static List<String> readPages(ItemStack var0) {
          CompoundTag var1 = var0.getTag();
-         return (List)(var1 != null && WrittenBookItem.makeSureTagIsValid(var1) ? BookViewScreen.convertPages(var1) : ImmutableList.of((new TranslatableComponent("book.invalid.tag", new Object[0])).withStyle(ChatFormatting.DARK_RED).getColoredString()));
+         return (List)(var1 != null && WrittenBookItem.makeSureTagIsValid(var1) ? BookViewScreen.convertPages(var1) : ImmutableList.of(Component.Serializer.toJson((new TranslatableComponent("book.invalid.tag")).withStyle(ChatFormatting.DARK_RED))));
       }
 
       public int getPageCount() {
          return this.pages.size();
       }
 
-      public Component getPageRaw(int var1) {
+      public FormattedText getPageRaw(int var1) {
          String var2 = (String)this.pages.get(var1);
 
          try {
-            Component var3 = Component.Serializer.fromJson(var2);
+            MutableComponent var3 = Component.Serializer.fromJson(var2);
             if (var3 != null) {
                return var3;
             }
          } catch (Exception var4) {
          }
 
-         return new TextComponent(var2);
+         return FormattedText.of(var2);
       }
    }
 
    public interface BookAccess {
       int getPageCount();
 
-      Component getPageRaw(int var1);
+      FormattedText getPageRaw(int var1);
 
-      default Component getPage(int var1) {
-         return (Component)(var1 >= 0 && var1 < this.getPageCount() ? this.getPageRaw(var1) : new TextComponent(""));
+      default FormattedText getPage(int var1) {
+         return var1 >= 0 && var1 < this.getPageCount() ? this.getPageRaw(var1) : FormattedText.EMPTY;
       }
 
       static BookViewScreen.BookAccess fromItem(ItemStack var0) {
          Item var1 = var0.getItem();
          if (var1 == Items.WRITTEN_BOOK) {
