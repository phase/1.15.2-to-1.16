--- net/minecraft/client/gui/screens/Screen.java
+++ net/minecraft/client/gui/screens/Screen.java
@@ -1,52 +1,51 @@
 package net.minecraft.client.gui.screens;
 
 import com.google.common.collect.Lists;
 import com.google.common.collect.Sets;
-import com.google.gson.JsonSyntaxException;
 import com.mojang.blaze3d.platform.InputConstants;
 import com.mojang.blaze3d.systems.RenderSystem;
 import com.mojang.blaze3d.vertex.BufferBuilder;
+import com.mojang.blaze3d.vertex.BufferUploader;
 import com.mojang.blaze3d.vertex.DefaultVertexFormat;
 import com.mojang.blaze3d.vertex.PoseStack;
 import com.mojang.blaze3d.vertex.Tesselator;
-import com.mojang.brigadier.exceptions.CommandSyntaxException;
 import com.mojang.math.Matrix4f;
 import java.io.File;
 import java.net.URI;
 import java.net.URISyntaxException;
-import java.util.ArrayList;
+import java.nio.file.Path;
 import java.util.Arrays;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Locale;
 import java.util.Set;
 import javax.annotation.Nullable;
-import net.minecraft.ChatFormatting;
 import net.minecraft.CrashReport;
 import net.minecraft.CrashReportCategory;
 import net.minecraft.ReportedException;
 import net.minecraft.Util;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.gui.Font;
 import net.minecraft.client.gui.components.AbstractWidget;
+import net.minecraft.client.gui.components.TickableWidget;
 import net.minecraft.client.gui.components.Widget;
 import net.minecraft.client.gui.components.events.AbstractContainerEventHandler;
 import net.minecraft.client.gui.components.events.GuiEventListener;
 import net.minecraft.client.renderer.MultiBufferSource;
 import net.minecraft.client.renderer.entity.ItemRenderer;
-import net.minecraft.nbt.CompoundTag;
-import net.minecraft.nbt.TagParser;
 import net.minecraft.network.chat.ClickEvent;
 import net.minecraft.network.chat.Component;
+import net.minecraft.network.chat.FormattedText;
 import net.minecraft.network.chat.HoverEvent;
+import net.minecraft.network.chat.Style;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.TooltipFlag;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
-public abstract class Screen extends AbstractContainerEventHandler implements Widget {
+public abstract class Screen extends AbstractContainerEventHandler implements TickableWidget, Widget {
    private static final Logger LOGGER = LogManager.getLogger();
    private static final Set<String> ALLOWED_PROTOCOLS = Sets.newHashSet(new String[]{"http", "https"});
    protected final Component title;
    protected final List<GuiEventListener> children = Lists.newArrayList();
    @Nullable
@@ -69,13 +68,13 @@
 
    public String getNarrationMessage() {
       return this.getTitle().getString();
    }
 
-   public void render(int var1, int var2, float var3) {
-      for(int var4 = 0; var4 < this.buttons.size(); ++var4) {
-         ((AbstractWidget)this.buttons.get(var4)).render(var1, var2, var3);
+   public void render(PoseStack var1, int var2, int var3, float var4) {
+      for(int var5 = 0; var5 < this.buttons.size(); ++var5) {
+         ((AbstractWidget)this.buttons.get(var5)).render(var1, var2, var3, var4);
       }
 
    }
 
    public boolean keyPressed(int var1, int var2, int var3) {
@@ -86,11 +85,11 @@
          boolean var4 = !hasShiftDown();
          if (!this.changeFocus(var4)) {
             this.changeFocus(var4);
          }
 
-         return true;
+         return false;
       } else {
          return super.keyPressed(var1, var2, var3);
       }
    }
 
@@ -102,163 +101,141 @@
       this.minecraft.setScreen((Screen)null);
    }
 
    protected <T extends AbstractWidget> T addButton(T var1) {
       this.buttons.add(var1);
+      return (AbstractWidget)this.addWidget(var1);
+   }
+
+   protected <T extends GuiEventListener> T addWidget(T var1) {
       this.children.add(var1);
       return var1;
    }
 
-   protected void renderTooltip(ItemStack var1, int var2, int var3) {
-      this.renderTooltip(this.getTooltipFromItem(var1), var2, var3);
+   protected void renderTooltip(PoseStack var1, ItemStack var2, int var3, int var4) {
+      this.renderTooltip(var1, this.getTooltipFromItem(var2), var3, var4);
    }
 
-   public List<String> getTooltipFromItem(ItemStack var1) {
-      List var2 = var1.getTooltipLines(this.minecraft.player, this.minecraft.options.advancedItemTooltips ? TooltipFlag.Default.ADVANCED : TooltipFlag.Default.NORMAL);
-      ArrayList var3 = Lists.newArrayList();
-      Iterator var4 = var2.iterator();
-
-      while(var4.hasNext()) {
-         Component var5 = (Component)var4.next();
-         var3.add(var5.getColoredString());
-      }
-
-      return var3;
+   public List<Component> getTooltipFromItem(ItemStack var1) {
+      return var1.getTooltipLines(this.minecraft.player, this.minecraft.options.advancedItemTooltips ? TooltipFlag.Default.ADVANCED : TooltipFlag.Default.NORMAL);
    }
 
-   public void renderTooltip(String var1, int var2, int var3) {
-      this.renderTooltip(Arrays.asList(var1), var2, var3);
+   public void renderTooltip(PoseStack var1, FormattedText var2, int var3, int var4) {
+      this.renderTooltip(var1, Arrays.asList(var2), var3, var4);
    }
 
-   public void renderTooltip(List<String> var1, int var2, int var3) {
-      if (!var1.isEmpty()) {
-         RenderSystem.disableRescaleNormal();
-         RenderSystem.disableDepthTest();
-         int var4 = 0;
-         Iterator var5 = var1.iterator();
+   public void renderTooltip(PoseStack var1, List<? extends FormattedText> var2, int var3, int var4) {
+      if (!var2.isEmpty()) {
+         int var5 = 0;
+         Iterator var6 = var2.iterator();
 
-         while(var5.hasNext()) {
-            String var6 = (String)var5.next();
-            int var7 = this.font.width(var6);
-            if (var7 > var4) {
-               var4 = var7;
+         while(var6.hasNext()) {
+            FormattedText var7 = (FormattedText)var6.next();
+            int var8 = this.font.width(var7);
+            if (var8 > var5) {
+               var5 = var8;
             }
          }
 
-         int var17 = var2 + 12;
-         int var18 = var3 - 12;
-         int var8 = 8;
-         if (var1.size() > 1) {
-            var8 += 2 + (var1.size() - 1) * 10;
+         int var20 = var3 + 12;
+         int var21 = var4 - 12;
+         int var9 = 8;
+         if (var2.size() > 1) {
+            var9 += 2 + (var2.size() - 1) * 10;
          }
 
-         if (var17 + var4 > this.width) {
-            var17 -= 28 + var4;
+         if (var20 + var5 > this.width) {
+            var20 -= 28 + var5;
          }
 
-         if (var18 + var8 + 6 > this.height) {
-            var18 = this.height - var8 - 6;
+         if (var21 + var9 + 6 > this.height) {
+            var21 = this.height - var9 - 6;
          }
 
-         this.setBlitOffset(300);
-         this.itemRenderer.blitOffset = 300.0F;
-         int var9 = -267386864;
-         this.fillGradient(var17 - 3, var18 - 4, var17 + var4 + 3, var18 - 3, -267386864, -267386864);
-         this.fillGradient(var17 - 3, var18 + var8 + 3, var17 + var4 + 3, var18 + var8 + 4, -267386864, -267386864);
-         this.fillGradient(var17 - 3, var18 - 3, var17 + var4 + 3, var18 + var8 + 3, -267386864, -267386864);
-         this.fillGradient(var17 - 4, var18 - 3, var17 - 3, var18 + var8 + 3, -267386864, -267386864);
-         this.fillGradient(var17 + var4 + 3, var18 - 3, var17 + var4 + 4, var18 + var8 + 3, -267386864, -267386864);
-         int var10 = 1347420415;
-         int var11 = 1344798847;
-         this.fillGradient(var17 - 3, var18 - 3 + 1, var17 - 3 + 1, var18 + var8 + 3 - 1, 1347420415, 1344798847);
-         this.fillGradient(var17 + var4 + 2, var18 - 3 + 1, var17 + var4 + 3, var18 + var8 + 3 - 1, 1347420415, 1344798847);
-         this.fillGradient(var17 - 3, var18 - 3, var17 + var4 + 3, var18 - 3 + 1, 1347420415, 1347420415);
-         this.fillGradient(var17 - 3, var18 + var8 + 2, var17 + var4 + 3, var18 + var8 + 3, 1344798847, 1344798847);
-         PoseStack var12 = new PoseStack();
-         MultiBufferSource.BufferSource var13 = MultiBufferSource.immediate(Tesselator.getInstance().getBuilder());
-         var12.translate(0.0D, 0.0D, (double)this.itemRenderer.blitOffset);
-         Matrix4f var14 = var12.last().pose();
+         var1.pushPose();
+         int var10 = -267386864;
+         int var11 = 1347420415;
+         int var12 = 1344798847;
+         boolean var13 = true;
+         Tesselator var14 = Tesselator.getInstance();
+         BufferBuilder var15 = var14.getBuilder();
+         var15.begin(7, DefaultVertexFormat.POSITION_COLOR);
+         Matrix4f var16 = var1.last().pose();
+         fillGradient(var16, var15, var20 - 3, var21 - 4, var20 + var5 + 3, var21 - 3, 400, -267386864, -267386864);
+         fillGradient(var16, var15, var20 - 3, var21 + var9 + 3, var20 + var5 + 3, var21 + var9 + 4, 400, -267386864, -267386864);
+         fillGradient(var16, var15, var20 - 3, var21 - 3, var20 + var5 + 3, var21 + var9 + 3, 400, -267386864, -267386864);
+         fillGradient(var16, var15, var20 - 4, var21 - 3, var20 - 3, var21 + var9 + 3, 400, -267386864, -267386864);
+         fillGradient(var16, var15, var20 + var5 + 3, var21 - 3, var20 + var5 + 4, var21 + var9 + 3, 400, -267386864, -267386864);
+         fillGradient(var16, var15, var20 - 3, var21 - 3 + 1, var20 - 3 + 1, var21 + var9 + 3 - 1, 400, 1347420415, 1344798847);
+         fillGradient(var16, var15, var20 + var5 + 2, var21 - 3 + 1, var20 + var5 + 3, var21 + var9 + 3 - 1, 400, 1347420415, 1344798847);
+         fillGradient(var16, var15, var20 - 3, var21 - 3, var20 + var5 + 3, var21 - 3 + 1, 400, 1347420415, 1347420415);
+         fillGradient(var16, var15, var20 - 3, var21 + var9 + 2, var20 + var5 + 3, var21 + var9 + 3, 400, 1344798847, 1344798847);
+         RenderSystem.enableDepthTest();
+         RenderSystem.disableTexture();
+         RenderSystem.enableBlend();
+         RenderSystem.defaultBlendFunc();
+         RenderSystem.shadeModel(7425);
+         var15.end();
+         BufferUploader.end(var15);
+         RenderSystem.shadeModel(7424);
+         RenderSystem.disableBlend();
+         RenderSystem.enableTexture();
+         MultiBufferSource.BufferSource var17 = MultiBufferSource.immediate(Tesselator.getInstance().getBuilder());
+         var1.translate(0.0D, 0.0D, 400.0D);
 
-         for(int var15 = 0; var15 < var1.size(); ++var15) {
-            String var16 = (String)var1.get(var15);
-            if (var16 != null) {
-               this.font.drawInBatch(var16, (float)var17, (float)var18, -1, true, var14, var13, false, 0, 15728880);
+         for(int var18 = 0; var18 < var2.size(); ++var18) {
+            FormattedText var19 = (FormattedText)var2.get(var18);
+            if (var19 != null) {
+               this.font.drawInBatch((FormattedText)var19, (float)var20, (float)var21, -1, true, var16, var17, false, 0, 15728880);
             }
 
-            if (var15 == 0) {
-               var18 += 2;
+            if (var18 == 0) {
+               var21 += 2;
             }
 
-            var18 += 10;
+            var21 += 10;
          }
 
-         var13.endBatch();
-         this.setBlitOffset(0);
-         this.itemRenderer.blitOffset = 0.0F;
-         RenderSystem.enableDepthTest();
-         RenderSystem.enableRescaleNormal();
+         var17.endBatch();
+         var1.popPose();
       }
    }
 
-   protected void renderComponentHoverEffect(Component var1, int var2, int var3) {
-      if (var1 != null && var1.getStyle().getHoverEvent() != null) {
-         HoverEvent var4 = var1.getStyle().getHoverEvent();
-         if (var4.getAction() == HoverEvent.Action.SHOW_ITEM) {
-            ItemStack var5 = ItemStack.EMPTY;
-
-            try {
-               CompoundTag var6 = TagParser.parseTag(var4.getValue().getString());
-               if (var6 instanceof CompoundTag) {
-                  var5 = ItemStack.of((CompoundTag)var6);
+   protected void renderComponentHoverEffect(PoseStack var1, @Nullable Style var2, int var3, int var4) {
+      if (var2 != null && var2.getHoverEvent() != null) {
+         HoverEvent var5 = var2.getHoverEvent();
+         HoverEvent.ItemStackInfo var6 = (HoverEvent.ItemStackInfo)var5.getValue(HoverEvent.Action.SHOW_ITEM);
+         if (var6 != null) {
+            this.renderTooltip(var1, var6.getItemStack(), var3, var4);
+         } else {
+            HoverEvent.EntityTooltipInfo var7 = (HoverEvent.EntityTooltipInfo)var5.getValue(HoverEvent.Action.SHOW_ENTITY);
+            if (var7 != null) {
+               if (this.minecraft.options.advancedItemTooltips) {
+                  this.renderTooltip(var1, var7.getTooltipLines(), var3, var4);
                }
-            } catch (CommandSyntaxException var10) {
-            }
-
-            if (var5.isEmpty()) {
-               this.renderTooltip(ChatFormatting.RED + "Invalid Item!", var2, var3);
             } else {
-               this.renderTooltip(var5, var2, var3);
-            }
-         } else if (var4.getAction() == HoverEvent.Action.SHOW_ENTITY) {
-            if (this.minecraft.options.advancedItemTooltips) {
-               try {
-                  CompoundTag var11 = TagParser.parseTag(var4.getValue().getString());
-                  ArrayList var12 = Lists.newArrayList();
-                  Component var7 = Component.Serializer.fromJson(var11.getString("name"));
-                  if (var7 != null) {
-                     var12.add(var7.getColoredString());
-                  }
-
-                  if (var11.contains("type", 8)) {
-                     String var8 = var11.getString("type");
-                     var12.add("Type: " + var8);
-                  }
-
-                  var12.add(var11.getString("id"));
-                  this.renderTooltip((List)var12, var2, var3);
-               } catch (CommandSyntaxException | JsonSyntaxException var9) {
-                  this.renderTooltip(ChatFormatting.RED + "Invalid Entity!", var2, var3);
+               Component var8 = (Component)var5.getValue(HoverEvent.Action.SHOW_TEXT);
+               if (var8 != null) {
+                  this.renderTooltip(var1, this.minecraft.font.split(var8, Math.max(this.width / 2, 200)), var3, var4);
                }
             }
-         } else if (var4.getAction() == HoverEvent.Action.SHOW_TEXT) {
-            this.renderTooltip(this.minecraft.font.split(var4.getValue().getColoredString(), Math.max(this.width / 2, 200)), var2, var3);
          }
 
       }
    }
 
    protected void insertText(String var1, boolean var2) {
    }
 
-   public boolean handleComponentClicked(Component var1) {
+   public boolean handleComponentClicked(@Nullable Style var1) {
       if (var1 == null) {
          return false;
       } else {
-         ClickEvent var2 = var1.getStyle().getClickEvent();
+         ClickEvent var2 = var1.getClickEvent();
          if (hasShiftDown()) {
-            if (var1.getStyle().getInsertion() != null) {
-               this.insertText(var1.getStyle().getInsertion(), false);
+            if (var1.getInsertion() != null) {
+               this.insertText(var1.getInsertion(), false);
             }
          } else if (var2 != null) {
             URI var3;
             if (var2.getAction() == ClickEvent.Action.OPEN_URL) {
                if (!this.minecraft.options.chatLinks) {
@@ -327,15 +304,10 @@
       this.children.clear();
       this.setFocused((GuiEventListener)null);
       this.init();
    }
 
-   public void setSize(int var1, int var2) {
-      this.width = var1;
-      this.height = var2;
-   }
-
    public List<? extends GuiEventListener> children() {
       return this.children;
    }
 
    protected void init() {
@@ -345,19 +317,19 @@
    }
 
    public void removed() {
    }
 
-   public void renderBackground() {
-      this.renderBackground(0);
+   public void renderBackground(PoseStack var1) {
+      this.renderBackground(var1, 0);
    }
 
-   public void renderBackground(int var1) {
+   public void renderBackground(PoseStack var1, int var2) {
       if (this.minecraft.level != null) {
-         this.fillGradient(0, 0, this.width, this.height, -1072689136, -804253680);
+         this.fillGradient(var1, 0, 0, this.width, this.height, -1072689136, -804253680);
       } else {
-         this.renderDirtBackground(var1);
+         this.renderDirtBackground(var2);
       }
 
    }
 
    public void renderDirtBackground(int var1) {
@@ -453,6 +425,9 @@
    }
 
    public boolean isMouseOver(double var1, double var3) {
       return true;
    }
+
+   public void onFilesDrop(List<Path> var1) {
+   }
 }
