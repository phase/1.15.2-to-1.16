--- net/minecraft/client/gui/screens/PresetFlatWorldScreen.java
+++ net/minecraft/client/gui/screens/PresetFlatWorldScreen.java
@@ -1,63 +1,184 @@
 package net.minecraft.client.gui.screens;
 
+import com.google.common.base.Splitter;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.mojang.blaze3d.systems.RenderSystem;
+import com.mojang.blaze3d.vertex.PoseStack;
+import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collections;
+import java.util.HashMap;
 import java.util.Iterator;
 import java.util.List;
+import java.util.Optional;
 import javax.annotation.Nullable;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.gui.GuiComponent;
 import net.minecraft.client.gui.chat.NarratorChatListener;
 import net.minecraft.client.gui.components.Button;
 import net.minecraft.client.gui.components.EditBox;
 import net.minecraft.client.gui.components.ObjectSelectionList;
-import net.minecraft.client.resources.language.I18n;
+import net.minecraft.core.Registry;
+import net.minecraft.network.chat.CommonComponents;
+import net.minecraft.network.chat.Component;
+import net.minecraft.network.chat.FormattedText;
 import net.minecraft.network.chat.TranslatableComponent;
+import net.minecraft.resources.ResourceLocation;
 import net.minecraft.world.item.Item;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.Items;
 import net.minecraft.world.level.ItemLike;
 import net.minecraft.world.level.biome.Biome;
 import net.minecraft.world.level.biome.Biomes;
+import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.Blocks;
-import net.minecraft.world.level.chunk.ChunkGeneratorType;
+import net.minecraft.world.level.levelgen.StructureSettings;
+import net.minecraft.world.level.levelgen.feature.StructureFeature;
 import net.minecraft.world.level.levelgen.flat.FlatLayerInfo;
 import net.minecraft.world.level.levelgen.flat.FlatLevelGeneratorSettings;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
 
 public class PresetFlatWorldScreen extends Screen {
+   private static final Logger LOGGER = LogManager.getLogger();
    private static final List<PresetFlatWorldScreen.PresetInfo> PRESETS = Lists.newArrayList();
    private final CreateFlatWorldScreen parent;
-   private String shareText;
-   private String listText;
+   private Component shareText;
+   private Component listText;
    private PresetFlatWorldScreen.PresetsList list;
    private Button selectButton;
    private EditBox export;
+   private StructureSettings structureSettings;
 
    public PresetFlatWorldScreen(CreateFlatWorldScreen var1) {
-      super(new TranslatableComponent("createWorld.customize.presets.title", new Object[0]));
+      super(new TranslatableComponent("createWorld.customize.presets.title"));
       this.parent = var1;
    }
 
+   @Nullable
+   private static FlatLayerInfo getLayerInfoFromString(String var0, int var1) {
+      String[] var2 = var0.split("\\*", 2);
+      int var3;
+      if (var2.length == 2) {
+         try {
+            var3 = Math.max(Integer.parseInt(var2[0]), 0);
+         } catch (NumberFormatException var10) {
+            LOGGER.error("Error while parsing flat world string => {}", var10.getMessage());
+            return null;
+         }
+      } else {
+         var3 = 1;
+      }
+
+      int var4 = Math.min(var1 + var3, 256);
+      int var5 = var4 - var1;
+      String var7 = var2[var2.length - 1];
+
+      Block var6;
+      try {
+         var6 = (Block)Registry.BLOCK.getOptional(new ResourceLocation(var7)).orElse((Object)null);
+      } catch (Exception var9) {
+         LOGGER.error("Error while parsing flat world string => {}", var9.getMessage());
+         return null;
+      }
+
+      if (var6 == null) {
+         LOGGER.error("Error while parsing flat world string => Unknown block, {}", var7);
+         return null;
+      } else {
+         FlatLayerInfo var8 = new FlatLayerInfo(var5, var6);
+         var8.setStart(var1);
+         return var8;
+      }
+   }
+
+   private static List<FlatLayerInfo> getLayersInfoFromString(String var0) {
+      ArrayList var1 = Lists.newArrayList();
+      String[] var2 = var0.split(",");
+      int var3 = 0;
+      String[] var4 = var2;
+      int var5 = var2.length;
+
+      for(int var6 = 0; var6 < var5; ++var6) {
+         String var7 = var4[var6];
+         FlatLayerInfo var8 = getLayerInfoFromString(var7, var3);
+         if (var8 == null) {
+            return Collections.emptyList();
+         }
+
+         var1.add(var8);
+         var3 += var8.getHeight();
+      }
+
+      return var1;
+   }
+
+   public static FlatLevelGeneratorSettings fromString(String var0, StructureSettings var1) {
+      Iterator var2 = Splitter.on(';').split(var0).iterator();
+      if (!var2.hasNext()) {
+         return FlatLevelGeneratorSettings.getDefault();
+      } else {
+         FlatLevelGeneratorSettings var3 = new FlatLevelGeneratorSettings(var1);
+         List var4 = getLayersInfoFromString((String)var2.next());
+         if (var4.isEmpty()) {
+            return FlatLevelGeneratorSettings.getDefault();
+         } else {
+            var3.getLayersInfo().addAll(var4);
+            var3.updateLayers();
+            Biome var5 = Biomes.PLAINS;
+            if (var2.hasNext()) {
+               try {
+                  ResourceLocation var6 = new ResourceLocation((String)var2.next());
+                  var5 = (Biome)Registry.BIOME.getOptional(var6).orElseThrow(() -> {
+                     return new IllegalArgumentException("Invalid Biome: " + var6);
+                  });
+               } catch (Exception var7) {
+                  LOGGER.error("Error while parsing flat world string => {}", var7.getMessage());
+               }
+            }
+
+            var3.setBiome(var5);
+            return var3;
+         }
+      }
+   }
+
+   private static String save(FlatLevelGeneratorSettings var0) {
+      StringBuilder var1 = new StringBuilder();
+
+      for(int var2 = 0; var2 < var0.getLayersInfo().size(); ++var2) {
+         if (var2 > 0) {
+            var1.append(",");
+         }
+
+         var1.append(var0.getLayersInfo().get(var2));
+      }
+
+      var1.append(";");
+      var1.append(Registry.BIOME.getKey(var0.getBiome()));
+      return var1.toString();
+   }
+
    protected void init() {
       this.minecraft.keyboardHandler.setSendRepeatsToGui(true);
-      this.shareText = I18n.get("createWorld.customize.presets.share");
-      this.listText = I18n.get("createWorld.customize.presets.list");
+      this.shareText = new TranslatableComponent("createWorld.customize.presets.share");
+      this.listText = new TranslatableComponent("createWorld.customize.presets.list");
       this.export = new EditBox(this.font, 50, 40, this.width - 100, 20, this.shareText);
       this.export.setMaxLength(1230);
-      this.export.setValue(this.parent.saveLayerString());
+      this.export.setValue(save(this.parent.settings()));
+      this.structureSettings = this.parent.settings().structureSettings();
       this.children.add(this.export);
       this.list = new PresetFlatWorldScreen.PresetsList();
       this.children.add(this.list);
-      this.selectButton = (Button)this.addButton(new Button(this.width / 2 - 155, this.height - 28, 150, 20, I18n.get("createWorld.customize.presets.select"), (var1) -> {
-         this.parent.loadLayers(this.export.getValue());
+      this.selectButton = (Button)this.addButton(new Button(this.width / 2 - 155, this.height - 28, 150, 20, new TranslatableComponent("createWorld.customize.presets.select"), (var1) -> {
+         FlatLevelGeneratorSettings var2 = fromString(this.export.getValue(), this.structureSettings);
+         this.parent.setConfig(var2);
          this.minecraft.setScreen(this.parent);
       }));
-      this.addButton(new Button(this.width / 2 + 5, this.height - 28, 150, 20, I18n.get("gui.cancel"), (var1) -> {
+      this.addButton(new Button(this.width / 2 + 5, this.height - 28, 150, 20, CommonComponents.GUI_CANCEL, (var1) -> {
          this.minecraft.setScreen(this.parent);
       }));
       this.updateButtonValidity(this.list.getSelected() != null);
    }
 
@@ -77,21 +198,21 @@
 
    public void removed() {
       this.minecraft.keyboardHandler.setSendRepeatsToGui(false);
    }
 
-   public void render(int var1, int var2, float var3) {
-      this.renderBackground();
-      this.list.render(var1, var2, var3);
+   public void render(PoseStack var1, int var2, int var3, float var4) {
+      this.renderBackground(var1);
+      this.list.render(var1, var2, var3, var4);
       RenderSystem.pushMatrix();
       RenderSystem.translatef(0.0F, 0.0F, 400.0F);
-      this.drawCenteredString(this.font, this.title.getColoredString(), this.width / 2, 8, 16777215);
-      this.drawString(this.font, this.shareText, 50, 30, 10526880);
-      this.drawString(this.font, this.listText, 50, 70, 10526880);
+      this.drawCenteredString(var1, this.font, this.title, this.width / 2, 8, 16777215);
+      this.drawString(var1, this.font, this.shareText, 50, 30, 10526880);
+      this.drawString(var1, this.font, this.listText, 50, 70, 10526880);
       RenderSystem.popMatrix();
-      this.export.render(var1, var2, var3);
-      super.render(var1, var2, var3);
+      this.export.render(var1, var2, var3, var4);
+      super.render(var1, var2, var3, var4);
    }
 
    public void tick() {
       this.export.tick();
       super.tick();
@@ -99,51 +220,64 @@
 
    public void updateButtonValidity(boolean var1) {
       this.selectButton.active = var1 || this.export.getValue().length() > 1;
    }
 
-   private static void preset(String var0, ItemLike var1, Biome var2, List<String> var3, FlatLayerInfo... var4) {
-      FlatLevelGeneratorSettings var5 = (FlatLevelGeneratorSettings)ChunkGeneratorType.FLAT.createSettings();
+   private static void preset(Component var0, ItemLike var1, Biome var2, List<StructureFeature<?>> var3, boolean var4, boolean var5, boolean var6, FlatLayerInfo... var7) {
+      HashMap var8 = Maps.newHashMap();
+      Iterator var9 = var3.iterator();
 
-      for(int var6 = var4.length - 1; var6 >= 0; --var6) {
-         var5.getLayersInfo().add(var4[var6]);
+      while(var9.hasNext()) {
+         StructureFeature var10 = (StructureFeature)var9.next();
+         var8.put(var10, StructureSettings.DEFAULTS.get(var10));
       }
 
-      var5.setBiome(var2);
-      var5.updateLayers();
-      Iterator var8 = var3.iterator();
+      StructureSettings var13 = new StructureSettings(var4 ? Optional.of(StructureSettings.DEFAULT_STRONGHOLD) : Optional.empty(), var8);
+      FlatLevelGeneratorSettings var12 = new FlatLevelGeneratorSettings(var13);
+      if (var5) {
+         var12.setDecoration();
+      }
 
-      while(var8.hasNext()) {
-         String var7 = (String)var8.next();
-         var5.getStructuresOptions().put(var7, Maps.newHashMap());
+      if (var6) {
+         var12.setAddLakes();
       }
 
-      PRESETS.add(new PresetFlatWorldScreen.PresetInfo(var1.asItem(), var0, var5.toString()));
+      for(int var11 = var7.length - 1; var11 >= 0; --var11) {
+         var12.getLayersInfo().add(var7[var11]);
+      }
+
+      var12.setBiome(var2);
+      var12.updateLayers();
+      PRESETS.add(new PresetFlatWorldScreen.PresetInfo(var1.asItem(), var0, var12.withStructureSettings(var13)));
    }
 
    static {
-      preset(I18n.get("createWorld.customize.preset.classic_flat"), Blocks.GRASS_BLOCK, Biomes.PLAINS, Arrays.asList("village"), new FlatLayerInfo(1, Blocks.GRASS_BLOCK), new FlatLayerInfo(2, Blocks.DIRT), new FlatLayerInfo(1, Blocks.BEDROCK));
-      preset(I18n.get("createWorld.customize.preset.tunnelers_dream"), Blocks.STONE, Biomes.MOUNTAINS, Arrays.asList("biome_1", "dungeon", "decoration", "stronghold", "mineshaft"), new FlatLayerInfo(1, Blocks.GRASS_BLOCK), new FlatLayerInfo(5, Blocks.DIRT), new FlatLayerInfo(230, Blocks.STONE), new FlatLayerInfo(1, Blocks.BEDROCK));
-      preset(I18n.get("createWorld.customize.preset.water_world"), Items.WATER_BUCKET, Biomes.DEEP_OCEAN, Arrays.asList("biome_1", "oceanmonument"), new FlatLayerInfo(90, Blocks.WATER), new FlatLayerInfo(5, Blocks.SAND), new FlatLayerInfo(5, Blocks.DIRT), new FlatLayerInfo(5, Blocks.STONE), new FlatLayerInfo(1, Blocks.BEDROCK));
-      preset(I18n.get("createWorld.customize.preset.overworld"), Blocks.GRASS, Biomes.PLAINS, Arrays.asList("village", "biome_1", "decoration", "stronghold", "mineshaft", "dungeon", "lake", "lava_lake", "pillager_outpost"), new FlatLayerInfo(1, Blocks.GRASS_BLOCK), new FlatLayerInfo(3, Blocks.DIRT), new FlatLayerInfo(59, Blocks.STONE), new FlatLayerInfo(1, Blocks.BEDROCK));
-      preset(I18n.get("createWorld.customize.preset.snowy_kingdom"), Blocks.SNOW, Biomes.SNOWY_TUNDRA, Arrays.asList("village", "biome_1"), new FlatLayerInfo(1, Blocks.SNOW), new FlatLayerInfo(1, Blocks.GRASS_BLOCK), new FlatLayerInfo(3, Blocks.DIRT), new FlatLayerInfo(59, Blocks.STONE), new FlatLayerInfo(1, Blocks.BEDROCK));
-      preset(I18n.get("createWorld.customize.preset.bottomless_pit"), Items.FEATHER, Biomes.PLAINS, Arrays.asList("village", "biome_1"), new FlatLayerInfo(1, Blocks.GRASS_BLOCK), new FlatLayerInfo(3, Blocks.DIRT), new FlatLayerInfo(2, Blocks.COBBLESTONE));
-      preset(I18n.get("createWorld.customize.preset.desert"), Blocks.SAND, Biomes.DESERT, Arrays.asList("village", "biome_1", "decoration", "stronghold", "mineshaft", "dungeon"), new FlatLayerInfo(8, Blocks.SAND), new FlatLayerInfo(52, Blocks.SANDSTONE), new FlatLayerInfo(3, Blocks.STONE), new FlatLayerInfo(1, Blocks.BEDROCK));
-      preset(I18n.get("createWorld.customize.preset.redstone_ready"), Items.REDSTONE, Biomes.DESERT, Collections.emptyList(), new FlatLayerInfo(52, Blocks.SANDSTONE), new FlatLayerInfo(3, Blocks.STONE), new FlatLayerInfo(1, Blocks.BEDROCK));
-      preset(I18n.get("createWorld.customize.preset.the_void"), Blocks.BARRIER, Biomes.THE_VOID, Arrays.asList("decoration"), new FlatLayerInfo(1, Blocks.AIR));
+      preset(new TranslatableComponent("createWorld.customize.preset.classic_flat"), Blocks.GRASS_BLOCK, Biomes.PLAINS, Arrays.asList(StructureFeature.VILLAGE), false, false, false, new FlatLayerInfo(1, Blocks.GRASS_BLOCK), new FlatLayerInfo(2, Blocks.DIRT), new FlatLayerInfo(1, Blocks.BEDROCK));
+      preset(new TranslatableComponent("createWorld.customize.preset.tunnelers_dream"), Blocks.STONE, Biomes.MOUNTAINS, Arrays.asList(StructureFeature.SWAMP_HUT, StructureFeature.DESERT_PYRAMID, StructureFeature.JUNGLE_TEMPLE, StructureFeature.IGLOO, StructureFeature.OCEAN_RUIN, StructureFeature.SHIPWRECK, StructureFeature.MINESHAFT), true, true, false, new FlatLayerInfo(1, Blocks.GRASS_BLOCK), new FlatLayerInfo(5, Blocks.DIRT), new FlatLayerInfo(230, Blocks.STONE), new FlatLayerInfo(1, Blocks.BEDROCK));
+      preset(new TranslatableComponent("createWorld.customize.preset.water_world"), Items.WATER_BUCKET, Biomes.DEEP_OCEAN, Arrays.asList(StructureFeature.SWAMP_HUT, StructureFeature.DESERT_PYRAMID, StructureFeature.JUNGLE_TEMPLE, StructureFeature.IGLOO, StructureFeature.OCEAN_RUIN, StructureFeature.SHIPWRECK, StructureFeature.OCEAN_MONUMENT), false, false, false, new FlatLayerInfo(90, Blocks.WATER), new FlatLayerInfo(5, Blocks.SAND), new FlatLayerInfo(5, Blocks.DIRT), new FlatLayerInfo(5, Blocks.STONE), new FlatLayerInfo(1, Blocks.BEDROCK));
+      preset(new TranslatableComponent("createWorld.customize.preset.overworld"), Blocks.GRASS, Biomes.PLAINS, Arrays.asList(StructureFeature.VILLAGE, StructureFeature.SWAMP_HUT, StructureFeature.DESERT_PYRAMID, StructureFeature.JUNGLE_TEMPLE, StructureFeature.IGLOO, StructureFeature.OCEAN_RUIN, StructureFeature.SHIPWRECK, StructureFeature.MINESHAFT, StructureFeature.PILLAGER_OUTPOST, StructureFeature.RUINED_PORTAL), true, true, true, new FlatLayerInfo(1, Blocks.GRASS_BLOCK), new FlatLayerInfo(3, Blocks.DIRT), new FlatLayerInfo(59, Blocks.STONE), new FlatLayerInfo(1, Blocks.BEDROCK));
+      preset(new TranslatableComponent("createWorld.customize.preset.snowy_kingdom"), Blocks.SNOW, Biomes.SNOWY_TUNDRA, Arrays.asList(StructureFeature.VILLAGE, StructureFeature.SWAMP_HUT, StructureFeature.DESERT_PYRAMID, StructureFeature.JUNGLE_TEMPLE, StructureFeature.IGLOO, StructureFeature.OCEAN_RUIN, StructureFeature.SHIPWRECK), false, false, false, new FlatLayerInfo(1, Blocks.SNOW), new FlatLayerInfo(1, Blocks.GRASS_BLOCK), new FlatLayerInfo(3, Blocks.DIRT), new FlatLayerInfo(59, Blocks.STONE), new FlatLayerInfo(1, Blocks.BEDROCK));
+      preset(new TranslatableComponent("createWorld.customize.preset.bottomless_pit"), Items.FEATHER, Biomes.PLAINS, Arrays.asList(StructureFeature.VILLAGE, StructureFeature.SWAMP_HUT, StructureFeature.DESERT_PYRAMID, StructureFeature.JUNGLE_TEMPLE, StructureFeature.IGLOO, StructureFeature.OCEAN_RUIN, StructureFeature.SHIPWRECK), false, false, false, new FlatLayerInfo(1, Blocks.GRASS_BLOCK), new FlatLayerInfo(3, Blocks.DIRT), new FlatLayerInfo(2, Blocks.COBBLESTONE));
+      preset(new TranslatableComponent("createWorld.customize.preset.desert"), Blocks.SAND, Biomes.DESERT, Arrays.asList(StructureFeature.VILLAGE, StructureFeature.SWAMP_HUT, StructureFeature.DESERT_PYRAMID, StructureFeature.JUNGLE_TEMPLE, StructureFeature.IGLOO, StructureFeature.OCEAN_RUIN, StructureFeature.SHIPWRECK, StructureFeature.MINESHAFT), true, true, false, new FlatLayerInfo(8, Blocks.SAND), new FlatLayerInfo(52, Blocks.SANDSTONE), new FlatLayerInfo(3, Blocks.STONE), new FlatLayerInfo(1, Blocks.BEDROCK));
+      preset(new TranslatableComponent("createWorld.customize.preset.redstone_ready"), Items.REDSTONE, Biomes.DESERT, Collections.emptyList(), false, false, false, new FlatLayerInfo(52, Blocks.SANDSTONE), new FlatLayerInfo(3, Blocks.STONE), new FlatLayerInfo(1, Blocks.BEDROCK));
+      preset(new TranslatableComponent("createWorld.customize.preset.the_void"), Blocks.BARRIER, Biomes.THE_VOID, Collections.emptyList(), false, true, false, new FlatLayerInfo(1, Blocks.AIR));
    }
 
    static class PresetInfo {
       public final Item icon;
-      public final String name;
-      public final String value;
+      public final Component name;
+      public final FlatLevelGeneratorSettings settings;
 
-      public PresetInfo(Item var1, String var2, String var3) {
+      public PresetInfo(Item var1, Component var2, FlatLevelGeneratorSettings var3) {
          this.icon = var1;
          this.name = var2;
-         this.value = var3;
+         this.settings = var3;
       }
+
+      public Component getName() {
+         return this.name;
+      }
    }
 
    class PresetsList extends ObjectSelectionList<PresetFlatWorldScreen.PresetsList.Entry> {
       public PresetsList() {
          super(PresetFlatWorldScreen.this.minecraft, PresetFlatWorldScreen.this.width, PresetFlatWorldScreen.this.height, 80, PresetFlatWorldScreen.this.height - 37, 24);
@@ -155,11 +289,11 @@
       }
 
       public void setSelected(@Nullable PresetFlatWorldScreen.PresetsList.Entry var1) {
          super.setSelected(var1);
          if (var1 != null) {
-            NarratorChatListener.INSTANCE.sayNow((new TranslatableComponent("narrator.select", new Object[]{((PresetFlatWorldScreen.PresetInfo)PresetFlatWorldScreen.PRESETS.get(this.children().indexOf(var1))).name})).getString());
+            NarratorChatListener.INSTANCE.sayNow((new TranslatableComponent("narrator.select", new Object[]{((PresetFlatWorldScreen.PresetInfo)PresetFlatWorldScreen.PRESETS.get(this.children().indexOf(var1))).getName()})).getString());
          }
 
       }
 
       protected void moveSelection(int var1) {
@@ -185,14 +319,14 @@
 
       public class Entry extends ObjectSelectionList.Entry<PresetFlatWorldScreen.PresetsList.Entry> {
          public Entry() {
          }
 
-         public void render(int var1, int var2, int var3, int var4, int var5, int var6, int var7, boolean var8, float var9) {
-            PresetFlatWorldScreen.PresetInfo var10 = (PresetFlatWorldScreen.PresetInfo)PresetFlatWorldScreen.PRESETS.get(var1);
-            this.blitSlot(var3, var2, var10.icon);
-            PresetFlatWorldScreen.this.font.draw(var10.name, (float)(var3 + 18 + 5), (float)(var2 + 6), 16777215);
+         public void render(PoseStack var1, int var2, int var3, int var4, int var5, int var6, int var7, int var8, boolean var9, float var10) {
+            PresetFlatWorldScreen.PresetInfo var11 = (PresetFlatWorldScreen.PresetInfo)PresetFlatWorldScreen.PRESETS.get(var2);
+            this.blitSlot(var1, var4, var3, var11.icon);
+            PresetFlatWorldScreen.this.font.draw(var1, (FormattedText)var11.name, (float)(var4 + 18 + 5), (float)(var3 + 6), 16777215);
          }
 
          public boolean mouseClicked(double var1, double var3, int var5) {
             if (var5 == 0) {
                this.select();
@@ -202,24 +336,26 @@
          }
 
          private void select() {
             PresetsList.this.setSelected(this);
             PresetFlatWorldScreen.this.updateButtonValidity(true);
-            PresetFlatWorldScreen.this.export.setValue(((PresetFlatWorldScreen.PresetInfo)PresetFlatWorldScreen.PRESETS.get(PresetsList.this.children().indexOf(this))).value);
+            PresetFlatWorldScreen.PresetInfo var1 = (PresetFlatWorldScreen.PresetInfo)PresetFlatWorldScreen.PRESETS.get(PresetsList.this.children().indexOf(this));
+            PresetFlatWorldScreen.this.export.setValue(PresetFlatWorldScreen.save(var1.settings));
             PresetFlatWorldScreen.this.export.moveCursorToStart();
+            PresetFlatWorldScreen.this.structureSettings = var1.settings.structureSettings();
          }
 
-         private void blitSlot(int var1, int var2, Item var3) {
-            this.blitSlotBg(var1 + 1, var2 + 1);
+         private void blitSlot(PoseStack var1, int var2, int var3, Item var4) {
+            this.blitSlotBg(var1, var2 + 1, var3 + 1);
             RenderSystem.enableRescaleNormal();
-            PresetFlatWorldScreen.this.itemRenderer.renderGuiItem(new ItemStack(var3), var1 + 2, var2 + 2);
+            PresetFlatWorldScreen.this.itemRenderer.renderGuiItem(new ItemStack(var4), var2 + 2, var3 + 2);
             RenderSystem.disableRescaleNormal();
          }
 
-         private void blitSlotBg(int var1, int var2) {
+         private void blitSlotBg(PoseStack var1, int var2, int var3) {
             RenderSystem.color4f(1.0F, 1.0F, 1.0F, 1.0F);
             PresetsList.this.minecraft.getTextureManager().bind(GuiComponent.STATS_ICON_LOCATION);
-            GuiComponent.blit(var1, var2, PresetFlatWorldScreen.this.getBlitOffset(), 0.0F, 0.0F, 18, 18, 128, 128);
+            GuiComponent.blit(var1, var2, var3, PresetFlatWorldScreen.this.getBlitOffset(), 0.0F, 0.0F, 18, 18, 128, 128);
          }
       }
    }
 }
