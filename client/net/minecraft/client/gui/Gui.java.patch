--- net/minecraft/client/gui/Gui.java
+++ net/minecraft/client/gui/Gui.java
@@ -6,18 +6,22 @@
 import com.google.common.collect.Ordering;
 import com.mojang.blaze3d.platform.GlStateManager;
 import com.mojang.blaze3d.systems.RenderSystem;
 import com.mojang.blaze3d.vertex.BufferBuilder;
 import com.mojang.blaze3d.vertex.DefaultVertexFormat;
+import com.mojang.blaze3d.vertex.PoseStack;
 import com.mojang.blaze3d.vertex.Tesselator;
+import com.mojang.datafixers.util.Pair;
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
 import java.util.Random;
+import java.util.UUID;
 import java.util.stream.Collectors;
+import javax.annotation.Nullable;
 import net.minecraft.ChatFormatting;
 import net.minecraft.Util;
 import net.minecraft.client.AttackIndicatorStatus;
 import net.minecraft.client.Camera;
 import net.minecraft.client.Minecraft;
@@ -40,24 +44,27 @@
 import net.minecraft.client.resources.MobEffectTextureManager;
 import net.minecraft.client.resources.language.I18n;
 import net.minecraft.core.BlockPos;
 import net.minecraft.network.chat.ChatType;
 import net.minecraft.network.chat.Component;
+import net.minecraft.network.chat.FormattedText;
+import net.minecraft.network.chat.MutableComponent;
 import net.minecraft.network.chat.TextComponent;
+import net.minecraft.network.chat.TranslatableComponent;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.tags.FluidTags;
+import net.minecraft.util.FastColor;
 import net.minecraft.util.Mth;
 import net.minecraft.util.StringUtil;
 import net.minecraft.world.MenuProvider;
 import net.minecraft.world.effect.MobEffect;
 import net.minecraft.world.effect.MobEffectInstance;
 import net.minecraft.world.effect.MobEffects;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.HumanoidArm;
 import net.minecraft.world.entity.LivingEntity;
-import net.minecraft.world.entity.ai.attributes.AttributeInstance;
-import net.minecraft.world.entity.monster.SharedMonsterAttributes;
+import net.minecraft.world.entity.ai.attributes.Attributes;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.food.FoodData;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.level.GameType;
 import net.minecraft.world.level.block.Blocks;
@@ -77,11 +84,12 @@
    private final Random random = new Random();
    private final Minecraft minecraft;
    private final ItemRenderer itemRenderer;
    private final ChatComponent chat;
    private int tickCount;
-   private String overlayMessageString = "";
+   @Nullable
+   private Component overlayMessageString;
    private int overlayMessageTime;
    private boolean animateOverlayMessageColor;
    public float vignetteBrightness = 1.0F;
    private int toolHighlightTimer;
    private ItemStack lastToolHighlight;
@@ -89,12 +97,14 @@
    private final SubtitleOverlay subtitleOverlay;
    private final SpectatorGui spectatorGui;
    private final PlayerTabOverlay tabList;
    private final BossHealthOverlay bossOverlay;
    private int titleTime;
-   private String title;
-   private String subtitle;
+   @Nullable
+   private Component title;
+   @Nullable
+   private Component subtitle;
    private int titleFadeInTime;
    private int titleStayTime;
    private int titleFadeOutTime;
    private int lastHealth;
    private int displayHealth;
@@ -104,12 +114,10 @@
    private int screenHeight;
    private final Map<ChatType, List<ChatListener>> chatListeners;
 
    public Gui(Minecraft var1) {
       this.lastToolHighlight = ItemStack.EMPTY;
-      this.title = "";
-      this.subtitle = "";
       this.chatListeners = Maps.newHashMap();
       this.minecraft = var1;
       this.itemRenderer = var1.getItemRenderer();
       this.debugScreen = new DebugScreenOverlay(var1);
       this.spectatorGui = new SpectatorGui(var1);
@@ -138,258 +146,260 @@
       this.titleFadeInTime = 10;
       this.titleStayTime = 70;
       this.titleFadeOutTime = 20;
    }
 
-   public void render(float var1) {
+   public void render(PoseStack var1, float var2) {
       this.screenWidth = this.minecraft.getWindow().getGuiScaledWidth();
       this.screenHeight = this.minecraft.getWindow().getGuiScaledHeight();
-      Font var2 = this.getFont();
+      Font var3 = this.getFont();
       RenderSystem.enableBlend();
       if (Minecraft.useFancyGraphics()) {
          this.renderVignette(this.minecraft.getCameraEntity());
       } else {
          RenderSystem.enableDepthTest();
          RenderSystem.defaultBlendFunc();
       }
 
-      ItemStack var3 = this.minecraft.player.inventory.getArmor(3);
-      if (this.minecraft.options.thirdPersonView == 0 && var3.getItem() == Blocks.CARVED_PUMPKIN.asItem()) {
+      ItemStack var4 = this.minecraft.player.inventory.getArmor(3);
+      if (this.minecraft.options.thirdPersonView == 0 && var4.getItem() == Blocks.CARVED_PUMPKIN.asItem()) {
          this.renderPumpkin();
       }
 
-      float var4;
+      float var5;
       if (!this.minecraft.player.hasEffect(MobEffects.CONFUSION)) {
-         var4 = Mth.lerp(var1, this.minecraft.player.oPortalTime, this.minecraft.player.portalTime);
-         if (var4 > 0.0F) {
-            this.renderPortalOverlay(var4);
+         var5 = Mth.lerp(var2, this.minecraft.player.oPortalTime, this.minecraft.player.portalTime);
+         if (var5 > 0.0F) {
+            this.renderPortalOverlay(var5);
          }
       }
 
       if (this.minecraft.gameMode.getPlayerMode() == GameType.SPECTATOR) {
-         this.spectatorGui.renderHotbar(var1);
+         this.spectatorGui.renderHotbar(var1, var2);
       } else if (!this.minecraft.options.hideGui) {
-         this.renderHotbar(var1);
+         this.renderHotbar(var2, var1);
       }
 
       if (!this.minecraft.options.hideGui) {
          RenderSystem.color4f(1.0F, 1.0F, 1.0F, 1.0F);
          this.minecraft.getTextureManager().bind(GUI_ICONS_LOCATION);
          RenderSystem.enableBlend();
          RenderSystem.enableAlphaTest();
-         this.renderCrosshair();
+         this.renderCrosshair(var1);
          RenderSystem.defaultBlendFunc();
          this.minecraft.getProfiler().push("bossHealth");
-         this.bossOverlay.render();
+         this.bossOverlay.render(var1);
          this.minecraft.getProfiler().pop();
          RenderSystem.color4f(1.0F, 1.0F, 1.0F, 1.0F);
          this.minecraft.getTextureManager().bind(GUI_ICONS_LOCATION);
          if (this.minecraft.gameMode.canHurtPlayer()) {
-            this.renderPlayerHealth();
+            this.renderPlayerHealth(var1);
          }
 
-         this.renderVehicleHealth();
+         this.renderVehicleHealth(var1);
          RenderSystem.disableBlend();
-         int var9 = this.screenWidth / 2 - 91;
+         int var10 = this.screenWidth / 2 - 91;
          if (this.minecraft.player.isRidingJumpable()) {
-            this.renderJumpMeter(var9);
+            this.renderJumpMeter(var1, var10);
          } else if (this.minecraft.gameMode.hasExperience()) {
-            this.renderExperienceBar(var9);
+            this.renderExperienceBar(var1, var10);
          }
 
          if (this.minecraft.options.heldItemTooltips && this.minecraft.gameMode.getPlayerMode() != GameType.SPECTATOR) {
-            this.renderSelectedItemName();
+            this.renderSelectedItemName(var1);
          } else if (this.minecraft.player.isSpectator()) {
-            this.spectatorGui.renderTooltip();
+            this.spectatorGui.renderTooltip(var1);
          }
       }
 
-      int var6;
+      int var7;
       if (this.minecraft.player.getSleepTimer() > 0) {
          this.minecraft.getProfiler().push("sleep");
          RenderSystem.disableDepthTest();
          RenderSystem.disableAlphaTest();
-         var4 = (float)this.minecraft.player.getSleepTimer();
-         float var5 = var4 / 100.0F;
-         if (var5 > 1.0F) {
-            var5 = 1.0F - (var4 - 100.0F) / 10.0F;
+         var5 = (float)this.minecraft.player.getSleepTimer();
+         float var6 = var5 / 100.0F;
+         if (var6 > 1.0F) {
+            var6 = 1.0F - (var5 - 100.0F) / 10.0F;
          }
 
-         var6 = (int)(220.0F * var5) << 24 | 1052704;
-         fill(0, 0, this.screenWidth, this.screenHeight, var6);
+         var7 = (int)(220.0F * var6) << 24 | 1052704;
+         fill(var1, 0, 0, this.screenWidth, this.screenHeight, var7);
          RenderSystem.enableAlphaTest();
          RenderSystem.enableDepthTest();
          this.minecraft.getProfiler().pop();
          RenderSystem.color4f(1.0F, 1.0F, 1.0F, 1.0F);
       }
 
       if (this.minecraft.isDemo()) {
-         this.renderDemoOverlay();
+         this.renderDemoOverlay(var1);
       }
 
-      this.renderEffects();
+      this.renderEffects(var1);
       if (this.minecraft.options.renderDebug) {
-         this.debugScreen.render();
+         this.debugScreen.render(var1);
       }
 
       if (!this.minecraft.options.hideGui) {
-         int var7;
-         int var11;
-         if (this.overlayMessageTime > 0) {
+         int var8;
+         int var9;
+         int var12;
+         if (this.overlayMessageString != null && this.overlayMessageTime > 0) {
             this.minecraft.getProfiler().push("overlayMessage");
-            var4 = (float)this.overlayMessageTime - var1;
-            var11 = (int)(var4 * 255.0F / 20.0F);
-            if (var11 > 255) {
-               var11 = 255;
+            var5 = (float)this.overlayMessageTime - var2;
+            var12 = (int)(var5 * 255.0F / 20.0F);
+            if (var12 > 255) {
+               var12 = 255;
             }
 
-            if (var11 > 8) {
+            if (var12 > 8) {
                RenderSystem.pushMatrix();
                RenderSystem.translatef((float)(this.screenWidth / 2), (float)(this.screenHeight - 68), 0.0F);
                RenderSystem.enableBlend();
                RenderSystem.defaultBlendFunc();
-               var6 = 16777215;
+               var7 = 16777215;
                if (this.animateOverlayMessageColor) {
-                  var6 = Mth.hsvToRgb(var4 / 50.0F, 0.7F, 0.6F) & 16777215;
+                  var7 = Mth.hsvToRgb(var5 / 50.0F, 0.7F, 0.6F) & 16777215;
                }
 
-               var7 = var11 << 24 & -16777216;
-               this.drawBackdrop(var2, -4, var2.width(this.overlayMessageString));
-               var2.draw(this.overlayMessageString, (float)(-var2.width(this.overlayMessageString) / 2), -4.0F, var6 | var7);
+               var8 = var12 << 24 & -16777216;
+               var9 = var3.width((FormattedText)this.overlayMessageString);
+               this.drawBackdrop(var1, var3, -4, var9, 16777215 | var8);
+               var3.draw(var1, (FormattedText)this.overlayMessageString, (float)(-var9 / 2), -4.0F, var7 | var8);
                RenderSystem.disableBlend();
                RenderSystem.popMatrix();
             }
 
             this.minecraft.getProfiler().pop();
          }
 
-         if (this.titleTime > 0) {
+         if (this.title != null && this.titleTime > 0) {
             this.minecraft.getProfiler().push("titleAndSubtitle");
-            var4 = (float)this.titleTime - var1;
-            var11 = 255;
+            var5 = (float)this.titleTime - var2;
+            var12 = 255;
             if (this.titleTime > this.titleFadeOutTime + this.titleStayTime) {
-               float var12 = (float)(this.titleFadeInTime + this.titleStayTime + this.titleFadeOutTime) - var4;
-               var11 = (int)(var12 * 255.0F / (float)this.titleFadeInTime);
+               float var13 = (float)(this.titleFadeInTime + this.titleStayTime + this.titleFadeOutTime) - var5;
+               var12 = (int)(var13 * 255.0F / (float)this.titleFadeInTime);
             }
 
             if (this.titleTime <= this.titleFadeOutTime) {
-               var11 = (int)(var4 * 255.0F / (float)this.titleFadeOutTime);
+               var12 = (int)(var5 * 255.0F / (float)this.titleFadeOutTime);
             }
 
-            var11 = Mth.clamp(var11, 0, 255);
-            if (var11 > 8) {
+            var12 = Mth.clamp(var12, 0, 255);
+            if (var12 > 8) {
                RenderSystem.pushMatrix();
                RenderSystem.translatef((float)(this.screenWidth / 2), (float)(this.screenHeight / 2), 0.0F);
                RenderSystem.enableBlend();
                RenderSystem.defaultBlendFunc();
                RenderSystem.pushMatrix();
                RenderSystem.scalef(4.0F, 4.0F, 4.0F);
-               var6 = var11 << 24 & -16777216;
-               var7 = var2.width(this.title);
-               this.drawBackdrop(var2, -10, var7);
-               var2.drawShadow(this.title, (float)(-var7 / 2), -10.0F, 16777215 | var6);
+               var7 = var12 << 24 & -16777216;
+               var8 = var3.width((FormattedText)this.title);
+               this.drawBackdrop(var1, var3, -10, var8, 16777215 | var7);
+               var3.drawShadow(var1, (FormattedText)this.title, (float)(-var8 / 2), -10.0F, 16777215 | var7);
                RenderSystem.popMatrix();
-               if (!this.subtitle.isEmpty()) {
+               if (this.subtitle != null) {
                   RenderSystem.pushMatrix();
                   RenderSystem.scalef(2.0F, 2.0F, 2.0F);
-                  int var8 = var2.width(this.subtitle);
-                  this.drawBackdrop(var2, 5, var8);
-                  var2.drawShadow(this.subtitle, (float)(-var8 / 2), 5.0F, 16777215 | var6);
+                  var9 = var3.width((FormattedText)this.subtitle);
+                  this.drawBackdrop(var1, var3, 5, var9, 16777215 | var7);
+                  var3.drawShadow(var1, (FormattedText)this.subtitle, (float)(-var9 / 2), 5.0F, 16777215 | var7);
                   RenderSystem.popMatrix();
                }
 
                RenderSystem.disableBlend();
                RenderSystem.popMatrix();
             }
 
             this.minecraft.getProfiler().pop();
          }
 
-         this.subtitleOverlay.render();
-         Scoreboard var10 = this.minecraft.level.getScoreboard();
-         Objective var15 = null;
-         PlayerTeam var13 = var10.getPlayersTeam(this.minecraft.player.getScoreboardName());
-         if (var13 != null) {
-            var7 = var13.getColor().getId();
-            if (var7 >= 0) {
-               var15 = var10.getDisplayObjective(3 + var7);
+         this.subtitleOverlay.render(var1);
+         Scoreboard var11 = this.minecraft.level.getScoreboard();
+         Objective var16 = null;
+         PlayerTeam var14 = var11.getPlayersTeam(this.minecraft.player.getScoreboardName());
+         if (var14 != null) {
+            var8 = var14.getColor().getId();
+            if (var8 >= 0) {
+               var16 = var11.getDisplayObjective(3 + var8);
             }
          }
 
-         Objective var14 = var15 != null ? var15 : var10.getDisplayObjective(1);
-         if (var14 != null) {
-            this.displayScoreboardSidebar(var14);
+         Objective var15 = var16 != null ? var16 : var11.getDisplayObjective(1);
+         if (var15 != null) {
+            this.displayScoreboardSidebar(var1, var15);
          }
 
          RenderSystem.enableBlend();
          RenderSystem.defaultBlendFunc();
          RenderSystem.disableAlphaTest();
          RenderSystem.pushMatrix();
          RenderSystem.translatef(0.0F, (float)(this.screenHeight - 48), 0.0F);
          this.minecraft.getProfiler().push("chat");
-         this.chat.render(this.tickCount);
+         this.chat.render(var1, this.tickCount);
          this.minecraft.getProfiler().pop();
          RenderSystem.popMatrix();
-         var14 = var10.getDisplayObjective(0);
-         if (!this.minecraft.options.keyPlayerList.isDown() || this.minecraft.isLocalServer() && this.minecraft.player.connection.getOnlinePlayers().size() <= 1 && var14 == null) {
+         var15 = var11.getDisplayObjective(0);
+         if (!this.minecraft.options.keyPlayerList.isDown() || this.minecraft.isLocalServer() && this.minecraft.player.connection.getOnlinePlayers().size() <= 1 && var15 == null) {
             this.tabList.setVisible(false);
          } else {
             this.tabList.setVisible(true);
-            this.tabList.render(this.screenWidth, var10, var14);
+            this.tabList.render(var1, this.screenWidth, var11, var15);
          }
       }
 
       RenderSystem.color4f(1.0F, 1.0F, 1.0F, 1.0F);
       RenderSystem.enableAlphaTest();
    }
 
-   private void drawBackdrop(Font var1, int var2, int var3) {
-      int var4 = this.minecraft.options.getBackgroundColor(0.0F);
-      if (var4 != 0) {
-         int var5 = -var3 / 2;
-         int var10000 = var5 - 2;
-         int var10001 = var2 - 2;
-         int var10002 = var5 + var3 + 2;
-         var1.getClass();
-         fill(var10000, var10001, var10002, var2 + 9 + 2, var4);
+   private void drawBackdrop(PoseStack var1, Font var2, int var3, int var4, int var5) {
+      int var6 = this.minecraft.options.getBackgroundColor(0.0F);
+      if (var6 != 0) {
+         int var7 = -var4 / 2;
+         int var10001 = var7 - 2;
+         int var10002 = var3 - 2;
+         int var10003 = var7 + var4 + 2;
+         var2.getClass();
+         fill(var1, var10001, var10002, var10003, var3 + 9 + 2, FastColor.ARGB32.multiply(var6, var5));
       }
 
    }
 
-   private void renderCrosshair() {
-      Options var1 = this.minecraft.options;
-      if (var1.thirdPersonView == 0) {
+   private void renderCrosshair(PoseStack var1) {
+      Options var2 = this.minecraft.options;
+      if (var2.thirdPersonView == 0) {
          if (this.minecraft.gameMode.getPlayerMode() != GameType.SPECTATOR || this.canRenderCrosshairForSpectator(this.minecraft.hitResult)) {
-            if (var1.renderDebug && !var1.hideGui && !this.minecraft.player.isReducedDebugInfo() && !var1.reducedDebugInfo) {
+            if (var2.renderDebug && !var2.hideGui && !this.minecraft.player.isReducedDebugInfo() && !var2.reducedDebugInfo) {
                RenderSystem.pushMatrix();
                RenderSystem.translatef((float)(this.screenWidth / 2), (float)(this.screenHeight / 2), (float)this.getBlitOffset());
-               Camera var8 = this.minecraft.gameRenderer.getMainCamera();
-               RenderSystem.rotatef(var8.getXRot(), -1.0F, 0.0F, 0.0F);
-               RenderSystem.rotatef(var8.getYRot(), 0.0F, 1.0F, 0.0F);
+               Camera var9 = this.minecraft.gameRenderer.getMainCamera();
+               RenderSystem.rotatef(var9.getXRot(), -1.0F, 0.0F, 0.0F);
+               RenderSystem.rotatef(var9.getYRot(), 0.0F, 1.0F, 0.0F);
                RenderSystem.scalef(-1.0F, -1.0F, -1.0F);
                RenderSystem.renderCrosshair(10);
                RenderSystem.popMatrix();
             } else {
                RenderSystem.blendFuncSeparate(GlStateManager.SourceFactor.ONE_MINUS_DST_COLOR, GlStateManager.DestFactor.ONE_MINUS_SRC_COLOR, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ZERO);
-               boolean var2 = true;
-               this.blit((this.screenWidth - 15) / 2, (this.screenHeight - 15) / 2, 0, 0, 15, 15);
+               boolean var3 = true;
+               this.blit(var1, (this.screenWidth - 15) / 2, (this.screenHeight - 15) / 2, 0, 0, 15, 15);
                if (this.minecraft.options.attackIndicator == AttackIndicatorStatus.CROSSHAIR) {
-                  float var3 = this.minecraft.player.getAttackStrengthScale(0.0F);
-                  boolean var4 = false;
-                  if (this.minecraft.crosshairPickEntity != null && this.minecraft.crosshairPickEntity instanceof LivingEntity && var3 >= 1.0F) {
-                     var4 = this.minecraft.player.getCurrentItemAttackStrengthDelay() > 5.0F;
-                     var4 &= this.minecraft.crosshairPickEntity.isAlive();
+                  float var4 = this.minecraft.player.getAttackStrengthScale(0.0F);
+                  boolean var5 = false;
+                  if (this.minecraft.crosshairPickEntity != null && this.minecraft.crosshairPickEntity instanceof LivingEntity && var4 >= 1.0F) {
+                     var5 = this.minecraft.player.getCurrentItemAttackStrengthDelay() > 5.0F;
+                     var5 &= this.minecraft.crosshairPickEntity.isAlive();
                   }
 
-                  int var5 = this.screenHeight / 2 - 7 + 16;
-                  int var6 = this.screenWidth / 2 - 8;
-                  if (var4) {
-                     this.blit(var6, var5, 68, 94, 16, 16);
-                  } else if (var3 < 1.0F) {
-                     int var7 = (int)(var3 * 17.0F);
-                     this.blit(var6, var5, 36, 94, 16, 4);
-                     this.blit(var6, var5, 52, 94, var7, 4);
+                  int var6 = this.screenHeight / 2 - 7 + 16;
+                  int var7 = this.screenWidth / 2 - 8;
+                  if (var5) {
+                     this.blit(var1, var7, var6, 68, 94, 16, 16);
+                  } else if (var4 < 1.0F) {
+                     int var8 = (int)(var4 * 17.0F);
+                     this.blit(var1, var7, var6, 36, 94, 16, 4);
+                     this.blit(var1, var7, var6, 52, 94, var8, 4);
                   }
                }
             }
 
          }
@@ -408,289 +418,293 @@
       } else {
          return false;
       }
    }
 
-   protected void renderEffects() {
-      Collection var1 = this.minecraft.player.getActiveEffects();
-      if (!var1.isEmpty()) {
+   protected void renderEffects(PoseStack var1) {
+      Collection var2 = this.minecraft.player.getActiveEffects();
+      if (!var2.isEmpty()) {
          RenderSystem.enableBlend();
-         int var2 = 0;
          int var3 = 0;
-         MobEffectTextureManager var4 = this.minecraft.getMobEffectTextures();
-         ArrayList var5 = Lists.newArrayListWithExpectedSize(var1.size());
+         int var4 = 0;
+         MobEffectTextureManager var5 = this.minecraft.getMobEffectTextures();
+         ArrayList var6 = Lists.newArrayListWithExpectedSize(var2.size());
          this.minecraft.getTextureManager().bind(AbstractContainerScreen.INVENTORY_LOCATION);
-         Iterator var6 = Ordering.natural().reverse().sortedCopy(var1).iterator();
+         Iterator var7 = Ordering.natural().reverse().sortedCopy(var2).iterator();
 
-         while(var6.hasNext()) {
-            MobEffectInstance var7 = (MobEffectInstance)var6.next();
-            MobEffect var8 = var7.getEffect();
-            if (var7.showIcon()) {
-               int var9 = this.screenWidth;
-               int var10 = 1;
+         while(var7.hasNext()) {
+            MobEffectInstance var8 = (MobEffectInstance)var7.next();
+            MobEffect var9 = var8.getEffect();
+            if (var8.showIcon()) {
+               int var10 = this.screenWidth;
+               int var11 = 1;
                if (this.minecraft.isDemo()) {
-                  var10 += 15;
+                  var11 += 15;
                }
 
-               if (var8.isBeneficial()) {
-                  ++var2;
-                  var9 -= 25 * var2;
-               } else {
+               if (var9.isBeneficial()) {
                   ++var3;
-                  var9 -= 25 * var3;
-                  var10 += 26;
+                  var10 -= 25 * var3;
+               } else {
+                  ++var4;
+                  var10 -= 25 * var4;
+                  var11 += 26;
                }
 
                RenderSystem.color4f(1.0F, 1.0F, 1.0F, 1.0F);
-               float var11 = 1.0F;
-               if (var7.isAmbient()) {
-                  this.blit(var9, var10, 165, 166, 24, 24);
+               float var12 = 1.0F;
+               if (var8.isAmbient()) {
+                  this.blit(var1, var10, var11, 165, 166, 24, 24);
                } else {
-                  this.blit(var9, var10, 141, 166, 24, 24);
-                  if (var7.getDuration() <= 200) {
-                     int var12 = 10 - var7.getDuration() / 20;
-                     var11 = Mth.clamp((float)var7.getDuration() / 10.0F / 5.0F * 0.5F, 0.0F, 0.5F) + Mth.cos((float)var7.getDuration() * 3.1415927F / 5.0F) * Mth.clamp((float)var12 / 10.0F * 0.25F, 0.0F, 0.25F);
+                  this.blit(var1, var10, var11, 141, 166, 24, 24);
+                  if (var8.getDuration() <= 200) {
+                     int var13 = 10 - var8.getDuration() / 20;
+                     var12 = Mth.clamp((float)var8.getDuration() / 10.0F / 5.0F * 0.5F, 0.0F, 0.5F) + Mth.cos((float)var8.getDuration() * 3.1415927F / 5.0F) * Mth.clamp((float)var13 / 10.0F * 0.25F, 0.0F, 0.25F);
                   }
                }
 
-               TextureAtlasSprite var16 = var4.get(var8);
-               var5.add(() -> {
-                  this.minecraft.getTextureManager().bind(var16.atlas().location());
-                  RenderSystem.color4f(1.0F, 1.0F, 1.0F, var11);
-                  blit(var9 + 3, var10 + 3, this.getBlitOffset(), 18, 18, var16);
+               TextureAtlasSprite var17 = var5.get(var9);
+               var6.add(() -> {
+                  this.minecraft.getTextureManager().bind(var17.atlas().location());
+                  RenderSystem.color4f(1.0F, 1.0F, 1.0F, var12);
+                  blit(var1, var10 + 3, var11 + 3, this.getBlitOffset(), 18, 18, var17);
                });
             }
          }
 
-         var5.forEach(Runnable::run);
+         var6.forEach(Runnable::run);
       }
    }
 
-   protected void renderHotbar(float var1) {
-      Player var2 = this.getCameraPlayer();
-      if (var2 != null) {
+   protected void renderHotbar(float var1, PoseStack var2) {
+      Player var3 = this.getCameraPlayer();
+      if (var3 != null) {
          RenderSystem.color4f(1.0F, 1.0F, 1.0F, 1.0F);
          this.minecraft.getTextureManager().bind(WIDGETS_LOCATION);
-         ItemStack var3 = var2.getOffhandItem();
-         HumanoidArm var4 = var2.getMainArm().getOpposite();
-         int var5 = this.screenWidth / 2;
-         int var6 = this.getBlitOffset();
-         boolean var7 = true;
+         ItemStack var4 = var3.getOffhandItem();
+         HumanoidArm var5 = var3.getMainArm().getOpposite();
+         int var6 = this.screenWidth / 2;
+         int var7 = this.getBlitOffset();
          boolean var8 = true;
+         boolean var9 = true;
          this.setBlitOffset(-90);
-         this.blit(var5 - 91, this.screenHeight - 22, 0, 0, 182, 22);
-         this.blit(var5 - 91 - 1 + var2.inventory.selected * 20, this.screenHeight - 22 - 1, 0, 22, 24, 22);
-         if (!var3.isEmpty()) {
-            if (var4 == HumanoidArm.LEFT) {
-               this.blit(var5 - 91 - 29, this.screenHeight - 23, 24, 22, 29, 24);
+         this.blit(var2, var6 - 91, this.screenHeight - 22, 0, 0, 182, 22);
+         this.blit(var2, var6 - 91 - 1 + var3.inventory.selected * 20, this.screenHeight - 22 - 1, 0, 22, 24, 22);
+         if (!var4.isEmpty()) {
+            if (var5 == HumanoidArm.LEFT) {
+               this.blit(var2, var6 - 91 - 29, this.screenHeight - 23, 24, 22, 29, 24);
             } else {
-               this.blit(var5 + 91, this.screenHeight - 23, 53, 22, 29, 24);
+               this.blit(var2, var6 + 91, this.screenHeight - 23, 53, 22, 29, 24);
             }
          }
 
-         this.setBlitOffset(var6);
+         this.setBlitOffset(var7);
          RenderSystem.enableRescaleNormal();
          RenderSystem.enableBlend();
          RenderSystem.defaultBlendFunc();
 
-         int var9;
          int var10;
          int var11;
-         for(var9 = 0; var9 < 9; ++var9) {
-            var10 = var5 - 90 + var9 * 20 + 2;
-            var11 = this.screenHeight - 16 - 3;
-            this.renderSlot(var10, var11, var1, var2, (ItemStack)var2.inventory.items.get(var9));
+         int var12;
+         for(var10 = 0; var10 < 9; ++var10) {
+            var11 = var6 - 90 + var10 * 20 + 2;
+            var12 = this.screenHeight - 16 - 3;
+            this.renderSlot(var11, var12, var1, var3, (ItemStack)var3.inventory.items.get(var10));
          }
 
-         if (!var3.isEmpty()) {
-            var9 = this.screenHeight - 16 - 3;
-            if (var4 == HumanoidArm.LEFT) {
-               this.renderSlot(var5 - 91 - 26, var9, var1, var2, var3);
+         if (!var4.isEmpty()) {
+            var10 = this.screenHeight - 16 - 3;
+            if (var5 == HumanoidArm.LEFT) {
+               this.renderSlot(var6 - 91 - 26, var10, var1, var3, var4);
             } else {
-               this.renderSlot(var5 + 91 + 10, var9, var1, var2, var3);
+               this.renderSlot(var6 + 91 + 10, var10, var1, var3, var4);
             }
          }
 
          if (this.minecraft.options.attackIndicator == AttackIndicatorStatus.HOTBAR) {
-            float var13 = this.minecraft.player.getAttackStrengthScale(0.0F);
-            if (var13 < 1.0F) {
-               var10 = this.screenHeight - 20;
-               var11 = var5 + 91 + 6;
-               if (var4 == HumanoidArm.RIGHT) {
-                  var11 = var5 - 91 - 22;
+            float var14 = this.minecraft.player.getAttackStrengthScale(0.0F);
+            if (var14 < 1.0F) {
+               var11 = this.screenHeight - 20;
+               var12 = var6 + 91 + 6;
+               if (var5 == HumanoidArm.RIGHT) {
+                  var12 = var6 - 91 - 22;
                }
 
                this.minecraft.getTextureManager().bind(GuiComponent.GUI_ICONS_LOCATION);
-               int var12 = (int)(var13 * 19.0F);
+               int var13 = (int)(var14 * 19.0F);
                RenderSystem.color4f(1.0F, 1.0F, 1.0F, 1.0F);
-               this.blit(var11, var10, 0, 94, 18, 18);
-               this.blit(var11, var10 + 18 - var12, 18, 112 - var12, 18, var12);
+               this.blit(var2, var12, var11, 0, 94, 18, 18);
+               this.blit(var2, var12, var11 + 18 - var13, 18, 112 - var13, 18, var13);
             }
          }
 
          RenderSystem.disableRescaleNormal();
          RenderSystem.disableBlend();
       }
    }
 
-   public void renderJumpMeter(int var1) {
+   public void renderJumpMeter(PoseStack var1, int var2) {
       this.minecraft.getProfiler().push("jumpBar");
       this.minecraft.getTextureManager().bind(GuiComponent.GUI_ICONS_LOCATION);
-      float var2 = this.minecraft.player.getJumpRidingScale();
-      boolean var3 = true;
-      int var4 = (int)(var2 * 183.0F);
-      int var5 = this.screenHeight - 32 + 3;
-      this.blit(var1, var5, 0, 84, 182, 5);
-      if (var4 > 0) {
-         this.blit(var1, var5, 0, 89, var4, 5);
+      float var3 = this.minecraft.player.getJumpRidingScale();
+      boolean var4 = true;
+      int var5 = (int)(var3 * 183.0F);
+      int var6 = this.screenHeight - 32 + 3;
+      this.blit(var1, var2, var6, 0, 84, 182, 5);
+      if (var5 > 0) {
+         this.blit(var1, var2, var6, 0, 89, var5, 5);
       }
 
       this.minecraft.getProfiler().pop();
    }
 
-   public void renderExperienceBar(int var1) {
+   public void renderExperienceBar(PoseStack var1, int var2) {
       this.minecraft.getProfiler().push("expBar");
       this.minecraft.getTextureManager().bind(GuiComponent.GUI_ICONS_LOCATION);
-      int var2 = this.minecraft.player.getXpNeededForNextLevel();
-      int var4;
+      int var3 = this.minecraft.player.getXpNeededForNextLevel();
       int var5;
-      if (var2 > 0) {
-         boolean var3 = true;
-         var4 = (int)(this.minecraft.player.experienceProgress * 183.0F);
-         var5 = this.screenHeight - 32 + 3;
-         this.blit(var1, var5, 0, 64, 182, 5);
-         if (var4 > 0) {
-            this.blit(var1, var5, 0, 69, var4, 5);
+      int var6;
+      if (var3 > 0) {
+         boolean var4 = true;
+         var5 = (int)(this.minecraft.player.experienceProgress * 183.0F);
+         var6 = this.screenHeight - 32 + 3;
+         this.blit(var1, var2, var6, 0, 64, 182, 5);
+         if (var5 > 0) {
+            this.blit(var1, var2, var6, 0, 69, var5, 5);
          }
       }
 
       this.minecraft.getProfiler().pop();
       if (this.minecraft.player.experienceLevel > 0) {
          this.minecraft.getProfiler().push("expLevel");
-         String var6 = "" + this.minecraft.player.experienceLevel;
-         var4 = (this.screenWidth - this.getFont().width(var6)) / 2;
-         var5 = this.screenHeight - 31 - 4;
-         this.getFont().draw(var6, (float)(var4 + 1), (float)var5, 0);
-         this.getFont().draw(var6, (float)(var4 - 1), (float)var5, 0);
-         this.getFont().draw(var6, (float)var4, (float)(var5 + 1), 0);
-         this.getFont().draw(var6, (float)var4, (float)(var5 - 1), 0);
-         this.getFont().draw(var6, (float)var4, (float)var5, 8453920);
+         String var7 = "" + this.minecraft.player.experienceLevel;
+         var5 = (this.screenWidth - this.getFont().width(var7)) / 2;
+         var6 = this.screenHeight - 31 - 4;
+         this.getFont().draw(var1, (String)var7, (float)(var5 + 1), (float)var6, 0);
+         this.getFont().draw(var1, (String)var7, (float)(var5 - 1), (float)var6, 0);
+         this.getFont().draw(var1, (String)var7, (float)var5, (float)(var6 + 1), 0);
+         this.getFont().draw(var1, (String)var7, (float)var5, (float)(var6 - 1), 0);
+         this.getFont().draw(var1, var7, (float)var5, (float)var6, 8453920);
          this.minecraft.getProfiler().pop();
       }
 
    }
 
-   public void renderSelectedItemName() {
+   public void renderSelectedItemName(PoseStack var1) {
       this.minecraft.getProfiler().push("selectedItemName");
       if (this.toolHighlightTimer > 0 && !this.lastToolHighlight.isEmpty()) {
-         Component var1 = (new TextComponent("")).append(this.lastToolHighlight.getHoverName()).withStyle(this.lastToolHighlight.getRarity().color);
+         MutableComponent var2 = (new TextComponent("")).append(this.lastToolHighlight.getHoverName()).withStyle(this.lastToolHighlight.getRarity().color);
          if (this.lastToolHighlight.hasCustomHoverName()) {
-            var1.withStyle(ChatFormatting.ITALIC);
+            var2.withStyle(ChatFormatting.ITALIC);
          }
 
-         String var2 = var1.getColoredString();
-         int var3 = (this.screenWidth - this.getFont().width(var2)) / 2;
-         int var4 = this.screenHeight - 59;
+         int var3 = this.getFont().width((FormattedText)var2);
+         int var4 = (this.screenWidth - var3) / 2;
+         int var5 = this.screenHeight - 59;
          if (!this.minecraft.gameMode.canHurtPlayer()) {
-            var4 += 14;
+            var5 += 14;
          }
 
-         int var5 = (int)((float)this.toolHighlightTimer * 256.0F / 10.0F);
-         if (var5 > 255) {
-            var5 = 255;
+         int var6 = (int)((float)this.toolHighlightTimer * 256.0F / 10.0F);
+         if (var6 > 255) {
+            var6 = 255;
          }
 
-         if (var5 > 0) {
+         if (var6 > 0) {
             RenderSystem.pushMatrix();
             RenderSystem.enableBlend();
             RenderSystem.defaultBlendFunc();
-            int var10000 = var3 - 2;
             int var10001 = var4 - 2;
-            int var10002 = var3 + this.getFont().width(var2) + 2;
+            int var10002 = var5 - 2;
+            int var10003 = var4 + var3 + 2;
             this.getFont().getClass();
-            fill(var10000, var10001, var10002, var4 + 9 + 2, this.minecraft.options.getBackgroundColor(0));
-            this.getFont().drawShadow(var2, (float)var3, (float)var4, 16777215 + (var5 << 24));
+            fill(var1, var10001, var10002, var10003, var5 + 9 + 2, this.minecraft.options.getBackgroundColor(0));
+            this.getFont().drawShadow(var1, (FormattedText)var2, (float)var4, (float)var5, 16777215 + (var6 << 24));
             RenderSystem.disableBlend();
             RenderSystem.popMatrix();
          }
       }
 
       this.minecraft.getProfiler().pop();
    }
 
-   public void renderDemoOverlay() {
+   public void renderDemoOverlay(PoseStack var1) {
       this.minecraft.getProfiler().push("demo");
-      String var1;
+      String var2;
       if (this.minecraft.level.getGameTime() >= 120500L) {
-         var1 = I18n.get("demo.demoExpired");
+         var2 = I18n.get("demo.demoExpired");
       } else {
-         var1 = I18n.get("demo.remainingTime", StringUtil.formatTickDuration((int)(120500L - this.minecraft.level.getGameTime())));
+         var2 = I18n.get("demo.remainingTime", StringUtil.formatTickDuration((int)(120500L - this.minecraft.level.getGameTime())));
       }
 
-      int var2 = this.getFont().width(var1);
-      this.getFont().drawShadow(var1, (float)(this.screenWidth - var2 - 10), 5.0F, 16777215);
+      int var3 = this.getFont().width(var2);
+      this.getFont().drawShadow(var1, var2, (float)(this.screenWidth - var3 - 10), 5.0F, 16777215);
       this.minecraft.getProfiler().pop();
    }
 
-   private void displayScoreboardSidebar(Objective var1) {
-      Scoreboard var2 = var1.getScoreboard();
-      Collection var3 = var2.getPlayerScores(var1);
-      List var4 = (List)var3.stream().filter((var0) -> {
+   private void displayScoreboardSidebar(PoseStack var1, Objective var2) {
+      Scoreboard var3 = var2.getScoreboard();
+      Collection var4 = var3.getPlayerScores(var2);
+      List var5 = (List)var4.stream().filter((var0) -> {
          return var0.getOwner() != null && !var0.getOwner().startsWith("#");
       }).collect(Collectors.toList());
-      Object var23;
-      if (var4.size() > 15) {
-         var23 = Lists.newArrayList(Iterables.skip(var4, var3.size() - 15));
+      Object var26;
+      if (var5.size() > 15) {
+         var26 = Lists.newArrayList(Iterables.skip(var5, var4.size() - 15));
       } else {
-         var23 = var4;
+         var26 = var5;
       }
 
-      String var5 = var1.getDisplayName().getColoredString();
-      int var6 = this.getFont().width(var5);
-      int var7 = var6;
+      ArrayList var6 = Lists.newArrayListWithCapacity(((Collection)var26).size());
+      Component var7 = var2.getDisplayName();
+      int var8 = this.getFont().width((FormattedText)var7);
+      int var9 = var8;
+      int var10 = this.getFont().width(": ");
 
-      String var11;
-      for(Iterator var8 = ((Collection)var23).iterator(); var8.hasNext(); var7 = Math.max(var7, this.getFont().width(var11))) {
-         Score var9 = (Score)var8.next();
-         PlayerTeam var10 = var2.getPlayersTeam(var9.getOwner());
-         var11 = PlayerTeam.formatNameForTeam(var10, new TextComponent(var9.getOwner())).getColoredString() + ": " + ChatFormatting.RED + var9.getScore();
+      Score var12;
+      MutableComponent var14;
+      for(Iterator var11 = ((Collection)var26).iterator(); var11.hasNext(); var9 = Math.max(var9, this.getFont().width((FormattedText)var14) + var10 + this.getFont().width(Integer.toString(var12.getScore())))) {
+         var12 = (Score)var11.next();
+         PlayerTeam var13 = var3.getPlayersTeam(var12.getOwner());
+         var14 = PlayerTeam.formatNameForTeam(var13, new TextComponent(var12.getOwner()));
+         var6.add(Pair.of(var12, var14));
       }
 
-      int var10000 = ((Collection)var23).size();
+      int var10000 = ((Collection)var26).size();
       this.getFont().getClass();
-      int var24 = var10000 * 9;
-      int var25 = this.screenHeight / 2 + var24 / 3;
-      boolean var26 = true;
-      int var27 = this.screenWidth - var7 - 3;
-      int var12 = 0;
-      int var13 = this.minecraft.options.getBackgroundColor(0.3F);
-      int var14 = this.minecraft.options.getBackgroundColor(0.4F);
-      Iterator var15 = ((Collection)var23).iterator();
+      int var27 = var10000 * 9;
+      int var28 = this.screenHeight / 2 + var27 / 3;
+      boolean var29 = true;
+      int var30 = this.screenWidth - var9 - 3;
+      int var15 = 0;
+      int var16 = this.minecraft.options.getBackgroundColor(0.3F);
+      int var17 = this.minecraft.options.getBackgroundColor(0.4F);
+      Iterator var18 = var6.iterator();
 
-      while(var15.hasNext()) {
-         Score var16 = (Score)var15.next();
-         ++var12;
-         PlayerTeam var17 = var2.getPlayersTeam(var16.getOwner());
-         String var18 = PlayerTeam.formatNameForTeam(var17, new TextComponent(var16.getOwner())).getColoredString();
-         String var19 = ChatFormatting.RED + "" + var16.getScore();
+      while(var18.hasNext()) {
+         Pair var19 = (Pair)var18.next();
+         ++var15;
+         Score var20 = (Score)var19.getFirst();
+         Component var21 = (Component)var19.getSecond();
+         String var22 = ChatFormatting.RED + "" + var20.getScore();
          this.getFont().getClass();
-         int var21 = var25 - var12 * 9;
-         int var22 = this.screenWidth - 3 + 2;
-         var10000 = var27 - 2;
+         int var24 = var28 - var15 * 9;
+         int var25 = this.screenWidth - 3 + 2;
+         int var10001 = var30 - 2;
          this.getFont().getClass();
-         fill(var10000, var21, var22, var21 + 9, var13);
-         this.getFont().draw(var18, (float)var27, (float)var21, -1);
-         this.getFont().draw(var19, (float)(var22 - this.getFont().width(var19)), (float)var21, -1);
-         if (var12 == ((Collection)var23).size()) {
-            var10000 = var27 - 2;
+         fill(var1, var10001, var24, var25, var24 + 9, var16);
+         this.getFont().draw(var1, (FormattedText)var21, (float)var30, (float)var24, -1);
+         this.getFont().draw(var1, (String)var22, (float)(var25 - this.getFont().width(var22)), (float)var24, -1);
+         if (var15 == ((Collection)var26).size()) {
+            var10001 = var30 - 2;
             this.getFont().getClass();
-            fill(var10000, var21 - 9 - 1, var22, var21 - 1, var14);
-            fill(var27 - 2, var21 - 1, var22, var21, var13);
-            Font var28 = this.getFont();
-            float var10002 = (float)(var27 + var7 / 2 - var6 / 2);
+            fill(var1, var10001, var24 - 9 - 1, var25, var24 - 1, var17);
+            fill(var1, var30 - 2, var24 - 1, var25, var24, var16);
+            Font var31 = this.getFont();
+            float var10003 = (float)(var30 + var9 / 2 - var8 / 2);
             this.getFont().getClass();
-            var28.draw(var5, var10002, (float)(var21 - 9), -1);
+            var31.draw(var1, (FormattedText)var7, var10003, (float)(var24 - 9), -1);
          }
       }
 
    }
 
@@ -730,49 +744,48 @@
 
    private int getVisibleVehicleHeartRows(int var1) {
       return (int)Math.ceil((double)var1 / 10.0D);
    }
 
-   private void renderPlayerHealth() {
-      Player var1 = this.getCameraPlayer();
-      if (var1 != null) {
-         int var2 = Mth.ceil(var1.getHealth());
-         boolean var3 = this.healthBlinkTime > (long)this.tickCount && (this.healthBlinkTime - (long)this.tickCount) / 3L % 2L == 1L;
-         long var4 = Util.getMillis();
-         if (var2 < this.lastHealth && var1.invulnerableTime > 0) {
-            this.lastHealthTime = var4;
+   private void renderPlayerHealth(PoseStack var1) {
+      Player var2 = this.getCameraPlayer();
+      if (var2 != null) {
+         int var3 = Mth.ceil(var2.getHealth());
+         boolean var4 = this.healthBlinkTime > (long)this.tickCount && (this.healthBlinkTime - (long)this.tickCount) / 3L % 2L == 1L;
+         long var5 = Util.getMillis();
+         if (var3 < this.lastHealth && var2.invulnerableTime > 0) {
+            this.lastHealthTime = var5;
             this.healthBlinkTime = (long)(this.tickCount + 20);
-         } else if (var2 > this.lastHealth && var1.invulnerableTime > 0) {
-            this.lastHealthTime = var4;
+         } else if (var3 > this.lastHealth && var2.invulnerableTime > 0) {
+            this.lastHealthTime = var5;
             this.healthBlinkTime = (long)(this.tickCount + 10);
          }
 
-         if (var4 - this.lastHealthTime > 1000L) {
-            this.lastHealth = var2;
-            this.displayHealth = var2;
-            this.lastHealthTime = var4;
+         if (var5 - this.lastHealthTime > 1000L) {
+            this.lastHealth = var3;
+            this.displayHealth = var3;
+            this.lastHealthTime = var5;
          }
 
-         this.lastHealth = var2;
-         int var6 = this.displayHealth;
+         this.lastHealth = var3;
+         int var7 = this.displayHealth;
          this.random.setSeed((long)(this.tickCount * 312871));
-         FoodData var7 = var1.getFoodData();
-         int var8 = var7.getFoodLevel();
-         AttributeInstance var9 = var1.getAttribute(SharedMonsterAttributes.MAX_HEALTH);
+         FoodData var8 = var2.getFoodData();
+         int var9 = var8.getFoodLevel();
          int var10 = this.screenWidth / 2 - 91;
          int var11 = this.screenWidth / 2 + 91;
          int var12 = this.screenHeight - 39;
-         float var13 = (float)var9.getValue();
-         int var14 = Mth.ceil(var1.getAbsorptionAmount());
+         float var13 = (float)var2.getAttributeValue(Attributes.MAX_HEALTH);
+         int var14 = Mth.ceil(var2.getAbsorptionAmount());
          int var15 = Mth.ceil((var13 + (float)var14) / 2.0F / 10.0F);
          int var16 = Math.max(10 - (var15 - 2), 3);
          int var17 = var12 - (var15 - 1) * var16 - 10;
          int var18 = var12 - 10;
          int var19 = var14;
-         int var20 = var1.getArmorValue();
+         int var20 = var2.getArmorValue();
          int var21 = -1;
-         if (var1.hasEffect(MobEffects.REGENERATION)) {
+         if (var2.hasEffect(MobEffects.REGENERATION)) {
             var21 = this.tickCount % Mth.ceil(var13 + 5.0F);
          }
 
          this.minecraft.getProfiler().push("armor");
 
@@ -780,19 +793,19 @@
          int var23;
          for(var22 = 0; var22 < 10; ++var22) {
             if (var20 > 0) {
                var23 = var10 + var22 * 8;
                if (var22 * 2 + 1 < var20) {
-                  this.blit(var23, var17, 34, 9, 9, 9);
+                  this.blit(var1, var23, var17, 34, 9, 9, 9);
                }
 
                if (var22 * 2 + 1 == var20) {
-                  this.blit(var23, var17, 25, 9, 9, 9);
+                  this.blit(var1, var23, var17, 25, 9, 9, 9);
                }
 
                if (var22 * 2 + 1 > var20) {
-                  this.blit(var23, var17, 16, 9, 9, 9);
+                  this.blit(var1, var23, var17, 16, 9, 9, 9);
                }
             }
          }
 
          this.minecraft.getProfiler().popPush("health");
@@ -800,63 +813,63 @@
          int var25;
          int var26;
          int var27;
          for(var22 = Mth.ceil((var13 + (float)var14) / 2.0F) - 1; var22 >= 0; --var22) {
             var23 = 16;
-            if (var1.hasEffect(MobEffects.POISON)) {
+            if (var2.hasEffect(MobEffects.POISON)) {
                var23 += 36;
-            } else if (var1.hasEffect(MobEffects.WITHER)) {
+            } else if (var2.hasEffect(MobEffects.WITHER)) {
                var23 += 72;
             }
 
             byte var24 = 0;
-            if (var3) {
+            if (var4) {
                var24 = 1;
             }
 
             var25 = Mth.ceil((float)(var22 + 1) / 10.0F) - 1;
             var26 = var10 + var22 % 10 * 8;
             var27 = var12 - var25 * var16;
-            if (var2 <= 4) {
+            if (var3 <= 4) {
                var27 += this.random.nextInt(2);
             }
 
             if (var19 <= 0 && var22 == var21) {
                var27 -= 2;
             }
 
             byte var28 = 0;
-            if (var1.level.getLevelData().isHardcore()) {
+            if (var2.level.getLevelData().isHardcore()) {
                var28 = 5;
             }
 
-            this.blit(var26, var27, 16 + var24 * 9, 9 * var28, 9, 9);
-            if (var3) {
-               if (var22 * 2 + 1 < var6) {
-                  this.blit(var26, var27, var23 + 54, 9 * var28, 9, 9);
+            this.blit(var1, var26, var27, 16 + var24 * 9, 9 * var28, 9, 9);
+            if (var4) {
+               if (var22 * 2 + 1 < var7) {
+                  this.blit(var1, var26, var27, var23 + 54, 9 * var28, 9, 9);
                }
 
-               if (var22 * 2 + 1 == var6) {
-                  this.blit(var26, var27, var23 + 63, 9 * var28, 9, 9);
+               if (var22 * 2 + 1 == var7) {
+                  this.blit(var1, var26, var27, var23 + 63, 9 * var28, 9, 9);
                }
             }
 
             if (var19 > 0) {
                if (var19 == var14 && var14 % 2 == 1) {
-                  this.blit(var26, var27, var23 + 153, 9 * var28, 9, 9);
+                  this.blit(var1, var26, var27, var23 + 153, 9 * var28, 9, 9);
                   --var19;
                } else {
-                  this.blit(var26, var27, var23 + 144, 9 * var28, 9, 9);
+                  this.blit(var1, var26, var27, var23 + 144, 9 * var28, 9, 9);
                   var19 -= 2;
                }
             } else {
-               if (var22 * 2 + 1 < var2) {
-                  this.blit(var26, var27, var23 + 36, 9 * var28, 9, 9);
+               if (var22 * 2 + 1 < var3) {
+                  this.blit(var1, var26, var27, var23 + 36, 9 * var28, 9, 9);
                }
 
-               if (var22 * 2 + 1 == var2) {
-                  this.blit(var26, var27, var23 + 45, 9 * var28, 9, 9);
+               if (var22 * 2 + 1 == var3) {
+                  this.blit(var1, var26, var27, var23 + 45, 9 * var28, 9, 9);
                }
             }
          }
 
          LivingEntity var30 = this.getPlayerVehicleWithHealth();
@@ -868,86 +881,86 @@
 
             for(var31 = 0; var31 < 10; ++var31) {
                var25 = var12;
                var26 = 16;
                byte var32 = 0;
-               if (var1.hasEffect(MobEffects.HUNGER)) {
+               if (var2.hasEffect(MobEffects.HUNGER)) {
                   var26 += 36;
                   var32 = 13;
                }
 
-               if (var1.getFoodData().getSaturationLevel() <= 0.0F && this.tickCount % (var8 * 3 + 1) == 0) {
+               if (var2.getFoodData().getSaturationLevel() <= 0.0F && this.tickCount % (var9 * 3 + 1) == 0) {
                   var25 = var12 + (this.random.nextInt(3) - 1);
                }
 
                var33 = var11 - var31 * 8 - 9;
-               this.blit(var33, var25, 16 + var32 * 9, 27, 9, 9);
-               if (var31 * 2 + 1 < var8) {
-                  this.blit(var33, var25, var26 + 36, 27, 9, 9);
+               this.blit(var1, var33, var25, 16 + var32 * 9, 27, 9, 9);
+               if (var31 * 2 + 1 < var9) {
+                  this.blit(var1, var33, var25, var26 + 36, 27, 9, 9);
                }
 
-               if (var31 * 2 + 1 == var8) {
-                  this.blit(var33, var25, var26 + 45, 27, 9, 9);
+               if (var31 * 2 + 1 == var9) {
+                  this.blit(var1, var33, var25, var26 + 45, 27, 9, 9);
                }
             }
 
             var18 -= 10;
          }
 
          this.minecraft.getProfiler().popPush("air");
-         var31 = var1.getAirSupply();
-         var25 = var1.getMaxAirSupply();
-         if (var1.isUnderLiquid(FluidTags.WATER) || var31 < var25) {
+         var31 = var2.getAirSupply();
+         var25 = var2.getMaxAirSupply();
+         if (var2.isUnderLiquid(FluidTags.WATER) || var31 < var25) {
             var26 = this.getVisibleVehicleHeartRows(var23) - 1;
             var18 -= var26 * 10;
             var27 = Mth.ceil((double)(var31 - 2) * 10.0D / (double)var25);
             var33 = Mth.ceil((double)var31 * 10.0D / (double)var25) - var27;
 
             for(int var29 = 0; var29 < var27 + var33; ++var29) {
                if (var29 < var27) {
-                  this.blit(var11 - var29 * 8 - 9, var18, 16, 18, 9, 9);
+                  this.blit(var1, var11 - var29 * 8 - 9, var18, 16, 18, 9, 9);
                } else {
-                  this.blit(var11 - var29 * 8 - 9, var18, 25, 18, 9, 9);
+                  this.blit(var1, var11 - var29 * 8 - 9, var18, 25, 18, 9, 9);
                }
             }
          }
 
          this.minecraft.getProfiler().pop();
       }
    }
 
-   private void renderVehicleHealth() {
-      LivingEntity var1 = this.getPlayerVehicleWithHealth();
-      if (var1 != null) {
-         int var2 = this.getVehicleMaxHearts(var1);
-         if (var2 != 0) {
-            int var3 = (int)Math.ceil((double)var1.getHealth());
+   private void renderVehicleHealth(PoseStack var1) {
+      LivingEntity var2 = this.getPlayerVehicleWithHealth();
+      if (var2 != null) {
+         int var3 = this.getVehicleMaxHearts(var2);
+         if (var3 != 0) {
+            int var4 = (int)Math.ceil((double)var2.getHealth());
             this.minecraft.getProfiler().popPush("mountHealth");
-            int var4 = this.screenHeight - 39;
-            int var5 = this.screenWidth / 2 + 91;
-            int var6 = var4;
-            int var7 = 0;
+            int var5 = this.screenHeight - 39;
+            int var6 = this.screenWidth / 2 + 91;
+            int var7 = var5;
+            int var8 = 0;
 
-            for(boolean var8 = false; var2 > 0; var7 += 20) {
-               int var9 = Math.min(var2, 10);
-               var2 -= var9;
+            for(boolean var9 = false; var3 > 0; var8 += 20) {
+               int var10 = Math.min(var3, 10);
+               var3 -= var10;
 
-               for(int var10 = 0; var10 < var9; ++var10) {
-                  boolean var11 = true;
-                  byte var12 = 0;
-                  int var13 = var5 - var10 * 8 - 9;
-                  this.blit(var13, var6, 52 + var12 * 9, 9, 9, 9);
-                  if (var10 * 2 + 1 + var7 < var3) {
-                     this.blit(var13, var6, 88, 9, 9, 9);
+               for(int var11 = 0; var11 < var10; ++var11) {
+                  boolean var12 = true;
+                  byte var13 = 0;
+                  int var14 = var6 - var11 * 8 - 9;
+                  this.blit(var1, var14, var7, 52 + var13 * 9, 9, 9, 9);
+                  if (var11 * 2 + 1 + var8 < var4) {
+                     this.blit(var1, var14, var7, 88, 9, 9, 9);
                   }
 
-                  if (var10 * 2 + 1 + var7 == var3) {
-                     this.blit(var13, var6, 97, 9, 9, 9);
+                  if (var11 * 2 + 1 + var8 == var4) {
+                     this.blit(var1, var14, var7, 97, 9, 9, 9);
                   }
                }
 
-               var6 -= 10;
+               var7 -= 10;
             }
 
          }
       }
    }
@@ -1073,12 +1086,12 @@
       }
 
       if (this.titleTime > 0) {
          --this.titleTime;
          if (this.titleTime <= 0) {
-            this.title = "";
-            this.subtitle = "";
+            this.title = null;
+            this.subtitle = null;
          }
       }
 
       ++this.tickCount;
       Entity var1 = this.minecraft.getCameraEntity();
@@ -1101,24 +1114,24 @@
          this.lastToolHighlight = var2;
       }
 
    }
 
-   public void setNowPlaying(String var1) {
-      this.setOverlayMessage(I18n.get("record.nowPlaying", var1), true);
+   public void setNowPlaying(Component var1) {
+      this.setOverlayMessage(new TranslatableComponent("record.nowPlaying", new Object[]{var1}), true);
    }
 
-   public void setOverlayMessage(String var1, boolean var2) {
+   public void setOverlayMessage(Component var1, boolean var2) {
       this.overlayMessageString = var1;
       this.overlayMessageTime = 60;
       this.animateOverlayMessageColor = var2;
    }
 
-   public void setTitles(String var1, String var2, int var3, int var4, int var5) {
+   public void setTitles(@Nullable Component var1, @Nullable Component var2, int var3, int var4, int var5) {
       if (var1 == null && var2 == null && var3 < 0 && var4 < 0 && var5 < 0) {
-         this.title = "";
-         this.subtitle = "";
+         this.title = null;
+         this.subtitle = null;
          this.titleTime = 0;
       } else if (var1 != null) {
          this.title = var1;
          this.titleTime = this.titleFadeInTime + this.titleStayTime + this.titleFadeOutTime;
       } else if (var2 != null) {
@@ -1141,20 +1154,16 @@
          }
 
       }
    }
 
-   public void setOverlayMessage(Component var1, boolean var2) {
-      this.setOverlayMessage(var1.getString(), var2);
-   }
+   public void handleChat(ChatType var1, Component var2, UUID var3) {
+      Iterator var4 = ((List)this.chatListeners.get(var1)).iterator();
 
-   public void handleChat(ChatType var1, Component var2) {
-      Iterator var3 = ((List)this.chatListeners.get(var1)).iterator();
-
-      while(var3.hasNext()) {
-         ChatListener var4 = (ChatListener)var3.next();
-         var4.handle(var1, var2);
+      while(var4.hasNext()) {
+         ChatListener var5 = (ChatListener)var4.next();
+         var5.handle(var1, var2, var3);
       }
 
    }
 
    public ChatComponent getChat() {
