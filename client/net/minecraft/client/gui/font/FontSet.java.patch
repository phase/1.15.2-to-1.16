--- net/minecraft/client/gui/font/FontSet.java
+++ net/minecraft/client/gui/font/FontSet.java
@@ -3,16 +3,15 @@
 import com.google.common.collect.Lists;
 import com.google.common.collect.Sets;
 import com.mojang.blaze3d.font.GlyphInfo;
 import com.mojang.blaze3d.font.GlyphProvider;
 import com.mojang.blaze3d.font.RawGlyph;
-import it.unimi.dsi.fastutil.chars.Char2ObjectMap;
-import it.unimi.dsi.fastutil.chars.Char2ObjectOpenHashMap;
-import it.unimi.dsi.fastutil.chars.CharArrayList;
-import it.unimi.dsi.fastutil.chars.CharList;
 import it.unimi.dsi.fastutil.ints.Int2ObjectMap;
 import it.unimi.dsi.fastutil.ints.Int2ObjectOpenHashMap;
+import it.unimi.dsi.fastutil.ints.IntArrayList;
+import it.unimi.dsi.fastutil.ints.IntList;
+import it.unimi.dsi.fastutil.ints.IntOpenHashSet;
 import java.util.HashSet;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Random;
 import java.util.stream.Stream;
@@ -22,28 +21,25 @@
 import net.minecraft.client.gui.font.glyphs.WhiteGlyph;
 import net.minecraft.client.renderer.texture.AbstractTexture;
 import net.minecraft.client.renderer.texture.TextureManager;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.util.Mth;
-import org.apache.logging.log4j.LogManager;
-import org.apache.logging.log4j.Logger;
 
 public class FontSet implements AutoCloseable {
-   private static final Logger LOGGER = LogManager.getLogger();
    private static final EmptyGlyph SPACE_GLYPH = new EmptyGlyph();
    private static final GlyphInfo SPACE_INFO = () -> {
       return 4.0F;
    };
    private static final Random RANDOM = new Random();
    private final TextureManager textureManager;
    private final ResourceLocation name;
    private BakedGlyph missingGlyph;
    private BakedGlyph whiteGlyph;
    private final List<GlyphProvider> providers = Lists.newArrayList();
-   private final Char2ObjectMap<BakedGlyph> glyphs = new Char2ObjectOpenHashMap();
-   private final Char2ObjectMap<GlyphInfo> glyphInfos = new Char2ObjectOpenHashMap();
-   private final Int2ObjectMap<CharList> glyphsByWidth = new Int2ObjectOpenHashMap();
+   private final Int2ObjectMap<BakedGlyph> glyphs = new Int2ObjectOpenHashMap();
+   private final Int2ObjectMap<GlyphInfo> glyphInfos = new Int2ObjectOpenHashMap();
+   private final Int2ObjectMap<IntList> glyphsByWidth = new Int2ObjectOpenHashMap();
    private final List<FontTexture> textures = Lists.newArrayList();
 
    public FontSet(TextureManager var1, ResourceLocation var2) {
       this.textureManager = var1;
       this.name = var2;
@@ -55,33 +51,40 @@
       this.glyphs.clear();
       this.glyphInfos.clear();
       this.glyphsByWidth.clear();
       this.missingGlyph = this.stitch(MissingGlyph.INSTANCE);
       this.whiteGlyph = this.stitch(WhiteGlyph.INSTANCE);
-      HashSet var2 = Sets.newHashSet();
+      IntOpenHashSet var2 = new IntOpenHashSet();
+      Iterator var3 = var1.iterator();
 
-      for(char var3 = 0; var3 < '\uffff'; ++var3) {
+      while(var3.hasNext()) {
+         GlyphProvider var4 = (GlyphProvider)var3.next();
+         var2.addAll(var4.getSupportedGlyphs());
+      }
+
+      HashSet var5 = Sets.newHashSet();
+      var2.forEach((var3x) -> {
          Iterator var4 = var1.iterator();
 
          while(var4.hasNext()) {
-            GlyphProvider var5 = (GlyphProvider)var4.next();
-            Object var6 = var3 == ' ' ? SPACE_INFO : var5.getGlyph(var3);
+            GlyphProvider var5x = (GlyphProvider)var4.next();
+            Object var6 = var3x == 32 ? SPACE_INFO : var5x.getGlyph(var3x);
             if (var6 != null) {
-               var2.add(var5);
+               var5.add(var5x);
                if (var6 != MissingGlyph.INSTANCE) {
-                  ((CharList)this.glyphsByWidth.computeIfAbsent(Mth.ceil(((GlyphInfo)var6).getAdvance(false)), (var0) -> {
-                     return new CharArrayList();
-                  })).add(var3);
+                  ((IntList)this.glyphsByWidth.computeIfAbsent(Mth.ceil(((GlyphInfo)var6).getAdvance(false)), (var0) -> {
+                     return new IntArrayList();
+                  })).add(var3x);
                }
                break;
             }
          }
-      }
 
+      });
       Stream var10000 = var1.stream();
-      var2.getClass();
-      var10000 = var10000.filter(var2::contains);
+      var5.getClass();
+      var10000 = var10000.filter(var5::contains);
       List var10001 = this.providers;
       var10000.forEach(var10001::add);
    }
 
    public void close() {
@@ -109,17 +112,17 @@
       }
 
       this.textures.clear();
    }
 
-   public GlyphInfo getGlyphInfo(char var1) {
+   public GlyphInfo getGlyphInfo(int var1) {
       return (GlyphInfo)this.glyphInfos.computeIfAbsent(var1, (var1x) -> {
-         return (GlyphInfo)(var1x == 32 ? SPACE_INFO : this.getRaw((char)var1x));
+         return (GlyphInfo)(var1x == 32 ? SPACE_INFO : this.getRaw(var1x));
       });
    }
 
-   private RawGlyph getRaw(char var1) {
+   private RawGlyph getRaw(int var1) {
       Iterator var2 = this.providers.iterator();
 
       RawGlyph var4;
       do {
          if (!var2.hasNext()) {
@@ -131,13 +134,13 @@
       } while(var4 == null);
 
       return var4;
    }
 
-   public BakedGlyph getGlyph(char var1) {
+   public BakedGlyph getGlyph(int var1) {
       return (BakedGlyph)this.glyphs.computeIfAbsent(var1, (var1x) -> {
-         return (BakedGlyph)(var1x == 32 ? SPACE_GLYPH : this.stitch(this.getRaw((char)var1x)));
+         return (BakedGlyph)(var1x == 32 ? SPACE_GLYPH : this.stitch(this.getRaw(var1x)));
       });
    }
 
    private BakedGlyph stitch(RawGlyph var1) {
       Iterator var2 = this.textures.iterator();
@@ -158,12 +161,12 @@
 
       return var4;
    }
 
    public BakedGlyph getRandomGlyph(GlyphInfo var1) {
-      CharList var2 = (CharList)this.glyphsByWidth.get(Mth.ceil(var1.getAdvance(false)));
-      return var2 != null && !var2.isEmpty() ? this.getGlyph(var2.get(RANDOM.nextInt(var2.size()))) : this.missingGlyph;
+      IntList var2 = (IntList)this.glyphsByWidth.get(Mth.ceil(var1.getAdvance(false)));
+      return var2 != null && !var2.isEmpty() ? this.getGlyph(var2.getInt(RANDOM.nextInt(var2.size()))) : this.missingGlyph;
    }
 
    public BakedGlyph whiteGlyph() {
       return this.whiteGlyph;
    }
