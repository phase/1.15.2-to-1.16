--- net/minecraft/client/server/IntegratedServer.java
+++ net/minecraft/client/server/IntegratedServer.java
@@ -1,13 +1,11 @@
 package net.minecraft.client.server;
 
 import com.google.common.collect.Lists;
-import com.google.gson.JsonElement;
 import com.mojang.authlib.GameProfile;
 import com.mojang.authlib.GameProfileRepository;
 import com.mojang.authlib.minecraft.MinecraftSessionService;
-import com.mojang.authlib.yggdrasil.YggdrasilAuthenticationService;
 import java.io.File;
 import java.io.IOException;
 import java.net.InetAddress;
 import java.util.ArrayList;
 import java.util.Iterator;
@@ -16,90 +14,59 @@
 import java.util.function.BooleanSupplier;
 import net.minecraft.CrashReport;
 import net.minecraft.SharedConstants;
 import net.minecraft.client.ClientBrandRetriever;
 import net.minecraft.client.Minecraft;
-import net.minecraft.commands.Commands;
 import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.ServerResources;
 import net.minecraft.server.level.ServerPlayer;
-import net.minecraft.server.level.progress.ChunkProgressListener;
 import net.minecraft.server.level.progress.ChunkProgressListenerFactory;
+import net.minecraft.server.packs.repository.PackRepository;
+import net.minecraft.server.packs.repository.UnopenedPack;
 import net.minecraft.server.players.GameProfileCache;
 import net.minecraft.util.Crypt;
-import net.minecraft.util.profiling.GameProfiler;
-import net.minecraft.world.Difficulty;
+import net.minecraft.util.profiling.ProfilerFiller;
 import net.minecraft.world.Snooper;
 import net.minecraft.world.level.GameType;
-import net.minecraft.world.level.LevelSettings;
-import net.minecraft.world.level.LevelType;
-import net.minecraft.world.level.dimension.DimensionType;
-import net.minecraft.world.level.storage.LevelData;
-import net.minecraft.world.level.storage.LevelStorage;
+import net.minecraft.world.level.storage.LevelStorageSource;
+import net.minecraft.world.level.storage.WorldData;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
 public class IntegratedServer extends MinecraftServer {
    private static final Logger LOGGER = LogManager.getLogger();
    private final Minecraft minecraft;
-   private final LevelSettings settings;
    private boolean paused;
    private int publishedPort = -1;
    private LanServerPinger lanPinger;
    private UUID uuid;
 
-   public IntegratedServer(Minecraft var1, String var2, String var3, LevelSettings var4, YggdrasilAuthenticationService var5, MinecraftSessionService var6, GameProfileRepository var7, GameProfileCache var8, ChunkProgressListenerFactory var9) {
-      super(new File(var1.gameDirectory, "saves"), var1.getProxy(), var1.getFixerUpper(), new Commands(false), var5, var6, var7, var8, var9, var2);
+   public IntegratedServer(Minecraft var1, LevelStorageSource.LevelStorageAccess var2, PackRepository<UnopenedPack> var3, ServerResources var4, WorldData var5, MinecraftSessionService var6, GameProfileRepository var7, GameProfileCache var8, ChunkProgressListenerFactory var9) {
+      super(var2, var5, var3, var1.getProxy(), var1.getFixerUpper(), var4, var6, var7, var8, var9);
       this.setSingleplayerName(var1.getUser().getName());
-      this.setLevelName(var3);
       this.setDemo(var1.isDemo());
-      this.setBonusChest(var4.hasStartingBonusItems());
       this.setMaxBuildHeight(256);
-      this.setPlayerList(new IntegratedPlayerList(this));
+      this.setPlayerList(new IntegratedPlayerList(this, this.registryHolder, this.playerDataStorage));
       this.minecraft = var1;
-      this.settings = this.isDemo() ? MinecraftServer.DEMO_SETTINGS : var4;
    }
 
-   public void loadLevel(String var1, String var2, long var3, LevelType var5, JsonElement var6) {
-      this.ensureLevelConversion(var1);
-      LevelStorage var7 = this.getStorageSource().selectLevel(var1, this);
-      this.detectBundledResources(this.getLevelIdName(), var7);
-      LevelData var8 = var7.prepareLevel();
-      if (var8 == null) {
-         var8 = new LevelData(this.settings, var2);
-      } else {
-         var8.setLevelName(var2);
-      }
-
-      var8.setModdedInfo(this.getServerModName(), this.getModdedStatus().isPresent());
-      this.loadDataPacks(var7.getFolder(), var8);
-      ChunkProgressListener var9 = this.progressListenerFactory.create(11);
-      this.createLevels(var7, var8, this.settings, var9);
-      if (this.getLevel(DimensionType.OVERWORLD).getLevelData().getDifficulty() == null) {
-         this.setDifficulty(this.minecraft.options.difficulty, true);
-      }
-
-      this.prepareLevels(var9);
-   }
-
-   public boolean initServer() throws IOException {
+   public boolean initServer() {
       LOGGER.info("Starting integrated minecraft server version " + SharedConstants.getCurrentVersion().getName());
       this.setUsesAuthentication(true);
-      this.setAnimals(true);
-      this.setNpcsEnabled(true);
       this.setPvpAllowed(true);
       this.setFlightAllowed(true);
       LOGGER.info("Generating keypair");
       this.setKeyPair(Crypt.generateKeyPair());
-      this.loadLevel(this.getLevelIdName(), this.getLevelName(), this.settings.getSeed(), this.settings.getLevelType(), this.settings.getLevelTypeOptions());
-      this.setMotd(this.getSingleplayerName() + " - " + this.getLevel(DimensionType.OVERWORLD).getLevelData().getLevelName());
+      this.loadLevel();
+      this.setMotd(this.getSingleplayerName() + " - " + this.getWorldData().getLevelName());
       return true;
    }
 
    public void tickServer(BooleanSupplier var1) {
       boolean var2 = this.paused;
       this.paused = Minecraft.getInstance().getConnection() != null && Minecraft.getInstance().isPaused();
-      GameProfiler var3 = this.getProfiler();
+      ProfilerFiller var3 = this.getProfiler();
       if (!var2 && this.paused) {
          var3.push("autoSave");
          LOGGER.info("Saving and pausing game...");
          this.getPlayerList().saveAll();
          this.saveAllChunks(false, false, false);
@@ -115,26 +82,10 @@
          }
 
       }
    }
 
-   public boolean canGenerateStructures() {
-      return false;
-   }
-
-   public GameType getDefaultGameType() {
-      return this.settings.getGameType();
-   }
-
-   public Difficulty getDefaultDifficulty() {
-      return this.minecraft.level.getLevelData().getDifficulty();
-   }
-
-   public boolean isHardcore() {
-      return this.settings.isHardcore();
-   }
-
    public boolean shouldRconBroadcast() {
       return true;
    }
 
    public boolean shouldInformAdmins() {
@@ -245,12 +196,12 @@
 
    public int getPort() {
       return this.publishedPort;
    }
 
-   public void setDefaultGameMode(GameType var1) {
-      super.setDefaultGameMode(var1);
+   public void setDefaultGameType(GameType var1) {
+      super.setDefaultGameType(var1);
       this.getPlayerList().setOverrideGameMode(var1);
    }
 
    public boolean isCommandBlockEnabled() {
       return true;
@@ -269,6 +220,10 @@
    }
 
    public boolean isSingleplayerOwner(GameProfile var1) {
       return var1.getName().equalsIgnoreCase(this.getSingleplayerName());
    }
+
+   public int getScaledTrackingDistance(int var1) {
+      return (int)(this.minecraft.options.entityDistanceScaling * (float)var1);
+   }
 }
