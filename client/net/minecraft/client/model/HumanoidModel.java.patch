--- net/minecraft/client/model/HumanoidModel.java
+++ net/minecraft/client/model/HumanoidModel.java
@@ -8,11 +8,10 @@
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.util.Mth;
 import net.minecraft.world.InteractionHand;
 import net.minecraft.world.entity.HumanoidArm;
 import net.minecraft.world.entity.LivingEntity;
-import net.minecraft.world.item.CrossbowItem;
 
 public class HumanoidModel<T extends LivingEntity> extends AgeableListModel<T> implements ArmedModel, HeadedModel {
    public ModelPart head;
    public ModelPart hat;
    public ModelPart body;
@@ -22,11 +21,10 @@
    public ModelPart leftLeg;
    public HumanoidModel.ArmPose leftArmPose;
    public HumanoidModel.ArmPose rightArmPose;
    public boolean crouching;
    public float swimAmount;
-   private float itemUseTicks;
 
    public HumanoidModel(float var1) {
       this(RenderType::entityCutoutNoCull, var1, 0.0F, 64, 32);
    }
 
@@ -73,11 +71,10 @@
       return ImmutableList.of(this.body, this.rightArm, this.leftArm, this.rightLeg, this.leftLeg, this.hat);
    }
 
    public void prepareMobModel(T var1, float var2, float var3, float var4) {
       this.swimAmount = var1.getSwimAmount(var4);
-      this.itemUseTicks = (float)var1.getTicksUsingItem();
       super.prepareMobModel(var1, var2, var3, var4);
    }
 
    public void setupAnim(T var1, float var2, float var3, float var4, float var5, float var6) {
       boolean var7 = var1.getFallFlyingTicks() > 4;
@@ -85,13 +82,13 @@
       this.head.yRot = var5 * 0.017453292F;
       if (var7) {
          this.head.xRot = -0.7853982F;
       } else if (this.swimAmount > 0.0F) {
          if (var8) {
-            this.head.xRot = this.rotlerpRad(this.head.xRot, -0.7853982F, this.swimAmount);
+            this.head.xRot = this.rotlerpRad(this.swimAmount, this.head.xRot, -0.7853982F);
          } else {
-            this.head.xRot = this.rotlerpRad(this.head.xRot, var6 * 0.017453292F, this.swimAmount);
+            this.head.xRot = this.rotlerpRad(this.swimAmount, this.head.xRot, var6 * 0.017453292F);
          }
       } else {
          this.head.xRot = var6 * 0.017453292F;
       }
 
@@ -134,80 +131,22 @@
          this.leftLeg.yRot = -0.31415927F;
          this.leftLeg.zRot = -0.07853982F;
       }
 
       this.rightArm.yRot = 0.0F;
-      this.rightArm.zRot = 0.0F;
-      switch(this.leftArmPose) {
-      case EMPTY:
-         this.leftArm.yRot = 0.0F;
-         break;
-      case BLOCK:
-         this.leftArm.xRot = this.leftArm.xRot * 0.5F - 0.9424779F;
-         this.leftArm.yRot = 0.5235988F;
-         break;
-      case ITEM:
-         this.leftArm.xRot = this.leftArm.xRot * 0.5F - 0.31415927F;
-         this.leftArm.yRot = 0.0F;
+      this.leftArm.yRot = 0.0F;
+      boolean var10 = var1.getMainArm() == HumanoidArm.RIGHT;
+      boolean var11 = var10 ? this.leftArmPose.isTwoHanded() : this.rightArmPose.isTwoHanded();
+      if (var10 != var11) {
+         this.poseLeftArm(var1);
+         this.poseRightArm(var1);
+      } else {
+         this.poseRightArm(var1);
+         this.poseLeftArm(var1);
       }
 
-      switch(this.rightArmPose) {
-      case EMPTY:
-         this.rightArm.yRot = 0.0F;
-         break;
-      case BLOCK:
-         this.rightArm.xRot = this.rightArm.xRot * 0.5F - 0.9424779F;
-         this.rightArm.yRot = -0.5235988F;
-         break;
-      case ITEM:
-         this.rightArm.xRot = this.rightArm.xRot * 0.5F - 0.31415927F;
-         this.rightArm.yRot = 0.0F;
-         break;
-      case THROW_SPEAR:
-         this.rightArm.xRot = this.rightArm.xRot * 0.5F - 3.1415927F;
-         this.rightArm.yRot = 0.0F;
-      }
-
-      if (this.leftArmPose == HumanoidModel.ArmPose.THROW_SPEAR && this.rightArmPose != HumanoidModel.ArmPose.BLOCK && this.rightArmPose != HumanoidModel.ArmPose.THROW_SPEAR && this.rightArmPose != HumanoidModel.ArmPose.BOW_AND_ARROW) {
-         this.leftArm.xRot = this.leftArm.xRot * 0.5F - 3.1415927F;
-         this.leftArm.yRot = 0.0F;
-      }
-
-      float var12;
-      float var13;
-      float var14;
-      if (this.attackTime > 0.0F) {
-         HumanoidArm var10 = this.getAttackArm(var1);
-         ModelPart var11 = this.getArm(var10);
-         var12 = this.attackTime;
-         this.body.yRot = Mth.sin(Mth.sqrt(var12) * 6.2831855F) * 0.2F;
-         if (var10 == HumanoidArm.LEFT) {
-            var10000 = this.body;
-            var10000.yRot *= -1.0F;
-         }
-
-         this.rightArm.z = Mth.sin(this.body.yRot) * 5.0F;
-         this.rightArm.x = -Mth.cos(this.body.yRot) * 5.0F;
-         this.leftArm.z = -Mth.sin(this.body.yRot) * 5.0F;
-         this.leftArm.x = Mth.cos(this.body.yRot) * 5.0F;
-         var10000 = this.rightArm;
-         var10000.yRot += this.body.yRot;
-         var10000 = this.leftArm;
-         var10000.yRot += this.body.yRot;
-         var10000 = this.leftArm;
-         var10000.xRot += this.body.yRot;
-         var12 = 1.0F - this.attackTime;
-         var12 *= var12;
-         var12 *= var12;
-         var12 = 1.0F - var12;
-         var13 = Mth.sin(var12 * 3.1415927F);
-         var14 = Mth.sin(this.attackTime * 3.1415927F) * -(this.head.xRot - 0.7F) * 0.75F;
-         var11.xRot = (float)((double)var11.xRot - ((double)var13 * 1.2D + (double)var14));
-         var11.yRot += this.body.yRot * 2.0F;
-         var11.zRot += Mth.sin(this.attackTime * 3.1415927F) * -0.4F;
-      }
-
+      this.setupAttackAnimation(var1, var4);
       if (this.crouching) {
          this.body.xRot = 0.5F;
          var10000 = this.rightArm;
          var10000.xRot += 0.4F;
          var10000 = this.leftArm;
@@ -230,108 +169,160 @@
          this.body.y = 0.0F;
          this.leftArm.y = 2.0F;
          this.rightArm.y = 2.0F;
       }
 
-      var10000 = this.rightArm;
-      var10000.zRot += Mth.cos(var4 * 0.09F) * 0.05F + 0.05F;
-      var10000 = this.leftArm;
-      var10000.zRot -= Mth.cos(var4 * 0.09F) * 0.05F + 0.05F;
-      var10000 = this.rightArm;
-      var10000.xRot += Mth.sin(var4 * 0.067F) * 0.05F;
-      var10000 = this.leftArm;
-      var10000.xRot -= Mth.sin(var4 * 0.067F) * 0.05F;
-      if (this.rightArmPose == HumanoidModel.ArmPose.BOW_AND_ARROW) {
+      AnimationUtils.bobArms(this.rightArm, this.leftArm, var4);
+      if (this.swimAmount > 0.0F) {
+         float var12 = var2 % 26.0F;
+         HumanoidArm var13 = this.getAttackArm(var1);
+         float var14 = var13 == HumanoidArm.RIGHT && this.attackTime > 0.0F ? 0.0F : this.swimAmount;
+         float var15 = var13 == HumanoidArm.LEFT && this.attackTime > 0.0F ? 0.0F : this.swimAmount;
+         float var16;
+         if (var12 < 14.0F) {
+            this.leftArm.xRot = this.rotlerpRad(var15, this.leftArm.xRot, 0.0F);
+            this.rightArm.xRot = Mth.lerp(var14, this.rightArm.xRot, 0.0F);
+            this.leftArm.yRot = this.rotlerpRad(var15, this.leftArm.yRot, 3.1415927F);
+            this.rightArm.yRot = Mth.lerp(var14, this.rightArm.yRot, 3.1415927F);
+            this.leftArm.zRot = this.rotlerpRad(var15, this.leftArm.zRot, 3.1415927F + 1.8707964F * this.quadraticArmUpdate(var12) / this.quadraticArmUpdate(14.0F));
+            this.rightArm.zRot = Mth.lerp(var14, this.rightArm.zRot, 3.1415927F - 1.8707964F * this.quadraticArmUpdate(var12) / this.quadraticArmUpdate(14.0F));
+         } else if (var12 >= 14.0F && var12 < 22.0F) {
+            var16 = (var12 - 14.0F) / 8.0F;
+            this.leftArm.xRot = this.rotlerpRad(var15, this.leftArm.xRot, 1.5707964F * var16);
+            this.rightArm.xRot = Mth.lerp(var14, this.rightArm.xRot, 1.5707964F * var16);
+            this.leftArm.yRot = this.rotlerpRad(var15, this.leftArm.yRot, 3.1415927F);
+            this.rightArm.yRot = Mth.lerp(var14, this.rightArm.yRot, 3.1415927F);
+            this.leftArm.zRot = this.rotlerpRad(var15, this.leftArm.zRot, 5.012389F - 1.8707964F * var16);
+            this.rightArm.zRot = Mth.lerp(var14, this.rightArm.zRot, 1.2707963F + 1.8707964F * var16);
+         } else if (var12 >= 22.0F && var12 < 26.0F) {
+            var16 = (var12 - 22.0F) / 4.0F;
+            this.leftArm.xRot = this.rotlerpRad(var15, this.leftArm.xRot, 1.5707964F - 1.5707964F * var16);
+            this.rightArm.xRot = Mth.lerp(var14, this.rightArm.xRot, 1.5707964F - 1.5707964F * var16);
+            this.leftArm.yRot = this.rotlerpRad(var15, this.leftArm.yRot, 3.1415927F);
+            this.rightArm.yRot = Mth.lerp(var14, this.rightArm.yRot, 3.1415927F);
+            this.leftArm.zRot = this.rotlerpRad(var15, this.leftArm.zRot, 3.1415927F);
+            this.rightArm.zRot = Mth.lerp(var14, this.rightArm.zRot, 3.1415927F);
+         }
+
+         var16 = 0.3F;
+         float var17 = 0.33333334F;
+         this.leftLeg.xRot = Mth.lerp(this.swimAmount, this.leftLeg.xRot, 0.3F * Mth.cos(var2 * 0.33333334F + 3.1415927F));
+         this.rightLeg.xRot = Mth.lerp(this.swimAmount, this.rightLeg.xRot, 0.3F * Mth.cos(var2 * 0.33333334F));
+      }
+
+      this.hat.copyFrom(this.head);
+   }
+
+   private void poseRightArm(T var1) {
+      switch(this.rightArmPose) {
+      case EMPTY:
+         this.rightArm.yRot = 0.0F;
+         break;
+      case BLOCK:
+         this.rightArm.xRot = this.rightArm.xRot * 0.5F - 0.9424779F;
+         this.rightArm.yRot = -0.5235988F;
+         break;
+      case ITEM:
+         this.rightArm.xRot = this.rightArm.xRot * 0.5F - 0.31415927F;
+         this.rightArm.yRot = 0.0F;
+         break;
+      case THROW_SPEAR:
+         this.rightArm.xRot = this.rightArm.xRot * 0.5F - 3.1415927F;
+         this.rightArm.yRot = 0.0F;
+         break;
+      case BOW_AND_ARROW:
          this.rightArm.yRot = -0.1F + this.head.yRot;
          this.leftArm.yRot = 0.1F + this.head.yRot + 0.4F;
          this.rightArm.xRot = -1.5707964F + this.head.xRot;
          this.leftArm.xRot = -1.5707964F + this.head.xRot;
-      } else if (this.leftArmPose == HumanoidModel.ArmPose.BOW_AND_ARROW && this.rightArmPose != HumanoidModel.ArmPose.THROW_SPEAR && this.rightArmPose != HumanoidModel.ArmPose.BLOCK) {
+         break;
+      case CROSSBOW_CHARGE:
+         AnimationUtils.animateCrossbowCharge(this.rightArm, this.leftArm, var1, true);
+         break;
+      case CROSSBOW_HOLD:
+         AnimationUtils.animateCrossbowHold(this.rightArm, this.leftArm, this.head, true);
+      }
+
+   }
+
+   private void poseLeftArm(T var1) {
+      switch(this.leftArmPose) {
+      case EMPTY:
+         this.leftArm.yRot = 0.0F;
+         break;
+      case BLOCK:
+         this.leftArm.xRot = this.leftArm.xRot * 0.5F - 0.9424779F;
+         this.leftArm.yRot = 0.5235988F;
+         break;
+      case ITEM:
+         this.leftArm.xRot = this.leftArm.xRot * 0.5F - 0.31415927F;
+         this.leftArm.yRot = 0.0F;
+         break;
+      case THROW_SPEAR:
+         this.leftArm.xRot = this.leftArm.xRot * 0.5F - 3.1415927F;
+         this.leftArm.yRot = 0.0F;
+         break;
+      case BOW_AND_ARROW:
          this.rightArm.yRot = -0.1F + this.head.yRot - 0.4F;
          this.leftArm.yRot = 0.1F + this.head.yRot;
          this.rightArm.xRot = -1.5707964F + this.head.xRot;
          this.leftArm.xRot = -1.5707964F + this.head.xRot;
+         break;
+      case CROSSBOW_CHARGE:
+         AnimationUtils.animateCrossbowCharge(this.rightArm, this.leftArm, var1, false);
+         break;
+      case CROSSBOW_HOLD:
+         AnimationUtils.animateCrossbowHold(this.rightArm, this.leftArm, this.head, false);
       }
 
-      float var15 = (float)CrossbowItem.getChargeDuration(var1.getUseItem());
-      float var16;
-      if (this.rightArmPose == HumanoidModel.ArmPose.CROSSBOW_CHARGE) {
-         this.rightArm.yRot = -0.8F;
-         this.rightArm.xRot = -0.97079635F;
-         this.leftArm.xRot = -0.97079635F;
-         var16 = Mth.clamp(this.itemUseTicks, 0.0F, var15);
-         this.leftArm.yRot = Mth.lerp(var16 / var15, 0.4F, 0.85F);
-         this.leftArm.xRot = Mth.lerp(var16 / var15, this.leftArm.xRot, -1.5707964F);
-      } else if (this.leftArmPose == HumanoidModel.ArmPose.CROSSBOW_CHARGE) {
-         this.leftArm.yRot = 0.8F;
-         this.rightArm.xRot = -0.97079635F;
-         this.leftArm.xRot = -0.97079635F;
-         var16 = Mth.clamp(this.itemUseTicks, 0.0F, var15);
-         this.rightArm.yRot = Mth.lerp(var16 / var15, -0.4F, -0.85F);
-         this.rightArm.xRot = Mth.lerp(var16 / var15, this.rightArm.xRot, -1.5707964F);
-      }
+   }
 
-      if (this.rightArmPose == HumanoidModel.ArmPose.CROSSBOW_HOLD && this.attackTime <= 0.0F) {
-         this.rightArm.yRot = -0.3F + this.head.yRot;
-         this.leftArm.yRot = 0.6F + this.head.yRot;
-         this.rightArm.xRot = -1.5707964F + this.head.xRot + 0.1F;
-         this.leftArm.xRot = -1.5F + this.head.xRot;
-      } else if (this.leftArmPose == HumanoidModel.ArmPose.CROSSBOW_HOLD) {
-         this.rightArm.yRot = -0.6F + this.head.yRot;
-         this.leftArm.yRot = 0.3F + this.head.yRot;
-         this.rightArm.xRot = -1.5F + this.head.xRot;
-         this.leftArm.xRot = -1.5707964F + this.head.xRot + 0.1F;
-      }
-
-      if (this.swimAmount > 0.0F) {
-         var16 = var2 % 26.0F;
-         var12 = this.attackTime > 0.0F ? 0.0F : this.swimAmount;
-         if (var16 < 14.0F) {
-            this.leftArm.xRot = this.rotlerpRad(this.leftArm.xRot, 0.0F, this.swimAmount);
-            this.rightArm.xRot = Mth.lerp(var12, this.rightArm.xRot, 0.0F);
-            this.leftArm.yRot = this.rotlerpRad(this.leftArm.yRot, 3.1415927F, this.swimAmount);
-            this.rightArm.yRot = Mth.lerp(var12, this.rightArm.yRot, 3.1415927F);
-            this.leftArm.zRot = this.rotlerpRad(this.leftArm.zRot, 3.1415927F + 1.8707964F * this.quadraticArmUpdate(var16) / this.quadraticArmUpdate(14.0F), this.swimAmount);
-            this.rightArm.zRot = Mth.lerp(var12, this.rightArm.zRot, 3.1415927F - 1.8707964F * this.quadraticArmUpdate(var16) / this.quadraticArmUpdate(14.0F));
-         } else if (var16 >= 14.0F && var16 < 22.0F) {
-            var13 = (var16 - 14.0F) / 8.0F;
-            this.leftArm.xRot = this.rotlerpRad(this.leftArm.xRot, 1.5707964F * var13, this.swimAmount);
-            this.rightArm.xRot = Mth.lerp(var12, this.rightArm.xRot, 1.5707964F * var13);
-            this.leftArm.yRot = this.rotlerpRad(this.leftArm.yRot, 3.1415927F, this.swimAmount);
-            this.rightArm.yRot = Mth.lerp(var12, this.rightArm.yRot, 3.1415927F);
-            this.leftArm.zRot = this.rotlerpRad(this.leftArm.zRot, 5.012389F - 1.8707964F * var13, this.swimAmount);
-            this.rightArm.zRot = Mth.lerp(var12, this.rightArm.zRot, 1.2707963F + 1.8707964F * var13);
-         } else if (var16 >= 22.0F && var16 < 26.0F) {
-            var13 = (var16 - 22.0F) / 4.0F;
-            this.leftArm.xRot = this.rotlerpRad(this.leftArm.xRot, 1.5707964F - 1.5707964F * var13, this.swimAmount);
-            this.rightArm.xRot = Mth.lerp(var12, this.rightArm.xRot, 1.5707964F - 1.5707964F * var13);
-            this.leftArm.yRot = this.rotlerpRad(this.leftArm.yRot, 3.1415927F, this.swimAmount);
-            this.rightArm.yRot = Mth.lerp(var12, this.rightArm.yRot, 3.1415927F);
-            this.leftArm.zRot = this.rotlerpRad(this.leftArm.zRot, 3.1415927F, this.swimAmount);
-            this.rightArm.zRot = Mth.lerp(var12, this.rightArm.zRot, 3.1415927F);
+   protected void setupAttackAnimation(T var1, float var2) {
+      if (this.attackTime > 0.0F) {
+         HumanoidArm var3 = this.getAttackArm(var1);
+         ModelPart var4 = this.getArm(var3);
+         float var5 = this.attackTime;
+         this.body.yRot = Mth.sin(Mth.sqrt(var5) * 6.2831855F) * 0.2F;
+         ModelPart var10000;
+         if (var3 == HumanoidArm.LEFT) {
+            var10000 = this.body;
+            var10000.yRot *= -1.0F;
          }
 
-         var13 = 0.3F;
-         var14 = 0.33333334F;
-         this.leftLeg.xRot = Mth.lerp(this.swimAmount, this.leftLeg.xRot, 0.3F * Mth.cos(var2 * 0.33333334F + 3.1415927F));
-         this.rightLeg.xRot = Mth.lerp(this.swimAmount, this.rightLeg.xRot, 0.3F * Mth.cos(var2 * 0.33333334F));
+         this.rightArm.z = Mth.sin(this.body.yRot) * 5.0F;
+         this.rightArm.x = -Mth.cos(this.body.yRot) * 5.0F;
+         this.leftArm.z = -Mth.sin(this.body.yRot) * 5.0F;
+         this.leftArm.x = Mth.cos(this.body.yRot) * 5.0F;
+         var10000 = this.rightArm;
+         var10000.yRot += this.body.yRot;
+         var10000 = this.leftArm;
+         var10000.yRot += this.body.yRot;
+         var10000 = this.leftArm;
+         var10000.xRot += this.body.yRot;
+         var5 = 1.0F - this.attackTime;
+         var5 *= var5;
+         var5 *= var5;
+         var5 = 1.0F - var5;
+         float var6 = Mth.sin(var5 * 3.1415927F);
+         float var7 = Mth.sin(this.attackTime * 3.1415927F) * -(this.head.xRot - 0.7F) * 0.75F;
+         var4.xRot = (float)((double)var4.xRot - ((double)var6 * 1.2D + (double)var7));
+         var4.yRot += this.body.yRot * 2.0F;
+         var4.zRot += Mth.sin(this.attackTime * 3.1415927F) * -0.4F;
       }
-
-      this.hat.copyFrom(this.head);
    }
 
    protected float rotlerpRad(float var1, float var2, float var3) {
-      float var4 = (var2 - var1) % 6.2831855F;
+      float var4 = (var3 - var2) % 6.2831855F;
       if (var4 < -3.1415927F) {
          var4 += 6.2831855F;
       }
 
       if (var4 >= 3.1415927F) {
          var4 -= 6.2831855F;
       }
 
-      return var1 + var3 * var4;
+      return var2 + var1 * var4;
    }
 
    private float quadraticArmUpdate(float var1) {
       return -65.0F * var1 + var1 * var1;
    }
@@ -339,10 +330,17 @@
    public void copyPropertiesTo(HumanoidModel<T> var1) {
       super.copyPropertiesTo(var1);
       var1.leftArmPose = this.leftArmPose;
       var1.rightArmPose = this.rightArmPose;
       var1.crouching = this.crouching;
+      var1.head.copyFrom(this.head);
+      var1.hat.copyFrom(this.hat);
+      var1.body.copyFrom(this.body);
+      var1.rightArm.copyFrom(this.rightArm);
+      var1.leftArm.copyFrom(this.leftArm);
+      var1.rightLeg.copyFrom(this.rightLeg);
+      var1.leftLeg.copyFrom(this.leftLeg);
    }
 
    public void setAllVisible(boolean var1) {
       this.head.visible = var1;
       this.hat.visible = var1;
@@ -369,17 +367,24 @@
       HumanoidArm var2 = var1.getMainArm();
       return var1.swingingArm == InteractionHand.MAIN_HAND ? var2 : var2.getOpposite();
    }
 
    public static enum ArmPose {
-      EMPTY,
-      ITEM,
-      BLOCK,
-      BOW_AND_ARROW,
-      THROW_SPEAR,
-      CROSSBOW_CHARGE,
-      CROSSBOW_HOLD;
+      EMPTY(false),
+      ITEM(false),
+      BLOCK(false),
+      BOW_AND_ARROW(true),
+      THROW_SPEAR(false),
+      CROSSBOW_CHARGE(true),
+      CROSSBOW_HOLD(true);
 
-      private ArmPose() {
+      private final boolean twoHanded;
+
+      private ArmPose(boolean var3) {
+         this.twoHanded = var3;
       }
+
+      public boolean isTwoHanded() {
+         return this.twoHanded;
+      }
    }
 }
