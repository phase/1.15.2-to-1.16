--- net/minecraft/client/resources/language/LanguageManager.java
+++ net/minecraft/client/resources/language/LanguageManager.java
@@ -1,86 +1,86 @@
 package net.minecraft.client.resources.language;
 
+import com.google.common.collect.ImmutableMap;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.google.common.collect.Sets;
 import java.io.IOException;
 import java.util.ArrayList;
+import java.util.HashMap;
 import java.util.Iterator;
-import java.util.List;
 import java.util.Map;
 import java.util.SortedSet;
+import java.util.stream.Stream;
 import net.minecraft.client.resources.metadata.language.LanguageMetadataSection;
-import net.minecraft.server.packs.Pack;
+import net.minecraft.locale.Language;
+import net.minecraft.server.packs.PackResources;
 import net.minecraft.server.packs.resources.ResourceManager;
 import net.minecraft.server.packs.resources.ResourceManagerReloadListener;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
 public class LanguageManager implements ResourceManagerReloadListener {
    private static final Logger LOGGER = LogManager.getLogger();
-   protected static final Locale LOCALE = new Locale();
+   private static final LanguageInfo DEFAULT_LANGUAGE = new LanguageInfo("en_us", "US", "English", false);
+   private Map<String, LanguageInfo> languages;
    private String currentCode;
-   private final Map<String, Language> languages = Maps.newHashMap();
+   private LanguageInfo currentLanguage;
 
    public LanguageManager(String var1) {
+      this.languages = ImmutableMap.of("en_us", DEFAULT_LANGUAGE);
+      this.currentLanguage = DEFAULT_LANGUAGE;
       this.currentCode = var1;
-      I18n.setLocale(LOCALE);
    }
 
-   public void reload(List<Pack> var1) {
-      this.languages.clear();
-      Iterator var2 = var1.iterator();
-
-      while(var2.hasNext()) {
-         Pack var3 = (Pack)var2.next();
-
+   private static Map<String, LanguageInfo> extractLanguages(Stream<PackResources> var0) {
+      HashMap var1 = Maps.newHashMap();
+      var0.forEach((var1x) -> {
          try {
-            LanguageMetadataSection var4 = (LanguageMetadataSection)var3.getMetadataSection(LanguageMetadataSection.SERIALIZER);
-            if (var4 != null) {
-               Iterator var5 = var4.getLanguages().iterator();
+            LanguageMetadataSection var2 = (LanguageMetadataSection)var1x.getMetadataSection(LanguageMetadataSection.SERIALIZER);
+            if (var2 != null) {
+               Iterator var3 = var2.getLanguages().iterator();
 
-               while(var5.hasNext()) {
-                  Language var6 = (Language)var5.next();
-                  if (!this.languages.containsKey(var6.getCode())) {
-                     this.languages.put(var6.getCode(), var6);
-                  }
+               while(var3.hasNext()) {
+                  LanguageInfo var4 = (LanguageInfo)var3.next();
+                  var1.putIfAbsent(var4.getCode(), var4);
                }
             }
-         } catch (IOException | RuntimeException var7) {
-            LOGGER.warn("Unable to parse language metadata section of resourcepack: {}", var3.getName(), var7);
+         } catch (IOException | RuntimeException var5) {
+            LOGGER.warn("Unable to parse language metadata section of resourcepack: {}", var1x.getName(), var5);
          }
-      }
 
+      });
+      return ImmutableMap.copyOf(var1);
    }
 
    public void onResourceManagerReload(ResourceManager var1) {
-      ArrayList var2 = Lists.newArrayList(new String[]{"en_us"});
-      if (!"en_us".equals(this.currentCode)) {
-         var2.add(this.currentCode);
+      this.languages = extractLanguages(var1.listPacks());
+      LanguageInfo var2 = (LanguageInfo)this.languages.getOrDefault("en_us", DEFAULT_LANGUAGE);
+      this.currentLanguage = (LanguageInfo)this.languages.getOrDefault(this.currentCode, var2);
+      ArrayList var3 = Lists.newArrayList(new LanguageInfo[]{var2});
+      if (this.currentLanguage != var2) {
+         var3.add(this.currentLanguage);
       }
 
-      LOCALE.loadFrom(var1, var2);
-      net.minecraft.locale.Language.forceData(LOCALE.storage);
+      ClientLanguage var4 = ClientLanguage.loadFrom(var1, var3);
+      I18n.setLanguage(var4);
+      Language.inject(var4);
    }
 
-   public boolean isBidirectional() {
-      return this.getSelected() != null && this.getSelected().isBidirectional();
-   }
-
-   public void setSelected(Language var1) {
+   public void setSelected(LanguageInfo var1) {
       this.currentCode = var1.getCode();
+      this.currentLanguage = var1;
    }
 
-   public Language getSelected() {
-      String var1 = this.languages.containsKey(this.currentCode) ? this.currentCode : "en_us";
-      return (Language)this.languages.get(var1);
+   public LanguageInfo getSelected() {
+      return this.currentLanguage;
    }
 
-   public SortedSet<Language> getLanguages() {
+   public SortedSet<LanguageInfo> getLanguages() {
       return Sets.newTreeSet(this.languages.values());
    }
 
-   public Language getLanguage(String var1) {
-      return (Language)this.languages.get(var1);
+   public LanguageInfo getLanguage(String var1) {
+      return (LanguageInfo)this.languages.get(var1);
    }
 }
