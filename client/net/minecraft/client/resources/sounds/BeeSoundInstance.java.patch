--- net/minecraft/client/resources/sounds/BeeSoundInstance.java
+++ net/minecraft/client/resources/sounds/BeeSoundInstance.java
@@ -12,40 +12,40 @@
    private boolean hasSwitched;
 
    public BeeSoundInstance(Bee var1, SoundEvent var2, SoundSource var3) {
       super(var2, var3);
       this.bee = var1;
-      this.x = (float)var1.getX();
-      this.y = (float)var1.getY();
-      this.z = (float)var1.getZ();
+      this.x = (double)((float)var1.getX());
+      this.y = (double)((float)var1.getY());
+      this.z = (double)((float)var1.getZ());
       this.looping = true;
       this.delay = 0;
       this.volume = 0.0F;
    }
 
    public void tick() {
       boolean var1 = this.shouldSwitchSounds();
-      if (var1 && !this.stopped) {
+      if (var1 && !this.isStopped()) {
          Minecraft.getInstance().getSoundManager().queueTickingSound(this.getAlternativeSoundInstance());
          this.hasSwitched = true;
       }
 
       if (!this.bee.removed && !this.hasSwitched) {
-         this.x = (float)this.bee.getX();
-         this.y = (float)this.bee.getY();
-         this.z = (float)this.bee.getZ();
+         this.x = (double)((float)this.bee.getX());
+         this.y = (double)((float)this.bee.getY());
+         this.z = (double)((float)this.bee.getZ());
          float var2 = Mth.sqrt(Entity.getHorizontalDistanceSqr(this.bee.getDeltaMovement()));
          if ((double)var2 >= 0.01D) {
             this.pitch = Mth.lerp(Mth.clamp(var2, this.getMinPitch(), this.getMaxPitch()), this.getMinPitch(), this.getMaxPitch());
             this.volume = Mth.lerp(Mth.clamp(var2, 0.0F, 0.5F), 0.0F, 1.2F);
          } else {
             this.pitch = 0.0F;
             this.volume = 0.0F;
          }
 
       } else {
-         this.stopped = true;
+         this.stop();
       }
    }
 
    private float getMinPitch() {
       return this.bee.isBaby() ? 1.1F : 0.7F;
@@ -57,9 +57,13 @@
 
    public boolean canStartSilent() {
       return true;
    }
 
+   public boolean canPlaySound() {
+      return !this.bee.isSilent();
+   }
+
    protected abstract AbstractTickableSoundInstance getAlternativeSoundInstance();
 
    protected abstract boolean shouldSwitchSounds();
 }
