--- net/minecraft/client/Options.java
+++ net/minecraft/client/Options.java
@@ -6,28 +6,28 @@
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.google.common.collect.Sets;
 import com.google.common.io.Files;
 import com.google.gson.Gson;
+import com.google.gson.reflect.TypeToken;
 import com.mojang.blaze3d.platform.InputConstants;
 import com.mojang.blaze3d.platform.VideoMode;
 import java.io.BufferedReader;
 import java.io.File;
 import java.io.FileOutputStream;
 import java.io.OutputStreamWriter;
 import java.io.PrintWriter;
-import java.lang.reflect.ParameterizedType;
-import java.lang.reflect.Type;
 import java.nio.charset.StandardCharsets;
 import java.util.Iterator;
 import java.util.LinkedHashSet;
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
 import javax.annotation.Nullable;
 import net.minecraft.SharedConstants;
-import net.minecraft.client.resources.UnopenedResourcePack;
+import net.minecraft.Util;
+import net.minecraft.client.resources.ResourcePack;
 import net.minecraft.client.tutorial.TutorialSteps;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.NbtUtils;
 import net.minecraft.network.protocol.Packet;
 import net.minecraft.network.protocol.game.ServerboundClientInformationPacket;
@@ -44,34 +44,25 @@
 import org.apache.logging.log4j.Logger;
 
 public class Options {
    private static final Logger LOGGER = LogManager.getLogger();
    private static final Gson GSON = new Gson();
-   private static final Type RESOURCE_PACK_TYPE = new ParameterizedType() {
-      public Type[] getActualTypeArguments() {
-         return new Type[]{String.class};
-      }
-
-      public Type getRawType() {
-         return List.class;
-      }
-
-      public Type getOwnerType() {
-         return null;
-      }
+   private static final TypeToken<List<String>> RESOURCE_PACK_TYPE = new TypeToken<List<String>>() {
    };
    private static final Splitter OPTION_SPLITTER = Splitter.on(':').limit(2);
    public double sensitivity = 0.5D;
    public int renderDistance = -1;
+   public float entityDistanceScaling = 1.0F;
    public int framerateLimit = 120;
    public CloudStatus renderClouds;
-   public boolean fancyGraphics;
+   public GraphicsStatus graphicsMode;
    public AmbientOcclusionStatus ambientOcclusion;
    public List<String> resourcePacks;
    public List<String> incompatibleResourcePacks;
    public ChatVisiblity chatVisibility;
    public double chatOpacity;
+   public double chatLineSpacing;
    public double textBackgroundOpacity;
    @Nullable
    public String fullscreenVideoModeString;
    public boolean hideServerAddress;
    public boolean advancedItemTooltips;
@@ -83,10 +74,11 @@
    public boolean heldItemTooltips;
    public double chatScale;
    public double chatWidth;
    public double chatHeightUnfocused;
    public double chatHeightFocused;
+   public double chatDelay;
    public int mipmapLevels;
    private final Map<SoundSource, Float> sourceVolumes;
    public boolean useNativeTransport;
    public AttackIndicatorStatus attackIndicator;
    public TutorialSteps tutorialStep;
@@ -121,11 +113,11 @@
    public final KeyMapping keyRight;
    public final KeyMapping keyJump;
    public final KeyMapping keyShift;
    public final KeyMapping keySprint;
    public final KeyMapping keyInventory;
-   public final KeyMapping keySwapHands;
+   public final KeyMapping keySwapOffhand;
    public final KeyMapping keyDrop;
    public final KeyMapping keyUse;
    public final KeyMapping keyAttack;
    public final KeyMapping keyPickItem;
    public final KeyMapping keyChat;
@@ -155,28 +147,31 @@
    public double gamma;
    public int guiScale;
    public ParticleStatus particles;
    public NarratorStatus narratorStatus;
    public String languageCode;
+   public boolean syncWrites;
 
    public Options(Minecraft var1, File var2) {
       this.renderClouds = CloudStatus.FANCY;
-      this.fancyGraphics = true;
+      this.graphicsMode = GraphicsStatus.FANCY;
       this.ambientOcclusion = AmbientOcclusionStatus.MAX;
       this.resourcePacks = Lists.newArrayList();
       this.incompatibleResourcePacks = Lists.newArrayList();
       this.chatVisibility = ChatVisiblity.FULL;
       this.chatOpacity = 1.0D;
+      this.chatLineSpacing = 0.0D;
       this.textBackgroundOpacity = 0.5D;
       this.pauseOnLostFocus = true;
       this.modelParts = Sets.newHashSet(PlayerModelPart.values());
       this.mainHand = HumanoidArm.RIGHT;
       this.heldItemTooltips = true;
       this.chatScale = 1.0D;
       this.chatWidth = 1.0D;
       this.chatHeightUnfocused = 0.44366195797920227D;
       this.chatHeightFocused = 1.0D;
+      this.chatDelay = 0.0D;
       this.mipmapLevels = 4;
       this.sourceVolumes = Maps.newEnumMap(SoundSource.class);
       this.useNativeTransport = true;
       this.attackIndicator = AttackIndicatorStatus.CROSSHAIR;
       this.tutorialStep = TutorialSteps.MOVEMENT;
@@ -205,11 +200,11 @@
       });
       this.keySprint = new ToggleKeyMapping("key.sprint", 341, "key.categories.movement", () -> {
          return this.toggleSprint;
       });
       this.keyInventory = new KeyMapping("key.inventory", 69, "key.categories.inventory");
-      this.keySwapHands = new KeyMapping("key.swapHands", 70, "key.categories.inventory");
+      this.keySwapOffhand = new KeyMapping("key.swapOffhand", 70, "key.categories.inventory");
       this.keyDrop = new KeyMapping("key.drop", 81, "key.categories.inventory");
       this.keyUse = new KeyMapping("key.use", InputConstants.Type.MOUSE, 1, "key.categories.gameplay");
       this.keyAttack = new KeyMapping("key.attack", InputConstants.Type.MOUSE, 0, "key.categories.gameplay");
       this.keyPickItem = new KeyMapping("key.pickItem", InputConstants.Type.MOUSE, 2, "key.categories.gameplay");
       this.keyChat = new KeyMapping("key.chat", 84, "key.categories.multiplayer");
@@ -222,11 +217,11 @@
       this.keySpectatorOutlines = new KeyMapping("key.spectatorOutlines", InputConstants.UNKNOWN.getValue(), "key.categories.misc");
       this.keyAdvancements = new KeyMapping("key.advancements", 76, "key.categories.misc");
       this.keyHotbarSlots = new KeyMapping[]{new KeyMapping("key.hotbar.1", 49, "key.categories.inventory"), new KeyMapping("key.hotbar.2", 50, "key.categories.inventory"), new KeyMapping("key.hotbar.3", 51, "key.categories.inventory"), new KeyMapping("key.hotbar.4", 52, "key.categories.inventory"), new KeyMapping("key.hotbar.5", 53, "key.categories.inventory"), new KeyMapping("key.hotbar.6", 54, "key.categories.inventory"), new KeyMapping("key.hotbar.7", 55, "key.categories.inventory"), new KeyMapping("key.hotbar.8", 56, "key.categories.inventory"), new KeyMapping("key.hotbar.9", 57, "key.categories.inventory")};
       this.keySaveHotbarActivator = new KeyMapping("key.saveToolbarActivator", 67, "key.categories.creative");
       this.keyLoadHotbarActivator = new KeyMapping("key.loadToolbarActivator", 88, "key.categories.creative");
-      this.keyMappings = (KeyMapping[])ArrayUtils.addAll(new KeyMapping[]{this.keyAttack, this.keyUse, this.keyUp, this.keyLeft, this.keyDown, this.keyRight, this.keyJump, this.keyShift, this.keySprint, this.keyDrop, this.keyInventory, this.keyChat, this.keyPlayerList, this.keyPickItem, this.keyCommand, this.keyScreenshot, this.keyTogglePerspective, this.keySmoothCamera, this.keyFullscreen, this.keySpectatorOutlines, this.keySwapHands, this.keySaveHotbarActivator, this.keyLoadHotbarActivator, this.keyAdvancements}, this.keyHotbarSlots);
+      this.keyMappings = (KeyMapping[])ArrayUtils.addAll(new KeyMapping[]{this.keyAttack, this.keyUse, this.keyUp, this.keyLeft, this.keyDown, this.keyRight, this.keyJump, this.keyShift, this.keySprint, this.keyDrop, this.keyInventory, this.keyChat, this.keyPlayerList, this.keyPickItem, this.keyCommand, this.keyScreenshot, this.keyTogglePerspective, this.keySmoothCamera, this.keyFullscreen, this.keySpectatorOutlines, this.keySwapOffhand, this.keySaveHotbarActivator, this.keyLoadHotbarActivator, this.keyAdvancements}, this.keyHotbarSlots);
       this.difficulty = Difficulty.NORMAL;
       this.lastMpIp = "";
       this.fov = 70.0D;
       this.particles = ParticleStatus.ALL;
       this.narratorStatus = NarratorStatus.OFF;
@@ -238,10 +233,11 @@
       } else {
          Option.RENDER_DISTANCE.setMaxValue(16.0F);
       }
 
       this.renderDistance = var1.is64Bit() ? 12 : 8;
+      this.syncWrites = Util.getPlatform() == Util.OS.WINDOWS;
       this.load();
    }
 
    public float getBackgroundOpacity(float var1) {
       return this.backgroundForChatOnly ? var1 : (float)this.textBackgroundOpacity;
@@ -298,10 +294,18 @@
             }
 
          }
 
          CompoundTag var21 = this.dataFix(var1);
+         if (!var21.contains("graphicsMode") && var21.contains("fancyGraphics")) {
+            if ("true".equals(var21.getString("fancyGraphics"))) {
+               this.graphicsMode = GraphicsStatus.FANCY;
+            } else {
+               this.graphicsMode = GraphicsStatus.FAST;
+            }
+         }
+
          Iterator var22 = var21.getAllKeys().iterator();
 
          while(var22.hasNext()) {
             String var4 = (String)var22.next();
             String var5 = var21.getString(var4);
@@ -397,10 +401,14 @@
 
                if ("renderDistance".equals(var4)) {
                   this.renderDistance = Integer.parseInt(var5);
                }
 
+               if ("entityDistanceScaling".equals(var4)) {
+                  this.entityDistanceScaling = Float.parseFloat(var5);
+               }
+
                if ("guiScale".equals(var4)) {
                   this.guiScale = Integer.parseInt(var5);
                }
 
                if ("particles".equals(var4)) {
@@ -416,12 +424,12 @@
 
                if ("difficulty".equals(var4)) {
                   this.difficulty = Difficulty.byId(Integer.parseInt(var5));
                }
 
-               if ("fancyGraphics".equals(var4)) {
-                  this.fancyGraphics = "true".equals(var5);
+               if ("graphicsMode".equals(var4)) {
+                  this.graphicsMode = GraphicsStatus.byId(Integer.parseInt(var5));
                }
 
                if ("tutorialStep".equals(var4)) {
                   this.tutorialStep = TutorialSteps.getByName(var5);
                }
@@ -478,10 +486,14 @@
 
                if ("chatOpacity".equals(var4)) {
                   this.chatOpacity = (double)readFloat(var5);
                }
 
+               if ("chatLineSpacing".equals(var4)) {
+                  this.chatLineSpacing = (double)readFloat(var5);
+               }
+
                if ("textBackgroundOpacity".equals(var4)) {
                   this.textBackgroundOpacity = (double)readFloat(var5);
                }
 
                if ("backgroundForChatOnly".equals(var4)) {
@@ -518,10 +530,14 @@
 
                if ("chatHeightFocused".equals(var4)) {
                   this.chatHeightFocused = (double)readFloat(var5);
                }
 
+               if ("chatDelay".equals(var4)) {
+                  this.chatDelay = (double)readFloat(var5);
+               }
+
                if ("chatHeightUnfocused".equals(var4)) {
                   this.chatHeightUnfocused = (double)readFloat(var5);
                }
 
                if ("chatScale".equals(var4)) {
@@ -566,10 +582,14 @@
 
                if ("skipMultiplayerWarning".equals(var4)) {
                   this.skipMultiplayerWarning = "true".equals(var5);
                }
 
+               if ("syncChunkWrites".equals(var4)) {
+                  this.syncWrites = "true".equals(var5);
+               }
+
                KeyMapping[] var6 = this.keyMappings;
                int var7 = var6.length;
 
                int var8;
                for(var8 = 0; var8 < var7; ++var8) {
@@ -657,15 +677,16 @@
             var1.println("toggleSprint:" + this.toggleSprint);
             var1.println("mouseSensitivity:" + this.sensitivity);
             var1.println("fov:" + (this.fov - 70.0D) / 40.0D);
             var1.println("gamma:" + this.gamma);
             var1.println("renderDistance:" + this.renderDistance);
+            var1.println("entityDistanceScaling:" + this.entityDistanceScaling);
             var1.println("guiScale:" + this.guiScale);
             var1.println("particles:" + this.particles.getId());
             var1.println("maxFps:" + this.framerateLimit);
             var1.println("difficulty:" + this.difficulty.getId());
-            var1.println("fancyGraphics:" + this.fancyGraphics);
+            var1.println("graphicsMode:" + this.graphicsMode.getId());
             var1.println("ao:" + this.ambientOcclusion.getId());
             var1.println("biomeBlendRadius:" + this.biomeBlendRadius);
             switch(this.renderClouds) {
             case FANCY:
                var1.println("renderClouds:true");
@@ -681,10 +702,11 @@
             var1.println("incompatibleResourcePacks:" + GSON.toJson(this.incompatibleResourcePacks));
             var1.println("lastServer:" + this.lastMpIp);
             var1.println("lang:" + this.languageCode);
             var1.println("chatVisibility:" + this.chatVisibility.getId());
             var1.println("chatOpacity:" + this.chatOpacity);
+            var1.println("chatLineSpacing:" + this.chatLineSpacing);
             var1.println("textBackgroundOpacity:" + this.textBackgroundOpacity);
             var1.println("backgroundForChatOnly:" + this.backgroundForChatOnly);
             if (this.minecraft.getWindow().getPreferredFullscreenVideoMode().isPresent()) {
                var1.println("fullscreenResolution:" + ((VideoMode)this.minecraft.getWindow().getPreferredFullscreenVideoMode().get()).write());
             }
@@ -694,10 +716,11 @@
             var1.println("pauseOnLostFocus:" + this.pauseOnLostFocus);
             var1.println("overrideWidth:" + this.overrideWidth);
             var1.println("overrideHeight:" + this.overrideHeight);
             var1.println("heldItemTooltips:" + this.heldItemTooltips);
             var1.println("chatHeightFocused:" + this.chatHeightFocused);
+            var1.println("chatDelay: " + this.chatDelay);
             var1.println("chatHeightUnfocused:" + this.chatHeightUnfocused);
             var1.println("chatScale:" + this.chatScale);
             var1.println("chatWidth:" + this.chatWidth);
             var1.println("mipmapLevels:" + this.mipmapLevels);
             var1.println("useNativeTransport:" + this.useNativeTransport);
@@ -707,10 +730,11 @@
             var1.println("tutorialStep:" + this.tutorialStep.getName());
             var1.println("mouseWheelSensitivity:" + this.mouseWheelSensitivity);
             var1.println("rawMouseInput:" + Option.RAW_MOUSE_INPUT.get(this));
             var1.println("glDebugVerbosity:" + this.glDebugVerbosity);
             var1.println("skipMultiplayerWarning:" + this.skipMultiplayerWarning);
+            var1.println("syncChunkWrites:" + this.syncWrites);
             KeyMapping[] var3 = this.keyMappings;
             int var4 = var3.length;
 
             int var5;
             for(var5 = 0; var5 < var4; ++var5) {
@@ -810,21 +834,20 @@
 
    public boolean useNativeTransport() {
       return this.useNativeTransport;
    }
 
-   public void loadResourcePacks(PackRepository<UnopenedResourcePack> var1) {
-      var1.reload();
+   public void loadSelectedResourcePacks(PackRepository<ResourcePack> var1) {
       LinkedHashSet var2 = Sets.newLinkedHashSet();
       Iterator var3 = this.resourcePacks.iterator();
 
       while(true) {
          while(var3.hasNext()) {
             String var4 = (String)var3.next();
-            UnopenedResourcePack var5 = (UnopenedResourcePack)var1.getPack(var4);
+            ResourcePack var5 = (ResourcePack)var1.getPack(var4);
             if (var5 == null && !var4.startsWith("file/")) {
-               var5 = (UnopenedResourcePack)var1.getPack("file/" + var4);
+               var5 = (ResourcePack)var1.getPack("file/" + var4);
             }
 
             if (var5 == null) {
                LOGGER.warn("Removed resource pack {} from options because it doesn't seem to exist anymore", var4);
                var3.remove();
@@ -833,11 +856,11 @@
                var3.remove();
             } else if (var5.getCompatibility().isCompatible() && this.incompatibleResourcePacks.contains(var4)) {
                LOGGER.info("Removed resource pack {} from incompatibility list because it's now compatible", var4);
                this.incompatibleResourcePacks.remove(var4);
             } else {
-               var2.add(var5);
+               var2.add(var5.getId());
             }
          }
 
          var1.setSelected(var2);
          return;
