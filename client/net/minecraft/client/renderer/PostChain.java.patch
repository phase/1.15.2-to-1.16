--- net/minecraft/client/renderer/PostChain.java
+++ net/minecraft/client/renderer/PostChain.java
@@ -144,63 +144,79 @@
             for(Iterator var12 = var10.iterator(); var12.hasNext(); ++var11) {
                JsonElement var13 = (JsonElement)var12.next();
 
                try {
                   JsonObject var14 = GsonHelper.convertToJsonObject(var13, "auxtarget");
-                  String var36 = GsonHelper.getAsString(var14, "name");
+                  String var38 = GsonHelper.getAsString(var14, "name");
                   String var16 = GsonHelper.getAsString(var14, "id");
-                  RenderTarget var17 = this.getRenderTarget(var16);
-                  if (var17 == null) {
-                     ResourceLocation var18 = new ResourceLocation("textures/effect/" + var16 + ".png");
-                     Resource var19 = null;
+                  boolean var17;
+                  String var18;
+                  if (var16.endsWith(":depth")) {
+                     var17 = true;
+                     var18 = var16.substring(0, var16.lastIndexOf(58));
+                  } else {
+                     var17 = false;
+                     var18 = var16;
+                  }
 
+                  RenderTarget var19 = this.getRenderTarget(var18);
+                  if (var19 == null) {
+                     if (var17) {
+                        throw new ChainedJsonException("Render target '" + var18 + "' can't be used as depth buffer");
+                     }
+
+                     ResourceLocation var20 = new ResourceLocation("textures/effect/" + var18 + ".png");
+                     Resource var21 = null;
+
                      try {
-                        var19 = this.resourceManager.getResource(var18);
-                     } catch (FileNotFoundException var29) {
-                        throw new ChainedJsonException("Render target or texture '" + var16 + "' does not exist");
+                        var21 = this.resourceManager.getResource(var20);
+                     } catch (FileNotFoundException var31) {
+                        throw new ChainedJsonException("Render target or texture '" + var18 + "' does not exist");
                      } finally {
-                        IOUtils.closeQuietly(var19);
+                        IOUtils.closeQuietly(var21);
                      }
 
-                     var1.bind(var18);
-                     AbstractTexture var20 = var1.getTexture(var18);
-                     int var21 = GsonHelper.getAsInt(var14, "width");
-                     int var22 = GsonHelper.getAsInt(var14, "height");
-                     boolean var23 = GsonHelper.getAsBoolean(var14, "bilinear");
-                     if (var23) {
+                     var1.bind(var20);
+                     AbstractTexture var22 = var1.getTexture(var20);
+                     int var23 = GsonHelper.getAsInt(var14, "width");
+                     int var24 = GsonHelper.getAsInt(var14, "height");
+                     boolean var25 = GsonHelper.getAsBoolean(var14, "bilinear");
+                     if (var25) {
                         RenderSystem.texParameter(3553, 10241, 9729);
                         RenderSystem.texParameter(3553, 10240, 9729);
                      } else {
                         RenderSystem.texParameter(3553, 10241, 9728);
                         RenderSystem.texParameter(3553, 10240, 9728);
                      }
 
-                     var9.addAuxAsset(var36, var20.getId(), var21, var22);
+                     var9.addAuxAsset(var38, var22::getId, var23, var24);
+                  } else if (var17) {
+                     var9.addAuxAsset(var38, var19::getDepthTextureId, var19.width, var19.height);
                   } else {
-                     var9.addAuxAsset(var36, var17, var17.width, var17.height);
+                     var9.addAuxAsset(var38, var19::getColorTextureId, var19.width, var19.height);
                   }
-               } catch (Exception var31) {
-                  ChainedJsonException var15 = ChainedJsonException.forException(var31);
+               } catch (Exception var33) {
+                  ChainedJsonException var15 = ChainedJsonException.forException(var33);
                   var15.prependJsonKey("auxtargets[" + var11 + "]");
                   throw var15;
                }
             }
          }
 
-         JsonArray var32 = GsonHelper.getAsJsonArray(var3, "uniforms", (JsonArray)null);
-         if (var32 != null) {
-            int var33 = 0;
+         JsonArray var34 = GsonHelper.getAsJsonArray(var3, "uniforms", (JsonArray)null);
+         if (var34 != null) {
+            int var35 = 0;
 
-            for(Iterator var34 = var32.iterator(); var34.hasNext(); ++var33) {
-               JsonElement var35 = (JsonElement)var34.next();
+            for(Iterator var36 = var34.iterator(); var36.hasNext(); ++var35) {
+               JsonElement var37 = (JsonElement)var36.next();
 
                try {
-                  this.parseUniformNode(var35);
-               } catch (Exception var28) {
-                  ChainedJsonException var37 = ChainedJsonException.forException(var28);
-                  var37.prependJsonKey("uniforms[" + var33 + "]");
-                  throw var37;
+                  this.parseUniformNode(var37);
+               } catch (Exception var30) {
+                  ChainedJsonException var39 = ChainedJsonException.forException(var30);
+                  var39.prependJsonKey("uniforms[" + var35 + "]");
+                  throw var39;
                }
             }
          }
 
       }
