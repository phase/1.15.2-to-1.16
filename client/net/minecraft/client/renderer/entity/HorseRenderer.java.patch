--- net/minecraft/client/renderer/entity/HorseRenderer.java
+++ net/minecraft/client/renderer/entity/HorseRenderer.java
@@ -1,32 +1,33 @@
 package net.minecraft.client.renderer.entity;
 
 import com.google.common.collect.Maps;
 import java.util.Map;
-import net.minecraft.client.Minecraft;
+import net.minecraft.Util;
 import net.minecraft.client.model.HorseModel;
 import net.minecraft.client.renderer.entity.layers.HorseArmorLayer;
-import net.minecraft.client.renderer.texture.AbstractTexture;
-import net.minecraft.client.renderer.texture.LayeredTexture;
+import net.minecraft.client.renderer.entity.layers.HorseMarkingLayer;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.world.entity.animal.horse.Horse;
+import net.minecraft.world.entity.animal.horse.Variant;
 
 public final class HorseRenderer extends AbstractHorseRenderer<Horse, HorseModel<Horse>> {
-   private static final Map<String, ResourceLocation> LAYERED_LOCATION_CACHE = Maps.newHashMap();
+   private static final Map<Variant, ResourceLocation> LOCATION_BY_VARIANT = (Map)Util.make(Maps.newEnumMap(Variant.class), (var0) -> {
+      var0.put(Variant.WHITE, new ResourceLocation("textures/entity/horse/horse_white.png"));
+      var0.put(Variant.CREAMY, new ResourceLocation("textures/entity/horse/horse_creamy.png"));
+      var0.put(Variant.CHESTNUT, new ResourceLocation("textures/entity/horse/horse_chestnut.png"));
+      var0.put(Variant.BROWN, new ResourceLocation("textures/entity/horse/horse_brown.png"));
+      var0.put(Variant.BLACK, new ResourceLocation("textures/entity/horse/horse_black.png"));
+      var0.put(Variant.GRAY, new ResourceLocation("textures/entity/horse/horse_gray.png"));
+      var0.put(Variant.DARKBROWN, new ResourceLocation("textures/entity/horse/horse_darkbrown.png"));
+   });
 
    public HorseRenderer(EntityRenderDispatcher var1) {
       super(var1, new HorseModel(0.0F), 1.1F);
+      this.addLayer(new HorseMarkingLayer(this));
       this.addLayer(new HorseArmorLayer(this));
    }
 
    public ResourceLocation getTextureLocation(Horse var1) {
-      String var2 = var1.getLayeredTextureHashName();
-      ResourceLocation var3 = (ResourceLocation)LAYERED_LOCATION_CACHE.get(var2);
-      if (var3 == null) {
-         var3 = new ResourceLocation(var2);
-         Minecraft.getInstance().getTextureManager().register((ResourceLocation)var3, (AbstractTexture)(new LayeredTexture(var1.getLayeredTextureLayers())));
-         LAYERED_LOCATION_CACHE.put(var2, var3);
-      }
-
-      return var3;
+      return (ResourceLocation)LOCATION_BY_VARIANT.get(var1.getVariant());
    }
 }
