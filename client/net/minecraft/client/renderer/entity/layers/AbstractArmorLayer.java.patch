--- net/minecraft/client/renderer/entity/layers/AbstractArmorLayer.java
+++ net/minecraft/client/renderer/entity/layers/AbstractArmorLayer.java
@@ -19,68 +19,67 @@
 import net.minecraft.world.item.ItemStack;
 
 public abstract class AbstractArmorLayer<T extends LivingEntity, M extends HumanoidModel<T>, A extends HumanoidModel<T>> extends RenderLayer<T, M> {
    protected final A innerModel;
    protected final A outerModel;
-   private static final Map<String, ResourceLocation> ARMOR_LOCATION_CACHE = Maps.newHashMap();
+   protected static final Map<String, ResourceLocation> ARMOR_LOCATION_CACHE = Maps.newHashMap();
 
    protected AbstractArmorLayer(RenderLayerParent<T, M> var1, A var2, A var3) {
       super(var1);
       this.innerModel = var2;
       this.outerModel = var3;
    }
 
    public void render(PoseStack var1, MultiBufferSource var2, int var3, T var4, float var5, float var6, float var7, float var8, float var9, float var10) {
-      this.renderArmorPiece(var1, var2, var4, var5, var6, var7, var8, var9, var10, EquipmentSlot.CHEST, var3);
-      this.renderArmorPiece(var1, var2, var4, var5, var6, var7, var8, var9, var10, EquipmentSlot.LEGS, var3);
-      this.renderArmorPiece(var1, var2, var4, var5, var6, var7, var8, var9, var10, EquipmentSlot.FEET, var3);
-      this.renderArmorPiece(var1, var2, var4, var5, var6, var7, var8, var9, var10, EquipmentSlot.HEAD, var3);
+      this.renderArmorPiece(var1, var2, var4, var5, var6, var7, var8, var9, var10, EquipmentSlot.CHEST, var3, this.getArmorModel(EquipmentSlot.CHEST));
+      this.renderArmorPiece(var1, var2, var4, var5, var6, var7, var8, var9, var10, EquipmentSlot.LEGS, var3, this.getArmorModel(EquipmentSlot.LEGS));
+      this.renderArmorPiece(var1, var2, var4, var5, var6, var7, var8, var9, var10, EquipmentSlot.FEET, var3, this.getArmorModel(EquipmentSlot.FEET));
+      this.renderArmorPiece(var1, var2, var4, var5, var6, var7, var8, var9, var10, EquipmentSlot.HEAD, var3, this.getArmorModel(EquipmentSlot.HEAD));
    }
 
-   private void renderArmorPiece(PoseStack var1, MultiBufferSource var2, T var3, float var4, float var5, float var6, float var7, float var8, float var9, EquipmentSlot var10, int var11) {
-      ItemStack var12 = var3.getItemBySlot(var10);
-      if (var12.getItem() instanceof ArmorItem) {
-         ArmorItem var13 = (ArmorItem)var12.getItem();
-         if (var13.getSlot() == var10) {
-            HumanoidModel var14 = this.getArmorModel(var10);
-            ((HumanoidModel)this.getParentModel()).copyPropertiesTo(var14);
-            var14.prepareMobModel(var3, var4, var5, var6);
-            this.setPartVisibility(var14, var10);
-            var14.setupAnim(var3, var4, var5, var7, var8, var9);
+   private void renderArmorPiece(PoseStack var1, MultiBufferSource var2, T var3, float var4, float var5, float var6, float var7, float var8, float var9, EquipmentSlot var10, int var11, A var12) {
+      ItemStack var13 = var3.getItemBySlot(var10);
+      if (var13.getItem() instanceof ArmorItem) {
+         ArmorItem var14 = (ArmorItem)var13.getItem();
+         if (var14.getSlot() == var10) {
+            ((HumanoidModel)this.getParentModel()).copyPropertiesTo(var12);
+            var12.prepareMobModel(var3, var4, var5, var6);
+            this.setPartVisibility(var12, var10);
+            var12.setupAnim(var3, var4, var5, var7, var8, var9);
             boolean var15 = this.usesInnerModel(var10);
-            boolean var16 = var12.hasFoil();
-            if (var13 instanceof DyeableArmorItem) {
-               int var17 = ((DyeableArmorItem)var13).getColor(var12);
+            boolean var16 = var13.hasFoil();
+            if (var14 instanceof DyeableArmorItem) {
+               int var17 = ((DyeableArmorItem)var14).getColor(var13);
                float var18 = (float)(var17 >> 16 & 255) / 255.0F;
                float var19 = (float)(var17 >> 8 & 255) / 255.0F;
                float var20 = (float)(var17 & 255) / 255.0F;
-               this.renderModel(var1, var2, var11, var13, var16, var14, var15, var18, var19, var20, (String)null);
-               this.renderModel(var1, var2, var11, var13, var16, var14, var15, 1.0F, 1.0F, 1.0F, "overlay");
+               this.renderModel(var10, var1, var2, var11, var14, var16, var12, var15, var18, var19, var20, (String)null);
+               this.renderModel(var10, var1, var2, var11, var14, var16, var12, var15, 1.0F, 1.0F, 1.0F, "overlay");
             } else {
-               this.renderModel(var1, var2, var11, var13, var16, var14, var15, 1.0F, 1.0F, 1.0F, (String)null);
+               this.renderModel(var10, var1, var2, var11, var14, var16, var12, var15, 1.0F, 1.0F, 1.0F, (String)null);
             }
 
          }
       }
    }
 
-   private void renderModel(PoseStack var1, MultiBufferSource var2, int var3, ArmorItem var4, boolean var5, A var6, boolean var7, float var8, float var9, float var10, @Nullable String var11) {
-      VertexConsumer var12 = ItemRenderer.getFoilBuffer(var2, RenderType.entityCutoutNoCull(this.getArmorLocation(var4, var7, var11)), false, var5);
-      var6.renderToBuffer(var1, var12, var3, OverlayTexture.NO_OVERLAY, var8, var9, var10, 1.0F);
+   private void renderModel(EquipmentSlot var1, PoseStack var2, MultiBufferSource var3, int var4, ArmorItem var5, boolean var6, A var7, boolean var8, float var9, float var10, float var11, @Nullable String var12) {
+      VertexConsumer var13 = ItemRenderer.getArmorFoilBuffer(var3, RenderType.armorCutoutNoCull(this.getArmorLocation(var1, var5, var8, var12)), false, var6);
+      var7.renderToBuffer(var2, var13, var4, OverlayTexture.NO_OVERLAY, var9, var10, var11, 1.0F);
    }
 
    public A getArmorModel(EquipmentSlot var1) {
       return this.usesInnerModel(var1) ? this.innerModel : this.outerModel;
    }
 
    private boolean usesInnerModel(EquipmentSlot var1) {
       return var1 == EquipmentSlot.LEGS;
    }
 
-   private ResourceLocation getArmorLocation(ArmorItem var1, boolean var2, @Nullable String var3) {
-      String var4 = "textures/models/armor/" + var1.getMaterial().getName() + "_layer_" + (var2 ? 2 : 1) + (var3 == null ? "" : "_" + var3) + ".png";
-      return (ResourceLocation)ARMOR_LOCATION_CACHE.computeIfAbsent(var4, ResourceLocation::new);
+   protected ResourceLocation getArmorLocation(EquipmentSlot var1, ArmorItem var2, boolean var3, @Nullable String var4) {
+      String var5 = "textures/models/armor/" + var2.getMaterial().getName() + "_layer_" + (var3 ? 2 : 1) + (var4 == null ? "" : "_" + var4) + ".png";
+      return (ResourceLocation)ARMOR_LOCATION_CACHE.computeIfAbsent(var5, ResourceLocation::new);
    }
 
    protected abstract void setPartVisibility(A var1, EquipmentSlot var2);
 
    protected abstract void hideAllArmor(A var1);
