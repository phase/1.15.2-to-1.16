--- net/minecraft/client/renderer/entity/ItemRenderer.java
+++ net/minecraft/client/renderer/entity/ItemRenderer.java
@@ -5,32 +5,32 @@
 import com.mojang.blaze3d.platform.Lighting;
 import com.mojang.blaze3d.systems.RenderSystem;
 import com.mojang.blaze3d.vertex.BufferBuilder;
 import com.mojang.blaze3d.vertex.DefaultVertexFormat;
 import com.mojang.blaze3d.vertex.PoseStack;
+import com.mojang.blaze3d.vertex.SheetedDecalTextureGenerator;
 import com.mojang.blaze3d.vertex.Tesselator;
 import com.mojang.blaze3d.vertex.VertexConsumer;
 import com.mojang.blaze3d.vertex.VertexMultiConsumer;
 import java.util.Iterator;
 import java.util.List;
-import java.util.Objects;
 import java.util.Random;
 import java.util.Set;
 import javax.annotation.Nullable;
 import net.minecraft.CrashReport;
 import net.minecraft.CrashReportCategory;
 import net.minecraft.ReportedException;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.color.item.ItemColors;
 import net.minecraft.client.gui.Font;
+import net.minecraft.client.multiplayer.ClientLevel;
 import net.minecraft.client.player.LocalPlayer;
 import net.minecraft.client.renderer.BlockEntityWithoutLevelRenderer;
 import net.minecraft.client.renderer.ItemBlockRenderTypes;
 import net.minecraft.client.renderer.ItemModelShaper;
 import net.minecraft.client.renderer.MultiBufferSource;
 import net.minecraft.client.renderer.RenderType;
-import net.minecraft.client.renderer.Sheets;
 import net.minecraft.client.renderer.block.model.BakedQuad;
 import net.minecraft.client.renderer.block.model.ItemTransforms;
 import net.minecraft.client.renderer.texture.OverlayTexture;
 import net.minecraft.client.renderer.texture.TextureAtlas;
 import net.minecraft.client.renderer.texture.TextureManager;
@@ -42,14 +42,18 @@
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.server.packs.resources.ResourceManager;
 import net.minecraft.server.packs.resources.ResourceManagerReloadListener;
 import net.minecraft.util.Mth;
 import net.minecraft.world.entity.LivingEntity;
+import net.minecraft.world.item.BlockItem;
 import net.minecraft.world.item.Item;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.Items;
 import net.minecraft.world.level.Level;
+import net.minecraft.world.level.block.Block;
+import net.minecraft.world.level.block.HalfTransparentBlock;
+import net.minecraft.world.level.block.StainedGlassPaneBlock;
 import net.minecraft.world.level.block.state.BlockState;
 
 public class ItemRenderer implements ResourceManagerReloadListener {
    public static final ResourceLocation ENCHANT_GLINT_LOCATION = new ResourceLocation("textures/misc/enchanted_item_glint.png");
    private static final Set<Item> IGNORED;
@@ -94,41 +98,79 @@
    }
 
    public void render(ItemStack var1, ItemTransforms.TransformType var2, boolean var3, PoseStack var4, MultiBufferSource var5, int var6, int var7, BakedModel var8) {
       if (!var1.isEmpty()) {
          var4.pushPose();
-         boolean var9 = var2 == ItemTransforms.TransformType.GUI;
-         boolean var10 = var9 || var2 == ItemTransforms.TransformType.GROUND || var2 == ItemTransforms.TransformType.FIXED;
-         if (var1.getItem() == Items.TRIDENT && var10) {
+         boolean var9 = var2 == ItemTransforms.TransformType.GUI || var2 == ItemTransforms.TransformType.GROUND || var2 == ItemTransforms.TransformType.FIXED;
+         if (var1.getItem() == Items.TRIDENT && var9) {
             var8 = this.itemModelShaper.getModelManager().getModel(new ModelResourceLocation("minecraft:trident#inventory"));
          }
 
          var8.getTransforms().getTransform(var2).apply(var3, var4);
          var4.translate(-0.5D, -0.5D, -0.5D);
-         if (!var8.isCustomRenderer() && (var1.getItem() != Items.TRIDENT || var10)) {
-            RenderType var11 = ItemBlockRenderTypes.getRenderType(var1);
-            RenderType var12;
-            if (var9 && Objects.equals(var11, Sheets.translucentBlockSheet())) {
-               var12 = Sheets.translucentCullBlockSheet();
+         if (var8.isCustomRenderer() || var1.getItem() == Items.TRIDENT && !var9) {
+            BlockEntityWithoutLevelRenderer.instance.renderByItem(var1, var2, var4, var5, var6, var7);
+         } else {
+            boolean var10;
+            if (var2 != ItemTransforms.TransformType.GUI && !var2.firstPerson() && var1.getItem() instanceof BlockItem) {
+               Block var11 = ((BlockItem)var1.getItem()).getBlock();
+               var10 = !(var11 instanceof HalfTransparentBlock) && !(var11 instanceof StainedGlassPaneBlock);
             } else {
-               var12 = var11;
+               var10 = true;
             }
 
-            VertexConsumer var13 = getFoilBuffer(var5, var12, true, var1.hasFoil());
-            this.renderModelLists(var8, var1, var6, var7, var4, var13);
-         } else {
-            BlockEntityWithoutLevelRenderer.instance.renderByItem(var1, var4, var5, var6, var7);
+            RenderType var14 = ItemBlockRenderTypes.getRenderType(var1, var10);
+            VertexConsumer var12;
+            if (var1.getItem() == Items.COMPASS && var1.hasFoil()) {
+               var4.pushPose();
+               PoseStack.Pose var13 = var4.last();
+               if (var2 == ItemTransforms.TransformType.GUI) {
+                  var13.pose().multiply(0.5F);
+               } else if (var2.firstPerson()) {
+                  var13.pose().multiply(0.75F);
+               }
+
+               if (var10) {
+                  var12 = getCompassFoilBufferDirect(var5, var14, var13);
+               } else {
+                  var12 = getCompassFoilBuffer(var5, var14, var13);
+               }
+
+               var4.popPose();
+            } else if (var10) {
+               var12 = getFoilBufferDirect(var5, var14, true, var1.hasFoil());
+            } else {
+               var12 = getFoilBuffer(var5, var14, true, var1.hasFoil());
+            }
+
+            this.renderModelLists(var8, var1, var6, var7, var4, var12);
          }
 
          var4.popPose();
       }
    }
 
+   public static VertexConsumer getArmorFoilBuffer(MultiBufferSource var0, RenderType var1, boolean var2, boolean var3) {
+      return var3 ? VertexMultiConsumer.create(var0.getBuffer(var2 ? RenderType.armorGlint() : RenderType.armorEntityGlint()), var0.getBuffer(var1)) : var0.getBuffer(var1);
+   }
+
+   public static VertexConsumer getCompassFoilBuffer(MultiBufferSource var0, RenderType var1, PoseStack.Pose var2) {
+      return VertexMultiConsumer.create(new SheetedDecalTextureGenerator(var0.getBuffer(RenderType.glint()), var2.pose(), var2.normal()), var0.getBuffer(var1));
+   }
+
+   public static VertexConsumer getCompassFoilBufferDirect(MultiBufferSource var0, RenderType var1, PoseStack.Pose var2) {
+      return VertexMultiConsumer.create(new SheetedDecalTextureGenerator(var0.getBuffer(RenderType.glintDirect()), var2.pose(), var2.normal()), var0.getBuffer(var1));
+   }
+
    public static VertexConsumer getFoilBuffer(MultiBufferSource var0, RenderType var1, boolean var2, boolean var3) {
       return var3 ? VertexMultiConsumer.create(var0.getBuffer(var2 ? RenderType.glint() : RenderType.entityGlint()), var0.getBuffer(var1)) : var0.getBuffer(var1);
    }
 
+   public static VertexConsumer getFoilBufferDirect(MultiBufferSource var0, RenderType var1, boolean var2, boolean var3) {
+      return var3 ? VertexMultiConsumer.create(var0.getBuffer(var2 ? RenderType.glintDirect() : RenderType.entityGlintDirect()), var0.getBuffer(var1)) : var0.getBuffer(var1);
+   }
+
    private void renderQuadList(PoseStack var1, VertexConsumer var2, List<BakedQuad> var3, ItemStack var4, int var5, int var6) {
       boolean var7 = !var4.isEmpty();
       PoseStack.Pose var8 = var1.last();
       Iterator var9 = var3.iterator();
 
@@ -154,18 +196,15 @@
          var4 = this.itemModelShaper.getModelManager().getModel(new ModelResourceLocation("minecraft:trident_in_hand#inventory"));
       } else {
          var4 = this.itemModelShaper.getItemModel(var1);
       }
 
-      return !var5.hasProperties() ? var4 : this.resolveOverrides(var4, var1, var2, var3);
+      ClientLevel var6 = var2 instanceof ClientLevel ? (ClientLevel)var2 : null;
+      BakedModel var7 = var4.getOverrides().resolve(var4, var1, var6, var3);
+      return var7 == null ? this.itemModelShaper.getModelManager().getMissingModel() : var7;
    }
 
-   private BakedModel resolveOverrides(BakedModel var1, ItemStack var2, @Nullable Level var3, @Nullable LivingEntity var4) {
-      BakedModel var5 = var1.getOverrides().resolve(var1, var2, var3, var4);
-      return var5 == null ? this.itemModelShaper.getModelManager().getMissingModel() : var5;
-   }
-
    public void renderStatic(ItemStack var1, ItemTransforms.TransformType var2, int var3, int var4, PoseStack var5, MultiBufferSource var6) {
       this.renderStatic((LivingEntity)null, var1, var2, false, var5, var6, (Level)null, var3, var4);
    }
 
    public void renderStatic(@Nullable LivingEntity var1, ItemStack var2, ItemTransforms.TransformType var3, boolean var4, PoseStack var5, MultiBufferSource var6, @Nullable Level var7, int var8, int var9) {
@@ -211,14 +250,22 @@
       RenderSystem.disableRescaleNormal();
       RenderSystem.popMatrix();
    }
 
    public void renderAndDecorateItem(ItemStack var1, int var2, int var3) {
-      this.renderAndDecorateItem(Minecraft.getInstance().player, var1, var2, var3);
+      this.tryRenderGuiItem(Minecraft.getInstance().player, var1, var2, var3);
    }
 
-   public void renderAndDecorateItem(@Nullable LivingEntity var1, ItemStack var2, int var3, int var4) {
+   public void renderAndDecorateFakeItem(ItemStack var1, int var2, int var3) {
+      this.tryRenderGuiItem((LivingEntity)null, var1, var2, var3);
+   }
+
+   public void renderAndDecorateItem(LivingEntity var1, ItemStack var2, int var3, int var4) {
+      this.tryRenderGuiItem(var1, var2, var3, var4);
+   }
+
+   private void tryRenderGuiItem(@Nullable LivingEntity var1, ItemStack var2, int var3, int var4) {
       if (!var2.isEmpty()) {
          this.blitOffset += 50.0F;
 
          try {
             this.renderGuiItem(var2, var3, var4, this.getModel(var2, (Level)null, var1));
@@ -253,11 +300,11 @@
          PoseStack var6 = new PoseStack();
          if (var2.getCount() != 1 || var5 != null) {
             String var7 = var5 == null ? String.valueOf(var2.getCount()) : var5;
             var6.translate(0.0D, 0.0D, (double)(this.blitOffset + 200.0F));
             MultiBufferSource.BufferSource var8 = MultiBufferSource.immediate(Tesselator.getInstance().getBuilder());
-            var1.drawInBatch(var7, (float)(var3 + 19 - 2 - var1.width(var7)), (float)(var4 + 6 + 3), 16777215, true, var6.last().pose(), var8, false, 0, 15728880);
+            var1.drawInBatch((String)var7, (float)(var3 + 19 - 2 - var1.width(var7)), (float)(var4 + 6 + 3), 16777215, true, var6.last().pose(), var8, false, 0, 15728880);
             var8.endBatch();
          }
 
          if (var2.isDamaged()) {
             RenderSystem.disableDepthTest();
