--- net/minecraft/client/renderer/entity/MobRenderer.java
+++ net/minecraft/client/renderer/entity/MobRenderer.java
@@ -13,10 +13,11 @@
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.Mob;
 import net.minecraft.world.entity.decoration.HangingEntity;
 import net.minecraft.world.level.LightLayer;
+import net.minecraft.world.phys.Vec3;
 
 public abstract class MobRenderer<T extends Mob, M extends EntityModel<T>> extends LivingEntityRenderer<T, M> {
    public MobRenderer(EntityRenderDispatcher var1, M var2, float var3) {
       super(var1, var2, var3);
    }
@@ -58,31 +59,34 @@
       double var16 = Math.cos(var8);
       double var18 = Mth.lerp((double)var2, var5.xo, var5.getX()) - var10 * 0.7D - var12 * 0.5D * var16;
       double var20 = Mth.lerp((double)var2, var5.yo + (double)var5.getEyeHeight() * 0.7D, var5.getY() + (double)var5.getEyeHeight() * 0.7D) - var14 * 0.5D - 0.25D;
       double var22 = Mth.lerp((double)var2, var5.zo, var5.getZ()) - var12 * 0.7D + var10 * 0.5D * var16;
       double var24 = (double)(Mth.lerp(var2, var1.yBodyRot, var1.yBodyRotO) * 0.017453292F) + 1.5707963267948966D;
-      var10 = Math.cos(var24) * (double)var1.getBbWidth() * 0.4D;
-      var12 = Math.sin(var24) * (double)var1.getBbWidth() * 0.4D;
-      double var26 = Mth.lerp((double)var2, var1.xo, var1.getX()) + var10;
-      double var28 = Mth.lerp((double)var2, var1.yo, var1.getY());
-      double var30 = Mth.lerp((double)var2, var1.zo, var1.getZ()) + var12;
-      var3.translate(var10, -(1.6D - (double)var1.getBbHeight()) * 0.5D, var12);
-      float var32 = (float)(var18 - var26);
-      float var33 = (float)(var20 - var28);
-      float var34 = (float)(var22 - var30);
-      float var35 = 0.025F;
-      VertexConsumer var36 = var4.getBuffer(RenderType.leash());
-      Matrix4f var37 = var3.last().pose();
-      float var38 = Mth.fastInvSqrt(var32 * var32 + var34 * var34) * 0.025F / 2.0F;
-      float var39 = var34 * var38;
-      float var40 = var32 * var38;
-      int var41 = this.getBlockLightLevel(var1, var2);
-      int var42 = this.entityRenderDispatcher.getRenderer(var5).getBlockLightLevel(var5, var2);
-      int var43 = var1.level.getBrightness(LightLayer.SKY, new BlockPos(var1.getEyePosition(var2)));
-      int var44 = var1.level.getBrightness(LightLayer.SKY, new BlockPos(var5.getEyePosition(var2)));
-      renderSide(var36, var37, var32, var33, var34, var41, var42, var43, var44, 0.025F, 0.025F, var39, var40);
-      renderSide(var36, var37, var32, var33, var34, var41, var42, var43, var44, 0.025F, 0.0F, var39, var40);
+      Vec3 var26 = var1.getLeashOffset();
+      var10 = Math.cos(var24) * var26.z + Math.sin(var24) * var26.x;
+      var12 = Math.sin(var24) * var26.z - Math.cos(var24) * var26.x;
+      double var27 = Mth.lerp((double)var2, var1.xo, var1.getX()) + var10;
+      double var29 = Mth.lerp((double)var2, var1.yo, var1.getY()) + var26.y;
+      double var31 = Mth.lerp((double)var2, var1.zo, var1.getZ()) + var12;
+      var3.translate(var10, var26.y, var12);
+      float var33 = (float)(var18 - var27);
+      float var34 = (float)(var20 - var29);
+      float var35 = (float)(var22 - var31);
+      float var36 = 0.025F;
+      VertexConsumer var37 = var4.getBuffer(RenderType.leash());
+      Matrix4f var38 = var3.last().pose();
+      float var39 = Mth.fastInvSqrt(var33 * var33 + var35 * var35) * 0.025F / 2.0F;
+      float var40 = var35 * var39;
+      float var41 = var33 * var39;
+      BlockPos var42 = new BlockPos(var1.getEyePosition(var2));
+      BlockPos var43 = new BlockPos(var5.getEyePosition(var2));
+      int var44 = this.getBlockLightLevel(var1, var42);
+      int var45 = this.entityRenderDispatcher.getRenderer(var5).getBlockLightLevel(var5, var43);
+      int var46 = var1.level.getBrightness(LightLayer.SKY, var42);
+      int var47 = var1.level.getBrightness(LightLayer.SKY, var43);
+      renderSide(var37, var38, var33, var34, var35, var44, var45, var46, var47, 0.025F, 0.025F, var40, var41);
+      renderSide(var37, var38, var33, var34, var35, var44, var45, var46, var47, 0.025F, 0.0F, var40, var41);
       var3.popPose();
    }
 
    public static void renderSide(VertexConsumer var0, Matrix4f var1, float var2, float var3, float var4, int var5, int var6, int var7, int var8, float var9, float var10, float var11, float var12) {
       boolean var13 = true;
@@ -108,11 +112,11 @@
          var15 *= 0.7F;
       }
 
       float var16 = (float)var9 / (float)var8;
       float var17 = var3 * var16;
-      float var18 = var4 * (var16 * var16 + var16) * 0.5F + ((float)var8 - (float)var9) / ((float)var8 * 0.75F) + 0.125F;
+      float var18 = var4 > 0.0F ? var4 * var16 * var16 : var4 - var4 * (1.0F - var16) * (1.0F - var16);
       float var19 = var5 * var16;
       if (!var10) {
          var0.vertex(var1, var17 + var11, var18 + var6 - var7, var19 - var12).color(var13, var14, var15, 1.0F).uv2(var2).endVertex();
       }
 
