--- net/minecraft/client/renderer/debug/BeeDebugRenderer.java
+++ net/minecraft/client/renderer/debug/BeeDebugRenderer.java
@@ -19,11 +19,11 @@
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.player.LocalPlayer;
 import net.minecraft.client.renderer.MultiBufferSource;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Position;
-import net.minecraft.network.protocol.game.DebugMobNameGenerator;
+import net.minecraft.network.protocol.game.DebugEntityNameGenerator;
 import net.minecraft.util.Mth;
 import net.minecraft.world.level.pathfinder.Path;
 
 public class BeeDebugRenderer implements DebugRenderer.SimpleDebugRenderer {
    private final Minecraft minecraft;
@@ -115,31 +115,29 @@
 
    private Map<BlockPos, Set<UUID>> createHiveBlacklistMap() {
       HashMap var1 = Maps.newHashMap();
       this.beeInfosPerEntity.values().forEach((var1x) -> {
          var1x.blacklistedHives.forEach((var2) -> {
-            addBeeToSetInMap(var1, var1x, var2);
+            ((Set)var1.computeIfAbsent(var2, (var0) -> {
+               return Sets.newHashSet();
+            })).add(var1x.getUuid());
          });
       });
       return var1;
    }
 
    private void renderFlowerInfos() {
       HashMap var1 = Maps.newHashMap();
       this.beeInfosPerEntity.values().stream().filter(BeeDebugRenderer.BeeInfo::hasFlower).forEach((var1x) -> {
-         Object var2 = (Set)var1.get(var1x.flowerPos);
-         if (var2 == null) {
-            var2 = Sets.newHashSet();
-            var1.put(var1x.flowerPos, var2);
-         }
-
-         ((Set)var2).add(var1x.getUuid());
+         ((Set)var1.computeIfAbsent(var1x.flowerPos, (var0) -> {
+            return Sets.newHashSet();
+         })).add(var1x.getUuid());
       });
       var1.entrySet().forEach((var0) -> {
          BlockPos var1 = (BlockPos)var0.getKey();
          Set var2 = (Set)var0.getValue();
-         Set var3 = (Set)var2.stream().map(DebugMobNameGenerator::getMobName).collect(Collectors.toSet());
+         Set var3 = (Set)var2.stream().map(DebugEntityNameGenerator::getEntityName).collect(Collectors.toSet());
          byte var4 = 1;
          String var10000 = var3.toString();
          int var6 = var4 + 1;
          renderTextOverPos(var10000, var1, var4, -256);
          renderTextOverPos("Flower", var1, var6++, -1);
@@ -150,24 +148,14 @@
 
    private static String getBeeUuidsAsString(Collection<UUID> var0) {
       if (var0.isEmpty()) {
          return "-";
       } else {
-         return var0.size() > 3 ? "" + var0.size() + " bees" : ((Set)var0.stream().map(DebugMobNameGenerator::getMobName).collect(Collectors.toSet())).toString();
+         return var0.size() > 3 ? "" + var0.size() + " bees" : ((Set)var0.stream().map(DebugEntityNameGenerator::getEntityName).collect(Collectors.toSet())).toString();
       }
    }
 
-   private static void addBeeToSetInMap(Map<BlockPos, Set<UUID>> var0, BeeDebugRenderer.BeeInfo var1, BlockPos var2) {
-      Object var3 = (Set)var0.get(var2);
-      if (var3 == null) {
-         var3 = Sets.newHashSet();
-         var0.put(var2, var3);
-      }
-
-      ((Set)var3).add(var1.getUuid());
-   }
-
    private static void highlightHive(BlockPos var0) {
       float var1 = 0.05F;
       renderTransparentFilledBox(var0, 0.05F, 0.2F, 0.2F, 1.0F, 0.3F);
    }
 
@@ -302,17 +290,13 @@
       Iterator var2 = this.beeInfosPerEntity.values().iterator();
 
       while(var2.hasNext()) {
          BeeDebugRenderer.BeeInfo var3 = (BeeDebugRenderer.BeeInfo)var2.next();
          if (var3.hivePos != null && !this.hives.containsKey(var3.hivePos)) {
-            Object var4 = (List)var1.get(var3.hivePos);
-            if (var4 == null) {
-               var4 = Lists.newArrayList();
-               var1.put(var3.hivePos, var4);
-            }
-
-            ((List)var4).add(var3.getName());
+            ((List)var1.computeIfAbsent(var3.hivePos, (var0) -> {
+               return Lists.newArrayList();
+            })).add(var3.getName());
          }
       }
 
       return var1;
    }
@@ -354,11 +338,11 @@
       public UUID getUuid() {
          return this.uuid;
       }
 
       public String getName() {
-         return DebugMobNameGenerator.getMobName(this.uuid);
+         return DebugEntityNameGenerator.getEntityName(this.uuid);
       }
 
       public String toString() {
          return this.getName();
       }
