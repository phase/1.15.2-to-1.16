--- net/minecraft/client/renderer/chunk/RenderChunkRegion.java
+++ net/minecraft/client/renderer/chunk/RenderChunkRegion.java
@@ -1,10 +1,11 @@
 package net.minecraft.client.renderer.chunk;
 
 import java.util.Iterator;
 import javax.annotation.Nullable;
 import net.minecraft.core.BlockPos;
+import net.minecraft.core.Direction;
 import net.minecraft.world.level.BlockAndTintGetter;
 import net.minecraft.world.level.ColorResolver;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.block.entity.BlockEntity;
 import net.minecraft.world.level.block.state.BlockState;
@@ -30,36 +31,37 @@
       int var5 = var1.getZ() - var3 >> 4;
       int var6 = var2.getX() + var3 >> 4;
       int var7 = var2.getZ() + var3 >> 4;
       LevelChunk[][] var8 = new LevelChunk[var6 - var4 + 1][var7 - var5 + 1];
 
-      int var10;
       for(int var9 = var4; var9 <= var6; ++var9) {
-         for(var10 = var5; var10 <= var7; ++var10) {
+         for(int var10 = var5; var10 <= var7; ++var10) {
             var8[var9 - var4][var10 - var5] = var0.getChunk(var9, var10);
          }
       }
 
-      boolean var13 = true;
+      if (isAllEmpty(var1, var2, var4, var5, var8)) {
+         return null;
+      } else {
+         boolean var12 = true;
+         BlockPos var13 = var1.offset(-1, -1, -1);
+         BlockPos var11 = var2.offset(1, 1, 1);
+         return new RenderChunkRegion(var0, var4, var5, var8, var13, var11);
+      }
+   }
 
-      for(var10 = var1.getX() >> 4; var10 <= var2.getX() >> 4; ++var10) {
-         for(int var11 = var1.getZ() >> 4; var11 <= var2.getZ() >> 4; ++var11) {
-            LevelChunk var12 = var8[var10 - var4][var11 - var5];
-            if (!var12.isYSpaceEmpty(var1.getY(), var2.getY())) {
-               var13 = false;
+   public static boolean isAllEmpty(BlockPos var0, BlockPos var1, int var2, int var3, LevelChunk[][] var4) {
+      for(int var5 = var0.getX() >> 4; var5 <= var1.getX() >> 4; ++var5) {
+         for(int var6 = var0.getZ() >> 4; var6 <= var1.getZ() >> 4; ++var6) {
+            LevelChunk var7 = var4[var5 - var2][var6 - var3];
+            if (!var7.isYSpaceEmpty(var0.getY(), var1.getY())) {
+               return false;
             }
          }
       }
 
-      if (var13) {
-         return null;
-      } else {
-         boolean var14 = true;
-         BlockPos var15 = var1.offset(-1, -1, -1);
-         BlockPos var16 = var2.offset(1, 1, 1);
-         return new RenderChunkRegion(var0, var4, var5, var8, var15, var16);
-      }
+      return true;
    }
 
    public RenderChunkRegion(Level var1, int var2, int var3, LevelChunk[][] var4, BlockPos var5, BlockPos var6) {
       this.level = var1;
       this.centerX = var2;
@@ -103,10 +105,14 @@
 
    public FluidState getFluidState(BlockPos var1) {
       return this.fluidStates[this.index(var1)];
    }
 
+   public float getShade(Direction var1, boolean var2) {
+      return this.level.getShade(var1, var2);
+   }
+
    public LevelLightEngine getLightEngine() {
       return this.level.getLightEngine();
    }
 
    @Nullable
