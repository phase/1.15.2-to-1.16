--- net/minecraft/client/renderer/GameRenderer.java
+++ net/minecraft/client/renderer/GameRenderer.java
@@ -26,11 +26,10 @@
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.server.packs.resources.ResourceManager;
 import net.minecraft.server.packs.resources.ResourceManagerReloadListener;
-import net.minecraft.server.packs.resources.SimpleResource;
 import net.minecraft.util.Mth;
 import net.minecraft.world.effect.MobEffects;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.decoration.ItemFrame;
@@ -50,11 +49,11 @@
 import net.minecraft.world.phys.HitResult;
 import net.minecraft.world.phys.Vec3;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
-public class GameRenderer implements AutoCloseable, ResourceManagerReloadListener {
+public class GameRenderer implements ResourceManagerReloadListener, AutoCloseable {
    private static final Logger LOGGER = LogManager.getLogger();
    private final Minecraft minecraft;
    private final ResourceManager resourceManager;
    private final Random random = new Random();
    private float renderDistance;
@@ -149,11 +148,11 @@
       } catch (IOException var3) {
          LOGGER.warn("Failed to load shader: {}", var1, var3);
          this.effectIndex = EFFECT_NONE;
          this.effectActive = false;
       } catch (JsonSyntaxException var4) {
-         LOGGER.warn("Failed to load shader: {}", var1, var4);
+         LOGGER.warn("Failed to parse shader: {}", var1, var4);
          this.effectIndex = EFFECT_NONE;
          this.effectActive = false;
       }
 
    }
@@ -296,11 +295,11 @@
          if (var3) {
             var4 = this.minecraft.options.fov;
             var4 *= (double)Mth.lerp(var2, this.oldFov, this.fov);
          }
 
-         if (var1.getEntity() instanceof LivingEntity && ((LivingEntity)var1.getEntity()).getHealth() <= 0.0F) {
+         if (var1.getEntity() instanceof LivingEntity && ((LivingEntity)var1.getEntity()).isDeadOrDying()) {
             float var6 = Math.min((float)((LivingEntity)var1.getEntity()).deathTime + var2, 20.0F);
             var4 /= (double)((1.0F - 500.0F / (var6 + 500.0F)) * 2.0F + 1.0F);
          }
 
          FluidState var7 = var1.getFluidInCamera();
@@ -315,11 +314,11 @@
    private void bobHurt(PoseStack var1, float var2) {
       if (this.minecraft.getCameraEntity() instanceof LivingEntity) {
          LivingEntity var3 = (LivingEntity)this.minecraft.getCameraEntity();
          float var4 = (float)var3.hurtTime - var2;
          float var5;
-         if (var3.getHealth() <= 0.0F) {
+         if (var3.isDeadOrDying()) {
             var5 = Math.min((float)var3.deathTime + var2, 20.0F);
             var1.mulPose(Vector3f.ZP.rotationDegrees(40.0F - 8000.0F / (var5 + 200.0F)));
          }
 
          if (var4 < 0.0F) {
@@ -414,15 +413,14 @@
       }
 
       if (!this.minecraft.noRender) {
          int var5 = (int)(this.minecraft.mouseHandler.xpos() * (double)this.minecraft.getWindow().getGuiScaledWidth() / (double)this.minecraft.getWindow().getScreenWidth());
          int var6 = (int)(this.minecraft.mouseHandler.ypos() * (double)this.minecraft.getWindow().getGuiScaledHeight() / (double)this.minecraft.getWindow().getScreenHeight());
-         PoseStack var7 = new PoseStack();
          RenderSystem.viewport(0, 0, this.minecraft.getWindow().getWidth(), this.minecraft.getWindow().getHeight());
          if (var4 && this.minecraft.level != null) {
             this.minecraft.getProfiler().push("level");
-            this.renderLevel(var1, var2, var7);
+            this.renderLevel(var1, var2, new PoseStack());
             if (this.minecraft.hasSingleplayerServer() && this.lastScreenshotAttempt < Util.getMillis() - 1000L) {
                this.lastScreenshotAttempt = Util.getMillis();
                if (!this.minecraft.getSingleplayerServer().hasWorldScreenshot()) {
                   this.takeAutoScreenshot();
                }
@@ -442,47 +440,48 @@
             }
 
             this.minecraft.getMainRenderTarget().bindWrite(true);
          }
 
-         Window var8 = this.minecraft.getWindow();
+         Window var7 = this.minecraft.getWindow();
          RenderSystem.clear(256, Minecraft.ON_OSX);
          RenderSystem.matrixMode(5889);
          RenderSystem.loadIdentity();
-         RenderSystem.ortho(0.0D, (double)var8.getWidth() / var8.getGuiScale(), (double)var8.getHeight() / var8.getGuiScale(), 0.0D, 1000.0D, 3000.0D);
+         RenderSystem.ortho(0.0D, (double)var7.getWidth() / var7.getGuiScale(), (double)var7.getHeight() / var7.getGuiScale(), 0.0D, 1000.0D, 3000.0D);
          RenderSystem.matrixMode(5888);
          RenderSystem.loadIdentity();
          RenderSystem.translatef(0.0F, 0.0F, -2000.0F);
          Lighting.setupFor3DItems();
+         PoseStack var8 = new PoseStack();
          if (var4 && this.minecraft.level != null) {
             this.minecraft.getProfiler().popPush("gui");
             if (!this.minecraft.options.hideGui || this.minecraft.screen != null) {
                RenderSystem.defaultAlphaFunc();
                this.renderItemActivationAnimation(this.minecraft.getWindow().getGuiScaledWidth(), this.minecraft.getWindow().getGuiScaledHeight(), var1);
-               this.minecraft.gui.render(var1);
+               this.minecraft.gui.render(var8, var1);
                RenderSystem.clear(256, Minecraft.ON_OSX);
             }
 
             this.minecraft.getProfiler().pop();
          }
 
          CrashReport var10;
          CrashReportCategory var11;
          if (this.minecraft.overlay != null) {
             try {
-               this.minecraft.overlay.render(var5, var6, this.minecraft.getDeltaFrameTime());
+               this.minecraft.overlay.render(var8, var5, var6, this.minecraft.getDeltaFrameTime());
             } catch (Throwable var13) {
                var10 = CrashReport.forThrowable(var13, "Rendering overlay");
                var11 = var10.addCategory("Overlay render details");
                var11.setDetail("Overlay name", () -> {
                   return this.minecraft.overlay.getClass().getCanonicalName();
                });
                throw new ReportedException(var10);
             }
          } else if (this.minecraft.screen != null) {
             try {
-               this.minecraft.screen.render(var5, var6, this.minecraft.getDeltaFrameTime());
+               this.minecraft.screen.render(var8, var5, var6, this.minecraft.getDeltaFrameTime());
             } catch (Throwable var12) {
                var10 = CrashReport.forThrowable(var12, "Rendering screen");
                var11 = var10.addCategory("Screen render details");
                var11.setDetail("Screen name", () -> {
                   return this.minecraft.screen.getClass().getCanonicalName();
@@ -501,11 +500,11 @@
    }
 
    private void takeAutoScreenshot() {
       if (this.minecraft.levelRenderer.countRenderedChunks() > 10 && this.minecraft.levelRenderer.hasRenderedAllChunks() && !this.minecraft.getSingleplayerServer().hasWorldScreenshot()) {
          NativeImage var1 = Screenshot.takeScreenshot(this.minecraft.getWindow().getWidth(), this.minecraft.getWindow().getHeight(), this.minecraft.getMainRenderTarget());
-         SimpleResource.IO_EXECUTOR.execute(() -> {
+         Util.ioPool().execute(() -> {
             int var2 = var1.getWidth();
             int var3 = var1.getHeight();
             int var4 = 0;
             int var5 = 0;
             if (var2 > var3) {
