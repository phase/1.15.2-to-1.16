--- net/minecraft/client/main/Main.java
+++ net/minecraft/client/main/Main.java
@@ -27,10 +27,11 @@
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.Options;
 import net.minecraft.client.User;
 import net.minecraft.client.resources.language.LanguageManager;
 import net.minecraft.client.server.IntegratedServer;
+import net.minecraft.server.Bootstrap;
 import net.minecraft.util.GsonHelper;
 import net.minecraft.world.entity.player.Player;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
@@ -42,10 +43,12 @@
 
    public static void main(String[] var0) {
       OptionParser var1 = new OptionParser();
       var1.allowsUnrecognizedOptions();
       var1.accepts("demo");
+      var1.accepts("disableMultiplayer");
+      var1.accepts("disableChat");
       var1.accepts("fullscreen");
       var1.accepts("checkGlErrors");
       ArgumentAcceptingOptionSpec var2 = var1.accepts("server").withRequiredArg();
       ArgumentAcceptingOptionSpec var3 = var1.accepts("port").withRequiredArg().ofType(Integer.class).defaultsTo(25565, new Integer[0]);
       ArgumentAcceptingOptionSpec var4 = var1.accepts("gameDir").withRequiredArg().ofType(File.class).defaultsTo(new File("."), new File[0]);
@@ -78,11 +81,11 @@
       String var27 = (String)parseArgument(var25, var7);
       Proxy var28 = Proxy.NO_PROXY;
       if (var27 != null) {
          try {
             var28 = new Proxy(Type.SOCKS, new InetSocketAddress(var27, (Integer)parseArgument(var25, var8)));
-         } catch (Exception var68) {
+         } catch (Exception var70) {
          }
       }
 
       final String var29 = (String)parseArgument(var25, var9);
       final String var30 = (String)parseArgument(var25, var10);
@@ -98,26 +101,31 @@
       int var32 = (Integer)parseArgument(var25, var16);
       OptionalInt var33 = ofNullable((Integer)parseArgument(var25, var17));
       OptionalInt var34 = ofNullable((Integer)parseArgument(var25, var18));
       boolean var35 = var25.has("fullscreen");
       boolean var36 = var25.has("demo");
-      String var37 = (String)parseArgument(var25, var14);
-      Gson var38 = (new GsonBuilder()).registerTypeAdapter(PropertyMap.class, new Serializer()).create();
-      PropertyMap var39 = (PropertyMap)GsonHelper.fromJson(var38, (String)parseArgument(var25, var19), PropertyMap.class);
-      PropertyMap var40 = (PropertyMap)GsonHelper.fromJson(var38, (String)parseArgument(var25, var20), PropertyMap.class);
-      String var41 = (String)parseArgument(var25, var23);
-      File var42 = (File)parseArgument(var25, var4);
-      File var43 = var25.has(var5) ? (File)parseArgument(var25, var5) : new File(var42, "assets/");
-      File var44 = var25.has(var6) ? (File)parseArgument(var25, var6) : new File(var42, "resourcepacks/");
-      String var45 = var25.has(var12) ? (String)var12.value(var25) : Player.createPlayerUUID((String)var11.value(var25)).toString();
-      String var46 = var25.has(var21) ? (String)var21.value(var25) : null;
-      String var47 = (String)parseArgument(var25, var2);
-      Integer var48 = (Integer)parseArgument(var25, var3);
+      boolean var37 = var25.has("disableMultiplayer");
+      boolean var38 = var25.has("disableChat");
+      String var39 = (String)parseArgument(var25, var14);
+      Gson var40 = (new GsonBuilder()).registerTypeAdapter(PropertyMap.class, new Serializer()).create();
+      PropertyMap var41 = (PropertyMap)GsonHelper.fromJson(var40, (String)parseArgument(var25, var19), PropertyMap.class);
+      PropertyMap var42 = (PropertyMap)GsonHelper.fromJson(var40, (String)parseArgument(var25, var20), PropertyMap.class);
+      String var43 = (String)parseArgument(var25, var23);
+      File var44 = (File)parseArgument(var25, var4);
+      File var45 = var25.has(var5) ? (File)parseArgument(var25, var5) : new File(var44, "assets/");
+      File var46 = var25.has(var6) ? (File)parseArgument(var25, var6) : new File(var44, "resourcepacks/");
+      String var47 = var25.has(var12) ? (String)var12.value(var25) : Player.createPlayerUUID((String)var11.value(var25)).toString();
+      String var48 = var25.has(var21) ? (String)var21.value(var25) : null;
+      String var49 = (String)parseArgument(var25, var2);
+      Integer var50 = (Integer)parseArgument(var25, var3);
       CrashReport.preload();
-      User var49 = new User((String)var11.value(var25), var45, (String)var13.value(var25), (String)var22.value(var25));
-      GameConfig var50 = new GameConfig(new GameConfig.UserData(var49, var39, var40, var28), new DisplayData(var31, var32, var33, var34, var35), new GameConfig.FolderData(var42, var44, var43, var46), new GameConfig.GameData(var36, var37, var41), new GameConfig.ServerData(var47, var48));
-      Thread var51 = new Thread("Client Shutdown Thread") {
+      Bootstrap.bootStrap();
+      Bootstrap.validate();
+      Util.startTimerHackThread();
+      User var51 = new User((String)var11.value(var25), var47, (String)var13.value(var25), (String)var22.value(var25));
+      GameConfig var52 = new GameConfig(new GameConfig.UserData(var51, var41, var42, var28), new DisplayData(var31, var32, var33, var34, var35), new GameConfig.FolderData(var44, var46, var45, var48), new GameConfig.GameData(var36, var39, var43, var37, var38), new GameConfig.ServerData(var49, var50));
+      Thread var53 = new Thread("Client Shutdown Thread") {
          public void run() {
             Minecraft var1 = Minecraft.getInstance();
             if (var1 != null) {
                IntegratedServer var2 = var1.getSingleplayerServer();
                if (var2 != null) {
@@ -125,72 +133,72 @@
                }
 
             }
          }
       };
-      var51.setUncaughtExceptionHandler(new DefaultUncaughtExceptionHandler(LOGGER));
-      Runtime.getRuntime().addShutdownHook(var51);
+      var53.setUncaughtExceptionHandler(new DefaultUncaughtExceptionHandler(LOGGER));
+      Runtime.getRuntime().addShutdownHook(var53);
       new RenderPipeline();
 
-      final Minecraft var53;
+      final Minecraft var55;
       try {
          Thread.currentThread().setName("Render thread");
          RenderSystem.initRenderThread();
          RenderSystem.beginInitialization();
-         var53 = new Minecraft(var50);
+         var55 = new Minecraft(var52);
          RenderSystem.finishInitialization();
-      } catch (SilentInitException var66) {
-         LOGGER.warn("Failed to create window: ", var66);
+      } catch (SilentInitException var68) {
+         LOGGER.warn("Failed to create window: ", var68);
          return;
-      } catch (Throwable var67) {
-         CrashReport var55 = CrashReport.forThrowable(var67, "Initializing game");
-         var55.addCategory("Initialization");
-         Minecraft.fillReport((LanguageManager)null, var50.game.launchVersion, (Options)null, var55);
-         Minecraft.crash(var55);
+      } catch (Throwable var69) {
+         CrashReport var57 = CrashReport.forThrowable(var69, "Initializing game");
+         var57.addCategory("Initialization");
+         Minecraft.fillReport((LanguageManager)null, var52.game.launchVersion, (Options)null, var57);
+         Minecraft.crash(var57);
          return;
       }
 
-      Thread var54;
-      if (var53.renderOnThread()) {
-         var54 = new Thread("Game thread") {
+      Thread var56;
+      if (var55.renderOnThread()) {
+         var56 = new Thread("Game thread") {
             public void run() {
                try {
                   RenderSystem.initGameThread(true);
-                  var53.run();
+                  var55.run();
                } catch (Throwable var2) {
                   Main.LOGGER.error("Exception in client thread", var2);
                }
 
             }
          };
-         var54.start();
+         var56.start();
 
          while(true) {
-            if (var53.isRunning()) {
+            if (var55.isRunning()) {
                continue;
             }
          }
       } else {
-         var54 = null;
+         var56 = null;
 
          try {
             RenderSystem.initGameThread(false);
-            var53.run();
-         } catch (Throwable var65) {
-            LOGGER.error("Unhandled game exception", var65);
+            var55.run();
+         } catch (Throwable var67) {
+            LOGGER.error("Unhandled game exception", var67);
          }
       }
 
       try {
-         var53.stop();
-         if (var54 != null) {
-            var54.join();
+         var55.stop();
+         if (var56 != null) {
+            var56.join();
          }
-      } catch (InterruptedException var63) {
-         LOGGER.error("Exception during client thread shutdown", var63);
+      } catch (InterruptedException var65) {
+         LOGGER.error("Exception during client thread shutdown", var65);
       } finally {
-         var53.destroy();
+         var55.destroy();
       }
 
    }
 
    private static OptionalInt ofNullable(@Nullable Integer var0) {
