--- net/minecraft/client/multiplayer/ServerStatusPinger.java
+++ net/minecraft/client/multiplayer/ServerStatusPinger.java
@@ -18,19 +18,20 @@
 import io.netty.channel.SimpleChannelInboundHandler;
 import io.netty.channel.socket.nio.NioSocketChannel;
 import java.net.InetAddress;
 import java.net.UnknownHostException;
 import java.nio.charset.StandardCharsets;
+import java.util.ArrayList;
 import java.util.Collections;
 import java.util.Iterator;
 import java.util.List;
 import net.minecraft.ChatFormatting;
 import net.minecraft.Util;
-import net.minecraft.client.resources.language.I18n;
 import net.minecraft.network.Connection;
 import net.minecraft.network.ConnectionProtocol;
 import net.minecraft.network.chat.Component;
+import net.minecraft.network.chat.TextComponent;
 import net.minecraft.network.chat.TranslatableComponent;
 import net.minecraft.network.protocol.handshake.ClientIntentionPacket;
 import net.minecraft.network.protocol.status.ClientStatusPacketListener;
 import net.minecraft.network.protocol.status.ClientboundPongResponsePacket;
 import net.minecraft.network.protocol.status.ClientboundStatusResponsePacket;
@@ -52,66 +53,58 @@
 
    public void pingServer(final ServerData var1) throws UnknownHostException {
       ServerAddress var2 = ServerAddress.parseString(var1.ip);
       final Connection var3 = Connection.connectToServer(InetAddress.getByName(var2.getHost()), var2.getPort(), false);
       this.connections.add(var3);
-      var1.motd = I18n.get("multiplayer.status.pinging");
+      var1.motd = new TranslatableComponent("multiplayer.status.pinging");
       var1.ping = -1L;
       var1.playerList = null;
       var3.setListener(new ClientStatusPacketListener() {
          private boolean success;
          private boolean receivedPing;
          private long pingStart;
 
          public void handleStatusResponse(ClientboundStatusResponsePacket var1x) {
             if (this.receivedPing) {
-               var3.disconnect(new TranslatableComponent("multiplayer.status.unrequested", new Object[0]));
+               var3.disconnect(new TranslatableComponent("multiplayer.status.unrequested"));
             } else {
                this.receivedPing = true;
                ServerStatus var2 = var1x.getStatus();
                if (var2.getDescription() != null) {
-                  var1.motd = var2.getDescription().getColoredString();
+                  var1.motd = var2.getDescription();
                } else {
-                  var1.motd = "";
+                  var1.motd = TextComponent.EMPTY;
                }
 
                if (var2.getVersion() != null) {
-                  var1.version = var2.getVersion().getName();
+                  var1.version = new TextComponent(var2.getVersion().getName());
                   var1.protocol = var2.getVersion().getProtocol();
                } else {
-                  var1.version = I18n.get("multiplayer.status.old");
+                  var1.version = new TranslatableComponent("multiplayer.status.old");
                   var1.protocol = 0;
                }
 
                if (var2.getPlayers() != null) {
-                  var1.status = ChatFormatting.GRAY + "" + var2.getPlayers().getNumPlayers() + "" + ChatFormatting.DARK_GRAY + "/" + ChatFormatting.GRAY + var2.getPlayers().getMaxPlayers();
+                  var1.status = ServerStatusPinger.formatPlayerCount(var2.getPlayers().getNumPlayers(), var2.getPlayers().getMaxPlayers());
+                  ArrayList var3x = Lists.newArrayList();
                   if (ArrayUtils.isNotEmpty(var2.getPlayers().getSample())) {
-                     StringBuilder var3x = new StringBuilder();
                      GameProfile[] var4 = var2.getPlayers().getSample();
                      int var5 = var4.length;
 
                      for(int var6 = 0; var6 < var5; ++var6) {
                         GameProfile var7 = var4[var6];
-                        if (var3x.length() > 0) {
-                           var3x.append("\n");
-                        }
-
-                        var3x.append(var7.getName());
+                        var3x.add(new TextComponent(var7.getName()));
                      }
 
                      if (var2.getPlayers().getSample().length < var2.getPlayers().getNumPlayers()) {
-                        if (var3x.length() > 0) {
-                           var3x.append("\n");
-                        }
-
-                        var3x.append(I18n.get("multiplayer.status.and_more", var2.getPlayers().getNumPlayers() - var2.getPlayers().getSample().length));
+                        var3x.add(new TranslatableComponent("multiplayer.status.and_more", new Object[]{var2.getPlayers().getNumPlayers() - var2.getPlayers().getSample().length}));
                      }
 
-                     var1.playerList = var3x.toString();
+                     var1.playerList = var3x;
                   }
                } else {
-                  var1.status = ChatFormatting.DARK_GRAY + I18n.get("multiplayer.status.unknown");
+                  var1.status = (new TranslatableComponent("multiplayer.status.unknown")).withStyle(ChatFormatting.DARK_GRAY);
                }
 
                if (var2.getFavicon() != null) {
                   String var8 = var2.getFavicon();
                   if (var8.startsWith("data:image/png;base64,")) {
@@ -131,18 +124,18 @@
 
          public void handlePongResponse(ClientboundPongResponsePacket var1x) {
             long var2 = this.pingStart;
             long var4 = Util.getMillis();
             var1.ping = var4 - var2;
-            var3.disconnect(new TranslatableComponent("multiplayer.status.finished", new Object[0]));
+            var3.disconnect(new TranslatableComponent("multiplayer.status.finished"));
          }
 
          public void onDisconnect(Component var1x) {
             if (!this.success) {
                ServerStatusPinger.LOGGER.error("Can't ping {}: {}", var1.ip, var1x.getString());
-               var1.motd = ChatFormatting.DARK_RED + I18n.get("multiplayer.status.cannot_connect");
-               var1.status = "";
+               var1.motd = (new TranslatableComponent("multiplayer.status.cannot_connect")).withStyle(ChatFormatting.DARK_RED);
+               var1.status = TextComponent.EMPTY;
                ServerStatusPinger.this.pingLegacyServer(var1);
             }
 
          }
 
@@ -219,13 +212,13 @@
                         String var7 = var5[2];
                         String var8 = var5[3];
                         int var9 = Mth.getInt(var5[4], -1);
                         int var10 = Mth.getInt(var5[5], -1);
                         var1.protocol = -1;
-                        var1.version = var7;
-                        var1.motd = var8;
-                        var1.status = ChatFormatting.GRAY + "" + var9 + "" + ChatFormatting.DARK_GRAY + "/" + ChatFormatting.GRAY + var10;
+                        var1.version = new TextComponent(var7);
+                        var1.motd = new TextComponent(var8);
+                        var1.status = ServerStatusPinger.formatPlayerCount(var9, var10);
                      }
                   }
 
                   var1x.close();
                }
@@ -236,10 +229,14 @@
             }});
          }
       })).channel(NioSocketChannel.class)).connect(var2.getHost(), var2.getPort());
    }
 
+   private static Component formatPlayerCount(int var0, int var1) {
+      return (new TextComponent(Integer.toString(var0))).append((new TextComponent("/")).withStyle(ChatFormatting.DARK_GRAY)).append(Integer.toString(var1)).withStyle(ChatFormatting.GRAY);
+   }
+
    public void tick() {
       synchronized(this.connections) {
          Iterator var2 = this.connections.iterator();
 
          while(var2.hasNext()) {
@@ -261,11 +258,11 @@
 
          while(var2.hasNext()) {
             Connection var3 = (Connection)var2.next();
             if (var3.isConnected()) {
                var2.remove();
-               var3.disconnect(new TranslatableComponent("multiplayer.status.cancelled", new Object[0]));
+               var3.disconnect(new TranslatableComponent("multiplayer.status.cancelled"));
             }
          }
 
       }
    }
