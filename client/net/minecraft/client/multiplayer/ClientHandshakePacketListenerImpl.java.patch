--- net/minecraft/client/multiplayer/ClientHandshakePacketListenerImpl.java
+++ net/minecraft/client/multiplayer/ClientHandshakePacketListenerImpl.java
@@ -25,11 +25,11 @@
 import net.minecraft.network.protocol.login.ClientboundLoginCompressionPacket;
 import net.minecraft.network.protocol.login.ClientboundLoginDisconnectPacket;
 import net.minecraft.network.protocol.login.ServerboundCustomQueryPacket;
 import net.minecraft.network.protocol.login.ServerboundKeyPacket;
 import net.minecraft.realms.DisconnectedRealmsScreen;
-import net.minecraft.realms.RealmsScreenProxy;
+import net.minecraft.realms.RealmsScreen;
 import net.minecraft.util.Crypt;
 import net.minecraft.util.HttpUtil;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
@@ -52,11 +52,11 @@
    public void handleHello(ClientboundHelloPacket var1) {
       SecretKey var2 = Crypt.generateSecretKey();
       PublicKey var3 = var1.getPublicKey();
       String var4 = (new BigInteger(Crypt.digestData(var1.getServerId(), var3, var2))).toString(16);
       ServerboundKeyPacket var5 = new ServerboundKeyPacket(var2, var3, var1.getNonce());
-      this.updateStatus.accept(new TranslatableComponent("connect.authorizing", new Object[0]));
+      this.updateStatus.accept(new TranslatableComponent("connect.authorizing"));
       HttpUtil.DOWNLOAD_EXECUTOR.submit(() -> {
          Component var4x = this.authenticateServer(var4);
          if (var4x != null) {
             if (this.minecraft.getCurrentServer() == null || !this.minecraft.getCurrentServer().isLan()) {
                this.connection.disconnect(var4x);
@@ -64,11 +64,11 @@
             }
 
             LOGGER.warn(var4x.getString());
          }
 
-         this.updateStatus.accept(new TranslatableComponent("connect.encrypting", new Object[0]));
+         this.updateStatus.accept(new TranslatableComponent("connect.encrypting"));
          this.connection.send(var5, (var2x) -> {
             this.connection.setEncryptionKey(var2);
          });
       });
    }
@@ -77,32 +77,32 @@
    private Component authenticateServer(String var1) {
       try {
          this.getMinecraftSessionService().joinServer(this.minecraft.getUser().getGameProfile(), this.minecraft.getUser().getAccessToken(), var1);
          return null;
       } catch (AuthenticationUnavailableException var3) {
-         return new TranslatableComponent("disconnect.loginFailedInfo", new Object[]{new TranslatableComponent("disconnect.loginFailedInfo.serversUnavailable", new Object[0])});
+         return new TranslatableComponent("disconnect.loginFailedInfo", new Object[]{new TranslatableComponent("disconnect.loginFailedInfo.serversUnavailable")});
       } catch (InvalidCredentialsException var4) {
-         return new TranslatableComponent("disconnect.loginFailedInfo", new Object[]{new TranslatableComponent("disconnect.loginFailedInfo.invalidSession", new Object[0])});
+         return new TranslatableComponent("disconnect.loginFailedInfo", new Object[]{new TranslatableComponent("disconnect.loginFailedInfo.invalidSession")});
       } catch (AuthenticationException var5) {
          return new TranslatableComponent("disconnect.loginFailedInfo", new Object[]{var5.getMessage()});
       }
    }
 
    private MinecraftSessionService getMinecraftSessionService() {
       return this.minecraft.getMinecraftSessionService();
    }
 
    public void handleGameProfile(ClientboundGameProfilePacket var1) {
-      this.updateStatus.accept(new TranslatableComponent("connect.joining", new Object[0]));
+      this.updateStatus.accept(new TranslatableComponent("connect.joining"));
       this.localGameProfile = var1.getGameProfile();
       this.connection.setProtocol(ConnectionProtocol.PLAY);
       this.connection.setListener(new ClientPacketListener(this.minecraft, this.parent, this.connection, this.localGameProfile));
    }
 
    public void onDisconnect(Component var1) {
-      if (this.parent != null && this.parent instanceof RealmsScreenProxy) {
-         this.minecraft.setScreen((new DisconnectedRealmsScreen(((RealmsScreenProxy)this.parent).getScreen(), "connect.failed", var1)).getProxy());
+      if (this.parent != null && this.parent instanceof RealmsScreen) {
+         this.minecraft.setScreen(new DisconnectedRealmsScreen(this.parent, "connect.failed", var1));
       } else {
          this.minecraft.setScreen(new DisconnectedScreen(this.parent, "connect.failed", var1));
       }
 
    }
@@ -121,9 +121,9 @@
       }
 
    }
 
    public void handleCustomQuery(ClientboundCustomQueryPacket var1) {
-      this.updateStatus.accept(new TranslatableComponent("connect.negotiating", new Object[0]));
+      this.updateStatus.accept(new TranslatableComponent("connect.negotiating"));
       this.connection.send(new ServerboundCustomQueryPacket(var1.getTransactionId(), (FriendlyByteBuf)null));
    }
 }
