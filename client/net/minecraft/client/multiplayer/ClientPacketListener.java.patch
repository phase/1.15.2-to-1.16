--- net/minecraft/client/multiplayer/ClientPacketListener.java
+++ net/minecraft/client/multiplayer/ClientPacketListener.java
@@ -1,9 +1,10 @@
 package net.minecraft.client.multiplayer;
 
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
+import com.google.common.collect.Sets;
 import com.mojang.authlib.GameProfile;
 import com.mojang.brigadier.CommandDispatcher;
 import io.netty.buffer.Unpooled;
 import java.io.File;
 import java.io.UnsupportedEncodingException;
@@ -11,13 +12,15 @@
 import java.net.URISyntaxException;
 import java.net.URLDecoder;
 import java.nio.charset.StandardCharsets;
 import java.util.ArrayList;
 import java.util.Collection;
+import java.util.Collections;
 import java.util.Iterator;
 import java.util.Map;
 import java.util.Random;
+import java.util.Set;
 import java.util.UUID;
 import java.util.Map.Entry;
 import java.util.concurrent.CompletableFuture;
 import javax.annotation.Nullable;
 import net.minecraft.advancements.Advancement;
@@ -48,40 +51,42 @@
 import net.minecraft.client.particle.ItemPickupParticle;
 import net.minecraft.client.player.KeyboardInput;
 import net.minecraft.client.player.LocalPlayer;
 import net.minecraft.client.player.RemotePlayer;
 import net.minecraft.client.renderer.debug.BeeDebugRenderer;
+import net.minecraft.client.renderer.debug.BrainDebugRenderer;
 import net.minecraft.client.renderer.debug.GoalSelectorDebugRenderer;
 import net.minecraft.client.renderer.debug.NeighborsUpdateRenderer;
-import net.minecraft.client.renderer.debug.VillageDebugRenderer;
 import net.minecraft.client.renderer.debug.WorldGenAttemptRenderer;
-import net.minecraft.client.resources.language.I18n;
 import net.minecraft.client.resources.sounds.BeeAggressiveSoundInstance;
 import net.minecraft.client.resources.sounds.BeeFlyingSoundInstance;
 import net.minecraft.client.resources.sounds.GuardianAttackSoundInstance;
 import net.minecraft.client.resources.sounds.MinecartSoundInstance;
 import net.minecraft.client.resources.sounds.SimpleSoundInstance;
 import net.minecraft.client.resources.sounds.SoundInstance;
+import net.minecraft.client.resources.sounds.TickableSoundInstance;
 import net.minecraft.client.searchtree.MutableSearchTree;
 import net.minecraft.client.searchtree.SearchRegistry;
 import net.minecraft.commands.SharedSuggestionProvider;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.core.PositionImpl;
+import net.minecraft.core.Registry;
+import net.minecraft.core.RegistryAccess;
 import net.minecraft.core.SectionPos;
 import net.minecraft.core.particles.ParticleTypes;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.network.Connection;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.network.chat.Component;
+import net.minecraft.network.chat.TextComponent;
 import net.minecraft.network.chat.TranslatableComponent;
 import net.minecraft.network.protocol.Packet;
 import net.minecraft.network.protocol.PacketUtils;
 import net.minecraft.network.protocol.game.ClientGamePacketListener;
 import net.minecraft.network.protocol.game.ClientboundAddEntityPacket;
 import net.minecraft.network.protocol.game.ClientboundAddExperienceOrbPacket;
-import net.minecraft.network.protocol.game.ClientboundAddGlobalEntityPacket;
 import net.minecraft.network.protocol.game.ClientboundAddMobPacket;
 import net.minecraft.network.protocol.game.ClientboundAddPaintingPacket;
 import net.minecraft.network.protocol.game.ClientboundAddPlayerPacket;
 import net.minecraft.network.protocol.game.ClientboundAnimatePacket;
 import net.minecraft.network.protocol.game.ClientboundAwardStatsPacket;
@@ -139,22 +144,22 @@
 import net.minecraft.network.protocol.game.ClientboundSetBorderPacket;
 import net.minecraft.network.protocol.game.ClientboundSetCameraPacket;
 import net.minecraft.network.protocol.game.ClientboundSetCarriedItemPacket;
 import net.minecraft.network.protocol.game.ClientboundSetChunkCacheCenterPacket;
 import net.minecraft.network.protocol.game.ClientboundSetChunkCacheRadiusPacket;
+import net.minecraft.network.protocol.game.ClientboundSetDefaultSpawnPositionPacket;
 import net.minecraft.network.protocol.game.ClientboundSetDisplayObjectivePacket;
 import net.minecraft.network.protocol.game.ClientboundSetEntityDataPacket;
 import net.minecraft.network.protocol.game.ClientboundSetEntityLinkPacket;
 import net.minecraft.network.protocol.game.ClientboundSetEntityMotionPacket;
-import net.minecraft.network.protocol.game.ClientboundSetEquippedItemPacket;
+import net.minecraft.network.protocol.game.ClientboundSetEquipmentPacket;
 import net.minecraft.network.protocol.game.ClientboundSetExperiencePacket;
 import net.minecraft.network.protocol.game.ClientboundSetHealthPacket;
 import net.minecraft.network.protocol.game.ClientboundSetObjectivePacket;
 import net.minecraft.network.protocol.game.ClientboundSetPassengersPacket;
 import net.minecraft.network.protocol.game.ClientboundSetPlayerTeamPacket;
 import net.minecraft.network.protocol.game.ClientboundSetScorePacket;
-import net.minecraft.network.protocol.game.ClientboundSetSpawnPositionPacket;
 import net.minecraft.network.protocol.game.ClientboundSetTimePacket;
 import net.minecraft.network.protocol.game.ClientboundSetTitlesPacket;
 import net.minecraft.network.protocol.game.ClientboundSoundEntityPacket;
 import net.minecraft.network.protocol.game.ClientboundSoundPacket;
 import net.minecraft.network.protocol.game.ClientboundStopSoundPacket;
@@ -174,12 +179,14 @@
 import net.minecraft.network.protocol.game.ServerboundKeepAlivePacket;
 import net.minecraft.network.protocol.game.ServerboundMovePlayerPacket;
 import net.minecraft.network.protocol.game.ServerboundMoveVehiclePacket;
 import net.minecraft.network.protocol.game.ServerboundResourcePackPacket;
 import net.minecraft.realms.DisconnectedRealmsScreen;
-import net.minecraft.realms.RealmsScreenProxy;
+import net.minecraft.realms.RealmsScreen;
+import net.minecraft.resources.ResourceKey;
 import net.minecraft.resources.ResourceLocation;
+import net.minecraft.server.packs.repository.PackSource;
 import net.minecraft.sounds.SoundEvents;
 import net.minecraft.sounds.SoundSource;
 import net.minecraft.stats.Stat;
 import net.minecraft.stats.StatsCounter;
 import net.minecraft.tags.BlockTags;
@@ -187,36 +194,35 @@
 import net.minecraft.tags.FluidTags;
 import net.minecraft.tags.ItemTags;
 import net.minecraft.tags.TagManager;
 import net.minecraft.util.Mth;
 import net.minecraft.util.thread.BlockableEventLoop;
+import net.minecraft.world.Difficulty;
 import net.minecraft.world.InteractionHand;
 import net.minecraft.world.SimpleContainer;
 import net.minecraft.world.effect.MobEffect;
 import net.minecraft.world.effect.MobEffectInstance;
 import net.minecraft.world.entity.AreaEffectCloud;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EntityType;
+import net.minecraft.world.entity.EquipmentSlot;
 import net.minecraft.world.entity.ExperienceOrb;
+import net.minecraft.world.entity.LightningBolt;
 import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.Mob;
-import net.minecraft.world.entity.ai.attributes.Attribute;
 import net.minecraft.world.entity.ai.attributes.AttributeInstance;
+import net.minecraft.world.entity.ai.attributes.AttributeMap;
 import net.minecraft.world.entity.ai.attributes.AttributeModifier;
-import net.minecraft.world.entity.ai.attributes.BaseAttributeMap;
-import net.minecraft.world.entity.ai.attributes.RangedAttribute;
 import net.minecraft.world.entity.animal.Bee;
 import net.minecraft.world.entity.animal.horse.AbstractHorse;
 import net.minecraft.world.entity.boss.EnderDragonPart;
 import net.minecraft.world.entity.boss.enderdragon.EndCrystal;
 import net.minecraft.world.entity.boss.enderdragon.EnderDragon;
 import net.minecraft.world.entity.decoration.ArmorStand;
 import net.minecraft.world.entity.decoration.ItemFrame;
 import net.minecraft.world.entity.decoration.LeashFenceKnotEntity;
 import net.minecraft.world.entity.decoration.Painting;
-import net.minecraft.world.entity.fishing.FishingHook;
-import net.minecraft.world.entity.global.LightningBolt;
 import net.minecraft.world.entity.item.FallingBlockEntity;
 import net.minecraft.world.entity.item.ItemEntity;
 import net.minecraft.world.entity.item.PrimedTnt;
 import net.minecraft.world.entity.monster.Guardian;
 import net.minecraft.world.entity.player.Inventory;
@@ -225,10 +231,11 @@
 import net.minecraft.world.entity.projectile.Arrow;
 import net.minecraft.world.entity.projectile.DragonFireball;
 import net.minecraft.world.entity.projectile.EvokerFangs;
 import net.minecraft.world.entity.projectile.EyeOfEnder;
 import net.minecraft.world.entity.projectile.FireworkRocketEntity;
+import net.minecraft.world.entity.projectile.FishingHook;
 import net.minecraft.world.entity.projectile.LargeFireball;
 import net.minecraft.world.entity.projectile.LlamaSpit;
 import net.minecraft.world.entity.projectile.ShulkerBullet;
 import net.minecraft.world.entity.projectile.SmallFireball;
 import net.minecraft.world.entity.projectile.Snowball;
@@ -258,11 +265,11 @@
 import net.minecraft.world.item.crafting.RecipeManager;
 import net.minecraft.world.item.trading.MerchantOffers;
 import net.minecraft.world.level.ChunkPos;
 import net.minecraft.world.level.Explosion;
 import net.minecraft.world.level.GameType;
-import net.minecraft.world.level.LevelSettings;
+import net.minecraft.world.level.Level;
 import net.minecraft.world.level.LightLayer;
 import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.entity.BannerBlockEntity;
 import net.minecraft.world.level.block.entity.BeaconBlockEntity;
 import net.minecraft.world.level.block.entity.BedBlockEntity;
@@ -299,10 +306,11 @@
    private final Connection connection;
    private final GameProfile localGameProfile;
    private final Screen callbackScreen;
    private Minecraft minecraft;
    private ClientLevel level;
+   private ClientLevel.ClientLevelData levelData;
    private boolean started;
    private final Map<UUID, PlayerInfo> playerInfoMap = Maps.newHashMap();
    private final ClientAdvancements advancements;
    private final ClientSuggestionProvider suggestionsProvider;
    private TagManager tags = new TagManager();
@@ -310,10 +318,12 @@
    private int serverChunkRadius = 3;
    private final Random random = new Random();
    private CommandDispatcher<SharedSuggestionProvider> commands = new CommandDispatcher();
    private final RecipeManager recipeManager = new RecipeManager();
    private final UUID id = UUID.randomUUID();
+   private Set<ResourceKey<Level>> levels;
+   private RegistryAccess registryAccess = RegistryAccess.builtin();
 
    public ClientPacketListener(Minecraft var1, Screen var2, Connection var3, GameProfile var4) {
       this.minecraft = var1;
       this.callbackScreen = var2;
       this.connection = var3;
@@ -335,12 +345,30 @@
    }
 
    public void handleLogin(ClientboundLoginPacket var1) {
       PacketUtils.ensureRunningOnSameThread(var1, this, (BlockableEventLoop)this.minecraft);
       this.minecraft.gameMode = new MultiPlayerGameMode(this.minecraft, this);
+      if (!this.connection.isMemoryConnection()) {
+         BlockTags.resetToEmpty();
+         ItemTags.resetToEmpty();
+         FluidTags.resetToEmpty();
+         EntityTypeTags.resetToEmpty();
+      }
+
+      ArrayList var2 = Lists.newArrayList(var1.levels());
+      Collections.shuffle(var2);
+      this.levels = Sets.newLinkedHashSet(var2);
+      this.registryAccess = var1.registryAccess();
+      ResourceKey var3 = var1.getDimensionType();
+      ResourceKey var4 = var1.getDimension();
+      DimensionType var5 = (DimensionType)this.registryAccess.dimensionTypes().get(var3);
       this.serverChunkRadius = var1.getChunkRadius();
-      this.level = new ClientLevel(this, new LevelSettings(var1.getSeed(), var1.getGameType(), false, var1.isHardcore(), var1.getLevelType()), var1.getDimension(), this.serverChunkRadius, this.minecraft.getProfiler(), this.minecraft.levelRenderer);
+      boolean var6 = var1.isDebug();
+      boolean var7 = var1.isFlat();
+      ClientLevel.ClientLevelData var8 = new ClientLevel.ClientLevelData(Difficulty.NORMAL, var1.isHardcore(), var7);
+      this.levelData = var8;
+      this.level = new ClientLevel(this, var8, var4, var3, var5, this.serverChunkRadius, this.minecraft::getProfiler, this.minecraft.levelRenderer, var6, var1.getSeed());
       this.minecraft.setLevel(this.level);
       if (this.minecraft.player == null) {
          this.minecraft.player = this.minecraft.gameMode.createPlayer(this.level, new StatsCounter(), new ClientRecipeBook(this.level.getRecipeManager()));
          this.minecraft.player.yRot = -180.0F;
          if (this.minecraft.getSingleplayerServer() != null) {
@@ -348,21 +376,21 @@
          }
       }
 
       this.minecraft.debugRenderer.clear();
       this.minecraft.player.resetPos();
-      int var2 = var1.getPlayerId();
-      this.level.addPlayer(var2, this.minecraft.player);
+      int var9 = var1.getPlayerId();
+      this.level.addPlayer(var9, this.minecraft.player);
       this.minecraft.player.input = new KeyboardInput(this.minecraft.options);
       this.minecraft.gameMode.adjustPlayer(this.minecraft.player);
       this.minecraft.cameraEntity = this.minecraft.player;
-      this.minecraft.player.dimension = var1.getDimension();
       this.minecraft.setScreen(new ReceivingLevelScreen());
-      this.minecraft.player.setId(var2);
+      this.minecraft.player.setId(var9);
       this.minecraft.player.setReducedDebugInfo(var1.isReducedDebugInfo());
       this.minecraft.player.setShowDeathScreen(var1.shouldShowDeathScreen());
       this.minecraft.gameMode.setLocalMode(var1.getGameType());
+      this.minecraft.gameMode.setPreviousLocalMode(var1.getPreviousGameType());
       this.minecraft.options.broadcastOptions();
       this.connection.send(new ServerboundCustomPayloadPacket(ServerboundCustomPayloadPacket.BRAND, (new FriendlyByteBuf(Unpooled.buffer())).writeUtf(ClientBrandRetriever.getClientModName())));
       this.minecraft.getGame().onStartGameSession();
    }
 
@@ -458,18 +486,21 @@
             var8 = new ItemEntity(this.level, var2, var4, var6);
          } else if (var9 == EntityType.FALLING_BLOCK) {
             var8 = new FallingBlockEntity(this.level, var2, var4, var6, Block.stateById(var1.getData()));
          } else if (var9 == EntityType.AREA_EFFECT_CLOUD) {
             var8 = new AreaEffectCloud(this.level, var2, var4, var6);
+         } else if (var9 == EntityType.LIGHTNING_BOLT) {
+            var8 = new LightningBolt(EntityType.LIGHTNING_BOLT, this.level);
          } else {
             var8 = null;
          }
       }
 
       if (var8 != null) {
          int var11 = var1.getId();
          ((Entity)var8).setPacketCoordinates(var2, var4, var6);
+         ((Entity)var8).moveTo(var2, var4, var6);
          ((Entity)var8).xRot = (float)(var1.getxRot() * 360) / 256.0F;
          ((Entity)var8).yRot = (float)(var1.getyRot() * 360) / 256.0F;
          ((Entity)var8).setId(var11);
          ((Entity)var8).setUUID(var1.getUUID());
          this.level.putNonPlayerEntity(var11, (Entity)var8);
@@ -491,26 +522,10 @@
       var8.xRot = 0.0F;
       var8.setId(var1.getId());
       this.level.putNonPlayerEntity(var1.getId(), var8);
    }
 
-   public void handleAddGlobalEntity(ClientboundAddGlobalEntityPacket var1) {
-      PacketUtils.ensureRunningOnSameThread(var1, this, (BlockableEventLoop)this.minecraft);
-      double var2 = var1.getX();
-      double var4 = var1.getY();
-      double var6 = var1.getZ();
-      if (var1.getType() == 1) {
-         LightningBolt var8 = new LightningBolt(this.level, var2, var4, var6, false);
-         var8.setPacketCoordinates(var2, var4, var6);
-         var8.yRot = 0.0F;
-         var8.xRot = 0.0F;
-         var8.setId(var1.getId());
-         this.level.addLightning(var8);
-      }
-
-   }
-
    public void handleAddPainting(ClientboundAddPaintingPacket var1) {
       PacketUtils.ensureRunningOnSameThread(var1, this, (BlockableEventLoop)this.minecraft);
       Painting var2 = new Painting(this.level, var1.getPos(), var1.getDirection(), var1.getMotive());
       var2.setId(var1.getId());
       var2.setUUID(var1.getUUID());
@@ -565,11 +580,11 @@
                var2.lerpTo(var2.getX(), var2.getY(), var2.getZ(), var9, var10, 3, true);
             } else {
                var2.lerpTo(var3, var5, var7, var9, var10, 3, true);
             }
 
-            var2.onGround = var1.isOnGround();
+            var2.setOnGround(var1.isOnGround());
          }
 
       }
    }
 
@@ -599,11 +614,11 @@
                float var6 = (float)(var1.getyRot() * 360) / 256.0F;
                var4 = (float)(var1.getxRot() * 360) / 256.0F;
                var2.lerpTo(var2.getX(), var2.getY(), var2.getZ(), var6, var4, 3, false);
             }
 
-            var2.onGround = var1.isOnGround();
+            var2.setOnGround(var1.isOnGround());
          }
 
       }
    }
 
@@ -667,10 +682,14 @@
          var15 = 0.0D;
          var17 = var1.getZ();
          var2.zOld = var17;
       }
 
+      if (var2.tickCount > 0 && var2.getVehicle() != null) {
+         var2.removeVehicle();
+      }
+
       var2.setPosRaw(var9, var13, var17);
       var2.xo = var9;
       var2.yo = var13;
       var2.zo = var17;
       var2.setDeltaMovement(var7, var11, var15);
@@ -708,30 +727,49 @@
 
    public void handleLevelChunk(ClientboundLevelChunkPacket var1) {
       PacketUtils.ensureRunningOnSameThread(var1, this, (BlockableEventLoop)this.minecraft);
       int var2 = var1.getX();
       int var3 = var1.getZ();
-      LevelChunk var4 = this.level.getChunkSource().replaceWithPacketData(var2, var3, var1.getBiomes(), var1.getReadBuffer(), var1.getHeightmaps(), var1.getAvailableSections());
+      LevelChunk var4 = this.level.getChunkSource().replaceWithPacketData(var2, var3, var1.getBiomes(), var1.getReadBuffer(), var1.getHeightmaps(), var1.getAvailableSections(), var1.isFullChunk());
       if (var4 != null && var1.isFullChunk()) {
          this.level.reAddEntitiesToChunk(var4);
       }
 
-      for(int var5 = 0; var5 < 16; ++var5) {
+      int var5;
+      for(var5 = 0; var5 < 16; ++var5) {
          this.level.setSectionDirtyWithNeighbors(var2, var5, var3);
       }
 
       Iterator var9 = var1.getBlockEntitiesTags().iterator();
 
       while(var9.hasNext()) {
          CompoundTag var6 = (CompoundTag)var9.next();
          BlockPos var7 = new BlockPos(var6.getInt("x"), var6.getInt("y"), var6.getInt("z"));
          BlockEntity var8 = this.level.getBlockEntity(var7);
          if (var8 != null) {
-            var8.load(var6);
+            var8.load(this.level.getBlockState(var7), var6);
          }
       }
 
+      if (!var1.forgetOldData()) {
+         this.level.getLightEngine().enableLightSources(var4.getPos(), false);
+         var5 = var1.getAvailableSections();
+
+         for(int var10 = 0; var10 < 16; ++var10) {
+            if ((var5 & 1 << var10) != 0) {
+               this.level.getLightEngine().queueSectionData(LightLayer.BLOCK, SectionPos.of(var4.getPos(), var10), new DataLayer(), false);
+               this.level.getLightEngine().queueSectionData(LightLayer.SKY, SectionPos.of(var4.getPos(), var10), new DataLayer(), false);
+            }
+         }
+
+         this.level.getLightEngine().runUpdates(Integer.MAX_VALUE, true, true);
+         this.level.getLightEngine().enableLightSources(var4.getPos(), true);
+         var4.getLights().forEach((var2x) -> {
+            this.level.getLightEngine().onBlockEmissionIncrease(var2x, var4.getLightEmission(var2x));
+         });
+      }
+
    }
 
    public void handleForgetLevelChunk(ClientboundForgetLevelChunkPacket var1) {
       PacketUtils.ensureRunningOnSameThread(var1, this, (BlockableEventLoop)this.minecraft);
       int var2 = var1.getX();
@@ -758,12 +796,12 @@
    }
 
    public void onDisconnect(Component var1) {
       this.minecraft.clearLevel();
       if (this.callbackScreen != null) {
-         if (this.callbackScreen instanceof RealmsScreenProxy) {
-            this.minecraft.setScreen((new DisconnectedRealmsScreen(((RealmsScreenProxy)this.callbackScreen).getScreen(), "disconnect.lost", var1)).getProxy());
+         if (this.callbackScreen instanceof RealmsScreen) {
+            this.minecraft.setScreen(new DisconnectedRealmsScreen(this.callbackScreen, "disconnect.lost", var1));
          } else {
             this.minecraft.setScreen(new DisconnectedScreen(this.callbackScreen, "disconnect.lost", var1));
          }
       } else {
          this.minecraft.setScreen(new DisconnectedScreen(new JoinMultiplayerScreen(new TitleScreen()), "disconnect.lost", var1));
@@ -788,23 +826,28 @@
             this.level.playLocalSound(var2.getX(), var2.getY(), var2.getZ(), SoundEvents.EXPERIENCE_ORB_PICKUP, SoundSource.PLAYERS, 0.1F, (this.random.nextFloat() - this.random.nextFloat()) * 0.35F + 0.9F, false);
          } else {
             this.level.playLocalSound(var2.getX(), var2.getY(), var2.getZ(), SoundEvents.ITEM_PICKUP, SoundSource.PLAYERS, 0.2F, (this.random.nextFloat() - this.random.nextFloat()) * 1.4F + 2.0F, false);
          }
 
+         this.minecraft.particleEngine.add(new ItemPickupParticle(this.minecraft.getEntityRenderDispatcher(), this.minecraft.renderBuffers(), this.level, var2, (Entity)var3));
          if (var2 instanceof ItemEntity) {
-            ((ItemEntity)var2).getItem().setCount(var1.getAmount());
+            ItemEntity var4 = (ItemEntity)var2;
+            ItemStack var5 = var4.getItem();
+            var5.shrink(var1.getAmount());
+            if (var5.isEmpty()) {
+               this.level.removeEntity(var1.getItemId());
+            }
+         } else {
+            this.level.removeEntity(var1.getItemId());
          }
-
-         this.minecraft.particleEngine.add(new ItemPickupParticle(this.minecraft.getEntityRenderDispatcher(), this.minecraft.renderBuffers(), this.level, var2, (Entity)var3));
-         this.level.removeEntity(var1.getItemId());
       }
 
    }
 
    public void handleChat(ClientboundChatPacket var1) {
       PacketUtils.ensureRunningOnSameThread(var1, this, (BlockableEventLoop)this.minecraft);
-      this.minecraft.gui.handleChat(var1.getType(), var1.getMessage());
+      this.minecraft.gui.handleChat(var1.getType(), var1.getMessage(), var1.getSender());
    }
 
    public void handleAnimate(ClientboundAnimatePacket var1) {
       PacketUtils.ensureRunningOnSameThread(var1, this, (BlockableEventLoop)this.minecraft);
       Entity var2 = this.level.getEntity(var1.getId());
@@ -862,11 +905,11 @@
                var14 = new BeeAggressiveSoundInstance((Bee)var10);
             } else {
                var14 = new BeeFlyingSoundInstance((Bee)var10);
             }
 
-            this.minecraft.getSoundManager().play((SoundInstance)var14);
+            this.minecraft.getSoundManager().queueTickingSound((TickableSoundInstance)var14);
          }
       } else {
          LOGGER.warn("Skipping Entity with id {}", var1.getType());
       }
 
@@ -876,14 +919,13 @@
       PacketUtils.ensureRunningOnSameThread(var1, this, (BlockableEventLoop)this.minecraft);
       this.minecraft.level.setGameTime(var1.getGameTime());
       this.minecraft.level.setDayTime(var1.getDayTime());
    }
 
-   public void handleSetSpawn(ClientboundSetSpawnPositionPacket var1) {
+   public void handleSetSpawn(ClientboundSetDefaultSpawnPositionPacket var1) {
       PacketUtils.ensureRunningOnSameThread(var1, this, (BlockableEventLoop)this.minecraft);
-      this.minecraft.player.setRespawnPosition(var1.getPos(), true, false);
-      this.minecraft.level.getLevelData().setSpawn(var1.getPos());
+      this.minecraft.level.setDefaultSpawnPos(var1.getPos());
    }
 
    public void handleSetEntityPassengersPacket(ClientboundSetPassengersPacket var1) {
       PacketUtils.ensureRunningOnSameThread(var1, this, (BlockableEventLoop)this.minecraft);
       Entity var2 = this.level.getEntity(var1.getVehicle());
@@ -899,11 +941,11 @@
             int var7 = var4[var6];
             Entity var8 = this.level.getEntity(var7);
             if (var8 != null) {
                var8.startRiding(var2, true);
                if (var8 == this.minecraft.player && !var3) {
-                  this.minecraft.gui.setOverlayMessage(I18n.get("mount.onboard", this.minecraft.options.keyShift.getTranslatedKeyMessage()), false);
+                  this.minecraft.gui.setOverlayMessage(new TranslatableComponent("mount.onboard", new Object[]{this.minecraft.options.keyShift.getTranslatedKeyMessage()}), false);
                }
             }
          }
 
       }
@@ -965,46 +1007,58 @@
       this.minecraft.player.setExperienceValues(var1.getExperienceProgress(), var1.getTotalExperience(), var1.getExperienceLevel());
    }
 
    public void handleRespawn(ClientboundRespawnPacket var1) {
       PacketUtils.ensureRunningOnSameThread(var1, this, (BlockableEventLoop)this.minecraft);
-      DimensionType var2 = var1.getDimension();
-      LocalPlayer var3 = this.minecraft.player;
-      int var4 = var3.getId();
-      if (var2 != var3.dimension) {
-         this.started = false;
-         Scoreboard var5 = this.level.getScoreboard();
-         this.level = new ClientLevel(this, new LevelSettings(var1.getSeed(), var1.getPlayerGameType(), false, this.minecraft.level.getLevelData().isHardcore(), var1.getLevelType()), var1.getDimension(), this.serverChunkRadius, this.minecraft.getProfiler(), this.minecraft.levelRenderer);
-         this.level.setScoreboard(var5);
+      ResourceKey var2 = var1.getDimensionType();
+      ResourceKey var3 = var1.getDimension();
+      DimensionType var4 = (DimensionType)this.registryAccess.dimensionTypes().get(var2);
+      LocalPlayer var5 = this.minecraft.player;
+      int var6 = var5.getId();
+      this.started = false;
+      if (var3 != var5.level.dimension()) {
+         Scoreboard var7 = this.level.getScoreboard();
+         boolean var8 = var1.isDebug();
+         boolean var9 = var1.isFlat();
+         ClientLevel.ClientLevelData var10 = new ClientLevel.ClientLevelData(this.levelData.getDifficulty(), this.levelData.isHardcore(), var9);
+         this.levelData = var10;
+         this.level = new ClientLevel(this, var10, var3, var2, var4, this.serverChunkRadius, this.minecraft::getProfiler, this.minecraft.levelRenderer, var8, var1.getSeed());
+         this.level.setScoreboard(var7);
          this.minecraft.setLevel(this.level);
          this.minecraft.setScreen(new ReceivingLevelScreen());
       }
 
-      this.level.validateSpawn();
       this.level.removeAllPendingEntityRemovals();
-      String var7 = var3.getServerBrand();
+      String var11 = var5.getServerBrand();
       this.minecraft.cameraEntity = null;
-      LocalPlayer var6 = this.minecraft.gameMode.createPlayer(this.level, var3.getStats(), var3.getRecipeBook());
-      var6.setId(var4);
-      var6.dimension = var2;
-      this.minecraft.player = var6;
-      this.minecraft.cameraEntity = var6;
-      var6.getEntityData().assignValues(var3.getEntityData().getAll());
-      var6.getAttributes().assignValues(var3.getAttributes());
-      var6.resetPos();
-      var6.setServerBrand(var7);
-      this.level.addPlayer(var4, var6);
-      var6.yRot = -180.0F;
-      var6.input = new KeyboardInput(this.minecraft.options);
-      this.minecraft.gameMode.adjustPlayer(var6);
-      var6.setReducedDebugInfo(var3.isReducedDebugInfo());
-      var6.setShowDeathScreen(var3.shouldShowDeathScreen());
+      LocalPlayer var12 = this.minecraft.gameMode.createPlayer(this.level, var5.getStats(), var5.getRecipeBook(), var5.isShiftKeyDown(), var5.isSprinting());
+      var12.setId(var6);
+      this.minecraft.player = var12;
+      if (var3 != var5.level.dimension()) {
+         this.minecraft.getMusicManager().stopPlaying();
+      }
+
+      this.minecraft.cameraEntity = var12;
+      var12.getEntityData().assignValues(var5.getEntityData().getAll());
+      if (var1.shouldKeepAllPlayerData()) {
+         var12.getAttributes().assignValues(var5.getAttributes());
+      }
+
+      var12.resetPos();
+      var12.setServerBrand(var11);
+      this.level.addPlayer(var6, var12);
+      var12.yRot = -180.0F;
+      var12.input = new KeyboardInput(this.minecraft.options);
+      this.minecraft.gameMode.adjustPlayer(var12);
+      var12.setReducedDebugInfo(var5.isReducedDebugInfo());
+      var12.setShowDeathScreen(var5.shouldShowDeathScreen());
       if (this.minecraft.screen instanceof DeathScreen) {
          this.minecraft.setScreen((Screen)null);
       }
 
       this.minecraft.gameMode.setLocalMode(var1.getPlayerGameType());
+      this.minecraft.gameMode.setPreviousLocalMode(var1.getPreviousPlayerGameType());
    }
 
    public void handleExplosion(ClientboundExplodePacket var1) {
       PacketUtils.ensureRunningOnSameThread(var1, this, (BlockableEventLoop)this.minecraft);
       Explosion var2 = new Explosion(this.minecraft.level, (Entity)null, var1.getX(), var1.getY(), var1.getZ(), var1.getPower(), var1.getToBlow());
@@ -1104,21 +1158,20 @@
       this.minecraft.player.openTextEdit((SignBlockEntity)var2);
    }
 
    public void handleBlockEntityData(ClientboundBlockEntityDataPacket var1) {
       PacketUtils.ensureRunningOnSameThread(var1, this, (BlockableEventLoop)this.minecraft);
-      if (this.minecraft.level.hasChunkAt(var1.getPos())) {
-         BlockEntity var2 = this.minecraft.level.getBlockEntity(var1.getPos());
-         int var3 = var1.getType();
-         boolean var4 = var3 == 2 && var2 instanceof CommandBlockEntity;
-         if (var3 == 1 && var2 instanceof SpawnerBlockEntity || var4 || var3 == 3 && var2 instanceof BeaconBlockEntity || var3 == 4 && var2 instanceof SkullBlockEntity || var3 == 6 && var2 instanceof BannerBlockEntity || var3 == 7 && var2 instanceof StructureBlockEntity || var3 == 8 && var2 instanceof TheEndGatewayBlockEntity || var3 == 9 && var2 instanceof SignBlockEntity || var3 == 11 && var2 instanceof BedBlockEntity || var3 == 5 && var2 instanceof ConduitBlockEntity || var3 == 12 && var2 instanceof JigsawBlockEntity || var3 == 13 && var2 instanceof CampfireBlockEntity || var3 == 14 && var2 instanceof BeehiveBlockEntity) {
-            var2.load(var1.getTag());
-         }
+      BlockPos var2 = var1.getPos();
+      BlockEntity var3 = this.minecraft.level.getBlockEntity(var2);
+      int var4 = var1.getType();
+      boolean var5 = var4 == 2 && var3 instanceof CommandBlockEntity;
+      if (var4 == 1 && var3 instanceof SpawnerBlockEntity || var5 || var4 == 3 && var3 instanceof BeaconBlockEntity || var4 == 4 && var3 instanceof SkullBlockEntity || var4 == 6 && var3 instanceof BannerBlockEntity || var4 == 7 && var3 instanceof StructureBlockEntity || var4 == 8 && var3 instanceof TheEndGatewayBlockEntity || var4 == 9 && var3 instanceof SignBlockEntity || var4 == 11 && var3 instanceof BedBlockEntity || var4 == 5 && var3 instanceof ConduitBlockEntity || var4 == 12 && var3 instanceof JigsawBlockEntity || var4 == 13 && var3 instanceof CampfireBlockEntity || var4 == 14 && var3 instanceof BeehiveBlockEntity) {
+         var3.load(this.minecraft.level.getBlockState(var2), var1.getTag());
+      }
 
-         if (var4 && this.minecraft.screen instanceof CommandBlockEditScreen) {
-            ((CommandBlockEditScreen)this.minecraft.screen).updateGui();
-         }
+      if (var5 && this.minecraft.screen instanceof CommandBlockEditScreen) {
+         ((CommandBlockEditScreen)this.minecraft.screen).updateGui();
       }
 
    }
 
    public void handleContainerSetData(ClientboundContainerSetDataPacket var1) {
@@ -1128,15 +1181,17 @@
          var2.containerMenu.setData(var1.getId(), var1.getValue());
       }
 
    }
 
-   public void handleSetEquippedItem(ClientboundSetEquippedItemPacket var1) {
+   public void handleSetEquipment(ClientboundSetEquipmentPacket var1) {
       PacketUtils.ensureRunningOnSameThread(var1, this, (BlockableEventLoop)this.minecraft);
       Entity var2 = this.level.getEntity(var1.getEntity());
       if (var2 != null) {
-         var2.setItemSlot(var1.getSlot(), var1.getItem());
+         var1.getSlots().forEach((var1x) -> {
+            var2.setItemSlot((EquipmentSlot)var1x.getFirst(), (ItemStack)var1x.getSecond());
+         });
       }
 
    }
 
    public void handleContainerClose(ClientboundContainerClosePacket var1) {
@@ -1155,35 +1210,33 @@
    }
 
    public void handleGameEvent(ClientboundGameEventPacket var1) {
       PacketUtils.ensureRunningOnSameThread(var1, this, (BlockableEventLoop)this.minecraft);
       LocalPlayer var2 = this.minecraft.player;
-      int var3 = var1.getEvent();
+      ClientboundGameEventPacket.Type var3 = var1.getEvent();
       float var4 = var1.getParam();
       int var5 = Mth.floor(var4 + 0.5F);
-      if (var3 >= 0 && var3 < ClientboundGameEventPacket.EVENT_LANGUAGE_ID.length && ClientboundGameEventPacket.EVENT_LANGUAGE_ID[var3] != null) {
-         var2.displayClientMessage(new TranslatableComponent(ClientboundGameEventPacket.EVENT_LANGUAGE_ID[var3], new Object[0]), false);
-      }
-
-      if (var3 == 1) {
+      if (var3 == ClientboundGameEventPacket.NO_RESPAWN_BLOCK_AVAILABLE) {
+         var2.displayClientMessage(new TranslatableComponent("block.minecraft.spawn.not_valid"), false);
+      } else if (var3 == ClientboundGameEventPacket.START_RAINING) {
          this.level.getLevelData().setRaining(true);
          this.level.setRainLevel(0.0F);
-      } else if (var3 == 2) {
+      } else if (var3 == ClientboundGameEventPacket.STOP_RAINING) {
          this.level.getLevelData().setRaining(false);
          this.level.setRainLevel(1.0F);
-      } else if (var3 == 3) {
+      } else if (var3 == ClientboundGameEventPacket.CHANGE_GAME_MODE) {
          this.minecraft.gameMode.setLocalMode(GameType.byId(var5));
-      } else if (var3 == 4) {
+      } else if (var3 == ClientboundGameEventPacket.WIN_GAME) {
          if (var5 == 0) {
             this.minecraft.player.connection.send((Packet)(new ServerboundClientCommandPacket(ServerboundClientCommandPacket.Action.PERFORM_RESPAWN)));
             this.minecraft.setScreen(new ReceivingLevelScreen());
          } else if (var5 == 1) {
             this.minecraft.setScreen(new WinScreen(true, () -> {
                this.minecraft.player.connection.send((Packet)(new ServerboundClientCommandPacket(ServerboundClientCommandPacket.Action.PERFORM_RESPAWN)));
             }));
          }
-      } else if (var3 == 5) {
+      } else if (var3 == ClientboundGameEventPacket.DEMO_EVENT) {
          Options var6 = this.minecraft.options;
          if (var4 == 0.0F) {
             this.minecraft.setScreen(new DemoIntroScreen());
          } else if (var4 == 101.0F) {
             this.minecraft.gui.getChat().addMessage(new TranslatableComponent("demo.help.movement", new Object[]{var6.keyUp.getTranslatedKeyMessage(), var6.keyLeft.getTranslatedKeyMessage(), var6.keyDown.getTranslatedKeyMessage(), var6.keyRight.getTranslatedKeyMessage()}));
@@ -1192,22 +1245,24 @@
          } else if (var4 == 103.0F) {
             this.minecraft.gui.getChat().addMessage(new TranslatableComponent("demo.help.inventory", new Object[]{var6.keyInventory.getTranslatedKeyMessage()}));
          } else if (var4 == 104.0F) {
             this.minecraft.gui.getChat().addMessage(new TranslatableComponent("demo.day.6", new Object[]{var6.keyScreenshot.getTranslatedKeyMessage()}));
          }
-      } else if (var3 == 6) {
+      } else if (var3 == ClientboundGameEventPacket.ARROW_HIT_PLAYER) {
          this.level.playSound(var2, var2.getX(), var2.getEyeY(), var2.getZ(), SoundEvents.ARROW_HIT_PLAYER, SoundSource.PLAYERS, 0.18F, 0.45F);
-      } else if (var3 == 7) {
+      } else if (var3 == ClientboundGameEventPacket.RAIN_LEVEL_CHANGE) {
          this.level.setRainLevel(var4);
-      } else if (var3 == 8) {
+      } else if (var3 == ClientboundGameEventPacket.THUNDER_LEVEL_CHANGE) {
          this.level.setThunderLevel(var4);
-      } else if (var3 == 9) {
+      } else if (var3 == ClientboundGameEventPacket.PUFFER_FISH_STING) {
          this.level.playSound(var2, var2.getX(), var2.getY(), var2.getZ(), SoundEvents.PUFFER_FISH_STING, SoundSource.NEUTRAL, 1.0F, 1.0F);
-      } else if (var3 == 10) {
+      } else if (var3 == ClientboundGameEventPacket.GUARDIAN_ELDER_EFFECT) {
          this.level.addParticle(ParticleTypes.ELDER_GUARDIAN, var2.getX(), var2.getY(), var2.getZ(), 0.0D, 0.0D, 0.0D);
-         this.level.playSound(var2, var2.getX(), var2.getY(), var2.getZ(), SoundEvents.ELDER_GUARDIAN_CURSE, SoundSource.HOSTILE, 1.0F, 1.0F);
-      } else if (var3 == 11) {
+         if (var5 == 1) {
+            this.level.playSound(var2, var2.getX(), var2.getY(), var2.getZ(), SoundEvents.ELDER_GUARDIAN_CURSE, SoundSource.HOSTILE, 1.0F, 1.0F);
+         }
+      } else if (var3 == ClientboundGameEventPacket.IMMEDIATE_RESPAWN) {
          this.minecraft.player.setShowDeathScreen(var4 == 0.0F);
       }
 
    }
 
@@ -1389,23 +1444,20 @@
       if (var2 instanceof LivingEntity) {
          MobEffect var3 = MobEffect.byId(var1.getEffectId());
          if (var3 != null) {
             MobEffectInstance var4 = new MobEffectInstance(var3, var1.getEffectDurationTicks(), var1.getEffectAmplifier(), var1.isEffectAmbient(), var1.isEffectVisible(), var1.effectShowsIcon());
             var4.setNoCounter(var1.isSuperLongDuration());
-            ((LivingEntity)var2).addEffect(var4);
+            ((LivingEntity)var2).forceAddEffect(var4);
          }
       }
    }
 
    public void handleUpdateTags(ClientboundUpdateTagsPacket var1) {
       PacketUtils.ensureRunningOnSameThread(var1, this, (BlockableEventLoop)this.minecraft);
       this.tags = var1.getTags();
       if (!this.connection.isMemoryConnection()) {
-         BlockTags.reset(this.tags.getBlocks());
-         ItemTags.reset(this.tags.getItems());
-         FluidTags.reset(this.tags.getFluids());
-         EntityTypeTags.reset(this.tags.getEntityTypes());
+         this.tags.bindToGlobal();
       }
 
       this.minecraft.getSearchTree(SearchRegistry.CREATIVE_TAGS).refresh();
    }
 
@@ -1424,12 +1476,12 @@
 
    }
 
    public void handleChangeDifficulty(ClientboundChangeDifficultyPacket var1) {
       PacketUtils.ensureRunningOnSameThread(var1, this, (BlockableEventLoop)this.minecraft);
-      this.minecraft.level.getLevelData().setDifficulty(var1.getDifficulty());
-      this.minecraft.level.getLevelData().setDifficultyLocked(var1.isLocked());
+      this.levelData.setDifficulty(var1.getDifficulty());
+      this.levelData.setDifficultyLocked(var1.isLocked());
    }
 
    public void handleSetCamera(ClientboundSetCameraPacket var1) {
       PacketUtils.ensureRunningOnSameThread(var1, this, (BlockableEventLoop)this.minecraft);
       Entity var2 = var1.getEntity(this.level);
@@ -1445,13 +1497,13 @@
    }
 
    public void handleSetTitles(ClientboundSetTitlesPacket var1) {
       PacketUtils.ensureRunningOnSameThread(var1, this, (BlockableEventLoop)this.minecraft);
       ClientboundSetTitlesPacket.Type var2 = var1.getType();
-      String var3 = null;
-      String var4 = null;
-      String var5 = var1.getText() != null ? var1.getText().getColoredString() : "";
+      Component var3 = null;
+      Component var4 = null;
+      Component var5 = var1.getText() != null ? var1.getText() : TextComponent.EMPTY;
       switch(var2) {
       case TITLE:
          var3 = var5;
          break;
       case SUBTITLE:
@@ -1459,21 +1511,21 @@
          break;
       case ACTIONBAR:
          this.minecraft.gui.setOverlayMessage(var5, false);
          return;
       case RESET:
-         this.minecraft.gui.setTitles("", "", -1, -1, -1);
+         this.minecraft.gui.setTitles((Component)null, (Component)null, -1, -1, -1);
          this.minecraft.gui.resetTitleTimes();
          return;
       }
 
       this.minecraft.gui.setTitles(var3, var4, var1.getFadeInTime(), var1.getStayTime(), var1.getFadeOutTime());
    }
 
    public void handleTabListCustomisation(ClientboundTabListPacket var1) {
-      this.minecraft.gui.getTabList().setHeader(var1.getHeader().getColoredString().isEmpty() ? null : var1.getHeader());
-      this.minecraft.gui.getTabList().setFooter(var1.getFooter().getColoredString().isEmpty() ? null : var1.getFooter());
+      this.minecraft.gui.getTabList().setHeader(var1.getHeader().getString().isEmpty() ? null : var1.getHeader());
+      this.minecraft.gui.getTabList().setFooter(var1.getFooter().getString().isEmpty() ? null : var1.getFooter());
    }
 
    public void handleRemoveMobEffect(ClientboundRemoveMobEffectPacket var1) {
       PacketUtils.ensureRunningOnSameThread(var1, this, (BlockableEventLoop)this.minecraft);
       Entity var2 = var1.getEntity(this.level);
@@ -1548,11 +1600,11 @@
       }
    }
 
    public void handleCustomSoundEvent(ClientboundCustomSoundPacket var1) {
       PacketUtils.ensureRunningOnSameThread(var1, this, (BlockableEventLoop)this.minecraft);
-      this.minecraft.getSoundManager().play(new SimpleSoundInstance(var1.getName(), var1.getSource(), var1.getVolume(), var1.getPitch(), false, 0, SoundInstance.Attenuation.LINEAR, (float)var1.getX(), (float)var1.getY(), (float)var1.getZ(), false));
+      this.minecraft.getSoundManager().play(new SimpleSoundInstance(var1.getName(), var1.getSource(), var1.getVolume(), var1.getPitch(), false, 0, SoundInstance.Attenuation.LINEAR, var1.getX(), var1.getY(), var1.getZ(), false));
    }
 
    public void handleResourcePack(ClientboundResourcePackPacket var1) {
       String var2 = var1.getUrl();
       String var3 = var1.getHash();
@@ -1562,11 +1614,11 @@
                String var9 = URLDecoder.decode(var2.substring("level://".length()), StandardCharsets.UTF_8.toString());
                File var5 = new File(this.minecraft.gameDirectory, "saves");
                File var6 = new File(var5, var9);
                if (var6.isFile()) {
                   this.send(ServerboundResourcePackPacket.Action.ACCEPTED);
-                  CompletableFuture var7 = this.minecraft.getClientPackSource().setServerPack(var6);
+                  CompletableFuture var7 = this.minecraft.getClientPackSource().setServerPack(var6, PackSource.WORLD);
                   this.downloadCallback(var7);
                   return;
                }
             } catch (UnsupportedEncodingException var8) {
             }
@@ -1599,11 +1651,11 @@
                         this.send(ServerboundResourcePackPacket.Action.DECLINED);
                      }
 
                      ServerList.saveSingleServer(var4);
                      this.minecraft.setScreen((Screen)null);
-                  }, new TranslatableComponent("multiplayer.texturePrompt.line1", new Object[0]), new TranslatableComponent("multiplayer.texturePrompt.line2", new Object[0])));
+                  }, new TranslatableComponent("multiplayer.texturePrompt.line1"), new TranslatableComponent("multiplayer.texturePrompt.line2")));
                });
             }
 
          }
       }
@@ -1689,228 +1741,238 @@
                var4 = var3.readInt();
                float var5 = var3.readFloat();
                Path var6 = Path.createFromStream(var3);
                this.minecraft.debugRenderer.pathfindingRenderer.addPath(var4, var6, var5);
             } else if (ClientboundCustomPayloadPacket.DEBUG_NEIGHBORSUPDATE_PACKET.equals(var2)) {
-               long var31 = var3.readVarLong();
-               BlockPos var36 = var3.readBlockPos();
-               ((NeighborsUpdateRenderer)this.minecraft.debugRenderer.neighborsUpdateRenderer).addUpdate(var31, var36);
+               long var34 = var3.readVarLong();
+               BlockPos var39 = var3.readBlockPos();
+               ((NeighborsUpdateRenderer)this.minecraft.debugRenderer.neighborsUpdateRenderer).addUpdate(var34, var39);
             } else {
                ArrayList var7;
                int var8;
-               BlockPos var32;
-               int var34;
+               BlockPos var35;
+               int var37;
                if (ClientboundCustomPayloadPacket.DEBUG_CAVES_PACKET.equals(var2)) {
-                  var32 = var3.readBlockPos();
-                  var34 = var3.readInt();
-                  ArrayList var37 = Lists.newArrayList();
+                  var35 = var3.readBlockPos();
+                  var37 = var3.readInt();
+                  ArrayList var40 = Lists.newArrayList();
                   var7 = Lists.newArrayList();
 
-                  for(var8 = 0; var8 < var34; ++var8) {
-                     var37.add(var3.readBlockPos());
+                  for(var8 = 0; var8 < var37; ++var8) {
+                     var40.add(var3.readBlockPos());
                      var7.add(var3.readFloat());
                   }
 
-                  this.minecraft.debugRenderer.caveRenderer.addTunnel(var32, var37, var7);
+                  this.minecraft.debugRenderer.caveRenderer.addTunnel(var35, var40, var7);
                } else {
                   int var9;
-                  int var38;
+                  int var41;
                   if (ClientboundCustomPayloadPacket.DEBUG_STRUCTURES_PACKET.equals(var2)) {
-                     DimensionType var33 = DimensionType.getById(var3.readInt());
-                     BoundingBox var35 = new BoundingBox(var3.readInt(), var3.readInt(), var3.readInt(), var3.readInt(), var3.readInt(), var3.readInt());
-                     var38 = var3.readInt();
+                     DimensionType var36 = (DimensionType)this.registryAccess.dimensionTypes().get(var3.readResourceLocation());
+                     BoundingBox var38 = new BoundingBox(var3.readInt(), var3.readInt(), var3.readInt(), var3.readInt(), var3.readInt(), var3.readInt());
+                     var41 = var3.readInt();
                      var7 = Lists.newArrayList();
-                     ArrayList var44 = Lists.newArrayList();
+                     ArrayList var47 = Lists.newArrayList();
 
-                     for(var9 = 0; var9 < var38; ++var9) {
+                     for(var9 = 0; var9 < var41; ++var9) {
                         var7.add(new BoundingBox(var3.readInt(), var3.readInt(), var3.readInt(), var3.readInt(), var3.readInt(), var3.readInt()));
-                        var44.add(var3.readBoolean());
+                        var47.add(var3.readBoolean());
                      }
 
-                     this.minecraft.debugRenderer.structureRenderer.addBoundingBox(var35, var7, var44, var33);
+                     this.minecraft.debugRenderer.structureRenderer.addBoundingBox(var38, var7, var47, var36);
                   } else if (ClientboundCustomPayloadPacket.DEBUG_WORLDGENATTEMPT_PACKET.equals(var2)) {
                      ((WorldGenAttemptRenderer)this.minecraft.debugRenderer.worldGenAttemptRenderer).addPos(var3.readBlockPos(), var3.readFloat(), var3.readFloat(), var3.readFloat(), var3.readFloat(), var3.readFloat());
                   } else if (ClientboundCustomPayloadPacket.DEBUG_VILLAGE_SECTIONS.equals(var2)) {
                      var4 = var3.readInt();
 
-                     for(var34 = 0; var34 < var4; ++var34) {
-                        this.minecraft.debugRenderer.villageDebugRenderer.setVillageSection(var3.readSectionPos());
+                     for(var37 = 0; var37 < var4; ++var37) {
+                        this.minecraft.debugRenderer.villageSectionsDebugRenderer.setVillageSection(var3.readSectionPos());
                      }
 
-                     var34 = var3.readInt();
+                     var37 = var3.readInt();
 
-                     for(var38 = 0; var38 < var34; ++var38) {
-                        this.minecraft.debugRenderer.villageDebugRenderer.setNotVillageSection(var3.readSectionPos());
+                     for(var41 = 0; var41 < var37; ++var41) {
+                        this.minecraft.debugRenderer.villageSectionsDebugRenderer.setNotVillageSection(var3.readSectionPos());
                      }
                   } else {
-                     String var39;
+                     String var42;
                      if (ClientboundCustomPayloadPacket.DEBUG_POI_ADDED_PACKET.equals(var2)) {
-                        var32 = var3.readBlockPos();
-                        var39 = var3.readUtf();
-                        var38 = var3.readInt();
-                        VillageDebugRenderer.PoiInfo var41 = new VillageDebugRenderer.PoiInfo(var32, var39, var38);
-                        this.minecraft.debugRenderer.villageDebugRenderer.addPoi(var41);
+                        var35 = var3.readBlockPos();
+                        var42 = var3.readUtf();
+                        var41 = var3.readInt();
+                        BrainDebugRenderer.PoiInfo var44 = new BrainDebugRenderer.PoiInfo(var35, var42, var41);
+                        this.minecraft.debugRenderer.brainDebugRenderer.addPoi(var44);
                      } else if (ClientboundCustomPayloadPacket.DEBUG_POI_REMOVED_PACKET.equals(var2)) {
-                        var32 = var3.readBlockPos();
-                        this.minecraft.debugRenderer.villageDebugRenderer.removePoi(var32);
+                        var35 = var3.readBlockPos();
+                        this.minecraft.debugRenderer.brainDebugRenderer.removePoi(var35);
                      } else if (ClientboundCustomPayloadPacket.DEBUG_POI_TICKET_COUNT_PACKET.equals(var2)) {
-                        var32 = var3.readBlockPos();
-                        var34 = var3.readInt();
-                        this.minecraft.debugRenderer.villageDebugRenderer.setFreeTicketCount(var32, var34);
+                        var35 = var3.readBlockPos();
+                        var37 = var3.readInt();
+                        this.minecraft.debugRenderer.brainDebugRenderer.setFreeTicketCount(var35, var37);
                      } else if (ClientboundCustomPayloadPacket.DEBUG_GOAL_SELECTOR.equals(var2)) {
-                        var32 = var3.readBlockPos();
-                        var34 = var3.readInt();
-                        var38 = var3.readInt();
+                        var35 = var3.readBlockPos();
+                        var37 = var3.readInt();
+                        var41 = var3.readInt();
                         var7 = Lists.newArrayList();
 
-                        for(var8 = 0; var8 < var38; ++var8) {
+                        for(var8 = 0; var8 < var41; ++var8) {
                            var9 = var3.readInt();
                            boolean var10 = var3.readBoolean();
                            String var11 = var3.readUtf(255);
-                           var7.add(new GoalSelectorDebugRenderer.DebugGoal(var32, var9, var11, var10));
+                           var7.add(new GoalSelectorDebugRenderer.DebugGoal(var35, var9, var11, var10));
                         }
 
-                        this.minecraft.debugRenderer.goalSelectorRenderer.addGoalSelector(var34, var7);
+                        this.minecraft.debugRenderer.goalSelectorRenderer.addGoalSelector(var37, var7);
                      } else if (ClientboundCustomPayloadPacket.DEBUG_RAIDS.equals(var2)) {
                         var4 = var3.readInt();
-                        ArrayList var42 = Lists.newArrayList();
+                        ArrayList var45 = Lists.newArrayList();
 
-                        for(var38 = 0; var38 < var4; ++var38) {
-                           var42.add(var3.readBlockPos());
+                        for(var41 = 0; var41 < var4; ++var41) {
+                           var45.add(var3.readBlockPos());
                         }
 
-                        this.minecraft.debugRenderer.raidDebugRenderer.setRaidCenters(var42);
+                        this.minecraft.debugRenderer.raidDebugRenderer.setRaidCenters(var45);
                      } else {
                         int var12;
-                        int var21;
-                        int var22;
-                        String var23;
-                        double var40;
-                        double var45;
-                        double var46;
-                        PositionImpl var48;
-                        UUID var51;
-                        int var60;
+                        int var23;
+                        double var43;
+                        double var48;
+                        double var49;
+                        PositionImpl var51;
+                        UUID var54;
                         if (ClientboundCustomPayloadPacket.DEBUG_BRAIN.equals(var2)) {
-                           var40 = var3.readDouble();
-                           var45 = var3.readDouble();
-                           var46 = var3.readDouble();
-                           var48 = new PositionImpl(var40, var45, var46);
-                           var51 = var3.readUUID();
+                           var43 = var3.readDouble();
+                           var48 = var3.readDouble();
+                           var49 = var3.readDouble();
+                           var51 = new PositionImpl(var43, var48, var49);
+                           var54 = var3.readUUID();
                            var12 = var3.readInt();
                            String var13 = var3.readUtf();
                            String var14 = var3.readUtf();
                            int var15 = var3.readInt();
-                           String var16 = var3.readUtf();
-                           boolean var17 = var3.readBoolean();
-                           Path var18;
-                           if (var17) {
-                              var18 = Path.createFromStream(var3);
+                           float var16 = var3.readFloat();
+                           float var17 = var3.readFloat();
+                           String var18 = var3.readUtf();
+                           boolean var19 = var3.readBoolean();
+                           Path var20;
+                           if (var19) {
+                              var20 = Path.createFromStream(var3);
                            } else {
-                              var18 = null;
+                              var20 = null;
                            }
 
-                           boolean var19 = var3.readBoolean();
-                           VillageDebugRenderer.BrainDump var20 = new VillageDebugRenderer.BrainDump(var51, var12, var13, var14, var15, var48, var16, var18, var19);
-                           var21 = var3.readInt();
+                           boolean var21 = var3.readBoolean();
+                           BrainDebugRenderer.BrainDump var22 = new BrainDebugRenderer.BrainDump(var54, var12, var13, var14, var15, var16, var17, var51, var18, var20, var21);
+                           var23 = var3.readInt();
 
-                           for(var22 = 0; var22 < var21; ++var22) {
-                              var23 = var3.readUtf();
-                              var20.activities.add(var23);
+                           int var24;
+                           for(var24 = 0; var24 < var23; ++var24) {
+                              String var25 = var3.readUtf();
+                              var22.activities.add(var25);
                            }
 
-                           var22 = var3.readInt();
+                           var24 = var3.readInt();
 
-                           for(var60 = 0; var60 < var22; ++var60) {
-                              String var24 = var3.readUtf();
-                              var20.behaviors.add(var24);
+                           int var67;
+                           for(var67 = 0; var67 < var24; ++var67) {
+                              String var26 = var3.readUtf();
+                              var22.behaviors.add(var26);
                            }
 
-                           var60 = var3.readInt();
+                           var67 = var3.readInt();
 
-                           int var61;
-                           for(var61 = 0; var61 < var60; ++var61) {
-                              String var25 = var3.readUtf();
-                              var20.memories.add(var25);
+                           int var68;
+                           for(var68 = 0; var68 < var67; ++var68) {
+                              String var27 = var3.readUtf();
+                              var22.memories.add(var27);
                            }
 
-                           var61 = var3.readInt();
+                           var68 = var3.readInt();
 
-                           int var62;
-                           for(var62 = 0; var62 < var61; ++var62) {
-                              BlockPos var26 = var3.readBlockPos();
-                              var20.pois.add(var26);
+                           int var69;
+                           for(var69 = 0; var69 < var68; ++var69) {
+                              BlockPos var28 = var3.readBlockPos();
+                              var22.pois.add(var28);
                            }
 
-                           var62 = var3.readInt();
+                           var69 = var3.readInt();
 
-                           for(int var64 = 0; var64 < var62; ++var64) {
-                              String var27 = var3.readUtf();
-                              var20.gossips.add(var27);
+                           int var70;
+                           for(var70 = 0; var70 < var69; ++var70) {
+                              BlockPos var29 = var3.readBlockPos();
+                              var22.potentialPois.add(var29);
                            }
 
-                           this.minecraft.debugRenderer.villageDebugRenderer.addOrUpdateBrainDump(var20);
+                           var70 = var3.readInt();
+
+                           for(int var71 = 0; var71 < var70; ++var71) {
+                              String var30 = var3.readUtf();
+                              var22.gossips.add(var30);
+                           }
+
+                           this.minecraft.debugRenderer.brainDebugRenderer.addOrUpdateBrainDump(var22);
                         } else if (ClientboundCustomPayloadPacket.DEBUG_BEE.equals(var2)) {
-                           var40 = var3.readDouble();
-                           var45 = var3.readDouble();
-                           var46 = var3.readDouble();
-                           var48 = new PositionImpl(var40, var45, var46);
-                           var51 = var3.readUUID();
+                           var43 = var3.readDouble();
+                           var48 = var3.readDouble();
+                           var49 = var3.readDouble();
+                           var51 = new PositionImpl(var43, var48, var49);
+                           var54 = var3.readUUID();
                            var12 = var3.readInt();
-                           boolean var52 = var3.readBoolean();
-                           BlockPos var53 = null;
-                           if (var52) {
-                              var53 = var3.readBlockPos();
+                           boolean var55 = var3.readBoolean();
+                           BlockPos var56 = null;
+                           if (var55) {
+                              var56 = var3.readBlockPos();
                            }
 
-                           boolean var54 = var3.readBoolean();
-                           BlockPos var55 = null;
-                           if (var54) {
-                              var55 = var3.readBlockPos();
-                           }
-
-                           int var56 = var3.readInt();
                            boolean var57 = var3.readBoolean();
-                           Path var58 = null;
+                           BlockPos var58 = null;
                            if (var57) {
-                              var58 = Path.createFromStream(var3);
+                              var58 = var3.readBlockPos();
                            }
 
-                           BeeDebugRenderer.BeeInfo var59 = new BeeDebugRenderer.BeeInfo(var51, var12, var48, var58, var53, var55, var56);
-                           var21 = var3.readInt();
+                           int var59 = var3.readInt();
+                           boolean var60 = var3.readBoolean();
+                           Path var61 = null;
+                           if (var60) {
+                              var61 = Path.createFromStream(var3);
+                           }
 
-                           for(var22 = 0; var22 < var21; ++var22) {
-                              var23 = var3.readUtf();
-                              var59.goals.add(var23);
+                           BeeDebugRenderer.BeeInfo var62 = new BeeDebugRenderer.BeeInfo(var54, var12, var51, var61, var56, var58, var59);
+                           int var63 = var3.readInt();
+
+                           int var64;
+                           for(var64 = 0; var64 < var63; ++var64) {
+                              String var65 = var3.readUtf();
+                              var62.goals.add(var65);
                            }
 
-                           var22 = var3.readInt();
+                           var64 = var3.readInt();
 
-                           for(var60 = 0; var60 < var22; ++var60) {
-                              BlockPos var63 = var3.readBlockPos();
-                              var59.blacklistedHives.add(var63);
+                           for(var23 = 0; var23 < var64; ++var23) {
+                              BlockPos var66 = var3.readBlockPos();
+                              var62.blacklistedHives.add(var66);
                            }
 
-                           this.minecraft.debugRenderer.beeDebugRenderer.addOrUpdateBeeInfo(var59);
+                           this.minecraft.debugRenderer.beeDebugRenderer.addOrUpdateBeeInfo(var62);
                         } else {
-                           int var43;
+                           int var46;
                            if (ClientboundCustomPayloadPacket.DEBUG_HIVE.equals(var2)) {
-                              var32 = var3.readBlockPos();
-                              var39 = var3.readUtf();
-                              var38 = var3.readInt();
-                              var43 = var3.readInt();
-                              boolean var49 = var3.readBoolean();
-                              BeeDebugRenderer.HiveInfo var47 = new BeeDebugRenderer.HiveInfo(var32, var39, var38, var43, var49, this.level.getGameTime());
-                              this.minecraft.debugRenderer.beeDebugRenderer.addOrUpdateHiveInfo(var47);
+                              var35 = var3.readBlockPos();
+                              var42 = var3.readUtf();
+                              var41 = var3.readInt();
+                              var46 = var3.readInt();
+                              boolean var52 = var3.readBoolean();
+                              BeeDebugRenderer.HiveInfo var50 = new BeeDebugRenderer.HiveInfo(var35, var42, var41, var46, var52, this.level.getGameTime());
+                              this.minecraft.debugRenderer.beeDebugRenderer.addOrUpdateHiveInfo(var50);
                            } else if (ClientboundCustomPayloadPacket.DEBUG_GAME_TEST_CLEAR.equals(var2)) {
                               this.minecraft.debugRenderer.gameTestDebugRenderer.clear();
                            } else if (ClientboundCustomPayloadPacket.DEBUG_GAME_TEST_ADD_MARKER.equals(var2)) {
-                              var32 = var3.readBlockPos();
-                              var34 = var3.readInt();
-                              String var50 = var3.readUtf();
-                              var43 = var3.readInt();
-                              this.minecraft.debugRenderer.gameTestDebugRenderer.addMarker(var32, var34, var50, var43);
+                              var35 = var3.readBlockPos();
+                              var37 = var3.readInt();
+                              String var53 = var3.readUtf();
+                              var46 = var3.readInt();
+                              this.minecraft.debugRenderer.gameTestDebugRenderer.addMarker(var35, var37, var53, var46);
                            } else {
                               LOGGER.warn("Unknown custom packed identifier: {}", var2);
                            }
                         }
                      }
@@ -2060,30 +2122,33 @@
       Entity var2 = this.level.getEntity(var1.getEntityId());
       if (var2 != null) {
          if (!(var2 instanceof LivingEntity)) {
             throw new IllegalStateException("Server tried to update attributes of a non-living entity (actually: " + var2 + ")");
          } else {
-            BaseAttributeMap var3 = ((LivingEntity)var2).getAttributes();
+            AttributeMap var3 = ((LivingEntity)var2).getAttributes();
             Iterator var4 = var1.getValues().iterator();
 
-            while(var4.hasNext()) {
-               ClientboundUpdateAttributesPacket.AttributeSnapshot var5 = (ClientboundUpdateAttributesPacket.AttributeSnapshot)var4.next();
-               AttributeInstance var6 = var3.getInstance(var5.getName());
-               if (var6 == null) {
-                  var6 = var3.registerAttribute(new RangedAttribute((Attribute)null, var5.getName(), 0.0D, 2.2250738585072014E-308D, Double.MAX_VALUE));
-               }
+            while(true) {
+               while(var4.hasNext()) {
+                  ClientboundUpdateAttributesPacket.AttributeSnapshot var5 = (ClientboundUpdateAttributesPacket.AttributeSnapshot)var4.next();
+                  AttributeInstance var6 = var3.getInstance(var5.getAttribute());
+                  if (var6 == null) {
+                     LOGGER.warn("Entity {} does not have attribute {}", var2, Registry.ATTRIBUTE.getKey(var5.getAttribute()));
+                  } else {
+                     var6.setBaseValue(var5.getBase());
+                     var6.removeModifiers();
+                     Iterator var7 = var5.getModifiers().iterator();
 
-               var6.setBaseValue(var5.getBase());
-               var6.removeModifiers();
-               Iterator var7 = var5.getModifiers().iterator();
-
-               while(var7.hasNext()) {
-                  AttributeModifier var8 = (AttributeModifier)var7.next();
-                  var6.addModifier(var8);
+                     while(var7.hasNext()) {
+                        AttributeModifier var8 = (AttributeModifier)var7.next();
+                        var6.addTransientModifier(var8);
+                     }
+                  }
                }
-            }
 
+               return;
+            }
          }
       }
    }
 
    public void handlePlaceRecipe(ClientboundPlaceGhostRecipePacket var1) {
@@ -2106,15 +2171,15 @@
       int var3 = var1.getZ();
       LevelLightEngine var4 = this.level.getChunkSource().getLightEngine();
       int var5 = var1.getSkyYMask();
       int var6 = var1.getEmptySkyYMask();
       Iterator var7 = var1.getSkyUpdates().iterator();
-      this.readSectionList(var2, var3, var4, LightLayer.SKY, var5, var6, var7);
+      this.readSectionList(var2, var3, var4, LightLayer.SKY, var5, var6, var7, var1.getTrustEdges());
       int var8 = var1.getBlockYMask();
       int var9 = var1.getEmptyBlockYMask();
       Iterator var10 = var1.getBlockUpdates().iterator();
-      this.readSectionList(var2, var3, var4, LightLayer.BLOCK, var8, var9, var10);
+      this.readSectionList(var2, var3, var4, LightLayer.BLOCK, var8, var9, var10, var1.getTrustEdges());
    }
 
    public void handleMerchantOffers(ClientboundMerchantOffersPacket var1) {
       PacketUtils.ensureRunningOnSameThread(var1, this, (BlockableEventLoop)this.minecraft);
       AbstractContainerMenu var2 = this.minecraft.player.containerMenu;
@@ -2142,18 +2207,18 @@
    public void handleBlockBreakAck(ClientboundBlockBreakAckPacket var1) {
       PacketUtils.ensureRunningOnSameThread(var1, this, (BlockableEventLoop)this.minecraft);
       this.minecraft.gameMode.handleBlockBreakAck(this.level, var1.getPos(), var1.getState(), var1.action(), var1.allGood());
    }
 
-   private void readSectionList(int var1, int var2, LevelLightEngine var3, LightLayer var4, int var5, int var6, Iterator<byte[]> var7) {
-      for(int var8 = 0; var8 < 18; ++var8) {
-         int var9 = -1 + var8;
-         boolean var10 = (var5 & 1 << var8) != 0;
-         boolean var11 = (var6 & 1 << var8) != 0;
-         if (var10 || var11) {
-            var3.queueSectionData(var4, SectionPos.of(var1, var9, var2), var10 ? new DataLayer((byte[])((byte[])var7.next()).clone()) : new DataLayer());
-            this.level.setSectionDirtyWithNeighbors(var1, var9, var2);
+   private void readSectionList(int var1, int var2, LevelLightEngine var3, LightLayer var4, int var5, int var6, Iterator<byte[]> var7, boolean var8) {
+      for(int var9 = 0; var9 < 18; ++var9) {
+         int var10 = -1 + var9;
+         boolean var11 = (var5 & 1 << var9) != 0;
+         boolean var12 = (var6 & 1 << var9) != 0;
+         if (var11 || var12) {
+            var3.queueSectionData(var4, SectionPos.of(var1, var10, var2), var11 ? new DataLayer((byte[])((byte[])var7.next()).clone()) : new DataLayer(), var8);
+            this.level.setSectionDirtyWithNeighbors(var1, var10, var2);
          }
       }
 
    }
 
@@ -2211,6 +2276,14 @@
    }
 
    public UUID getId() {
       return this.id;
    }
+
+   public Set<ResourceKey<Level>> levels() {
+      return this.levels;
+   }
+
+   public RegistryAccess registryAccess() {
+      return this.registryAccess;
+   }
 }
