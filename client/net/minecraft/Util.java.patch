--- net/minecraft/Util.java
+++ net/minecraft/Util.java
@@ -2,58 +2,70 @@
 
 import com.google.common.collect.Iterators;
 import com.google.common.collect.Lists;
 import com.google.common.util.concurrent.MoreExecutors;
 import com.mojang.datafixers.DataFixUtils;
-import com.mojang.datafixers.Dynamic;
+import com.mojang.datafixers.DSL.TypeReference;
+import com.mojang.datafixers.types.Type;
+import com.mojang.serialization.DataResult;
 import it.unimi.dsi.fastutil.Hash.Strategy;
 import java.io.File;
 import java.io.IOException;
 import java.lang.management.ManagementFactory;
 import java.lang.management.RuntimeMXBean;
 import java.net.MalformedURLException;
 import java.net.URI;
 import java.net.URISyntaxException;
 import java.net.URL;
+import java.nio.file.Files;
+import java.nio.file.Path;
 import java.security.AccessController;
 import java.security.PrivilegedActionException;
 import java.time.Instant;
 import java.util.ArrayList;
+import java.util.Arrays;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Locale;
 import java.util.Map;
 import java.util.Optional;
+import java.util.Random;
 import java.util.UUID;
 import java.util.Map.Entry;
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.CompletionException;
 import java.util.concurrent.Executor;
 import java.util.concurrent.ExecutorService;
+import java.util.concurrent.Executors;
 import java.util.concurrent.ForkJoinPool;
 import java.util.concurrent.ForkJoinWorkerThread;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicInteger;
 import java.util.function.Consumer;
 import java.util.function.LongSupplier;
 import java.util.function.Supplier;
 import java.util.stream.Collector;
 import java.util.stream.Collectors;
+import java.util.stream.IntStream;
 import java.util.stream.Stream;
 import javax.annotation.Nullable;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.server.Bootstrap;
 import net.minecraft.util.Mth;
+import net.minecraft.util.datafix.DataFixers;
 import net.minecraft.world.level.block.state.properties.Property;
 import org.apache.commons.io.IOUtils;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
 public class Util {
    private static final AtomicInteger WORKER_COUNT = new AtomicInteger(1);
-   private static final ExecutorService BACKGROUND_EXECUTOR = makeBackgroundExecutor();
+   private static final ExecutorService BOOTSTRAP_EXECUTOR = makeExecutor("Bootstrap");
+   private static final ExecutorService BACKGROUND_EXECUTOR = makeExecutor("Main");
+   private static final ExecutorService IO_POOL = makeIoExecutor();
    public static LongSupplier timeSource = System::nanoTime;
+   public static final UUID NIL_UUID = new UUID(0L, 0L);
    private static final Logger LOGGER = LogManager.getLogger();
 
    public static <K, V> Collector<Entry<? extends K, ? extends V>, ?, Map<K, V>> toMap() {
       return Collectors.toMap(Entry::getKey, Entry::getValue);
    }
@@ -76,78 +88,123 @@
 
    public static long getEpochMillis() {
       return Instant.now().toEpochMilli();
    }
 
-   private static ExecutorService makeBackgroundExecutor() {
-      int var0 = Mth.clamp(Runtime.getRuntime().availableProcessors() - 1, 1, 7);
-      Object var1;
-      if (var0 <= 0) {
-         var1 = MoreExecutors.newDirectExecutorService();
+   private static ExecutorService makeExecutor(String var0) {
+      int var1 = Mth.clamp(Runtime.getRuntime().availableProcessors() - 1, 1, 7);
+      Object var2;
+      if (var1 <= 0) {
+         var2 = MoreExecutors.newDirectExecutorService();
       } else {
-         var1 = new ForkJoinPool(var0, (var0x) -> {
-            ForkJoinWorkerThread var1 = new ForkJoinWorkerThread(var0x) {
+         var2 = new ForkJoinPool(var1, (var1x) -> {
+            ForkJoinWorkerThread var2 = new ForkJoinWorkerThread(var1x) {
                protected void onTermination(Throwable var1) {
                   if (var1 != null) {
                      Util.LOGGER.warn("{} died", this.getName(), var1);
                   } else {
                      Util.LOGGER.debug("{} shutdown", this.getName());
                   }
 
                   super.onTermination(var1);
                }
             };
-            var1.setName("Server-Worker-" + WORKER_COUNT.getAndIncrement());
-            return var1;
-         }, (var0x, var1x) -> {
-            pauseInIde(var1x);
-            if (var1x instanceof CompletionException) {
-               var1x = var1x.getCause();
-            }
-
-            if (var1x instanceof ReportedException) {
-               Bootstrap.realStdoutPrintln(((ReportedException)var1x).getReport().getFriendlyReport());
-               System.exit(-1);
-            }
-
-            LOGGER.error(String.format("Caught exception in thread %s", var0x), var1x);
-         }, true);
+            var2.setName("Worker-" + var0 + "-" + WORKER_COUNT.getAndIncrement());
+            return var2;
+         }, Util::onThreadException, true);
       }
 
-      return (ExecutorService)var1;
+      return (ExecutorService)var2;
    }
 
+   public static Executor bootstrapExecutor() {
+      return BOOTSTRAP_EXECUTOR;
+   }
+
    public static Executor backgroundExecutor() {
       return BACKGROUND_EXECUTOR;
    }
 
-   public static void shutdownBackgroundExecutor() {
-      BACKGROUND_EXECUTOR.shutdown();
+   public static Executor ioPool() {
+      return IO_POOL;
+   }
 
-      boolean var0;
+   public static void shutdownExecutors() {
+      shutdownExecutor(BACKGROUND_EXECUTOR);
+      shutdownExecutor(IO_POOL);
+   }
+
+   private static void shutdownExecutor(ExecutorService var0) {
+      var0.shutdown();
+
+      boolean var1;
       try {
-         var0 = BACKGROUND_EXECUTOR.awaitTermination(3L, TimeUnit.SECONDS);
-      } catch (InterruptedException var2) {
-         var0 = false;
+         var1 = var0.awaitTermination(3L, TimeUnit.SECONDS);
+      } catch (InterruptedException var3) {
+         var1 = false;
       }
 
-      if (!var0) {
-         BACKGROUND_EXECUTOR.shutdownNow();
+      if (!var1) {
+         var0.shutdownNow();
       }
 
    }
 
+   private static ExecutorService makeIoExecutor() {
+      return Executors.newCachedThreadPool((var0) -> {
+         Thread var1 = new Thread(var0);
+         var1.setName("IO-Worker-" + WORKER_COUNT.getAndIncrement());
+         var1.setUncaughtExceptionHandler(Util::onThreadException);
+         return var1;
+      });
+   }
+
    public static <T> CompletableFuture<T> failedFuture(Throwable var0) {
       CompletableFuture var1 = new CompletableFuture();
       var1.completeExceptionally(var0);
       return var1;
    }
 
    public static void throwAsRuntime(Throwable var0) {
       throw var0 instanceof RuntimeException ? (RuntimeException)var0 : new RuntimeException(var0);
    }
 
+   private static void onThreadException(Thread var0, Throwable var1) {
+      pauseInIde(var1);
+      if (var1 instanceof CompletionException) {
+         var1 = var1.getCause();
+      }
+
+      if (var1 instanceof ReportedException) {
+         Bootstrap.realStdoutPrintln(((ReportedException)var1).getReport().getFriendlyReport());
+         System.exit(-1);
+      }
+
+      LOGGER.error(String.format("Caught exception in thread %s", var0), var1);
+   }
+
+   @Nullable
+   public static Type<?> fetchChoiceType(TypeReference var0, String var1) {
+      return !SharedConstants.CHECK_DATA_FIXER_SCHEMA ? null : doFetchChoiceType(var0, var1);
+   }
+
+   @Nullable
+   private static Type<?> doFetchChoiceType(TypeReference var0, String var1) {
+      Type var2 = null;
+
+      try {
+         var2 = DataFixers.getDataFixer().getSchema(DataFixUtils.makeKey(SharedConstants.getCurrentVersion().getWorldVersion())).getChoiceType(var0, var1);
+      } catch (IllegalArgumentException var4) {
+         LOGGER.error("No data fixer registered for {}", var1);
+         if (SharedConstants.IS_RUNNING_IN_IDE) {
+            throw var4;
+         }
+      }
+
+      return var2;
+   }
+
    public static Util.OS getPlatform() {
       String var0 = System.getProperty("os.name").toLowerCase(Locale.ROOT);
       if (var0.contains("win")) {
          return Util.OS.WINDOWS;
       } else if (var0.contains("mac")) {
@@ -262,22 +319,10 @@
 
    public static Runnable name(Runnable var0, Supplier<String> var1) {
       return var0;
    }
 
-   public static Optional<UUID> readUUID(String var0, Dynamic<?> var1) {
-      return var1.get(var0 + "Most").asNumber().flatMap((var2) -> {
-         return var1.get(var0 + "Least").asNumber().map((var1x) -> {
-            return new UUID(var2.longValue(), var1x.longValue());
-         });
-      });
-   }
-
-   public static <T> Dynamic<T> writeUUID(String var0, UUID var1, Dynamic<T> var2) {
-      return var2.set(var0 + "Most", var2.createLong(var1.getMostSignificantBits())).set(var0 + "Least", var2.createLong(var1.getLeastSignificantBits()));
-   }
-
    public static <T extends Throwable> T pauseInIde(T var0) {
       if (SharedConstants.IS_RUNNING_IN_IDE) {
          LOGGER.error("Trying to throw a fatal exception, pausing in IDE", var0);
 
          while(true) {
@@ -299,10 +344,96 @@
       } else {
          return var0.getMessage() != null ? var0.getMessage() : var0.toString();
       }
    }
 
+   public static <T> T getRandom(T[] var0, Random var1) {
+      return var0[var1.nextInt(var0.length)];
+   }
+
+   public static int getRandom(int[] var0, Random var1) {
+      return var0[var1.nextInt(var0.length)];
+   }
+
+   public static void safeReplaceFile(File var0, File var1, File var2) {
+      if (var2.exists()) {
+         var2.delete();
+      }
+
+      var0.renameTo(var2);
+      if (var0.exists()) {
+         var0.delete();
+      }
+
+      var1.renameTo(var0);
+      if (var1.exists()) {
+         var1.delete();
+      }
+
+   }
+
+   public static int offsetByCodepoints(String var0, int var1, int var2) {
+      int var3 = var0.length();
+      int var4;
+      if (var2 >= 0) {
+         for(var4 = 0; var1 < var3 && var4 < var2; ++var4) {
+            if (Character.isHighSurrogate(var0.charAt(var1++)) && var1 < var3 && Character.isLowSurrogate(var0.charAt(var1))) {
+               ++var1;
+            }
+         }
+      } else {
+         for(var4 = var2; var1 > 0 && var4 < 0; ++var4) {
+            --var1;
+            if (Character.isLowSurrogate(var0.charAt(var1)) && var1 > 0 && Character.isHighSurrogate(var0.charAt(var1 - 1))) {
+               --var1;
+            }
+         }
+      }
+
+      return var1;
+   }
+
+   public static Consumer<String> prefix(String var0, Consumer<String> var1) {
+      return (var2) -> {
+         var1.accept(var0 + var2);
+      };
+   }
+
+   public static DataResult<int[]> fixedSize(IntStream var0, int var1) {
+      int[] var2 = var0.limit((long)(var1 + 1)).toArray();
+      if (var2.length != var1) {
+         String var3 = "Input is not a list of " + var1 + " ints";
+         return var2.length >= var1 ? DataResult.error(var3, Arrays.copyOf(var2, var1)) : DataResult.error(var3);
+      } else {
+         return DataResult.success(var2);
+      }
+   }
+
+   public static void startTimerHackThread() {
+      Thread var0 = new Thread("Timer hack thread") {
+         public void run() {
+            while(true) {
+               try {
+                  Thread.sleep(2147483647L);
+               } catch (InterruptedException var2) {
+                  Util.LOGGER.warn("Timer hack thread interrupted, that really should not happen");
+                  return;
+               }
+            }
+         }
+      };
+      var0.setDaemon(true);
+      var0.setUncaughtExceptionHandler(new DefaultUncaughtExceptionHandler(LOGGER));
+      var0.start();
+   }
+
+   public static void copyBetweenDirs(Path var0, Path var1, Path var2) throws IOException {
+      Path var3 = var0.relativize(var2);
+      Path var4 = var1.resolve(var3);
+      Files.copy(var2, var4);
+   }
+
    static enum IdentityStrategy implements Strategy<Object> {
       INSTANCE;
 
       private IdentityStrategy() {
       }
