--- net/minecraft/resources/RegistryFileCodec.java
+++ net/minecraft/resources/RegistryFileCodec.java
@@ -1,0 +1,41 @@
+package net.minecraft.resources;
+
+import com.mojang.datafixers.util.Pair;
+import com.mojang.serialization.Codec;
+import com.mojang.serialization.DataResult;
+import com.mojang.serialization.DynamicOps;
+import com.mojang.serialization.MapCodec;
+import java.util.function.Supplier;
+import net.minecraft.core.Registry;
+
+public final class RegistryFileCodec<E> implements Codec<Supplier<E>> {
+   private final ResourceKey<? extends Registry<E>> registryKey;
+   private final MapCodec<E> elementCodec;
+
+   public static <E> RegistryFileCodec<E> create(ResourceKey<? extends Registry<E>> var0, MapCodec<E> var1) {
+      return new RegistryFileCodec(var0, var1);
+   }
+
+   private RegistryFileCodec(ResourceKey<? extends Registry<E>> var1, MapCodec<E> var2) {
+      this.registryKey = var1;
+      this.elementCodec = var2;
+   }
+
+   public <T> DataResult<T> encode(Supplier<E> var1, DynamicOps<T> var2, T var3) {
+      return var2 instanceof RegistryWriteOps ? ((RegistryWriteOps)var2).encode(var1.get(), var3, this.registryKey, this.elementCodec) : this.elementCodec.codec().encode(var1.get(), var2, var3);
+   }
+
+   public <T> DataResult<Pair<Supplier<E>, T>> decode(DynamicOps<T> var1, T var2) {
+      return var1 instanceof RegistryReadOps ? ((RegistryReadOps)var1).decodeElement(var2, this.registryKey, this.elementCodec) : this.elementCodec.codec().decode(var1, var2).map((var0) -> {
+         return var0.mapFirst((var0x) -> {
+            return () -> {
+               return var0x;
+            };
+         });
+      });
+   }
+
+   public String toString() {
+      return "RegistryFileCodec[" + this.registryKey + " " + this.elementCodec + "]";
+   }
+}
