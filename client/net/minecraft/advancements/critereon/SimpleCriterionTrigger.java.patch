--- net/minecraft/advancements/critereon/SimpleCriterionTrigger.java
+++ net/minecraft/advancements/critereon/SimpleCriterionTrigger.java
@@ -3,20 +3,22 @@
 import com.google.common.collect.ImmutableSet;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.google.common.collect.Sets;
 import com.google.common.collect.UnmodifiableIterator;
+import com.google.gson.JsonObject;
 import java.util.ArrayList;
 import java.util.Iterator;
 import java.util.Map;
 import java.util.Set;
 import java.util.function.Predicate;
 import net.minecraft.advancements.CriterionTrigger;
-import net.minecraft.advancements.CriterionTriggerInstance;
 import net.minecraft.server.PlayerAdvancements;
+import net.minecraft.server.level.ServerPlayer;
+import net.minecraft.world.level.storage.loot.LootContext;
 
-public abstract class SimpleCriterionTrigger<T extends CriterionTriggerInstance> implements CriterionTrigger<T> {
+public abstract class SimpleCriterionTrigger<T extends AbstractCriterionTriggerInstance> implements CriterionTrigger<T> {
    private final Map<PlayerAdvancements, Set<CriterionTrigger.Listener<T>>> players = Maps.newIdentityHashMap();
 
    public SimpleCriterionTrigger() {
    }
 
@@ -39,34 +41,44 @@
 
    public final void removePlayerListeners(PlayerAdvancements var1) {
       this.players.remove(var1);
    }
 
-   protected void trigger(PlayerAdvancements var1, Predicate<T> var2) {
-      Set var3 = (Set)this.players.get(var1);
-      if (var3 != null) {
-         ArrayList var4 = null;
-         Iterator var5 = var3.iterator();
+   protected abstract T createInstance(JsonObject var1, EntityPredicate.Composite var2, DeserializationContext var3);
 
-         CriterionTrigger.Listener var6;
-         while(var5.hasNext()) {
-            var6 = (CriterionTrigger.Listener)var5.next();
-            if (var2.test(var6.getTriggerInstance())) {
-               if (var4 == null) {
-                  var4 = Lists.newArrayList();
+   public final T createInstance(JsonObject var1, DeserializationContext var2) {
+      EntityPredicate.Composite var3 = EntityPredicate.Composite.fromJson(var1, "player", var2);
+      return this.createInstance(var1, var3, var2);
+   }
+
+   protected void trigger(ServerPlayer var1, Predicate<T> var2) {
+      PlayerAdvancements var3 = var1.getAdvancements();
+      Set var4 = (Set)this.players.get(var3);
+      if (var4 != null) {
+         LootContext var5 = EntityPredicate.createContext(var1, var1);
+         ArrayList var6 = null;
+         Iterator var7 = var4.iterator();
+
+         CriterionTrigger.Listener var8;
+         while(var7.hasNext()) {
+            var8 = (CriterionTrigger.Listener)var7.next();
+            AbstractCriterionTriggerInstance var9 = (AbstractCriterionTriggerInstance)var8.getTriggerInstance();
+            if (var9.getPlayerPredicate().matches(var5) && var2.test(var9)) {
+               if (var6 == null) {
+                  var6 = Lists.newArrayList();
                }
 
-               var4.add(var6);
+               var6.add(var8);
             }
          }
 
-         if (var4 != null) {
-            var5 = var4.iterator();
+         if (var6 != null) {
+            var7 = var6.iterator();
 
-            while(var5.hasNext()) {
-               var6 = (CriterionTrigger.Listener)var5.next();
-               var6.run(var1);
+            while(var7.hasNext()) {
+               var8 = (CriterionTrigger.Listener)var7.next();
+               var8.run(var3);
             }
          }
 
       }
    }
