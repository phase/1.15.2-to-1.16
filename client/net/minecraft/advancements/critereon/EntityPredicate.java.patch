--- net/minecraft/advancements/critereon/EntityPredicate.java
+++ net/minecraft/advancements/critereon/EntityPredicate.java
@@ -2,51 +2,80 @@
 
 import com.google.gson.JsonArray;
 import com.google.gson.JsonElement;
 import com.google.gson.JsonNull;
 import com.google.gson.JsonObject;
+import java.util.function.Predicate;
 import javax.annotation.Nullable;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.tags.Tag;
 import net.minecraft.util.GsonHelper;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EntityType;
+import net.minecraft.world.entity.Mob;
 import net.minecraft.world.entity.animal.Cat;
+import net.minecraft.world.level.storage.loot.LootContext;
+import net.minecraft.world.level.storage.loot.parameters.LootContextParamSets;
+import net.minecraft.world.level.storage.loot.parameters.LootContextParams;
+import net.minecraft.world.level.storage.loot.predicates.LootItemCondition;
+import net.minecraft.world.level.storage.loot.predicates.LootItemConditions;
+import net.minecraft.world.level.storage.loot.predicates.LootItemEntityPropertyCondition;
 import net.minecraft.world.phys.Vec3;
 import net.minecraft.world.scores.Team;
 
 public class EntityPredicate {
    public static final EntityPredicate ANY;
-   public static final EntityPredicate[] ANY_ARRAY;
    private final EntityTypePredicate entityType;
    private final DistancePredicate distanceToPlayer;
    private final LocationPredicate location;
    private final MobEffectsPredicate effects;
    private final NbtPredicate nbt;
    private final EntityFlagsPredicate flags;
    private final EntityEquipmentPredicate equipment;
    private final PlayerPredicate player;
+   private final FishingHookPredicate fishingHook;
+   private final EntityPredicate vehicle;
+   private final EntityPredicate targetedEntity;
    @Nullable
    private final String team;
    @Nullable
    private final ResourceLocation catType;
 
-   private EntityPredicate(EntityTypePredicate var1, DistancePredicate var2, LocationPredicate var3, MobEffectsPredicate var4, NbtPredicate var5, EntityFlagsPredicate var6, EntityEquipmentPredicate var7, PlayerPredicate var8, @Nullable String var9, @Nullable ResourceLocation var10) {
+   private EntityPredicate(EntityTypePredicate var1, DistancePredicate var2, LocationPredicate var3, MobEffectsPredicate var4, NbtPredicate var5, EntityFlagsPredicate var6, EntityEquipmentPredicate var7, PlayerPredicate var8, FishingHookPredicate var9, @Nullable String var10, @Nullable ResourceLocation var11) {
       this.entityType = var1;
       this.distanceToPlayer = var2;
       this.location = var3;
       this.effects = var4;
       this.nbt = var5;
       this.flags = var6;
       this.equipment = var7;
       this.player = var8;
-      this.team = var9;
-      this.catType = var10;
+      this.fishingHook = var9;
+      this.vehicle = this;
+      this.targetedEntity = this;
+      this.team = var10;
+      this.catType = var11;
    }
 
+   private EntityPredicate(EntityTypePredicate var1, DistancePredicate var2, LocationPredicate var3, MobEffectsPredicate var4, NbtPredicate var5, EntityFlagsPredicate var6, EntityEquipmentPredicate var7, PlayerPredicate var8, FishingHookPredicate var9, EntityPredicate var10, EntityPredicate var11, @Nullable String var12, @Nullable ResourceLocation var13) {
+      this.entityType = var1;
+      this.distanceToPlayer = var2;
+      this.location = var3;
+      this.effects = var4;
+      this.nbt = var5;
+      this.flags = var6;
+      this.equipment = var7;
+      this.player = var8;
+      this.fishingHook = var9;
+      this.vehicle = var10;
+      this.targetedEntity = var11;
+      this.team = var12;
+      this.catType = var13;
+   }
+
    public boolean matches(ServerPlayer var1, @Nullable Entity var2) {
       return this.matches(var1.getLevel(), var1.position(), var2);
    }
 
    public boolean matches(ServerLevel var1, @Nullable Vec3 var2, @Nullable Entity var3) {
@@ -75,10 +104,16 @@
             return false;
          } else if (!this.equipment.matches(var3)) {
             return false;
          } else if (!this.player.matches(var3)) {
             return false;
+         } else if (!this.fishingHook.matches(var3)) {
+            return false;
+         } else if (!this.vehicle.matches(var1, var2, var3.getVehicle())) {
+            return false;
+         } else if (!this.targetedEntity.matches(var1, var2, var3 instanceof Mob ? ((Mob)var3).getTarget() : null)) {
+            return false;
          } else {
             if (this.team != null) {
                Team var4 = var3.getTeam();
                if (var4 == null || !this.team.equals(var4.getName())) {
                   return false;
@@ -99,33 +134,21 @@
          MobEffectsPredicate var5 = MobEffectsPredicate.fromJson(var1.get("effects"));
          NbtPredicate var6 = NbtPredicate.fromJson(var1.get("nbt"));
          EntityFlagsPredicate var7 = EntityFlagsPredicate.fromJson(var1.get("flags"));
          EntityEquipmentPredicate var8 = EntityEquipmentPredicate.fromJson(var1.get("equipment"));
          PlayerPredicate var9 = PlayerPredicate.fromJson(var1.get("player"));
-         String var10 = GsonHelper.getAsString(var1, "team", (String)null);
-         ResourceLocation var11 = var1.has("catType") ? new ResourceLocation(GsonHelper.getAsString(var1, "catType")) : null;
-         return (new EntityPredicate.Builder()).entityType(var2).distance(var3).located(var4).effects(var5).nbt(var6).flags(var7).equipment(var8).player(var9).team(var10).catType(var11).build();
+         FishingHookPredicate var10 = FishingHookPredicate.fromJson(var1.get("fishing_hook"));
+         EntityPredicate var11 = fromJson(var1.get("vehicle"));
+         EntityPredicate var12 = fromJson(var1.get("targeted_entity"));
+         String var13 = GsonHelper.getAsString(var1, "team", (String)null);
+         ResourceLocation var14 = var1.has("catType") ? new ResourceLocation(GsonHelper.getAsString(var1, "catType")) : null;
+         return (new EntityPredicate.Builder()).entityType(var2).distance(var3).located(var4).effects(var5).nbt(var6).flags(var7).equipment(var8).player(var9).fishingHook(var10).team(var13).vehicle(var11).targetedEntity(var12).catType(var14).build();
       } else {
          return ANY;
       }
    }
 
-   public static EntityPredicate[] fromJsonArray(@Nullable JsonElement var0) {
-      if (var0 != null && !var0.isJsonNull()) {
-         JsonArray var1 = GsonHelper.convertToJsonArray(var0, "entities");
-         EntityPredicate[] var2 = new EntityPredicate[var1.size()];
-
-         for(int var3 = 0; var3 < var1.size(); ++var3) {
-            var2[var3] = fromJson(var1.get(var3));
-         }
-
-         return var2;
-      } else {
-         return ANY_ARRAY;
-      }
-   }
-
    public JsonElement serializeToJson() {
       if (this == ANY) {
          return JsonNull.INSTANCE;
       } else {
          JsonObject var1 = new JsonObject();
@@ -135,42 +158,108 @@
          var1.add("effects", this.effects.serializeToJson());
          var1.add("nbt", this.nbt.serializeToJson());
          var1.add("flags", this.flags.serializeToJson());
          var1.add("equipment", this.equipment.serializeToJson());
          var1.add("player", this.player.serializeToJson());
+         var1.add("fishing_hook", this.fishingHook.serializeToJson());
+         var1.add("vehicle", this.vehicle.serializeToJson());
+         var1.add("targeted_entity", this.targetedEntity.serializeToJson());
          var1.addProperty("team", this.team);
          if (this.catType != null) {
             var1.addProperty("catType", this.catType.toString());
          }
 
          return var1;
       }
    }
 
-   public static JsonElement serializeArrayToJson(EntityPredicate[] var0) {
-      if (var0 == ANY_ARRAY) {
-         return JsonNull.INSTANCE;
-      } else {
-         JsonArray var1 = new JsonArray();
-         EntityPredicate[] var2 = var0;
-         int var3 = var0.length;
+   public static LootContext createContext(ServerPlayer var0, Entity var1) {
+      return (new LootContext.Builder(var0.getLevel())).withParameter(LootContextParams.THIS_ENTITY, var1).withParameter(LootContextParams.BLOCK_POS, var1.blockPosition()).withParameter(LootContextParams.ORIGIN, var0.position()).withRandom(var0.getRandom()).create(LootContextParamSets.ADVANCEMENT_ENTITY);
+   }
 
-         for(int var4 = 0; var4 < var3; ++var4) {
-            EntityPredicate var5 = var2[var4];
-            JsonElement var6 = var5.serializeToJson();
-            if (!var6.isJsonNull()) {
-               var1.add(var6);
+   static {
+      ANY = new EntityPredicate(EntityTypePredicate.ANY, DistancePredicate.ANY, LocationPredicate.ANY, MobEffectsPredicate.ANY, NbtPredicate.ANY, EntityFlagsPredicate.ANY, EntityEquipmentPredicate.ANY, PlayerPredicate.ANY, FishingHookPredicate.ANY, (String)null, (ResourceLocation)null);
+   }
+
+   public static class Composite {
+      public static final EntityPredicate.Composite ANY = new EntityPredicate.Composite(new LootItemCondition[0]);
+      private final LootItemCondition[] conditions;
+      private final Predicate<LootContext> compositePredicates;
+
+      private Composite(LootItemCondition[] var1) {
+         this.conditions = var1;
+         this.compositePredicates = LootItemConditions.andConditions(var1);
+      }
+
+      public static EntityPredicate.Composite create(LootItemCondition... var0) {
+         return new EntityPredicate.Composite(var0);
+      }
+
+      public static EntityPredicate.Composite fromJson(JsonObject var0, String var1, DeserializationContext var2) {
+         JsonElement var3 = var0.get(var1);
+         return fromElement(var1, var2, var3);
+      }
+
+      public static EntityPredicate.Composite[] fromJsonArray(JsonObject var0, String var1, DeserializationContext var2) {
+         JsonElement var3 = var0.get(var1);
+         if (var3 != null && !var3.isJsonNull()) {
+            JsonArray var4 = GsonHelper.convertToJsonArray(var3, var1);
+            EntityPredicate.Composite[] var5 = new EntityPredicate.Composite[var4.size()];
+
+            for(int var6 = 0; var6 < var4.size(); ++var6) {
+               var5[var6] = fromElement(var1 + "[" + var6 + "]", var2, var4.get(var6));
             }
+
+            return var5;
+         } else {
+            return new EntityPredicate.Composite[0];
          }
+      }
 
-         return var1;
+      private static EntityPredicate.Composite fromElement(String var0, DeserializationContext var1, @Nullable JsonElement var2) {
+         if (var2 != null && var2.isJsonArray()) {
+            LootItemCondition[] var4 = var1.deserializeConditions(var2.getAsJsonArray(), var1.getAdvancementId().toString() + "/" + var0, LootContextParamSets.ADVANCEMENT_ENTITY);
+            return new EntityPredicate.Composite(var4);
+         } else {
+            EntityPredicate var3 = EntityPredicate.fromJson(var2);
+            return wrap(var3);
+         }
       }
-   }
 
-   static {
-      ANY = new EntityPredicate(EntityTypePredicate.ANY, DistancePredicate.ANY, LocationPredicate.ANY, MobEffectsPredicate.ANY, NbtPredicate.ANY, EntityFlagsPredicate.ANY, EntityEquipmentPredicate.ANY, PlayerPredicate.ANY, (String)null, (ResourceLocation)null);
-      ANY_ARRAY = new EntityPredicate[0];
+      public static EntityPredicate.Composite wrap(EntityPredicate var0) {
+         if (var0 == EntityPredicate.ANY) {
+            return ANY;
+         } else {
+            LootItemCondition var1 = LootItemEntityPropertyCondition.hasProperties(LootContext.EntityTarget.THIS, var0).build();
+            return new EntityPredicate.Composite(new LootItemCondition[]{var1});
+         }
+      }
+
+      public boolean matches(LootContext var1) {
+         return this.compositePredicates.test(var1);
+      }
+
+      public JsonElement toJson(SerializationContext var1) {
+         return (JsonElement)(this.conditions.length == 0 ? JsonNull.INSTANCE : var1.serializeConditions(this.conditions));
+      }
+
+      public static JsonElement toJson(EntityPredicate.Composite[] var0, SerializationContext var1) {
+         if (var0.length == 0) {
+            return JsonNull.INSTANCE;
+         } else {
+            JsonArray var2 = new JsonArray();
+            EntityPredicate.Composite[] var3 = var0;
+            int var4 = var0.length;
+
+            for(int var5 = 0; var5 < var4; ++var5) {
+               EntityPredicate.Composite var6 = var3[var5];
+               var2.add(var6.toJson(var1));
+            }
+
+            return var2;
+         }
+      }
    }
 
    public static class Builder {
       private EntityTypePredicate entityType;
       private DistancePredicate distanceToPlayer;
@@ -178,10 +267,13 @@
       private MobEffectsPredicate effects;
       private NbtPredicate nbt;
       private EntityFlagsPredicate flags;
       private EntityEquipmentPredicate equipment;
       private PlayerPredicate player;
+      private FishingHookPredicate fishingHook;
+      private EntityPredicate vehicle;
+      private EntityPredicate targetedEntity;
       private String team;
       private ResourceLocation catType;
 
       public Builder() {
          this.entityType = EntityTypePredicate.ANY;
@@ -190,10 +282,13 @@
          this.effects = MobEffectsPredicate.ANY;
          this.nbt = NbtPredicate.ANY;
          this.flags = EntityFlagsPredicate.ANY;
          this.equipment = EntityEquipmentPredicate.ANY;
          this.player = PlayerPredicate.ANY;
+         this.fishingHook = FishingHookPredicate.ANY;
+         this.vehicle = EntityPredicate.ANY;
+         this.targetedEntity = EntityPredicate.ANY;
       }
 
       public static EntityPredicate.Builder entity() {
          return new EntityPredicate.Builder();
       }
@@ -251,10 +346,25 @@
       public EntityPredicate.Builder player(PlayerPredicate var1) {
          this.player = var1;
          return this;
       }
 
+      public EntityPredicate.Builder fishingHook(FishingHookPredicate var1) {
+         this.fishingHook = var1;
+         return this;
+      }
+
+      public EntityPredicate.Builder vehicle(EntityPredicate var1) {
+         this.vehicle = var1;
+         return this;
+      }
+
+      public EntityPredicate.Builder targetedEntity(EntityPredicate var1) {
+         this.targetedEntity = var1;
+         return this;
+      }
+
       public EntityPredicate.Builder team(@Nullable String var1) {
          this.team = var1;
          return this;
       }
 
@@ -262,9 +372,9 @@
          this.catType = var1;
          return this;
       }
 
       public EntityPredicate build() {
-         return new EntityPredicate(this.entityType, this.distanceToPlayer, this.location, this.effects, this.nbt, this.flags, this.equipment, this.player, this.team, this.catType);
+         return new EntityPredicate(this.entityType, this.distanceToPlayer, this.location, this.effects, this.nbt, this.flags, this.equipment, this.player, this.fishingHook, this.vehicle, this.targetedEntity, this.team, this.catType);
       }
    }
 }
