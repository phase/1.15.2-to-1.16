--- net/minecraft/advancements/critereon/EntityTypePredicate.java
+++ net/minecraft/advancements/critereon/EntityTypePredicate.java
@@ -6,11 +6,11 @@
 import com.google.gson.JsonPrimitive;
 import com.google.gson.JsonSyntaxException;
 import javax.annotation.Nullable;
 import net.minecraft.core.Registry;
 import net.minecraft.resources.ResourceLocation;
-import net.minecraft.tags.EntityTypeTags;
+import net.minecraft.tags.SerializationTags;
 import net.minecraft.tags.Tag;
 import net.minecraft.util.GsonHelper;
 import net.minecraft.world.entity.EntityType;
 
 public abstract class EntityTypePredicate {
@@ -36,12 +36,11 @@
       if (var0 != null && !var0.isJsonNull()) {
          String var1 = GsonHelper.convertToString(var0, "type");
          ResourceLocation var2;
          if (var1.startsWith("#")) {
             var2 = new ResourceLocation(var1.substring(1));
-            Tag var4 = EntityTypeTags.getAllTags().getTagOrEmpty(var2);
-            return new EntityTypePredicate.TagPredicate(var4);
+            return new EntityTypePredicate.TagPredicate(SerializationTags.getInstance().getEntityTypes().getTagOrEmpty(var2));
          } else {
             var2 = new ResourceLocation(var1);
             EntityType var3 = (EntityType)Registry.ENTITY_TYPE.getOptional(var2).orElseThrow(() -> {
                return new JsonSyntaxException("Unknown entity type '" + var2 + "', valid types are: " + COMMA_JOINER.join(Registry.ENTITY_TYPE.keySet()));
             });
@@ -70,11 +69,11 @@
       public boolean matches(EntityType<?> var1) {
          return this.tag.contains(var1);
       }
 
       public JsonElement serializeToJson() {
-         return new JsonPrimitive("#" + this.tag.getId().toString());
+         return new JsonPrimitive("#" + SerializationTags.getInstance().getEntityTypes().getIdOrThrow(this.tag));
       }
    }
 
    static class TypePredicate extends EntityTypePredicate {
       private final EntityType<?> type;
