--- net/minecraft/advancements/critereon/ChanneledLightningTrigger.java
+++ net/minecraft/advancements/critereon/ChanneledLightningTrigger.java
@@ -1,15 +1,17 @@
 package net.minecraft.advancements.critereon;
 
-import com.google.gson.JsonDeserializationContext;
-import com.google.gson.JsonElement;
 import com.google.gson.JsonObject;
 import java.util.Collection;
 import java.util.Iterator;
+import java.util.List;
+import java.util.stream.Collectors;
+import java.util.stream.Stream;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.world.entity.Entity;
+import net.minecraft.world.level.storage.loot.LootContext;
 
 public class ChanneledLightningTrigger extends SimpleCriterionTrigger<ChanneledLightningTrigger.TriggerInstance> {
    private static final ResourceLocation ID = new ResourceLocation("channeled_lightning");
 
    public ChanneledLightningTrigger() {
@@ -17,60 +19,65 @@
 
    public ResourceLocation getId() {
       return ID;
    }
 
-   public ChanneledLightningTrigger.TriggerInstance createInstance(JsonObject var1, JsonDeserializationContext var2) {
-      EntityPredicate[] var3 = EntityPredicate.fromJsonArray(var1.get("victims"));
-      return new ChanneledLightningTrigger.TriggerInstance(var3);
+   public ChanneledLightningTrigger.TriggerInstance createInstance(JsonObject var1, EntityPredicate.Composite var2, DeserializationContext var3) {
+      EntityPredicate.Composite[] var4 = EntityPredicate.Composite.fromJsonArray(var1, "victims", var3);
+      return new ChanneledLightningTrigger.TriggerInstance(var2, var4);
    }
 
    public void trigger(ServerPlayer var1, Collection<? extends Entity> var2) {
-      this.trigger(var1.getAdvancements(), (var2x) -> {
-         return var2x.matches(var1, var2);
+      List var3 = (List)var2.stream().map((var1x) -> {
+         return EntityPredicate.createContext(var1, var1x);
+      }).collect(Collectors.toList());
+      this.trigger(var1, (var1x) -> {
+         return var1x.matches(var3);
       });
    }
 
    public static class TriggerInstance extends AbstractCriterionTriggerInstance {
-      private final EntityPredicate[] victims;
+      private final EntityPredicate.Composite[] victims;
 
-      public TriggerInstance(EntityPredicate[] var1) {
-         super(ChanneledLightningTrigger.ID);
-         this.victims = var1;
+      public TriggerInstance(EntityPredicate.Composite var1, EntityPredicate.Composite[] var2) {
+         super(ChanneledLightningTrigger.ID, var1);
+         this.victims = var2;
       }
 
       public static ChanneledLightningTrigger.TriggerInstance channeledLightning(EntityPredicate... var0) {
-         return new ChanneledLightningTrigger.TriggerInstance(var0);
+         return new ChanneledLightningTrigger.TriggerInstance(EntityPredicate.Composite.ANY, (EntityPredicate.Composite[])Stream.of(var0).map(EntityPredicate.Composite::wrap).toArray((var0x) -> {
+            return new EntityPredicate.Composite[var0x];
+         }));
       }
 
-      public boolean matches(ServerPlayer var1, Collection<? extends Entity> var2) {
-         EntityPredicate[] var3 = this.victims;
-         int var4 = var3.length;
+      public boolean matches(Collection<? extends LootContext> var1) {
+         EntityPredicate.Composite[] var2 = this.victims;
+         int var3 = var2.length;
 
-         for(int var5 = 0; var5 < var4; ++var5) {
-            EntityPredicate var6 = var3[var5];
-            boolean var7 = false;
-            Iterator var8 = var2.iterator();
+         for(int var4 = 0; var4 < var3; ++var4) {
+            EntityPredicate.Composite var5 = var2[var4];
+            boolean var6 = false;
+            Iterator var7 = var1.iterator();
 
-            while(var8.hasNext()) {
-               Entity var9 = (Entity)var8.next();
-               if (var6.matches(var1, var9)) {
-                  var7 = true;
+            while(var7.hasNext()) {
+               LootContext var8 = (LootContext)var7.next();
+               if (var5.matches(var8)) {
+                  var6 = true;
                   break;
                }
             }
 
-            if (!var7) {
+            if (!var6) {
                return false;
             }
          }
 
          return true;
       }
 
-      public JsonElement serializeToJson() {
-         JsonObject var1 = new JsonObject();
-         var1.add("victims", EntityPredicate.serializeArrayToJson(this.victims));
-         return var1;
+      public JsonObject serializeToJson(SerializationContext var1) {
+         JsonObject var2 = super.serializeToJson(var1);
+         var2.add("victims", EntityPredicate.Composite.toJson(this.victims, var1));
+         return var2;
       }
    }
 }
