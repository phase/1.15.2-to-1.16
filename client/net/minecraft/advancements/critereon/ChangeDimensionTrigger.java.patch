--- net/minecraft/advancements/critereon/ChangeDimensionTrigger.java
+++ net/minecraft/advancements/critereon/ChangeDimensionTrigger.java
@@ -1,15 +1,15 @@
 package net.minecraft.advancements.critereon;
 
-import com.google.gson.JsonDeserializationContext;
-import com.google.gson.JsonElement;
 import com.google.gson.JsonObject;
 import javax.annotation.Nullable;
+import net.minecraft.core.Registry;
+import net.minecraft.resources.ResourceKey;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.util.GsonHelper;
-import net.minecraft.world.level.dimension.DimensionType;
+import net.minecraft.world.level.Level;
 
 public class ChangeDimensionTrigger extends SimpleCriterionTrigger<ChangeDimensionTrigger.TriggerInstance> {
    private static final ResourceLocation ID = new ResourceLocation("changed_dimension");
 
    public ChangeDimensionTrigger() {
@@ -17,55 +17,55 @@
 
    public ResourceLocation getId() {
       return ID;
    }
 
-   public ChangeDimensionTrigger.TriggerInstance createInstance(JsonObject var1, JsonDeserializationContext var2) {
-      DimensionType var3 = var1.has("from") ? DimensionType.getByName(new ResourceLocation(GsonHelper.getAsString(var1, "from"))) : null;
-      DimensionType var4 = var1.has("to") ? DimensionType.getByName(new ResourceLocation(GsonHelper.getAsString(var1, "to"))) : null;
-      return new ChangeDimensionTrigger.TriggerInstance(var3, var4);
+   public ChangeDimensionTrigger.TriggerInstance createInstance(JsonObject var1, EntityPredicate.Composite var2, DeserializationContext var3) {
+      ResourceKey var4 = var1.has("from") ? ResourceKey.create(Registry.DIMENSION_REGISTRY, new ResourceLocation(GsonHelper.getAsString(var1, "from"))) : null;
+      ResourceKey var5 = var1.has("to") ? ResourceKey.create(Registry.DIMENSION_REGISTRY, new ResourceLocation(GsonHelper.getAsString(var1, "to"))) : null;
+      return new ChangeDimensionTrigger.TriggerInstance(var2, var4, var5);
    }
 
-   public void trigger(ServerPlayer var1, DimensionType var2, DimensionType var3) {
-      this.trigger(var1.getAdvancements(), (var2x) -> {
+   public void trigger(ServerPlayer var1, ResourceKey<Level> var2, ResourceKey<Level> var3) {
+      this.trigger(var1, (var2x) -> {
          return var2x.matches(var2, var3);
       });
    }
 
    public static class TriggerInstance extends AbstractCriterionTriggerInstance {
       @Nullable
-      private final DimensionType from;
+      private final ResourceKey<Level> from;
       @Nullable
-      private final DimensionType to;
+      private final ResourceKey<Level> to;
 
-      public TriggerInstance(@Nullable DimensionType var1, @Nullable DimensionType var2) {
-         super(ChangeDimensionTrigger.ID);
-         this.from = var1;
-         this.to = var2;
+      public TriggerInstance(EntityPredicate.Composite var1, @Nullable ResourceKey<Level> var2, @Nullable ResourceKey<Level> var3) {
+         super(ChangeDimensionTrigger.ID, var1);
+         this.from = var2;
+         this.to = var3;
       }
 
-      public static ChangeDimensionTrigger.TriggerInstance changedDimensionTo(DimensionType var0) {
-         return new ChangeDimensionTrigger.TriggerInstance((DimensionType)null, var0);
+      public static ChangeDimensionTrigger.TriggerInstance changedDimensionTo(ResourceKey<Level> var0) {
+         return new ChangeDimensionTrigger.TriggerInstance(EntityPredicate.Composite.ANY, (ResourceKey)null, var0);
       }
 
-      public boolean matches(DimensionType var1, DimensionType var2) {
+      public boolean matches(ResourceKey<Level> var1, ResourceKey<Level> var2) {
          if (this.from != null && this.from != var1) {
             return false;
          } else {
             return this.to == null || this.to == var2;
          }
       }
 
-      public JsonElement serializeToJson() {
-         JsonObject var1 = new JsonObject();
+      public JsonObject serializeToJson(SerializationContext var1) {
+         JsonObject var2 = super.serializeToJson(var1);
          if (this.from != null) {
-            var1.addProperty("from", DimensionType.getName(this.from).toString());
+            var2.addProperty("from", this.from.location().toString());
          }
 
          if (this.to != null) {
-            var1.addProperty("to", DimensionType.getName(this.to).toString());
+            var2.addProperty("to", this.to.location().toString());
          }
 
-         return var1;
+         return var2;
       }
    }
 }
