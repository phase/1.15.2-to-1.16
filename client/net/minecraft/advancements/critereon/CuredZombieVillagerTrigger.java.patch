--- net/minecraft/advancements/critereon/CuredZombieVillagerTrigger.java
+++ net/minecraft/advancements/critereon/CuredZombieVillagerTrigger.java
@@ -1,14 +1,13 @@
 package net.minecraft.advancements.critereon;
 
-import com.google.gson.JsonDeserializationContext;
-import com.google.gson.JsonElement;
 import com.google.gson.JsonObject;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.world.entity.monster.Zombie;
 import net.minecraft.world.entity.npc.Villager;
+import net.minecraft.world.level.storage.loot.LootContext;
 
 public class CuredZombieVillagerTrigger extends SimpleCriterionTrigger<CuredZombieVillagerTrigger.TriggerInstance> {
    private static final ResourceLocation ID = new ResourceLocation("cured_zombie_villager");
 
    public CuredZombieVillagerTrigger() {
@@ -16,47 +15,49 @@
 
    public ResourceLocation getId() {
       return ID;
    }
 
-   public CuredZombieVillagerTrigger.TriggerInstance createInstance(JsonObject var1, JsonDeserializationContext var2) {
-      EntityPredicate var3 = EntityPredicate.fromJson(var1.get("zombie"));
-      EntityPredicate var4 = EntityPredicate.fromJson(var1.get("villager"));
-      return new CuredZombieVillagerTrigger.TriggerInstance(var3, var4);
+   public CuredZombieVillagerTrigger.TriggerInstance createInstance(JsonObject var1, EntityPredicate.Composite var2, DeserializationContext var3) {
+      EntityPredicate.Composite var4 = EntityPredicate.Composite.fromJson(var1, "zombie", var3);
+      EntityPredicate.Composite var5 = EntityPredicate.Composite.fromJson(var1, "villager", var3);
+      return new CuredZombieVillagerTrigger.TriggerInstance(var2, var4, var5);
    }
 
    public void trigger(ServerPlayer var1, Zombie var2, Villager var3) {
-      this.trigger(var1.getAdvancements(), (var3x) -> {
-         return var3x.matches(var1, var2, var3);
+      LootContext var4 = EntityPredicate.createContext(var1, var2);
+      LootContext var5 = EntityPredicate.createContext(var1, var3);
+      this.trigger(var1, (var2x) -> {
+         return var2x.matches(var4, var5);
       });
    }
 
    public static class TriggerInstance extends AbstractCriterionTriggerInstance {
-      private final EntityPredicate zombie;
-      private final EntityPredicate villager;
+      private final EntityPredicate.Composite zombie;
+      private final EntityPredicate.Composite villager;
 
-      public TriggerInstance(EntityPredicate var1, EntityPredicate var2) {
-         super(CuredZombieVillagerTrigger.ID);
-         this.zombie = var1;
-         this.villager = var2;
+      public TriggerInstance(EntityPredicate.Composite var1, EntityPredicate.Composite var2, EntityPredicate.Composite var3) {
+         super(CuredZombieVillagerTrigger.ID, var1);
+         this.zombie = var2;
+         this.villager = var3;
       }
 
       public static CuredZombieVillagerTrigger.TriggerInstance curedZombieVillager() {
-         return new CuredZombieVillagerTrigger.TriggerInstance(EntityPredicate.ANY, EntityPredicate.ANY);
+         return new CuredZombieVillagerTrigger.TriggerInstance(EntityPredicate.Composite.ANY, EntityPredicate.Composite.ANY, EntityPredicate.Composite.ANY);
       }
 
-      public boolean matches(ServerPlayer var1, Zombie var2, Villager var3) {
-         if (!this.zombie.matches(var1, var2)) {
+      public boolean matches(LootContext var1, LootContext var2) {
+         if (!this.zombie.matches(var1)) {
             return false;
          } else {
-            return this.villager.matches(var1, var3);
+            return this.villager.matches(var2);
          }
       }
 
-      public JsonElement serializeToJson() {
-         JsonObject var1 = new JsonObject();
-         var1.add("zombie", this.zombie.serializeToJson());
-         var1.add("villager", this.villager.serializeToJson());
-         return var1;
+      public JsonObject serializeToJson(SerializationContext var1) {
+         JsonObject var2 = super.serializeToJson(var1);
+         var2.add("zombie", this.zombie.toJson(var1));
+         var2.add("villager", this.villager.toJson(var1));
+         return var2;
       }
    }
 }
