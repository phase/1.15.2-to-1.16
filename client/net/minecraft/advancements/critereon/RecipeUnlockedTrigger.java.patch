--- net/minecraft/advancements/critereon/RecipeUnlockedTrigger.java
+++ net/minecraft/advancements/critereon/RecipeUnlockedTrigger.java
@@ -1,9 +1,7 @@
 package net.minecraft.advancements.critereon;
 
-import com.google.gson.JsonDeserializationContext;
-import com.google.gson.JsonElement;
 import com.google.gson.JsonObject;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.util.GsonHelper;
 import net.minecraft.world.item.crafting.Recipe;
@@ -16,33 +14,37 @@
 
    public ResourceLocation getId() {
       return ID;
    }
 
-   public RecipeUnlockedTrigger.TriggerInstance createInstance(JsonObject var1, JsonDeserializationContext var2) {
-      ResourceLocation var3 = new ResourceLocation(GsonHelper.getAsString(var1, "recipe"));
-      return new RecipeUnlockedTrigger.TriggerInstance(var3);
+   public RecipeUnlockedTrigger.TriggerInstance createInstance(JsonObject var1, EntityPredicate.Composite var2, DeserializationContext var3) {
+      ResourceLocation var4 = new ResourceLocation(GsonHelper.getAsString(var1, "recipe"));
+      return new RecipeUnlockedTrigger.TriggerInstance(var2, var4);
    }
 
    public void trigger(ServerPlayer var1, Recipe<?> var2) {
-      this.trigger(var1.getAdvancements(), (var1x) -> {
+      this.trigger(var1, (var1x) -> {
          return var1x.matches(var2);
       });
    }
 
+   public static RecipeUnlockedTrigger.TriggerInstance unlocked(ResourceLocation var0) {
+      return new RecipeUnlockedTrigger.TriggerInstance(EntityPredicate.Composite.ANY, var0);
+   }
+
    public static class TriggerInstance extends AbstractCriterionTriggerInstance {
       private final ResourceLocation recipe;
 
-      public TriggerInstance(ResourceLocation var1) {
-         super(RecipeUnlockedTrigger.ID);
-         this.recipe = var1;
+      public TriggerInstance(EntityPredicate.Composite var1, ResourceLocation var2) {
+         super(RecipeUnlockedTrigger.ID, var1);
+         this.recipe = var2;
       }
 
-      public JsonElement serializeToJson() {
-         JsonObject var1 = new JsonObject();
-         var1.addProperty("recipe", this.recipe.toString());
-         return var1;
+      public JsonObject serializeToJson(SerializationContext var1) {
+         JsonObject var2 = super.serializeToJson(var1);
+         var2.addProperty("recipe", this.recipe.toString());
+         return var2;
       }
 
       public boolean matches(Recipe<?> var1) {
          return this.recipe.equals(var1.getId());
       }
