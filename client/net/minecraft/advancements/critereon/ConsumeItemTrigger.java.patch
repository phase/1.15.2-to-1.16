--- net/minecraft/advancements/critereon/ConsumeItemTrigger.java
+++ net/minecraft/advancements/critereon/ConsumeItemTrigger.java
@@ -1,9 +1,7 @@
 package net.minecraft.advancements.critereon;
 
-import com.google.gson.JsonDeserializationContext;
-import com.google.gson.JsonElement;
 import com.google.gson.JsonObject;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.tags.Tag;
 import net.minecraft.world.item.ItemStack;
@@ -18,42 +16,42 @@
 
    public ResourceLocation getId() {
       return ID;
    }
 
-   public ConsumeItemTrigger.TriggerInstance createInstance(JsonObject var1, JsonDeserializationContext var2) {
-      return new ConsumeItemTrigger.TriggerInstance(ItemPredicate.fromJson(var1.get("item")));
+   public ConsumeItemTrigger.TriggerInstance createInstance(JsonObject var1, EntityPredicate.Composite var2, DeserializationContext var3) {
+      return new ConsumeItemTrigger.TriggerInstance(var2, ItemPredicate.fromJson(var1.get("item")));
    }
 
    public void trigger(ServerPlayer var1, ItemStack var2) {
-      this.trigger(var1.getAdvancements(), (var1x) -> {
+      this.trigger(var1, (var1x) -> {
          return var1x.matches(var2);
       });
    }
 
    public static class TriggerInstance extends AbstractCriterionTriggerInstance {
       private final ItemPredicate item;
 
-      public TriggerInstance(ItemPredicate var1) {
-         super(ConsumeItemTrigger.ID);
-         this.item = var1;
+      public TriggerInstance(EntityPredicate.Composite var1, ItemPredicate var2) {
+         super(ConsumeItemTrigger.ID, var1);
+         this.item = var2;
       }
 
       public static ConsumeItemTrigger.TriggerInstance usedItem() {
-         return new ConsumeItemTrigger.TriggerInstance(ItemPredicate.ANY);
+         return new ConsumeItemTrigger.TriggerInstance(EntityPredicate.Composite.ANY, ItemPredicate.ANY);
       }
 
       public static ConsumeItemTrigger.TriggerInstance usedItem(ItemLike var0) {
-         return new ConsumeItemTrigger.TriggerInstance(new ItemPredicate((Tag)null, var0.asItem(), MinMaxBounds.Ints.ANY, MinMaxBounds.Ints.ANY, EnchantmentPredicate.NONE, EnchantmentPredicate.NONE, (Potion)null, NbtPredicate.ANY));
+         return new ConsumeItemTrigger.TriggerInstance(EntityPredicate.Composite.ANY, new ItemPredicate((Tag)null, var0.asItem(), MinMaxBounds.Ints.ANY, MinMaxBounds.Ints.ANY, EnchantmentPredicate.NONE, EnchantmentPredicate.NONE, (Potion)null, NbtPredicate.ANY));
       }
 
       public boolean matches(ItemStack var1) {
          return this.item.matches(var1);
       }
 
-      public JsonElement serializeToJson() {
-         JsonObject var1 = new JsonObject();
-         var1.add("item", this.item.serializeToJson());
-         return var1;
+      public JsonObject serializeToJson(SerializationContext var1) {
+         JsonObject var2 = super.serializeToJson(var1);
+         var2.add("item", this.item.serializeToJson());
+         return var2;
       }
    }
 }
