--- net/minecraft/advancements/critereon/InventoryChangeTrigger.java
+++ net/minecraft/advancements/critereon/InventoryChangeTrigger.java
@@ -1,14 +1,10 @@
 package net.minecraft.advancements.critereon;
 
-import com.google.common.collect.Lists;
 import com.google.gson.JsonArray;
-import com.google.gson.JsonDeserializationContext;
-import com.google.gson.JsonElement;
 import com.google.gson.JsonObject;
-import java.util.ArrayList;
-import java.util.Iterator;
+import it.unimi.dsi.fastutil.objects.ObjectArrayList;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.tags.Tag;
 import net.minecraft.util.GsonHelper;
 import net.minecraft.world.entity.player.Inventory;
@@ -24,115 +20,130 @@
 
    public ResourceLocation getId() {
       return ID;
    }
 
-   public InventoryChangeTrigger.TriggerInstance createInstance(JsonObject var1, JsonDeserializationContext var2) {
-      JsonObject var3 = GsonHelper.getAsJsonObject(var1, "slots", new JsonObject());
-      MinMaxBounds.Ints var4 = MinMaxBounds.Ints.fromJson(var3.get("occupied"));
-      MinMaxBounds.Ints var5 = MinMaxBounds.Ints.fromJson(var3.get("full"));
-      MinMaxBounds.Ints var6 = MinMaxBounds.Ints.fromJson(var3.get("empty"));
-      ItemPredicate[] var7 = ItemPredicate.fromJsonArray(var1.get("items"));
-      return new InventoryChangeTrigger.TriggerInstance(var4, var5, var6, var7);
+   public InventoryChangeTrigger.TriggerInstance createInstance(JsonObject var1, EntityPredicate.Composite var2, DeserializationContext var3) {
+      JsonObject var4 = GsonHelper.getAsJsonObject(var1, "slots", new JsonObject());
+      MinMaxBounds.Ints var5 = MinMaxBounds.Ints.fromJson(var4.get("occupied"));
+      MinMaxBounds.Ints var6 = MinMaxBounds.Ints.fromJson(var4.get("full"));
+      MinMaxBounds.Ints var7 = MinMaxBounds.Ints.fromJson(var4.get("empty"));
+      ItemPredicate[] var8 = ItemPredicate.fromJsonArray(var1.get("items"));
+      return new InventoryChangeTrigger.TriggerInstance(var2, var5, var6, var7, var8);
    }
 
-   public void trigger(ServerPlayer var1, Inventory var2) {
-      this.trigger(var1.getAdvancements(), (var1x) -> {
-         return var1x.matches(var2);
+   public void trigger(ServerPlayer var1, Inventory var2, ItemStack var3) {
+      int var4 = 0;
+      int var5 = 0;
+      int var6 = 0;
+
+      for(int var7 = 0; var7 < var2.getContainerSize(); ++var7) {
+         ItemStack var8 = var2.getItem(var7);
+         if (var8.isEmpty()) {
+            ++var5;
+         } else {
+            ++var6;
+            if (var8.getCount() >= var8.getMaxStackSize()) {
+               ++var4;
+            }
+         }
+      }
+
+      this.trigger(var1, var2, var3, var4, var5, var6);
+   }
+
+   private void trigger(ServerPlayer var1, Inventory var2, ItemStack var3, int var4, int var5, int var6) {
+      this.trigger(var1, (var5x) -> {
+         return var5x.matches(var2, var3, var4, var5, var6);
       });
    }
 
    public static class TriggerInstance extends AbstractCriterionTriggerInstance {
       private final MinMaxBounds.Ints slotsOccupied;
       private final MinMaxBounds.Ints slotsFull;
       private final MinMaxBounds.Ints slotsEmpty;
       private final ItemPredicate[] predicates;
 
-      public TriggerInstance(MinMaxBounds.Ints var1, MinMaxBounds.Ints var2, MinMaxBounds.Ints var3, ItemPredicate[] var4) {
-         super(InventoryChangeTrigger.ID);
-         this.slotsOccupied = var1;
-         this.slotsFull = var2;
-         this.slotsEmpty = var3;
-         this.predicates = var4;
+      public TriggerInstance(EntityPredicate.Composite var1, MinMaxBounds.Ints var2, MinMaxBounds.Ints var3, MinMaxBounds.Ints var4, ItemPredicate[] var5) {
+         super(InventoryChangeTrigger.ID, var1);
+         this.slotsOccupied = var2;
+         this.slotsFull = var3;
+         this.slotsEmpty = var4;
+         this.predicates = var5;
       }
 
-      public static InventoryChangeTrigger.TriggerInstance hasItem(ItemPredicate... var0) {
-         return new InventoryChangeTrigger.TriggerInstance(MinMaxBounds.Ints.ANY, MinMaxBounds.Ints.ANY, MinMaxBounds.Ints.ANY, var0);
+      public static InventoryChangeTrigger.TriggerInstance hasItems(ItemPredicate... var0) {
+         return new InventoryChangeTrigger.TriggerInstance(EntityPredicate.Composite.ANY, MinMaxBounds.Ints.ANY, MinMaxBounds.Ints.ANY, MinMaxBounds.Ints.ANY, var0);
       }
 
-      public static InventoryChangeTrigger.TriggerInstance hasItem(ItemLike... var0) {
+      public static InventoryChangeTrigger.TriggerInstance hasItems(ItemLike... var0) {
          ItemPredicate[] var1 = new ItemPredicate[var0.length];
 
          for(int var2 = 0; var2 < var0.length; ++var2) {
             var1[var2] = new ItemPredicate((Tag)null, var0[var2].asItem(), MinMaxBounds.Ints.ANY, MinMaxBounds.Ints.ANY, EnchantmentPredicate.NONE, EnchantmentPredicate.NONE, (Potion)null, NbtPredicate.ANY);
          }
 
-         return hasItem(var1);
+         return hasItems(var1);
       }
 
-      public JsonElement serializeToJson() {
-         JsonObject var1 = new JsonObject();
+      public JsonObject serializeToJson(SerializationContext var1) {
+         JsonObject var2 = super.serializeToJson(var1);
          if (!this.slotsOccupied.isAny() || !this.slotsFull.isAny() || !this.slotsEmpty.isAny()) {
-            JsonObject var2 = new JsonObject();
-            var2.add("occupied", this.slotsOccupied.serializeToJson());
-            var2.add("full", this.slotsFull.serializeToJson());
-            var2.add("empty", this.slotsEmpty.serializeToJson());
-            var1.add("slots", var2);
+            JsonObject var3 = new JsonObject();
+            var3.add("occupied", this.slotsOccupied.serializeToJson());
+            var3.add("full", this.slotsFull.serializeToJson());
+            var3.add("empty", this.slotsEmpty.serializeToJson());
+            var2.add("slots", var3);
          }
 
          if (this.predicates.length > 0) {
-            JsonArray var7 = new JsonArray();
-            ItemPredicate[] var3 = this.predicates;
-            int var4 = var3.length;
+            JsonArray var8 = new JsonArray();
+            ItemPredicate[] var4 = this.predicates;
+            int var5 = var4.length;
 
-            for(int var5 = 0; var5 < var4; ++var5) {
-               ItemPredicate var6 = var3[var5];
-               var7.add(var6.serializeToJson());
+            for(int var6 = 0; var6 < var5; ++var6) {
+               ItemPredicate var7 = var4[var6];
+               var8.add(var7.serializeToJson());
             }
 
-            var1.add("items", var7);
+            var2.add("items", var8);
          }
 
-         return var1;
+         return var2;
       }
 
-      public boolean matches(Inventory var1) {
-         int var2 = 0;
-         int var3 = 0;
-         int var4 = 0;
-         ArrayList var5 = Lists.newArrayList(this.predicates);
+      public boolean matches(Inventory var1, ItemStack var2, int var3, int var4, int var5) {
+         if (!this.slotsFull.matches(var3)) {
+            return false;
+         } else if (!this.slotsEmpty.matches(var4)) {
+            return false;
+         } else if (!this.slotsOccupied.matches(var5)) {
+            return false;
+         } else {
+            int var6 = this.predicates.length;
+            if (var6 == 0) {
+               return true;
+            } else if (var6 != 1) {
+               ObjectArrayList var7 = new ObjectArrayList(this.predicates);
+               int var8 = var1.getContainerSize();
 
-         for(int var6 = 0; var6 < var1.getContainerSize(); ++var6) {
-            ItemStack var7 = var1.getItem(var6);
-            if (var7.isEmpty()) {
-               ++var3;
-            } else {
-               ++var4;
-               if (var7.getCount() >= var7.getMaxStackSize()) {
-                  ++var2;
-               }
+               for(int var9 = 0; var9 < var8; ++var9) {
+                  if (var7.isEmpty()) {
+                     return true;
+                  }
 
-               Iterator var8 = var5.iterator();
-
-               while(var8.hasNext()) {
-                  ItemPredicate var9 = (ItemPredicate)var8.next();
-                  if (var9.matches(var7)) {
-                     var8.remove();
+                  ItemStack var10 = var1.getItem(var9);
+                  if (!var10.isEmpty()) {
+                     var7.removeIf((var1x) -> {
+                        return var1x.matches(var10);
+                     });
                   }
                }
+
+               return var7.isEmpty();
+            } else {
+               return !var2.isEmpty() && this.predicates[0].matches(var2);
             }
          }
-
-         if (!this.slotsFull.matches(var2)) {
-            return false;
-         } else if (!this.slotsEmpty.matches(var3)) {
-            return false;
-         } else if (!this.slotsOccupied.matches(var4)) {
-            return false;
-         } else if (!var5.isEmpty()) {
-            return false;
-         } else {
-            return true;
-         }
       }
    }
 }
