--- net/minecraft/network/protocol/game/ClientboundLevelChunkPacket.java
+++ net/minecraft/network/protocol/game/ClientboundLevelChunkPacket.java
@@ -28,62 +28,65 @@
    @Nullable
    private ChunkBiomeContainer biomes;
    private byte[] buffer;
    private List<CompoundTag> blockEntitiesTags;
    private boolean fullChunk;
+   private boolean forgetOldData;
 
    public ClientboundLevelChunkPacket() {
    }
 
-   public ClientboundLevelChunkPacket(LevelChunk var1, int var2) {
-      ChunkPos var3 = var1.getPos();
-      this.x = var3.x;
-      this.z = var3.z;
+   public ClientboundLevelChunkPacket(LevelChunk var1, int var2, boolean var3) {
+      ChunkPos var4 = var1.getPos();
+      this.x = var4.x;
+      this.z = var4.z;
       this.fullChunk = var2 == 65535;
+      this.forgetOldData = var3;
       this.heightmaps = new CompoundTag();
-      Iterator var4 = var1.getHeightmaps().iterator();
+      Iterator var5 = var1.getHeightmaps().iterator();
 
-      Entry var5;
-      while(var4.hasNext()) {
-         var5 = (Entry)var4.next();
-         if (((Heightmap.Types)var5.getKey()).sendToClient()) {
-            this.heightmaps.put(((Heightmap.Types)var5.getKey()).getSerializationKey(), new LongArrayTag(((Heightmap)var5.getValue()).getRawData()));
+      Entry var6;
+      while(var5.hasNext()) {
+         var6 = (Entry)var5.next();
+         if (((Heightmap.Types)var6.getKey()).sendToClient()) {
+            this.heightmaps.put(((Heightmap.Types)var6.getKey()).getSerializationKey(), new LongArrayTag(((Heightmap)var6.getValue()).getRawData()));
          }
       }
 
       if (this.fullChunk) {
          this.biomes = var1.getBiomes().copy();
       }
 
       this.buffer = new byte[this.calculateChunkSize(var1, var2)];
       this.availableSections = this.extractChunkData(new FriendlyByteBuf(this.getWriteBuffer()), var1, var2);
       this.blockEntitiesTags = Lists.newArrayList();
-      var4 = var1.getBlockEntities().entrySet().iterator();
+      var5 = var1.getBlockEntities().entrySet().iterator();
 
       while(true) {
-         BlockEntity var7;
-         int var8;
+         BlockEntity var8;
+         int var9;
          do {
-            if (!var4.hasNext()) {
+            if (!var5.hasNext()) {
                return;
             }
 
-            var5 = (Entry)var4.next();
-            BlockPos var6 = (BlockPos)var5.getKey();
-            var7 = (BlockEntity)var5.getValue();
-            var8 = var6.getY() >> 4;
-         } while(!this.isFullChunk() && (var2 & 1 << var8) == 0);
+            var6 = (Entry)var5.next();
+            BlockPos var7 = (BlockPos)var6.getKey();
+            var8 = (BlockEntity)var6.getValue();
+            var9 = var7.getY() >> 4;
+         } while(!this.isFullChunk() && (var2 & 1 << var9) == 0);
 
-         CompoundTag var9 = var7.getUpdateTag();
-         this.blockEntitiesTags.add(var9);
+         CompoundTag var10 = var8.getUpdateTag();
+         this.blockEntitiesTags.add(var10);
       }
    }
 
    public void read(FriendlyByteBuf var1) throws IOException {
       this.x = var1.readInt();
       this.z = var1.readInt();
       this.fullChunk = var1.readBoolean();
+      this.forgetOldData = var1.readBoolean();
       this.availableSections = var1.readVarInt();
       this.heightmaps = var1.readNbt();
       if (this.fullChunk) {
          this.biomes = new ChunkBiomeContainer(var1);
       }
@@ -106,10 +109,11 @@
 
    public void write(FriendlyByteBuf var1) throws IOException {
       var1.writeInt(this.x);
       var1.writeInt(this.z);
       var1.writeBoolean(this.fullChunk);
+      var1.writeBoolean(this.forgetOldData);
       var1.writeVarInt(this.availableSections);
       var1.writeNbt(this.heightmaps);
       if (this.biomes != null) {
          this.biomes.write(var1);
       }
@@ -185,10 +189,14 @@
 
    public boolean isFullChunk() {
       return this.fullChunk;
    }
 
+   public boolean forgetOldData() {
+      return this.forgetOldData;
+   }
+
    public CompoundTag getHeightmaps() {
       return this.heightmaps;
    }
 
    public List<CompoundTag> getBlockEntitiesTags() {
