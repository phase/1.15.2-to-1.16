--- net/minecraft/network/chat/ScoreComponent.java
+++ net/minecraft/network/chat/ScoreComponent.java
@@ -8,98 +8,87 @@
 import net.minecraft.commands.arguments.EntityArgument;
 import net.minecraft.commands.arguments.selector.EntitySelector;
 import net.minecraft.commands.arguments.selector.EntitySelectorParser;
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.ServerScoreboard;
-import net.minecraft.util.StringUtil;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.scores.Objective;
 import net.minecraft.world.scores.Score;
 
 public class ScoreComponent extends BaseComponent implements ContextAwareComponent {
    private final String name;
    @Nullable
    private final EntitySelector selector;
    private final String objective;
-   private String value = "";
 
-   public ScoreComponent(String var1, String var2) {
-      this.name = var1;
-      this.objective = var2;
-      EntitySelector var3 = null;
-
+   @Nullable
+   private static EntitySelector parseSelector(String var0) {
       try {
-         EntitySelectorParser var4 = new EntitySelectorParser(new StringReader(var1));
-         var3 = var4.parse();
-      } catch (CommandSyntaxException var5) {
+         return (new EntitySelectorParser(new StringReader(var0))).parse();
+      } catch (CommandSyntaxException var2) {
+         return null;
       }
+   }
 
-      this.selector = var3;
+   public ScoreComponent(String var1, String var2) {
+      this(var1, parseSelector(var1), var2);
    }
 
+   private ScoreComponent(String var1, @Nullable EntitySelector var2, String var3) {
+      this.name = var1;
+      this.selector = var2;
+      this.objective = var3;
+   }
+
    public String getName() {
       return this.name;
    }
 
    public String getObjective() {
       return this.objective;
    }
 
-   public void setValue(String var1) {
-      this.value = var1;
-   }
+   private String findTargetName(CommandSourceStack var1) throws CommandSyntaxException {
+      if (this.selector != null) {
+         List var2 = this.selector.findEntities(var1);
+         if (!var2.isEmpty()) {
+            if (var2.size() != 1) {
+               throw EntityArgument.ERROR_NOT_SINGLE_ENTITY.create();
+            }
 
-   public String getContents() {
-      return this.value;
+            return ((Entity)var2.get(0)).getScoreboardName();
+         }
+      }
+
+      return this.name;
    }
 
-   private void resolve(CommandSourceStack var1) {
-      MinecraftServer var2 = var1.getServer();
-      if (var2 != null && var2.isInitialized() && StringUtil.isNullOrEmpty(this.value)) {
-         ServerScoreboard var3 = var2.getScoreboard();
-         Objective var4 = var3.getObjective(this.objective);
-         if (var3.hasPlayerScore(this.name, var4)) {
-            Score var5 = var3.getOrCreatePlayerScore(this.name, var4);
-            this.setValue(String.format("%d", var5.getScore()));
-         } else {
-            this.value = "";
+   private String getScore(String var1, CommandSourceStack var2) {
+      MinecraftServer var3 = var2.getServer();
+      if (var3 != null) {
+         ServerScoreboard var4 = var3.getScoreboard();
+         Objective var5 = var4.getObjective(this.objective);
+         if (var4.hasPlayerScore(var1, var5)) {
+            Score var6 = var4.getOrCreatePlayerScore(var1, var5);
+            return Integer.toString(var6.getScore());
          }
       }
 
+      return "";
    }
 
-   public ScoreComponent copy() {
-      ScoreComponent var1 = new ScoreComponent(this.name, this.objective);
-      var1.setValue(this.value);
-      return var1;
+   public ScoreComponent toMutable() {
+      return new ScoreComponent(this.name, this.selector, this.objective);
    }
 
-   public Component resolve(@Nullable CommandSourceStack var1, @Nullable Entity var2, int var3) throws CommandSyntaxException {
+   public MutableComponent resolve(@Nullable CommandSourceStack var1, @Nullable Entity var2, int var3) throws CommandSyntaxException {
       if (var1 == null) {
-         return this.copy();
+         return new TextComponent("");
       } else {
-         String var4;
-         if (this.selector != null) {
-            List var5 = this.selector.findEntities(var1);
-            if (var5.isEmpty()) {
-               var4 = this.name;
-            } else {
-               if (var5.size() != 1) {
-                  throw EntityArgument.ERROR_NOT_SINGLE_ENTITY.create();
-               }
-
-               var4 = ((Entity)var5.get(0)).getScoreboardName();
-            }
-         } else {
-            var4 = this.name;
-         }
-
-         String var7 = var2 != null && var4.equals("*") ? var2.getScoreboardName() : var4;
-         ScoreComponent var6 = new ScoreComponent(var7, this.objective);
-         var6.setValue(this.value);
-         var6.resolve(var1);
-         return var6;
+         String var4 = this.findTargetName(var1);
+         String var5 = var2 != null && var4.equals("*") ? var2.getScoreboardName() : var4;
+         return new TextComponent(this.getScore(var5, var1));
       }
    }
 
    public boolean equals(Object var1) {
       if (this == var1) {
