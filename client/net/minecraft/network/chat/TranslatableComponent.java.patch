--- net/minecraft/network/chat/TranslatableComponent.java
+++ net/minecraft/network/chat/TranslatableComponent.java
@@ -1,194 +1,162 @@
 package net.minecraft.network.chat;
 
-import com.google.common.annotations.VisibleForTesting;
 import com.google.common.collect.Lists;
-import com.google.common.collect.Streams;
 import com.mojang.brigadier.exceptions.CommandSyntaxException;
 import java.util.Arrays;
-import java.util.IllegalFormatException;
 import java.util.Iterator;
 import java.util.List;
+import java.util.Optional;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
-import java.util.stream.Stream;
 import javax.annotation.Nullable;
 import net.minecraft.commands.CommandSourceStack;
 import net.minecraft.locale.Language;
 import net.minecraft.world.entity.Entity;
 
 public class TranslatableComponent extends BaseComponent implements ContextAwareComponent {
-   private static final Language DEFAULT_LANGUAGE = new Language();
-   private static final Language LANGUAGE = Language.getInstance();
+   private static final Object[] NO_ARGS = new Object[0];
+   private static final FormattedText TEXT_PERCENT = FormattedText.of("%");
+   private static final FormattedText TEXT_NULL = FormattedText.of("null");
    private final String key;
    private final Object[] args;
-   private final Object decomposeLock = new Object();
-   private long decomposedLanguageTime = -1L;
-   protected final List<Component> decomposedParts = Lists.newArrayList();
-   public static final Pattern FORMAT_PATTERN = Pattern.compile("%(?:(\\d+)\\$)?([A-Za-z%]|$)");
+   @Nullable
+   private Language decomposedWith;
+   private final List<FormattedText> decomposedParts = Lists.newArrayList();
+   private static final Pattern FORMAT_PATTERN = Pattern.compile("%(?:(\\d+)\\$)?([A-Za-z%]|$)");
 
+   public TranslatableComponent(String var1) {
+      this.key = var1;
+      this.args = NO_ARGS;
+   }
+
    public TranslatableComponent(String var1, Object... var2) {
       this.key = var1;
       this.args = var2;
-
-      for(int var3 = 0; var3 < var2.length; ++var3) {
-         Object var4 = var2[var3];
-         if (var4 instanceof Component) {
-            Component var5 = ((Component)var4).deepCopy();
-            this.args[var3] = var5;
-            var5.getStyle().inheritFrom(this.getStyle());
-         } else if (var4 == null) {
-            this.args[var3] = "null";
-         }
-      }
-
    }
 
-   @VisibleForTesting
-   synchronized void decompose() {
-      synchronized(this.decomposeLock) {
-         long var2 = LANGUAGE.getLastUpdateTime();
-         if (var2 == this.decomposedLanguageTime) {
-            return;
-         }
-
-         this.decomposedLanguageTime = var2;
+   private void decompose() {
+      Language var1 = Language.getInstance();
+      if (var1 != this.decomposedWith) {
+         this.decomposedWith = var1;
          this.decomposedParts.clear();
-      }
+         String var2 = var1.getOrDefault(this.key);
 
-      String var1 = LANGUAGE.getElement(this.key);
+         try {
+            this.decomposeTemplate(var1.reorder(var2, true), var1);
+         } catch (TranslatableFormatException var4) {
+            this.decomposedParts.clear();
+            this.decomposedParts.add(FormattedText.of(var2));
+         }
 
-      try {
-         this.decomposeTemplate(var1);
-      } catch (TranslatableFormatException var5) {
-         this.decomposedParts.clear();
-         this.decomposedParts.add(new TextComponent(var1));
       }
-
    }
 
-   protected void decomposeTemplate(String var1) {
-      Matcher var2 = FORMAT_PATTERN.matcher(var1);
+   private void decomposeTemplate(String var1, Language var2) {
+      Matcher var3 = FORMAT_PATTERN.matcher(var1);
 
       try {
-         int var3 = 0;
+         int var4 = 0;
 
-         int var4;
-         int var6;
-         for(var4 = 0; var2.find(var4); var4 = var6) {
-            int var5 = var2.start();
-            var6 = var2.end();
-            if (var5 > var4) {
-               TextComponent var7 = new TextComponent(String.format(var1.substring(var4, var5)));
-               var7.getStyle().inheritFrom(this.getStyle());
-               this.decomposedParts.add(var7);
+         int var5;
+         int var7;
+         for(var5 = 0; var3.find(var5); var5 = var7) {
+            int var6 = var3.start();
+            var7 = var3.end();
+            String var8;
+            if (var6 > var5) {
+               var8 = var1.substring(var5, var6);
+               if (var8.indexOf(37) != -1) {
+                  throw new IllegalArgumentException();
+               }
+
+               this.decomposedParts.add(FormattedText.of(var8));
             }
 
-            String var13 = var2.group(2);
-            String var8 = var1.substring(var5, var6);
-            if ("%".equals(var13) && "%%".equals(var8)) {
-               TextComponent var14 = new TextComponent("%");
-               var14.getStyle().inheritFrom(this.getStyle());
-               this.decomposedParts.add(var14);
+            var8 = var3.group(2);
+            String var9 = var1.substring(var6, var7);
+            if ("%".equals(var8) && "%%".equals(var9)) {
+               this.decomposedParts.add(TEXT_PERCENT);
             } else {
-               if (!"s".equals(var13)) {
-                  throw new TranslatableFormatException(this, "Unsupported format: '" + var8 + "'");
+               if (!"s".equals(var8)) {
+                  throw new TranslatableFormatException(this, "Unsupported format: '" + var9 + "'");
                }
 
-               String var9 = var2.group(1);
-               int var10 = var9 != null ? Integer.parseInt(var9) - 1 : var3++;
-               if (var10 < this.args.length) {
-                  this.decomposedParts.add(this.getComponent(var10));
+               String var10 = var3.group(1);
+               int var11 = var10 != null ? Integer.parseInt(var10) - 1 : var4++;
+               if (var11 < this.args.length) {
+                  this.decomposedParts.add(this.getArgument(var11, var2));
                }
             }
          }
 
-         if (var4 < var1.length()) {
-            TextComponent var12 = new TextComponent(String.format(var1.substring(var4)));
-            var12.getStyle().inheritFrom(this.getStyle());
-            this.decomposedParts.add(var12);
+         if (var5 < var1.length()) {
+            String var13 = var1.substring(var5);
+            if (var13.indexOf(37) != -1) {
+               throw new IllegalArgumentException();
+            }
+
+            this.decomposedParts.add(FormattedText.of(var13));
          }
 
-      } catch (IllegalFormatException var11) {
-         throw new TranslatableFormatException(this, var11);
+      } catch (IllegalArgumentException var12) {
+         throw new TranslatableFormatException(this, var12);
       }
    }
 
-   private Component getComponent(int var1) {
+   private FormattedText getArgument(int var1, Language var2) {
       if (var1 >= this.args.length) {
          throw new TranslatableFormatException(this, var1);
       } else {
-         Object var2 = this.args[var1];
-         Object var3;
-         if (var2 instanceof Component) {
-            var3 = (Component)var2;
+         Object var3 = this.args[var1];
+         if (var3 instanceof Component) {
+            return (Component)var3;
          } else {
-            var3 = new TextComponent(var2 == null ? "null" : var2.toString());
-            ((Component)var3).getStyle().inheritFrom(this.getStyle());
+            return var3 == null ? TEXT_NULL : FormattedText.of(var2.reorder(var3.toString(), false));
          }
-
-         return (Component)var3;
       }
    }
 
-   public Component setStyle(Style var1) {
-      super.setStyle(var1);
-      Object[] var2 = this.args;
-      int var3 = var2.length;
+   public TranslatableComponent plainCopy() {
+      return new TranslatableComponent(this.key, this.args);
+   }
 
-      for(int var4 = 0; var4 < var3; ++var4) {
-         Object var5 = var2[var4];
-         if (var5 instanceof Component) {
-            ((Component)var5).getStyle().inheritFrom(this.getStyle());
-         }
-      }
+   public <T> Optional<T> visitSelf(FormattedText.StyledContentConsumer<T> var1, Style var2) {
+      this.decompose();
+      Iterator var3 = this.decomposedParts.iterator();
 
-      if (this.decomposedLanguageTime > -1L) {
-         Iterator var6 = this.decomposedParts.iterator();
-
-         while(var6.hasNext()) {
-            Component var7 = (Component)var6.next();
-            var7.getStyle().inheritFrom(var1);
+      Optional var5;
+      do {
+         if (!var3.hasNext()) {
+            return Optional.empty();
          }
-      }
 
-      return this;
-   }
+         FormattedText var4 = (FormattedText)var3.next();
+         var5 = var4.visit(var1, var2);
+      } while(!var5.isPresent());
 
-   public Stream<Component> stream() {
-      this.decompose();
-      return Streams.concat(new Stream[]{this.decomposedParts.stream(), this.siblings.stream()}).flatMap(Component::stream);
+      return var5;
    }
 
-   public String getContents() {
+   public <T> Optional<T> visitSelf(FormattedText.ContentConsumer<T> var1) {
       this.decompose();
-      StringBuilder var1 = new StringBuilder();
       Iterator var2 = this.decomposedParts.iterator();
 
-      while(var2.hasNext()) {
-         Component var3 = (Component)var2.next();
-         var1.append(var3.getContents());
-      }
-
-      return var1.toString();
-   }
-
-   public TranslatableComponent copy() {
-      Object[] var1 = new Object[this.args.length];
-
-      for(int var2 = 0; var2 < this.args.length; ++var2) {
-         if (this.args[var2] instanceof Component) {
-            var1[var2] = ((Component)this.args[var2]).deepCopy();
-         } else {
-            var1[var2] = this.args[var2];
+      Optional var4;
+      do {
+         if (!var2.hasNext()) {
+            return Optional.empty();
          }
-      }
 
-      return new TranslatableComponent(this.key, var1);
+         FormattedText var3 = (FormattedText)var2.next();
+         var4 = var3.visit(var1);
+      } while(!var4.isPresent());
+
+      return var4;
    }
 
-   public Component resolve(@Nullable CommandSourceStack var1, @Nullable Entity var2, int var3) throws CommandSyntaxException {
+   public MutableComponent resolve(@Nullable CommandSourceStack var1, @Nullable Entity var2, int var3) throws CommandSyntaxException {
       Object[] var4 = new Object[this.args.length];
 
       for(int var5 = 0; var5 < var4.length; ++var5) {
          Object var6 = this.args[var5];
          if (var6 instanceof Component) {
