--- net/minecraft/gametest/framework/MultipleTestTracker.java
+++ net/minecraft/gametest/framework/MultipleTestTracker.java
@@ -1,38 +1,47 @@
 package net.minecraft.gametest.framework;
 
 import com.google.common.collect.Lists;
 import java.util.Collection;
+import java.util.function.Consumer;
 import javax.annotation.Nullable;
 
 public class MultipleTestTracker {
    private final Collection<GameTestInfo> tests = Lists.newArrayList();
    @Nullable
-   private GameTestListener listener;
+   private Collection<GameTestListener> listeners = Lists.newArrayList();
 
    public MultipleTestTracker() {
    }
 
    public MultipleTestTracker(Collection<GameTestInfo> var1) {
       this.tests.addAll(var1);
    }
 
-   public void add(GameTestInfo var1) {
+   public void addTestToTrack(GameTestInfo var1) {
       this.tests.add(var1);
-      if (this.listener != null) {
-         var1.addListener(this.listener);
-      }
-
+      this.listeners.forEach(var1::addListener);
    }
 
-   public void setListener(GameTestListener var1) {
-      this.listener = var1;
+   public void addListener(GameTestListener var1) {
+      this.listeners.add(var1);
       this.tests.forEach((var1x) -> {
          var1x.addListener(var1);
       });
    }
 
+   public void addFailureListener(final Consumer<GameTestInfo> var1) {
+      this.addListener(new GameTestListener() {
+         public void testStructureLoaded(GameTestInfo var1x) {
+         }
+
+         public void testFailed(GameTestInfo var1x) {
+            var1.accept(var1x);
+         }
+      });
+   }
+
    public int getFailedRequiredCount() {
       return (int)this.tests.stream().filter(GameTestInfo::hasFailed).filter(GameTestInfo::isRequired).count();
    }
 
    public int getFailedOptionalCount() {
