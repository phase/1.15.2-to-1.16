--- net/minecraft/gametest/framework/TestCommand.java
+++ net/minecraft/gametest/framework/TestCommand.java
@@ -1,8 +1,9 @@
 package net.minecraft.gametest.framework;
 
 import com.mojang.brigadier.CommandDispatcher;
+import com.mojang.brigadier.arguments.BoolArgumentType;
 import com.mojang.brigadier.arguments.IntegerArgumentType;
 import com.mojang.brigadier.arguments.StringArgumentType;
 import com.mojang.brigadier.builder.LiteralArgumentBuilder;
 import com.mojang.brigadier.builder.RequiredArgumentBuilder;
 import com.mojang.brigadier.exceptions.CommandSyntaxException;
@@ -14,52 +15,76 @@
 import java.nio.file.Paths;
 import java.util.Collection;
 import java.util.Collections;
 import java.util.Optional;
 import java.util.function.Consumer;
+import java.util.stream.Collectors;
 import javax.annotation.Nullable;
 import net.minecraft.ChatFormatting;
+import net.minecraft.Util;
 import net.minecraft.commands.CommandSourceStack;
 import net.minecraft.commands.Commands;
 import net.minecraft.commands.arguments.blocks.BlockInput;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Vec3i;
 import net.minecraft.data.structures.NbtToSnbt;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.NbtIo;
 import net.minecraft.nbt.TagParser;
 import net.minecraft.network.chat.ClickEvent;
-import net.minecraft.network.chat.Component;
 import net.minecraft.network.chat.HoverEvent;
+import net.minecraft.network.chat.MutableComponent;
 import net.minecraft.network.chat.Style;
 import net.minecraft.network.chat.TextComponent;
 import net.minecraft.network.protocol.game.DebugPackets;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.util.Mth;
 import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.Blocks;
+import net.minecraft.world.level.block.Rotation;
 import net.minecraft.world.level.block.entity.StructureBlockEntity;
 import net.minecraft.world.level.levelgen.Heightmap;
+import net.minecraft.world.phys.AABB;
 import net.minecraft.world.phys.BlockHitResult;
 import org.apache.commons.io.IOUtils;
 
 public class TestCommand {
    public static void register(CommandDispatcher<CommandSourceStack> var0) {
-      var0.register((LiteralArgumentBuilder)((LiteralArgumentBuilder)((LiteralArgumentBuilder)((LiteralArgumentBuilder)((LiteralArgumentBuilder)((LiteralArgumentBuilder)((LiteralArgumentBuilder)((LiteralArgumentBuilder)((LiteralArgumentBuilder)Commands.literal("test").then(Commands.literal("runthis").executes((var0x) -> {
+      var0.register((LiteralArgumentBuilder)((LiteralArgumentBuilder)((LiteralArgumentBuilder)((LiteralArgumentBuilder)((LiteralArgumentBuilder)((LiteralArgumentBuilder)((LiteralArgumentBuilder)((LiteralArgumentBuilder)((LiteralArgumentBuilder)((LiteralArgumentBuilder)((LiteralArgumentBuilder)Commands.literal("test").then(Commands.literal("runthis").executes((var0x) -> {
          return runNearbyTest((CommandSourceStack)var0x.getSource());
       }))).then(Commands.literal("runthese").executes((var0x) -> {
          return runAllNearbyTests((CommandSourceStack)var0x.getSource());
-      }))).then(Commands.literal("run").then(Commands.argument("testName", TestFunctionArgument.testFunctionArgument()).executes((var0x) -> {
-         return runTest((CommandSourceStack)var0x.getSource(), TestFunctionArgument.getTestFunction(var0x, "testName"));
-      })))).then(((LiteralArgumentBuilder)Commands.literal("runall").executes((var0x) -> {
-         return runAllTests((CommandSourceStack)var0x.getSource());
-      })).then(Commands.argument("testClassName", TestClassNameArgument.testClassName()).executes((var0x) -> {
-         return runAllTestsInClass((CommandSourceStack)var0x.getSource(), TestClassNameArgument.getTestClassName(var0x, "testClassName"));
-      })))).then(Commands.literal("export").then(Commands.argument("testName", StringArgumentType.word()).executes((var0x) -> {
+      }))).then(((LiteralArgumentBuilder)Commands.literal("runfailed").executes((var0x) -> {
+         return runLastFailedTests((CommandSourceStack)var0x.getSource(), false, 0, 8);
+      })).then(((RequiredArgumentBuilder)Commands.argument("onlyRequiredTests", BoolArgumentType.bool()).executes((var0x) -> {
+         return runLastFailedTests((CommandSourceStack)var0x.getSource(), BoolArgumentType.getBool(var0x, "onlyRequiredTests"), 0, 8);
+      })).then(((RequiredArgumentBuilder)Commands.argument("rotationSteps", IntegerArgumentType.integer()).executes((var0x) -> {
+         return runLastFailedTests((CommandSourceStack)var0x.getSource(), BoolArgumentType.getBool(var0x, "onlyRequiredTests"), IntegerArgumentType.getInteger(var0x, "rotationSteps"), 8);
+      })).then(Commands.argument("testsPerRow", IntegerArgumentType.integer()).executes((var0x) -> {
+         return runLastFailedTests((CommandSourceStack)var0x.getSource(), BoolArgumentType.getBool(var0x, "onlyRequiredTests"), IntegerArgumentType.getInteger(var0x, "rotationSteps"), IntegerArgumentType.getInteger(var0x, "testsPerRow"));
+      })))))).then(Commands.literal("run").then(((RequiredArgumentBuilder)Commands.argument("testName", TestFunctionArgument.testFunctionArgument()).executes((var0x) -> {
+         return runTest((CommandSourceStack)var0x.getSource(), TestFunctionArgument.getTestFunction(var0x, "testName"), 0);
+      })).then(Commands.argument("rotationSteps", IntegerArgumentType.integer()).executes((var0x) -> {
+         return runTest((CommandSourceStack)var0x.getSource(), TestFunctionArgument.getTestFunction(var0x, "testName"), IntegerArgumentType.getInteger(var0x, "rotationSteps"));
+      }))))).then(((LiteralArgumentBuilder)((LiteralArgumentBuilder)Commands.literal("runall").executes((var0x) -> {
+         return runAllTests((CommandSourceStack)var0x.getSource(), 0, 8);
+      })).then(((RequiredArgumentBuilder)Commands.argument("testClassName", TestClassNameArgument.testClassName()).executes((var0x) -> {
+         return runAllTestsInClass((CommandSourceStack)var0x.getSource(), TestClassNameArgument.getTestClassName(var0x, "testClassName"), 0, 8);
+      })).then(((RequiredArgumentBuilder)Commands.argument("rotationSteps", IntegerArgumentType.integer()).executes((var0x) -> {
+         return runAllTestsInClass((CommandSourceStack)var0x.getSource(), TestClassNameArgument.getTestClassName(var0x, "testClassName"), IntegerArgumentType.getInteger(var0x, "rotationSteps"), 8);
+      })).then(Commands.argument("testsPerRow", IntegerArgumentType.integer()).executes((var0x) -> {
+         return runAllTestsInClass((CommandSourceStack)var0x.getSource(), TestClassNameArgument.getTestClassName(var0x, "testClassName"), IntegerArgumentType.getInteger(var0x, "rotationSteps"), IntegerArgumentType.getInteger(var0x, "testsPerRow"));
+      }))))).then(((RequiredArgumentBuilder)Commands.argument("rotationSteps", IntegerArgumentType.integer()).executes((var0x) -> {
+         return runAllTests((CommandSourceStack)var0x.getSource(), IntegerArgumentType.getInteger(var0x, "rotationSteps"), 8);
+      })).then(Commands.argument("testsPerRow", IntegerArgumentType.integer()).executes((var0x) -> {
+         return runAllTests((CommandSourceStack)var0x.getSource(), IntegerArgumentType.getInteger(var0x, "rotationSteps"), IntegerArgumentType.getInteger(var0x, "testsPerRow"));
+      }))))).then(Commands.literal("export").then(Commands.argument("testName", StringArgumentType.word()).executes((var0x) -> {
          return exportTestStructure((CommandSourceStack)var0x.getSource(), StringArgumentType.getString(var0x, "testName"));
-      })))).then(Commands.literal("import").then(Commands.argument("testName", StringArgumentType.word()).executes((var0x) -> {
+      })))).then(Commands.literal("exportthis").executes((var0x) -> {
+         return exportNearestTestStructure((CommandSourceStack)var0x.getSource());
+      }))).then(Commands.literal("import").then(Commands.argument("testName", StringArgumentType.word()).executes((var0x) -> {
          return importTestStructure((CommandSourceStack)var0x.getSource(), StringArgumentType.getString(var0x, "testName"));
       })))).then(((LiteralArgumentBuilder)Commands.literal("pos").executes((var0x) -> {
          return showPos((CommandSourceStack)var0x.getSource(), "pos");
       })).then(Commands.argument("var", StringArgumentType.word()).executes((var0x) -> {
          return showPos((CommandSourceStack)var0x.getSource(), StringArgumentType.getString(var0x, "var"));
@@ -75,29 +100,29 @@
          return clearAllTests((CommandSourceStack)var0x.getSource(), IntegerArgumentType.getInteger(var0x, "radius"));
       }))));
    }
 
    private static int createNewStructure(CommandSourceStack var0, String var1, int var2, int var3, int var4) {
-      if (var2 <= 32 && var3 <= 32 && var4 <= 32) {
+      if (var2 <= 48 && var3 <= 48 && var4 <= 48) {
          ServerLevel var5 = var0.getLevel();
          BlockPos var6 = new BlockPos(var0.getPosition());
          BlockPos var7 = new BlockPos(var6.getX(), var0.getLevel().getHeightmapPos(Heightmap.Types.WORLD_SURFACE, var6).getY(), var6.getZ() + 3);
-         StructureUtils.createNewEmptyStructureBlock(var1.toLowerCase(), var7, new BlockPos(var2, var3, var4), 2, var5);
+         StructureUtils.createNewEmptyStructureBlock(var1.toLowerCase(), var7, new BlockPos(var2, var3, var4), Rotation.NONE, var5);
 
          for(int var8 = 0; var8 < var2; ++var8) {
             for(int var9 = 0; var9 < var4; ++var9) {
                BlockPos var10 = new BlockPos(var7.getX() + var8, var7.getY() + 1, var7.getZ() + var9);
                Block var11 = Blocks.POLISHED_ANDESITE;
                BlockInput var12 = new BlockInput(var11.defaultBlockState(), Collections.EMPTY_SET, (CompoundTag)null);
                var12.place(var5, var10, 2);
             }
          }
 
-         StructureUtils.addCommandBlockAndButtonToStartTest(var7.offset(1, 0, -1), var5);
+         StructureUtils.addCommandBlockAndButtonToStartTest(var7, new BlockPos(1, 0, -1), Rotation.NONE, var5);
          return 0;
       } else {
-         throw new IllegalArgumentException("The structure must be less than 32 blocks big in each axis");
+         throw new IllegalArgumentException("The structure must be less than 48 blocks big in each axis");
       }
    }
 
    private static int showPos(CommandSourceStack var0, String var1) throws CommandSyntaxException {
       BlockHitResult var2 = (BlockHitResult)var0.getPlayerOrException().pick(10.0D, 1.0F, false);
@@ -114,11 +139,11 @@
       } else {
          StructureBlockEntity var6 = (StructureBlockEntity)var4.getBlockEntity((BlockPos)var5.get());
          BlockPos var7 = var3.subtract((Vec3i)var5.get());
          String var8 = var7.getX() + ", " + var7.getY() + ", " + var7.getZ();
          String var9 = var6.getStructurePath();
-         Component var10 = (new TextComponent(var8)).setStyle((new Style()).setBold(true).setColor(ChatFormatting.GREEN).setHoverEvent(new HoverEvent(HoverEvent.Action.SHOW_TEXT, new TextComponent("Click to copy to clipboard"))).setClickEvent(new ClickEvent(ClickEvent.Action.COPY_TO_CLIPBOARD, "final BlockPos " + var1 + " = new BlockPos(" + var8 + ");")));
+         MutableComponent var10 = (new TextComponent(var8)).setStyle(Style.EMPTY.withBold(true).withColor(ChatFormatting.GREEN).withHoverEvent(new HoverEvent(HoverEvent.Action.SHOW_TEXT, new TextComponent("Click to copy to clipboard"))).withClickEvent(new ClickEvent(ClickEvent.Action.COPY_TO_CLIPBOARD, "final BlockPos " + var1 + " = new BlockPos(" + var8 + ");")));
          var0.sendSuccess((new TextComponent("Position relative to " + var9 + ": ")).append(var10), false);
          DebugPackets.sendGameTestAddMarker(var4, new BlockPos(var3), var8, -2147418368, 10000);
          return 1;
       }
    }
@@ -157,18 +182,20 @@
 
    private static void runTest(ServerLevel var0, BlockPos var1, @Nullable MultipleTestTracker var2) {
       StructureBlockEntity var3 = (StructureBlockEntity)var0.getBlockEntity(var1);
       String var4 = var3.getStructurePath();
       TestFunction var5 = GameTestRegistry.getTestFunction(var4);
-      GameTestInfo var6 = new GameTestInfo(var5, var1, var0);
+      GameTestInfo var6 = new GameTestInfo(var5, var3.getRotation(), var0);
       if (var2 != null) {
-         var2.add(var6);
+         var2.addTestToTrack(var6);
          var6.addListener(new TestCommand.TestSummaryDisplayer(var0, var2));
       }
 
       runTestPreparation(var5, var0);
-      GameTestRunner.runTest(var6, GameTestTicker.singleton);
+      AABB var7 = StructureUtils.getStructureBounds(var3);
+      BlockPos var8 = new BlockPos(var7.minX, var7.minY, var7.minZ);
+      GameTestRunner.runTest(var6, var8, GameTestTicker.singleton);
    }
 
    private static void showTestSummaryIfAllDone(ServerLevel var0, MultipleTestTracker var1) {
       if (var1.isDone()) {
          say(var0, "GameTest done! " + var1.getTotalCount() + " tests were run", ChatFormatting.WHITE);
@@ -191,18 +218,20 @@
       BlockPos var3 = new BlockPos(var0.getPosition().x, (double)var0.getLevel().getHeightmapPos(Heightmap.Types.WORLD_SURFACE, new BlockPos(var0.getPosition())).getY(), var0.getPosition().z);
       GameTestRunner.clearAllTests(var2, var3, GameTestTicker.singleton, Mth.clamp(var1, 0, 1024));
       return 1;
    }
 
-   private static int runTest(CommandSourceStack var0, TestFunction var1) {
-      ServerLevel var2 = var0.getLevel();
-      BlockPos var3 = new BlockPos(var0.getPosition());
-      BlockPos var4 = new BlockPos(var3.getX(), var0.getLevel().getHeightmapPos(Heightmap.Types.WORLD_SURFACE, var3).getY(), var3.getZ() + 3);
-      GameTestRunner.clearMarkers(var2);
-      runTestPreparation(var1, var2);
-      GameTestInfo var5 = new GameTestInfo(var1, var4, var2);
-      GameTestRunner.runTest(var5, GameTestTicker.singleton);
+   private static int runTest(CommandSourceStack var0, TestFunction var1, int var2) {
+      ServerLevel var3 = var0.getLevel();
+      BlockPos var4 = new BlockPos(var0.getPosition());
+      int var5 = var0.getLevel().getHeightmapPos(Heightmap.Types.WORLD_SURFACE, var4).getY();
+      BlockPos var6 = new BlockPos(var4.getX(), var5, var4.getZ() + 3);
+      GameTestRunner.clearMarkers(var3);
+      runTestPreparation(var1, var3);
+      Rotation var7 = StructureUtils.getRotationForRotationSteps(var2);
+      GameTestInfo var8 = new GameTestInfo(var1, var7, var3);
+      GameTestRunner.runTest(var8, var6, GameTestTicker.singleton);
       return 1;
    }
 
    private static void runTestPreparation(TestFunction var0, ServerLevel var1) {
       Consumer var2 = GameTestRegistry.getBeforeBatchFunction(var0.getBatchName());
@@ -210,37 +239,78 @@
          var2.accept(var1);
       }
 
    }
 
-   private static int runAllTests(CommandSourceStack var0) {
+   private static int runAllTests(CommandSourceStack var0, int var1, int var2) {
       GameTestRunner.clearMarkers(var0.getLevel());
-      runTests(var0, GameTestRegistry.getAllTestFunctions());
+      Collection var3 = GameTestRegistry.getAllTestFunctions();
+      say(var0, "Running all " + var3.size() + " tests...");
+      GameTestRegistry.forgetFailedTests();
+      runTests(var0, var3, var1, var2);
       return 1;
    }
 
-   private static int runAllTestsInClass(CommandSourceStack var0, String var1) {
-      Collection var2 = GameTestRegistry.getTestFunctionsForClassName(var1);
+   private static int runAllTestsInClass(CommandSourceStack var0, String var1, int var2, int var3) {
+      Collection var4 = GameTestRegistry.getTestFunctionsForClassName(var1);
       GameTestRunner.clearMarkers(var0.getLevel());
-      runTests(var0, var2);
+      say(var0, "Running " + var4.size() + " tests from " + var1 + "...");
+      GameTestRegistry.forgetFailedTests();
+      runTests(var0, var4, var2, var3);
       return 1;
    }
 
-   private static void runTests(CommandSourceStack var0, Collection<TestFunction> var1) {
-      BlockPos var2 = new BlockPos(var0.getPosition());
-      BlockPos var3 = new BlockPos(var2.getX(), var0.getLevel().getHeightmapPos(Heightmap.Types.WORLD_SURFACE, var2).getY(), var2.getZ() + 3);
-      ServerLevel var4 = var0.getLevel();
-      say(var0, "Running " + var1.size() + " tests...");
-      Collection var5 = GameTestRunner.runTests(var1, var3, var4, GameTestTicker.singleton);
-      MultipleTestTracker var6 = new MultipleTestTracker(var5);
-      var6.setListener(new TestCommand.TestSummaryDisplayer(var4, var6));
+   private static int runLastFailedTests(CommandSourceStack var0, boolean var1, int var2, int var3) {
+      Collection var4;
+      if (var1) {
+         var4 = (Collection)GameTestRegistry.getLastFailedTests().stream().filter(TestFunction::isRequired).collect(Collectors.toList());
+      } else {
+         var4 = GameTestRegistry.getLastFailedTests();
+      }
+
+      if (var4.isEmpty()) {
+         say(var0, "No failed tests to rerun");
+         return 0;
+      } else {
+         GameTestRunner.clearMarkers(var0.getLevel());
+         say(var0, "Rerunning " + var4.size() + " failed tests (" + (var1 ? "only required tests" : "including optional tests") + ")");
+         runTests(var0, var4, var2, var3);
+         return 1;
+      }
    }
 
+   private static void runTests(CommandSourceStack var0, Collection<TestFunction> var1, int var2, int var3) {
+      BlockPos var4 = new BlockPos(var0.getPosition());
+      BlockPos var5 = new BlockPos(var4.getX(), var0.getLevel().getHeightmapPos(Heightmap.Types.WORLD_SURFACE, var4).getY(), var4.getZ() + 3);
+      ServerLevel var6 = var0.getLevel();
+      Rotation var7 = StructureUtils.getRotationForRotationSteps(var2);
+      Collection var8 = GameTestRunner.runTests(var1, var5, var7, var6, GameTestTicker.singleton, var3);
+      MultipleTestTracker var9 = new MultipleTestTracker(var8);
+      var9.addListener(new TestCommand.TestSummaryDisplayer(var6, var9));
+      var9.addFailureListener((var0x) -> {
+         GameTestRegistry.rememberFailedTest(var0x.getTestFunction());
+      });
+   }
+
    private static void say(CommandSourceStack var0, String var1) {
       var0.sendSuccess(new TextComponent(var1), false);
    }
 
+   private static int exportNearestTestStructure(CommandSourceStack var0) {
+      BlockPos var1 = new BlockPos(var0.getPosition());
+      ServerLevel var2 = var0.getLevel();
+      BlockPos var3 = StructureUtils.findNearestStructureBlock(var1, 15, var2);
+      if (var3 == null) {
+         say(var2, "Couldn't find any structure block within 15 radius", ChatFormatting.RED);
+         return 0;
+      } else {
+         StructureBlockEntity var4 = (StructureBlockEntity)var2.getBlockEntity(var3);
+         String var5 = var4.getStructurePath();
+         return exportTestStructure(var0, var5);
+      }
+   }
+
    private static int exportTestStructure(CommandSourceStack var0, String var1) {
       Path var2 = Paths.get(StructureUtils.testStructuresDir);
       ResourceLocation var3 = new ResourceLocation("minecraft", var1);
       Path var4 = var0.getLevel().getStructureManager().createPathToStructure(var3, ".nbt");
       Path var5 = NbtToSnbt.convertStructure(var4, var1, var2);
@@ -254,11 +324,11 @@
             say(var0, "Could not create folder " + var5.getParent());
             var7.printStackTrace();
             return 1;
          }
 
-         say(var0, "Exported to " + var5.toAbsolutePath());
+         say(var0, "Exported " + var1 + " to " + var5.toAbsolutePath());
          return 0;
       }
    }
 
    private static int importTestStructure(CommandSourceStack var0, String var1) {
@@ -283,11 +353,11 @@
 
    private static void say(ServerLevel var0, String var1, ChatFormatting var2) {
       var0.getPlayers((var0x) -> {
          return true;
       }).forEach((var2x) -> {
-         var2x.sendMessage(new TextComponent(var2 + var1));
+         var2x.sendMessage(new TextComponent(var2 + var1), Util.NIL_UUID);
       });
    }
 
    static class TestSummaryDisplayer implements GameTestListener {
       private final ServerLevel level;
