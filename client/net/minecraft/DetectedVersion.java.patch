--- net/minecraft/DetectedVersion.java
+++ net/minecraft/DetectedVersion.java
@@ -14,31 +14,32 @@
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
 public class DetectedVersion implements GameVersion {
    private static final Logger LOGGER = LogManager.getLogger();
+   public static final GameVersion BUILT_IN = new DetectedVersion();
    private final String id;
    private final String name;
    private final boolean stable;
    private final int worldVersion;
    private final int protocolVersion;
    private final int packVersion;
    private final Date buildTime;
    private final String releaseTarget;
 
-   public DetectedVersion() {
+   private DetectedVersion() {
       this.id = UUID.randomUUID().toString().replaceAll("-", "");
-      this.name = "1.15.2";
-      this.stable = true;
-      this.worldVersion = 2230;
-      this.protocolVersion = 578;
+      this.name = "1.16-pre7";
+      this.stable = false;
+      this.worldVersion = 2563;
+      this.protocolVersion = 732;
       this.packVersion = 5;
       this.buildTime = new Date();
-      this.releaseTarget = "1.15.2";
+      this.releaseTarget = "1.16";
    }
 
-   protected DetectedVersion(JsonObject var1) {
+   private DetectedVersion(JsonObject var1) {
       this.id = GsonHelper.getAsString(var1, "id");
       this.name = GsonHelper.getAsString(var1, "name");
       this.releaseTarget = GsonHelper.getAsString(var1, "release_target");
       this.stable = GsonHelper.getAsBoolean(var1, "stable");
       this.worldVersion = GsonHelper.getAsInt(var1, "world_version");
@@ -50,44 +51,41 @@
    public static GameVersion tryDetectVersion() {
       try {
          InputStream var0 = DetectedVersion.class.getResourceAsStream("/version.json");
          Throwable var1 = null;
 
-         DetectedVersion var2;
+         Object var4;
          try {
-            if (var0 != null) {
-               InputStreamReader var35 = new InputStreamReader(var0);
-               Throwable var3 = null;
+            if (var0 == null) {
+               LOGGER.warn("Missing version information!");
+               GameVersion var35 = BUILT_IN;
+               return var35;
+            }
 
-               try {
-                  Object var4;
-                  try {
-                     var4 = new DetectedVersion(GsonHelper.parse((Reader)var35));
-                     return (GameVersion)var4;
-                  } catch (Throwable var30) {
-                     var4 = var30;
-                     var3 = var30;
-                     throw var30;
-                  }
-               } finally {
-                  if (var35 != null) {
-                     if (var3 != null) {
-                        try {
-                           var35.close();
-                        } catch (Throwable var29) {
-                           var3.addSuppressed(var29);
-                        }
-                     } else {
-                        var35.close();
+            InputStreamReader var2 = new InputStreamReader(var0);
+            Throwable var3 = null;
+
+            try {
+               var4 = new DetectedVersion(GsonHelper.parse((Reader)var2));
+            } catch (Throwable var30) {
+               var4 = var30;
+               var3 = var30;
+               throw var30;
+            } finally {
+               if (var2 != null) {
+                  if (var3 != null) {
+                     try {
+                        var2.close();
+                     } catch (Throwable var29) {
+                        var3.addSuppressed(var29);
                      }
+                  } else {
+                     var2.close();
                   }
-
                }
-            }
 
-            LOGGER.warn("Missing version information!");
-            var2 = new DetectedVersion();
+            }
          } catch (Throwable var32) {
             var1 = var32;
             throw var32;
          } finally {
             if (var0 != null) {
@@ -102,11 +100,11 @@
                }
             }
 
          }
 
-         return var2;
+         return (GameVersion)var4;
       } catch (JsonParseException | IOException var34) {
          throw new IllegalStateException("Game version information is corrupt", var34);
       }
    }
 
