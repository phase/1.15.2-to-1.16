--- com/mojang/realmsclient/client/FileDownload.java
+++ com/mojang/realmsclient/client/FileDownload.java
@@ -6,24 +6,27 @@
 import com.mojang.realmsclient.exception.RealmsDefaultUncaughtExceptionHandler;
 import com.mojang.realmsclient.gui.screens.RealmsDownloadLatestWorldScreen;
 import java.awt.event.ActionEvent;
 import java.awt.event.ActionListener;
 import java.io.BufferedInputStream;
-import java.io.BufferedOutputStream;
 import java.io.File;
 import java.io.FileInputStream;
 import java.io.FileOutputStream;
 import java.io.IOException;
 import java.io.OutputStream;
+import java.nio.file.Path;
 import java.util.Iterator;
 import java.util.Locale;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
-import net.minecraft.realms.Realms;
-import net.minecraft.realms.RealmsAnvilLevelStorageSource;
-import net.minecraft.realms.RealmsLevelSummary;
-import net.minecraft.realms.RealmsSharedConstants;
+import net.minecraft.SharedConstants;
+import net.minecraft.client.Minecraft;
+import net.minecraft.nbt.CompoundTag;
+import net.minecraft.nbt.NbtIo;
+import net.minecraft.world.level.storage.LevelResource;
+import net.minecraft.world.level.storage.LevelStorageSource;
+import net.minecraft.world.level.storage.LevelSummary;
 import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
 import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;
 import org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream;
 import org.apache.commons.io.FileUtils;
 import org.apache.commons.io.IOUtils;
@@ -83,47 +86,47 @@
       }
 
       return var5;
    }
 
-   public void download(WorldDownload var1, String var2, RealmsDownloadLatestWorldScreen.DownloadStatus var3, RealmsAnvilLevelStorageSource var4) {
+   public void download(WorldDownload var1, String var2, RealmsDownloadLatestWorldScreen.DownloadStatus var3, LevelStorageSource var4) {
       if (this.currentThread == null) {
          this.currentThread = new Thread(() -> {
             CloseableHttpClient var5 = null;
             boolean var90 = false;
 
-            label1408: {
-               CloseableHttpResponse var6;
-               FileOutputStream var7;
-               FileDownload.DownloadCountingOutputStream var9;
-               FileDownload.ResourcePackProgressListener var106;
-               label1402: {
+            CloseableHttpResponse var6;
+            FileOutputStream var7;
+            FileDownload.DownloadCountingOutputStream var9;
+            FileDownload.ResourcePackProgressListener var106;
+            label1399: {
+               label1400: {
                   try {
                      var90 = true;
                      this.tempFile = File.createTempFile("backup", ".tar.gz");
                      this.request = new HttpGet(var1.downloadLink);
                      var5 = HttpClientBuilder.create().setDefaultRequestConfig(this.requestConfig).build();
                      var6 = var5.execute(this.request);
                      var3.totalBytes = Long.parseLong(var6.getFirstHeader("Content-Length").getValue());
-                     if (var6.getStatusLine().getStatusCode() != 200) {
-                        this.error = true;
-                        this.request.abort();
+                     if (var6.getStatusLine().getStatusCode() == 200) {
+                        var7 = new FileOutputStream(this.tempFile);
+                        FileDownload.ProgressListener var8 = new FileDownload.ProgressListener(var2.trim(), this.tempFile, var4, var3);
+                        var9 = new FileDownload.DownloadCountingOutputStream(var7);
+                        var9.setListener(var8);
+                        IOUtils.copy(var6.getEntity().getContent(), var9);
                         var90 = false;
-                        break label1408;
+                        break label1400;
                      }
 
-                     var7 = new FileOutputStream(this.tempFile);
-                     FileDownload.ProgressListener var8 = new FileDownload.ProgressListener(var2.trim(), this.tempFile, var4, var3, var1);
-                     var9 = new FileDownload.DownloadCountingOutputStream(var7);
-                     var9.setListener(var8);
-                     IOUtils.copy(var6.getEntity().getContent(), var9);
+                     this.error = true;
+                     this.request.abort();
                      var90 = false;
-                     break label1402;
                   } catch (Exception var103) {
                      LOGGER.error("Caught exception while downloading: " + var103.getMessage());
                      this.error = true;
                      var90 = false;
+                     break label1399;
                   } finally {
                      if (var90) {
                         this.request.releaseConnection();
                         if (this.tempFile != null) {
                            this.tempFile.delete();
@@ -181,25 +184,25 @@
                   if (!this.error) {
                      if (!var1.resourcePackUrl.isEmpty() && !var1.resourcePackHash.isEmpty()) {
                         try {
                            this.tempFile = File.createTempFile("resources", ".tar.gz");
                            this.request = new HttpGet(var1.resourcePackUrl);
-                           var6 = var5.execute(this.request);
-                           var3.totalBytes = Long.parseLong(var6.getFirstHeader("Content-Length").getValue());
-                           if (var6.getStatusLine().getStatusCode() != 200) {
+                           CloseableHttpResponse var105 = var5.execute(this.request);
+                           var3.totalBytes = Long.parseLong(var105.getFirstHeader("Content-Length").getValue());
+                           if (var105.getStatusLine().getStatusCode() != 200) {
                               this.error = true;
                               this.request.abort();
                               return;
                            }
 
-                           var7 = new FileOutputStream(this.tempFile);
-                           var106 = new FileDownload.ResourcePackProgressListener(this.tempFile, var3, var1);
-                           var9 = new FileDownload.DownloadCountingOutputStream(var7);
-                           var9.setListener(var106);
-                           IOUtils.copy(var6.getEntity().getContent(), var9);
-                        } catch (Exception var99) {
-                           LOGGER.error("Caught exception while downloading: " + var99.getMessage());
+                           FileOutputStream var107 = new FileOutputStream(this.tempFile);
+                           FileDownload.ResourcePackProgressListener var108 = new FileDownload.ResourcePackProgressListener(this.tempFile, var3, var1);
+                           FileDownload.DownloadCountingOutputStream var10 = new FileDownload.DownloadCountingOutputStream(var107);
+                           var10.setListener(var108);
+                           IOUtils.copy(var105.getEntity().getContent(), var10);
+                        } catch (Exception var97) {
+                           LOGGER.error("Caught exception while downloading: " + var97.getMessage());
                            this.error = true;
                         } finally {
                            this.request.releaseConnection();
                            if (this.tempFile != null) {
                               this.tempFile.delete();
@@ -212,15 +215,13 @@
                   }
 
                   if (var5 != null) {
                      try {
                         var5.close();
-                     } catch (IOException var93) {
+                     } catch (IOException var92) {
                         LOGGER.error("Failed to close Realms download client");
                      }
-
-                     return;
                   }
 
                   return;
                }
 
@@ -229,35 +230,40 @@
                   this.tempFile.delete();
                }
 
                if (!this.error) {
                   if (!var1.resourcePackUrl.isEmpty() && !var1.resourcePackHash.isEmpty()) {
-                     try {
-                        this.tempFile = File.createTempFile("resources", ".tar.gz");
-                        this.request = new HttpGet(var1.resourcePackUrl);
-                        var6 = var5.execute(this.request);
-                        var3.totalBytes = Long.parseLong(var6.getFirstHeader("Content-Length").getValue());
-                        if (var6.getStatusLine().getStatusCode() != 200) {
+                     label1344: {
+                        try {
+                           this.tempFile = File.createTempFile("resources", ".tar.gz");
+                           this.request = new HttpGet(var1.resourcePackUrl);
+                           var6 = var5.execute(this.request);
+                           var3.totalBytes = Long.parseLong(var6.getFirstHeader("Content-Length").getValue());
+                           if (var6.getStatusLine().getStatusCode() == 200) {
+                              var7 = new FileOutputStream(this.tempFile);
+                              var106 = new FileDownload.ResourcePackProgressListener(this.tempFile, var3, var1);
+                              var9 = new FileDownload.DownloadCountingOutputStream(var7);
+                              var9.setListener(var106);
+                              IOUtils.copy(var6.getEntity().getContent(), var9);
+                              break label1344;
+                           }
+
                            this.error = true;
                            this.request.abort();
-                           return;
-                        }
+                        } catch (Exception var101) {
+                           LOGGER.error("Caught exception while downloading: " + var101.getMessage());
+                           this.error = true;
+                           break label1344;
+                        } finally {
+                           this.request.releaseConnection();
+                           if (this.tempFile != null) {
+                              this.tempFile.delete();
+                           }
 
-                        var7 = new FileOutputStream(this.tempFile);
-                        var106 = new FileDownload.ResourcePackProgressListener(this.tempFile, var3, var1);
-                        var9 = new FileDownload.DownloadCountingOutputStream(var7);
-                        var9.setListener(var106);
-                        IOUtils.copy(var6.getEntity().getContent(), var9);
-                     } catch (Exception var101) {
-                        LOGGER.error("Caught exception while downloading: " + var101.getMessage());
-                        this.error = true;
-                     } finally {
-                        this.request.releaseConnection();
-                        if (this.tempFile != null) {
-                           this.tempFile.delete();
                         }
 
+                        return;
                      }
                   } else {
                      this.finished = true;
                   }
                }
@@ -266,10 +272,12 @@
                   try {
                      var5.close();
                   } catch (IOException var94) {
                      LOGGER.error("Failed to close Realms download client");
                   }
+
+                  return;
                }
 
                return;
             }
 
@@ -281,25 +289,25 @@
             if (!this.error) {
                if (!var1.resourcePackUrl.isEmpty() && !var1.resourcePackHash.isEmpty()) {
                   try {
                      this.tempFile = File.createTempFile("resources", ".tar.gz");
                      this.request = new HttpGet(var1.resourcePackUrl);
-                     CloseableHttpResponse var105 = var5.execute(this.request);
-                     var3.totalBytes = Long.parseLong(var105.getFirstHeader("Content-Length").getValue());
-                     if (var105.getStatusLine().getStatusCode() != 200) {
+                     var6 = var5.execute(this.request);
+                     var3.totalBytes = Long.parseLong(var6.getFirstHeader("Content-Length").getValue());
+                     if (var6.getStatusLine().getStatusCode() != 200) {
                         this.error = true;
                         this.request.abort();
                         return;
                      }
 
-                     FileOutputStream var107 = new FileOutputStream(this.tempFile);
-                     FileDownload.ResourcePackProgressListener var108 = new FileDownload.ResourcePackProgressListener(this.tempFile, var3, var1);
-                     FileDownload.DownloadCountingOutputStream var10 = new FileDownload.DownloadCountingOutputStream(var107);
-                     var10.setListener(var108);
-                     IOUtils.copy(var105.getEntity().getContent(), var10);
-                  } catch (Exception var97) {
-                     LOGGER.error("Caught exception while downloading: " + var97.getMessage());
+                     var7 = new FileOutputStream(this.tempFile);
+                     var106 = new FileDownload.ResourcePackProgressListener(this.tempFile, var3, var1);
+                     var9 = new FileDownload.DownloadCountingOutputStream(var7);
+                     var9.setListener(var106);
+                     IOUtils.copy(var6.getEntity().getContent(), var9);
+                  } catch (Exception var99) {
+                     LOGGER.error("Caught exception while downloading: " + var99.getMessage());
                      this.error = true;
                   } finally {
                      this.request.releaseConnection();
                      if (this.tempFile != null) {
                         this.tempFile.delete();
@@ -312,11 +320,11 @@
             }
 
             if (var5 != null) {
                try {
                   var5.close();
-               } catch (IOException var92) {
+               } catch (IOException var93) {
                   LOGGER.error("Failed to close Realms download client");
                }
             }
 
          });
@@ -362,14 +370,14 @@
       }
 
       return var0;
    }
 
-   private void untarGzipArchive(String var1, File var2, RealmsAnvilLevelStorageSource var3) throws IOException {
+   private void untarGzipArchive(String var1, File var2, LevelStorageSource var3) throws IOException {
       Pattern var4 = Pattern.compile(".*-([0-9]+)$");
       int var6 = 1;
-      char[] var7 = RealmsSharedConstants.ILLEGAL_FILE_CHARACTERS;
+      char[] var7 = SharedConstants.ILLEGAL_FILE_CHARACTERS;
       int var8 = var7.length;
 
       for(int var9 = 0; var9 < var8; ++var9) {
          char var10 = var7[var9];
          var1 = var1.replace(var10, '_');
@@ -380,132 +388,237 @@
       }
 
       var1 = findAvailableFolderName(var1);
 
       try {
-         Iterator var24 = var3.getLevelList().iterator();
+         Iterator var146 = var3.getLevelList().iterator();
 
-         while(var24.hasNext()) {
-            RealmsLevelSummary var26 = (RealmsLevelSummary)var24.next();
-            if (var26.getLevelId().toLowerCase(Locale.ROOT).startsWith(var1.toLowerCase(Locale.ROOT))) {
-               Matcher var29 = var4.matcher(var26.getLevelId());
-               if (var29.matches()) {
-                  if (Integer.valueOf(var29.group(1)) > var6) {
-                     var6 = Integer.valueOf(var29.group(1));
+         while(var146.hasNext()) {
+            LevelSummary var148 = (LevelSummary)var146.next();
+            if (var148.getLevelId().toLowerCase(Locale.ROOT).startsWith(var1.toLowerCase(Locale.ROOT))) {
+               Matcher var151 = var4.matcher(var148.getLevelId());
+               if (var151.matches()) {
+                  if (Integer.valueOf(var151.group(1)) > var6) {
+                     var6 = Integer.valueOf(var151.group(1));
                   }
                } else {
                   ++var6;
                }
             }
          }
-      } catch (Exception var23) {
-         LOGGER.error("Error getting level list", var23);
+      } catch (Exception var145) {
+         LOGGER.error("Error getting level list", var145);
          this.error = true;
          return;
       }
 
       String var5;
       if (var3.isNewLevelIdAcceptable(var1) && var6 <= 1) {
          var5 = var1;
       } else {
          var5 = var1 + (var6 == 1 ? "" : "-" + var6);
          if (!var3.isNewLevelIdAcceptable(var5)) {
-            boolean var25 = false;
+            boolean var147 = false;
 
-            while(!var25) {
+            while(!var147) {
                ++var6;
                var5 = var1 + (var6 == 1 ? "" : "-" + var6);
                if (var3.isNewLevelIdAcceptable(var5)) {
-                  var25 = true;
+                  var147 = true;
                }
             }
          }
       }
 
-      TarArchiveInputStream var27 = null;
-      File var28 = new File(Realms.getGameDirectoryPath(), "saves");
-      boolean var20 = false;
+      TarArchiveInputStream var149 = null;
+      File var150 = new File(Minecraft.getInstance().gameDirectory.getAbsolutePath(), "saves");
+      boolean var108 = false;
 
-      File var31;
-      label301: {
+      LevelStorageSource.LevelStorageAccess var154;
+      Throwable var155;
+      Path var156;
+      label1421: {
          try {
-            var20 = true;
-            var28.mkdir();
-            var27 = new TarArchiveInputStream(new GzipCompressorInputStream(new BufferedInputStream(new FileInputStream(var2))));
+            var108 = true;
+            var150.mkdir();
+            var149 = new TarArchiveInputStream(new GzipCompressorInputStream(new BufferedInputStream(new FileInputStream(var2))));
 
-            for(TarArchiveEntry var30 = var27.getNextTarEntry(); var30 != null; var30 = var27.getNextTarEntry()) {
-               var31 = new File(var28, var30.getName().replace("world", var5));
-               if (var30.isDirectory()) {
-                  var31.mkdirs();
+            for(TarArchiveEntry var152 = var149.getNextTarEntry(); var152 != null; var152 = var149.getNextTarEntry()) {
+               File var153 = new File(var150, var152.getName().replace("world", var5));
+               if (var152.isDirectory()) {
+                  var153.mkdirs();
                } else {
-                  var31.createNewFile();
-                  byte[] var11 = new byte[1024];
-                  BufferedOutputStream var12 = new BufferedOutputStream(new FileOutputStream(var31));
-                  boolean var13 = false;
+                  var153.createNewFile();
+                  FileOutputStream var11 = new FileOutputStream(var153);
+                  Throwable var12 = null;
 
-                  int var33;
-                  while((var33 = var27.read(var11)) != -1) {
-                     var12.write(var11, 0, var33);
-                  }
+                  try {
+                     IOUtils.copy(var149, var11);
+                  } catch (Throwable var135) {
+                     var12 = var135;
+                     throw var135;
+                  } finally {
+                     if (var11 != null) {
+                        if (var12 != null) {
+                           try {
+                              var11.close();
+                           } catch (Throwable var132) {
+                              var12.addSuppressed(var132);
+                           }
+                        } else {
+                           var11.close();
+                        }
+                     }
 
-                  var12.close();
-                  Object var32 = null;
+                  }
                }
             }
 
-            var20 = false;
-            break label301;
-         } catch (Exception var21) {
-            LOGGER.error("Error extracting world", var21);
+            var108 = false;
+            break label1421;
+         } catch (Exception var143) {
+            LOGGER.error("Error extracting world", var143);
             this.error = true;
-            var20 = false;
+            var108 = false;
          } finally {
-            if (var20) {
-               if (var27 != null) {
-                  var27.close();
+            if (var108) {
+               if (var149 != null) {
+                  var149.close();
                }
 
                if (var2 != null) {
                   var2.delete();
                }
 
-               var3.renameLevel(var5, var5.trim());
-               File var16 = new File(var28, var5 + File.separator + "level.dat");
-               Realms.deletePlayerTag(var16);
-               this.resourcePackPath = new File(var28, var5 + File.separator + "resources.zip");
+               try {
+                  LevelStorageSource.LevelStorageAccess var21 = var3.createAccess(var5);
+                  Throwable var22 = null;
+
+                  try {
+                     var21.renameLevel(var5.trim());
+                     Path var23 = var21.getLevelPath(LevelResource.LEVEL_DATA_FILE);
+                     deletePlayerTag(var23.toFile());
+                  } catch (Throwable var129) {
+                     var22 = var129;
+                     throw var129;
+                  } finally {
+                     if (var21 != null) {
+                        if (var22 != null) {
+                           try {
+                              var21.close();
+                           } catch (Throwable var128) {
+                              var22.addSuppressed(var128);
+                           }
+                        } else {
+                           var21.close();
+                        }
+                     }
+
+                  }
+               } catch (IOException var137) {
+                  LOGGER.error("Failed to rename unpacked realms level {}", var5, var137);
+               }
+
+               this.resourcePackPath = new File(var150, var5 + File.separator + "resources.zip");
             }
          }
 
-         if (var27 != null) {
-            var27.close();
+         if (var149 != null) {
+            var149.close();
          }
 
          if (var2 != null) {
             var2.delete();
          }
 
-         var3.renameLevel(var5, var5.trim());
-         var31 = new File(var28, var5 + File.separator + "level.dat");
-         Realms.deletePlayerTag(var31);
-         this.resourcePackPath = new File(var28, var5 + File.separator + "resources.zip");
+         try {
+            var154 = var3.createAccess(var5);
+            var155 = null;
+
+            try {
+               var154.renameLevel(var5.trim());
+               var156 = var154.getLevelPath(LevelResource.LEVEL_DATA_FILE);
+               deletePlayerTag(var156.toFile());
+            } catch (Throwable var131) {
+               var155 = var131;
+               throw var131;
+            } finally {
+               if (var154 != null) {
+                  if (var155 != null) {
+                     try {
+                        var154.close();
+                     } catch (Throwable var130) {
+                        var155.addSuppressed(var130);
+                     }
+                  } else {
+                     var154.close();
+                  }
+               }
+
+            }
+         } catch (IOException var139) {
+            LOGGER.error("Failed to rename unpacked realms level {}", var5, var139);
+         }
+
+         this.resourcePackPath = new File(var150, var5 + File.separator + "resources.zip");
          return;
       }
 
-      if (var27 != null) {
-         var27.close();
+      if (var149 != null) {
+         var149.close();
       }
 
       if (var2 != null) {
          var2.delete();
       }
 
-      var3.renameLevel(var5, var5.trim());
-      var31 = new File(var28, var5 + File.separator + "level.dat");
-      Realms.deletePlayerTag(var31);
-      this.resourcePackPath = new File(var28, var5 + File.separator + "resources.zip");
+      try {
+         var154 = var3.createAccess(var5);
+         var155 = null;
+
+         try {
+            var154.renameLevel(var5.trim());
+            var156 = var154.getLevelPath(LevelResource.LEVEL_DATA_FILE);
+            deletePlayerTag(var156.toFile());
+         } catch (Throwable var134) {
+            var155 = var134;
+            throw var134;
+         } finally {
+            if (var154 != null) {
+               if (var155 != null) {
+                  try {
+                     var154.close();
+                  } catch (Throwable var133) {
+                     var155.addSuppressed(var133);
+                  }
+               } else {
+                  var154.close();
+               }
+            }
+
+         }
+      } catch (IOException var142) {
+         LOGGER.error("Failed to rename unpacked realms level {}", var5, var142);
+      }
+
+      this.resourcePackPath = new File(var150, var5 + File.separator + "resources.zip");
    }
 
+   private static void deletePlayerTag(File var0) {
+      if (var0.exists()) {
+         try {
+            CompoundTag var1 = NbtIo.readCompressed(var0);
+            CompoundTag var2 = var1.getCompound("Data");
+            var2.remove("Player");
+            NbtIo.writeCompressed(var1, var0);
+         } catch (Exception var3) {
+            var3.printStackTrace();
+         }
+      }
+
+   }
+
    class DownloadCountingOutputStream extends CountingOutputStream {
       private ActionListener listener;
 
       public DownloadCountingOutputStream(OutputStream var2) {
          super(var2);
@@ -558,20 +671,18 @@
    }
 
    class ProgressListener implements ActionListener {
       private final String worldName;
       private final File tempFile;
-      private final RealmsAnvilLevelStorageSource levelStorageSource;
+      private final LevelStorageSource levelStorageSource;
       private final RealmsDownloadLatestWorldScreen.DownloadStatus downloadStatus;
-      private final WorldDownload worldDownload;
 
-      private ProgressListener(String var2, File var3, RealmsAnvilLevelStorageSource var4, RealmsDownloadLatestWorldScreen.DownloadStatus var5, WorldDownload var6) {
+      private ProgressListener(String var2, File var3, LevelStorageSource var4, RealmsDownloadLatestWorldScreen.DownloadStatus var5) {
          this.worldName = var2;
          this.tempFile = var3;
          this.levelStorageSource = var4;
          this.downloadStatus = var5;
-         this.worldDownload = var6;
       }
 
       public void actionPerformed(ActionEvent var1) {
          this.downloadStatus.bytesWritten = ((FileDownload.DownloadCountingOutputStream)var1.getSource()).getByteCount();
          if (this.downloadStatus.bytesWritten >= this.downloadStatus.totalBytes && !FileDownload.this.cancelled && !FileDownload.this.error) {
