--- com/mojang/realmsclient/client/RealmsClient.java
+++ com/mojang/realmsclient/client/RealmsClient.java
@@ -1,10 +1,11 @@
 package com.mojang.realmsclient.client;
 
 import com.google.gson.Gson;
 import com.google.gson.GsonBuilder;
 import com.mojang.realmsclient.dto.BackupList;
+import com.mojang.realmsclient.dto.GuardedSerializer;
 import com.mojang.realmsclient.dto.Ops;
 import com.mojang.realmsclient.dto.PendingInvitesList;
 import com.mojang.realmsclient.dto.PingResult;
 import com.mojang.realmsclient.dto.PlayerInfo;
 import com.mojang.realmsclient.dto.RealmsDescriptionDto;
@@ -20,51 +21,48 @@
 import com.mojang.realmsclient.dto.WorldDownload;
 import com.mojang.realmsclient.dto.WorldTemplatePaginatedList;
 import com.mojang.realmsclient.exception.RealmsHttpException;
 import com.mojang.realmsclient.exception.RealmsServiceException;
 import com.mojang.realmsclient.exception.RetryCallException;
-import java.io.IOException;
-import java.io.UnsupportedEncodingException;
 import java.net.Proxy;
 import java.net.URI;
 import java.net.URISyntaxException;
-import net.minecraft.realms.Realms;
+import javax.annotation.Nullable;
+import net.minecraft.SharedConstants;
+import net.minecraft.client.Minecraft;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
 public class RealmsClient {
    public static RealmsClient.Environment currentEnvironment;
    private static boolean initialized;
    private static final Logger LOGGER;
    private final String sessionId;
    private final String username;
-   private static final Gson gson;
+   private static final GuardedSerializer GSON;
 
-   public static RealmsClient createRealmsClient() {
-      String var0 = Realms.userName();
-      String var1 = Realms.sessionId();
-      if (var0 != null && var1 != null) {
-         if (!initialized) {
-            initialized = true;
-            String var2 = System.getenv("realms.environment");
-            if (var2 == null) {
-               var2 = System.getProperty("realms.environment");
-            }
+   public static RealmsClient create() {
+      Minecraft var0 = Minecraft.getInstance();
+      String var1 = var0.getUser().getName();
+      String var2 = var0.getUser().getSessionId();
+      if (!initialized) {
+         initialized = true;
+         String var3 = System.getenv("realms.environment");
+         if (var3 == null) {
+            var3 = System.getProperty("realms.environment");
+         }
 
-            if (var2 != null) {
-               if ("LOCAL".equals(var2)) {
-                  switchToLocal();
-               } else if ("STAGE".equals(var2)) {
-                  switchToStage();
-               }
+         if (var3 != null) {
+            if ("LOCAL".equals(var3)) {
+               switchToLocal();
+            } else if ("STAGE".equals(var3)) {
+               switchToStage();
             }
          }
-
-         return new RealmsClient(var1, var0, Realms.getProxy());
-      } else {
-         return null;
       }
+
+      return new RealmsClient(var2, var1, var0.getProxy());
    }
 
    public static void switchToStage() {
       currentEnvironment = RealmsClient.Environment.STAGE;
    }
@@ -81,17 +79,17 @@
       this.sessionId = var1;
       this.username = var2;
       RealmsClientConfig.setProxy(var3);
    }
 
-   public RealmsServerList listWorlds() throws RealmsServiceException, IOException {
+   public RealmsServerList listWorlds() throws RealmsServiceException {
       String var1 = this.url("worlds");
       String var2 = this.execute(Request.get(var1));
       return RealmsServerList.parse(var2);
    }
 
-   public RealmsServer getOwnWorld(long var1) throws RealmsServiceException, IOException {
+   public RealmsServer getOwnWorld(long var1) throws RealmsServiceException {
       String var3 = this.url("worlds" + "/$ID".replace("$ID", String.valueOf(var1)));
       String var4 = this.execute(Request.get(var3));
       return RealmsServer.parse(var4);
    }
 
@@ -99,36 +97,36 @@
       String var1 = this.url("activities/liveplayerlist");
       String var2 = this.execute(Request.get(var1));
       return RealmsServerPlayerLists.parse(var2);
    }
 
-   public RealmsServerAddress join(long var1) throws RealmsServiceException, IOException {
+   public RealmsServerAddress join(long var1) throws RealmsServiceException {
       String var3 = this.url("worlds" + "/v1/$ID/join/pc".replace("$ID", "" + var1));
       String var4 = this.execute(Request.get(var3, 5000, 30000));
       return RealmsServerAddress.parse(var4);
    }
 
-   public void initializeWorld(long var1, String var3, String var4) throws RealmsServiceException, IOException {
+   public void initializeWorld(long var1, String var3, String var4) throws RealmsServiceException {
       RealmsDescriptionDto var5 = new RealmsDescriptionDto(var3, var4);
       String var6 = this.url("worlds" + "/$WORLD_ID/initialize".replace("$WORLD_ID", String.valueOf(var1)));
-      String var7 = gson.toJson(var5);
+      String var7 = GSON.toJson(var5);
       this.execute(Request.post(var6, var7, 5000, 10000));
    }
 
-   public Boolean mcoEnabled() throws RealmsServiceException, IOException {
+   public Boolean mcoEnabled() throws RealmsServiceException {
       String var1 = this.url("mco/available");
       String var2 = this.execute(Request.get(var1));
       return Boolean.valueOf(var2);
    }
 
-   public Boolean stageAvailable() throws RealmsServiceException, IOException {
+   public Boolean stageAvailable() throws RealmsServiceException {
       String var1 = this.url("mco/stageAvailable");
       String var2 = this.execute(Request.get(var1));
       return Boolean.valueOf(var2);
    }
 
-   public RealmsClient.CompatibleVersionResponse clientCompatible() throws RealmsServiceException, IOException {
+   public RealmsClient.CompatibleVersionResponse clientCompatible() throws RealmsServiceException {
       String var1 = this.url("mco/client/compatible");
       String var2 = this.execute(Request.get(var1));
 
       try {
          RealmsClient.CompatibleVersionResponse var3 = RealmsClient.CompatibleVersionResponse.valueOf(var2);
@@ -146,31 +144,31 @@
    public void uninviteMyselfFrom(long var1) throws RealmsServiceException {
       String var3 = this.url("invites" + "/$WORLD_ID".replace("$WORLD_ID", String.valueOf(var1)));
       this.execute(Request.delete(var3));
    }
 
-   public RealmsServer invite(long var1, String var3) throws RealmsServiceException, IOException {
+   public RealmsServer invite(long var1, String var3) throws RealmsServiceException {
       PlayerInfo var4 = new PlayerInfo();
       var4.setName(var3);
       String var5 = this.url("invites" + "/$WORLD_ID".replace("$WORLD_ID", String.valueOf(var1)));
-      String var6 = this.execute(Request.post(var5, gson.toJson(var4)));
+      String var6 = this.execute(Request.post(var5, GSON.toJson(var4)));
       return RealmsServer.parse(var6);
    }
 
    public BackupList backupsFor(long var1) throws RealmsServiceException {
       String var3 = this.url("worlds" + "/$WORLD_ID/backups".replace("$WORLD_ID", String.valueOf(var1)));
       String var4 = this.execute(Request.get(var3));
       return BackupList.parse(var4);
    }
 
-   public void update(long var1, String var3, String var4) throws RealmsServiceException, UnsupportedEncodingException {
+   public void update(long var1, String var3, String var4) throws RealmsServiceException {
       RealmsDescriptionDto var5 = new RealmsDescriptionDto(var3, var4);
       String var6 = this.url("worlds" + "/$WORLD_ID".replace("$WORLD_ID", String.valueOf(var1)));
-      this.execute(Request.post(var6, gson.toJson(var5)));
+      this.execute(Request.post(var6, GSON.toJson(var5)));
    }
 
-   public void updateSlot(long var1, int var3, RealmsWorldOptions var4) throws RealmsServiceException, UnsupportedEncodingException {
+   public void updateSlot(long var1, int var3, RealmsWorldOptions var4) throws RealmsServiceException {
       String var5 = this.url("worlds" + "/$WORLD_ID/slot/$SLOT_ID".replace("$WORLD_ID", String.valueOf(var1)).replace("$SLOT_ID", String.valueOf(var3)));
       String var6 = var4.toJson();
       this.execute(Request.post(var5, var6));
    }
 
@@ -207,37 +205,37 @@
       String var4 = "/$WORLD_ID/$PROFILE_UUID".replace("$WORLD_ID", String.valueOf(var1)).replace("$PROFILE_UUID", var3);
       String var5 = this.url("ops" + var4);
       return Ops.parse(this.execute(Request.delete(var5)));
    }
 
-   public Boolean open(long var1) throws RealmsServiceException, IOException {
+   public Boolean open(long var1) throws RealmsServiceException {
       String var3 = this.url("worlds" + "/$WORLD_ID/open".replace("$WORLD_ID", String.valueOf(var1)));
       String var4 = this.execute(Request.put(var3, ""));
       return Boolean.valueOf(var4);
    }
 
-   public Boolean close(long var1) throws RealmsServiceException, IOException {
+   public Boolean close(long var1) throws RealmsServiceException {
       String var3 = this.url("worlds" + "/$WORLD_ID/close".replace("$WORLD_ID", String.valueOf(var1)));
       String var4 = this.execute(Request.put(var3, ""));
       return Boolean.valueOf(var4);
    }
 
-   public Boolean resetWorldWithSeed(long var1, String var3, Integer var4, boolean var5) throws RealmsServiceException, IOException {
+   public Boolean resetWorldWithSeed(long var1, String var3, Integer var4, boolean var5) throws RealmsServiceException {
       RealmsWorldResetDto var6 = new RealmsWorldResetDto(var3, -1L, var4, var5);
       String var7 = this.url("worlds" + "/$WORLD_ID/reset".replace("$WORLD_ID", String.valueOf(var1)));
-      String var8 = this.execute(Request.post(var7, gson.toJson(var6), 30000, 80000));
+      String var8 = this.execute(Request.post(var7, GSON.toJson(var6), 30000, 80000));
       return Boolean.valueOf(var8);
    }
 
-   public Boolean resetWorldWithTemplate(long var1, String var3) throws RealmsServiceException, IOException {
+   public Boolean resetWorldWithTemplate(long var1, String var3) throws RealmsServiceException {
       RealmsWorldResetDto var4 = new RealmsWorldResetDto((String)null, Long.valueOf(var3), -1, false);
       String var5 = this.url("worlds" + "/$WORLD_ID/reset".replace("$WORLD_ID", String.valueOf(var1)));
-      String var6 = this.execute(Request.post(var5, gson.toJson(var4), 30000, 80000));
+      String var6 = this.execute(Request.post(var5, GSON.toJson(var4), 30000, 80000));
       return Boolean.valueOf(var6);
    }
 
-   public Subscription subscriptionFor(long var1) throws RealmsServiceException, IOException {
+   public Subscription subscriptionFor(long var1) throws RealmsServiceException {
       String var3 = this.url("subscriptions" + "/$WORLD_ID".replace("$WORLD_ID", String.valueOf(var1)));
       String var4 = this.execute(Request.get(var3));
       return Subscription.parse(var4);
    }
 
@@ -286,50 +284,51 @@
    public void agreeToTos() throws RealmsServiceException {
       String var1 = this.url("mco/tos/agreed");
       this.execute(Request.post(var1, ""));
    }
 
-   public RealmsNews getNews() throws RealmsServiceException, IOException {
+   public RealmsNews getNews() throws RealmsServiceException {
       String var1 = this.url("mco/v1/news");
       String var2 = this.execute(Request.get(var1, 5000, 10000));
       return RealmsNews.parse(var2);
    }
 
    public void sendPingResults(PingResult var1) throws RealmsServiceException {
       String var2 = this.url("regions/ping/stat");
-      this.execute(Request.post(var2, gson.toJson(var1)));
+      this.execute(Request.post(var2, GSON.toJson(var1)));
    }
 
-   public Boolean trialAvailable() throws RealmsServiceException, IOException {
+   public Boolean trialAvailable() throws RealmsServiceException {
       String var1 = this.url("trial");
       String var2 = this.execute(Request.get(var1));
       return Boolean.valueOf(var2);
    }
 
-   public void deleteWorld(long var1) throws RealmsServiceException, IOException {
+   public void deleteWorld(long var1) throws RealmsServiceException {
       String var3 = this.url("worlds" + "/$WORLD_ID".replace("$WORLD_ID", String.valueOf(var1)));
       this.execute(Request.delete(var3));
    }
 
+   @Nullable
    private String url(String var1) {
       return this.url(var1, (String)null);
    }
 
-   private String url(String var1, String var2) {
+   @Nullable
+   private String url(String var1, @Nullable String var2) {
       try {
-         URI var3 = new URI(currentEnvironment.protocol, currentEnvironment.baseUrl, "/" + var1, var2, (String)null);
-         return var3.toASCIIString();
+         return (new URI(currentEnvironment.protocol, currentEnvironment.baseUrl, "/" + var1, var2, (String)null)).toASCIIString();
       } catch (URISyntaxException var4) {
          var4.printStackTrace();
          return null;
       }
    }
 
    private String execute(Request<?> var1) throws RealmsServiceException {
       var1.cookie("sid", this.sessionId);
       var1.cookie("user", this.username);
-      var1.cookie("version", Realms.getMinecraftVersionString());
+      var1.cookie("version", SharedConstants.getCurrentVersion().getName());
 
       try {
          int var2 = var1.responseCode();
          if (var2 == 503) {
             int var6 = var1.getRetryAfterHeader();
@@ -357,11 +356,11 @@
    }
 
    static {
       currentEnvironment = RealmsClient.Environment.PRODUCTION;
       LOGGER = LogManager.getLogger();
-      gson = new Gson();
+      GSON = new GuardedSerializer();
    }
 
    public static enum CompatibleVersionResponse {
       COMPATIBLE,
       OUTDATED,
