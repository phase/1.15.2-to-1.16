--- com/mojang/realmsclient/gui/screens/RealmsUploadScreen.java
+++ com/mojang/realmsclient/gui/screens/RealmsUploadScreen.java
@@ -1,10 +1,15 @@
 package com.mojang.realmsclient.gui.screens;
 
 import com.google.common.collect.Lists;
 import com.google.common.util.concurrent.RateLimiter;
 import com.mojang.blaze3d.systems.RenderSystem;
+import com.mojang.blaze3d.vertex.BufferBuilder;
+import com.mojang.blaze3d.vertex.DefaultVertexFormat;
+import com.mojang.blaze3d.vertex.PoseStack;
+import com.mojang.blaze3d.vertex.Tesselator;
+import com.mojang.realmsclient.Unit;
 import com.mojang.realmsclient.client.FileUpload;
 import com.mojang.realmsclient.client.RealmsClient;
 import com.mojang.realmsclient.client.UploadStatus;
 import com.mojang.realmsclient.dto.UploadInfo;
 import com.mojang.realmsclient.exception.RealmsServiceException;
@@ -16,99 +21,99 @@
 import java.io.IOException;
 import java.util.ArrayList;
 import java.util.Locale;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.locks.ReentrantLock;
+import java.util.stream.Stream;
 import java.util.zip.GZIPOutputStream;
-import net.minecraft.realms.Realms;
-import net.minecraft.realms.RealmsButton;
-import net.minecraft.realms.RealmsDefaultVertexFormat;
-import net.minecraft.realms.RealmsLevelSummary;
+import net.minecraft.SharedConstants;
+import net.minecraft.Util;
+import net.minecraft.client.gui.components.Button;
+import net.minecraft.network.chat.CommonComponents;
+import net.minecraft.network.chat.Component;
+import net.minecraft.network.chat.FormattedText;
+import net.minecraft.network.chat.TranslatableComponent;
+import net.minecraft.realms.NarrationHelper;
 import net.minecraft.realms.RealmsScreen;
-import net.minecraft.realms.Tezzelator;
+import net.minecraft.world.level.storage.LevelSummary;
 import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
 import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;
 import org.apache.commons.compress.utils.IOUtils;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
 public class RealmsUploadScreen extends RealmsScreen {
    private static final Logger LOGGER = LogManager.getLogger();
+   private static final ReentrantLock UPLOAD_LOCK = new ReentrantLock();
+   private static final String[] DOTS = new String[]{"", ".", ". .", ". . ."};
    private final RealmsResetWorldScreen lastScreen;
-   private final RealmsLevelSummary selectedLevel;
+   private final LevelSummary selectedLevel;
    private final long worldId;
    private final int slotId;
    private final UploadStatus uploadStatus;
    private final RateLimiter narrationRateLimiter;
-   private volatile String errorMessage;
-   private volatile String status;
+   private volatile Component[] errorMessage;
+   private volatile Component status = new TranslatableComponent("mco.upload.preparing");
    private volatile String progress;
    private volatile boolean cancelled;
    private volatile boolean uploadFinished;
    private volatile boolean showDots = true;
    private volatile boolean uploadStarted;
-   private RealmsButton backButton;
-   private RealmsButton cancelButton;
-   private int animTick;
-   private static final String[] DOTS = new String[]{"", ".", ". .", ". . ."};
-   private int dotIndex;
+   private Button backButton;
+   private Button cancelButton;
+   private int tickCount;
    private Long previousWrittenBytes;
    private Long previousTimeSnapshot;
    private long bytesPersSecond;
-   private static final ReentrantLock uploadLock = new ReentrantLock();
+   private final Runnable callback;
 
-   public RealmsUploadScreen(long var1, int var3, RealmsResetWorldScreen var4, RealmsLevelSummary var5) {
+   public RealmsUploadScreen(long var1, int var3, RealmsResetWorldScreen var4, LevelSummary var5, Runnable var6) {
       this.worldId = var1;
       this.slotId = var3;
       this.lastScreen = var4;
       this.selectedLevel = var5;
       this.uploadStatus = new UploadStatus();
       this.narrationRateLimiter = RateLimiter.create(0.10000000149011612D);
+      this.callback = var6;
    }
 
    public void init() {
-      this.setKeyboardHandlerSendRepeatsToGui(true);
-      this.backButton = new RealmsButton(1, this.width() / 2 - 100, this.height() - 42, 200, 20, getLocalizedString("gui.back")) {
-         public void onPress() {
-            RealmsUploadScreen.this.onBack();
-         }
-      };
-      this.buttonsAdd(this.cancelButton = new RealmsButton(0, this.width() / 2 - 100, this.height() - 42, 200, 20, getLocalizedString("gui.cancel")) {
-         public void onPress() {
-            RealmsUploadScreen.this.onCancel();
-         }
+      this.minecraft.keyboardHandler.setSendRepeatsToGui(true);
+      this.backButton = new Button(this.width / 2 - 100, this.height - 42, 200, 20, CommonComponents.GUI_BACK, (var1) -> {
+         this.onBack();
       });
+      this.cancelButton = (Button)this.addButton(new Button(this.width / 2 - 100, this.height - 42, 200, 20, CommonComponents.GUI_CANCEL, (var1) -> {
+         this.onCancel();
+      }));
       if (!this.uploadStarted) {
          if (this.lastScreen.slot == -1) {
             this.upload();
          } else {
-            this.lastScreen.switchSlot(this);
+            this.lastScreen.switchSlot(() -> {
+               if (!this.uploadStarted) {
+                  this.uploadStarted = true;
+                  this.minecraft.setScreen(this);
+                  this.upload();
+               }
+
+            });
          }
       }
 
    }
 
-   public void confirmResult(boolean var1, int var2) {
-      if (var1 && !this.uploadStarted) {
-         this.uploadStarted = true;
-         Realms.setScreen(this);
-         this.upload();
-      }
-
-   }
-
    public void removed() {
-      this.setKeyboardHandlerSendRepeatsToGui(false);
+      this.minecraft.keyboardHandler.setSendRepeatsToGui(false);
    }
 
    private void onBack() {
-      this.lastScreen.confirmResult(true, 0);
+      this.callback.run();
    }
 
    private void onCancel() {
       this.cancelled = true;
-      Realms.setScreen(this.lastScreen);
+      this.minecraft.setScreen(this.lastScreen);
    }
 
    public boolean keyPressed(int var1, int var2, int var3) {
       if (var1 == 256) {
          if (this.showDots) {
@@ -121,168 +126,129 @@
       } else {
          return super.keyPressed(var1, var2, var3);
       }
    }
 
-   public void render(int var1, int var2, float var3) {
-      this.renderBackground();
+   public void render(PoseStack var1, int var2, int var3, float var4) {
+      this.renderBackground(var1);
       if (!this.uploadFinished && this.uploadStatus.bytesWritten != 0L && this.uploadStatus.bytesWritten == this.uploadStatus.totalBytes) {
-         this.status = getLocalizedString("mco.upload.verifying");
-         this.cancelButton.active(false);
+         this.status = new TranslatableComponent("mco.upload.verifying");
+         this.cancelButton.active = false;
       }
 
-      this.drawCenteredString(this.status, this.width() / 2, 50, 16777215);
+      this.drawCenteredString(var1, this.font, this.status, this.width / 2, 50, 16777215);
       if (this.showDots) {
-         this.drawDots();
+         this.drawDots(var1);
       }
 
       if (this.uploadStatus.bytesWritten != 0L && !this.cancelled) {
-         this.drawProgressBar();
-         this.drawUploadSpeed();
+         this.drawProgressBar(var1);
+         this.drawUploadSpeed(var1);
       }
 
       if (this.errorMessage != null) {
-         String[] var4 = this.errorMessage.split("\\\\n");
-
-         for(int var5 = 0; var5 < var4.length; ++var5) {
-            this.drawCenteredString(var4[var5], this.width() / 2, 110 + 12 * var5, 16711680);
+         for(int var5 = 0; var5 < this.errorMessage.length; ++var5) {
+            this.drawCenteredString(var1, this.font, this.errorMessage[var5], this.width / 2, 110 + 12 * var5, 16711680);
          }
       }
 
-      super.render(var1, var2, var3);
+      super.render(var1, var2, var3, var4);
    }
 
-   private void drawDots() {
-      int var1 = this.fontWidth(this.status);
-      if (this.animTick % 10 == 0) {
-         ++this.dotIndex;
-      }
-
-      this.drawString(DOTS[this.dotIndex % DOTS.length], this.width() / 2 + var1 / 2 + 5, 50, 16777215);
+   private void drawDots(PoseStack var1) {
+      int var2 = this.font.width((FormattedText)this.status);
+      this.font.draw(var1, DOTS[this.tickCount / 10 % DOTS.length], (float)(this.width / 2 + var2 / 2 + 5), 50.0F, 16777215);
    }
 
-   private void drawProgressBar() {
-      double var1 = this.uploadStatus.bytesWritten.doubleValue() / this.uploadStatus.totalBytes.doubleValue() * 100.0D;
-      if (var1 > 100.0D) {
-         var1 = 100.0D;
+   private void drawProgressBar(PoseStack var1) {
+      double var2 = this.uploadStatus.bytesWritten.doubleValue() / this.uploadStatus.totalBytes.doubleValue() * 100.0D;
+      if (var2 > 100.0D) {
+         var2 = 100.0D;
       }
 
-      this.progress = String.format(Locale.ROOT, "%.1f", var1);
+      this.progress = String.format(Locale.ROOT, "%.1f", var2);
       RenderSystem.color4f(1.0F, 1.0F, 1.0F, 1.0F);
       RenderSystem.disableTexture();
-      double var3 = (double)(this.width() / 2 - 100);
-      double var5 = 0.5D;
-      Tezzelator var7 = Tezzelator.instance;
-      var7.begin(7, RealmsDefaultVertexFormat.POSITION_COLOR);
-      var7.vertex(var3 - 0.5D, 95.5D, 0.0D).color(217, 210, 210, 255).endVertex();
-      var7.vertex(var3 + 200.0D * var1 / 100.0D + 0.5D, 95.5D, 0.0D).color(217, 210, 210, 255).endVertex();
-      var7.vertex(var3 + 200.0D * var1 / 100.0D + 0.5D, 79.5D, 0.0D).color(217, 210, 210, 255).endVertex();
-      var7.vertex(var3 - 0.5D, 79.5D, 0.0D).color(217, 210, 210, 255).endVertex();
-      var7.vertex(var3, 95.0D, 0.0D).color(128, 128, 128, 255).endVertex();
-      var7.vertex(var3 + 200.0D * var1 / 100.0D, 95.0D, 0.0D).color(128, 128, 128, 255).endVertex();
-      var7.vertex(var3 + 200.0D * var1 / 100.0D, 80.0D, 0.0D).color(128, 128, 128, 255).endVertex();
-      var7.vertex(var3, 80.0D, 0.0D).color(128, 128, 128, 255).endVertex();
-      var7.end();
+      double var4 = (double)(this.width / 2 - 100);
+      double var6 = 0.5D;
+      Tesselator var8 = Tesselator.getInstance();
+      BufferBuilder var9 = var8.getBuilder();
+      var9.begin(7, DefaultVertexFormat.POSITION_COLOR);
+      var9.vertex(var4 - 0.5D, 95.5D, 0.0D).color(217, 210, 210, 255).endVertex();
+      var9.vertex(var4 + 200.0D * var2 / 100.0D + 0.5D, 95.5D, 0.0D).color(217, 210, 210, 255).endVertex();
+      var9.vertex(var4 + 200.0D * var2 / 100.0D + 0.5D, 79.5D, 0.0D).color(217, 210, 210, 255).endVertex();
+      var9.vertex(var4 - 0.5D, 79.5D, 0.0D).color(217, 210, 210, 255).endVertex();
+      var9.vertex(var4, 95.0D, 0.0D).color(128, 128, 128, 255).endVertex();
+      var9.vertex(var4 + 200.0D * var2 / 100.0D, 95.0D, 0.0D).color(128, 128, 128, 255).endVertex();
+      var9.vertex(var4 + 200.0D * var2 / 100.0D, 80.0D, 0.0D).color(128, 128, 128, 255).endVertex();
+      var9.vertex(var4, 80.0D, 0.0D).color(128, 128, 128, 255).endVertex();
+      var8.end();
       RenderSystem.enableTexture();
-      this.drawCenteredString(this.progress + " %", this.width() / 2, 84, 16777215);
+      this.drawCenteredString(var1, this.font, this.progress + " %", this.width / 2, 84, 16777215);
    }
 
-   private void drawUploadSpeed() {
-      if (this.animTick % 20 == 0) {
+   private void drawUploadSpeed(PoseStack var1) {
+      if (this.tickCount % 20 == 0) {
          if (this.previousWrittenBytes != null) {
-            long var1 = System.currentTimeMillis() - this.previousTimeSnapshot;
-            if (var1 == 0L) {
-               var1 = 1L;
+            long var2 = Util.getMillis() - this.previousTimeSnapshot;
+            if (var2 == 0L) {
+               var2 = 1L;
             }
 
-            this.bytesPersSecond = 1000L * (this.uploadStatus.bytesWritten - this.previousWrittenBytes) / var1;
-            this.drawUploadSpeed0(this.bytesPersSecond);
+            this.bytesPersSecond = 1000L * (this.uploadStatus.bytesWritten - this.previousWrittenBytes) / var2;
+            this.drawUploadSpeed0(var1, this.bytesPersSecond);
          }
 
          this.previousWrittenBytes = this.uploadStatus.bytesWritten;
-         this.previousTimeSnapshot = System.currentTimeMillis();
+         this.previousTimeSnapshot = Util.getMillis();
       } else {
-         this.drawUploadSpeed0(this.bytesPersSecond);
+         this.drawUploadSpeed0(var1, this.bytesPersSecond);
       }
 
    }
 
-   private void drawUploadSpeed0(long var1) {
-      if (var1 > 0L) {
-         int var3 = this.fontWidth(this.progress);
-         String var4 = "(" + humanReadableByteCount(var1) + ")";
-         this.drawString(var4, this.width() / 2 + var3 / 2 + 15, 84, 16777215);
+   private void drawUploadSpeed0(PoseStack var1, long var2) {
+      if (var2 > 0L) {
+         int var4 = this.font.width(this.progress);
+         String var5 = "(" + Unit.humanReadable(var2) + "/s)";
+         this.font.draw(var1, var5, (float)(this.width / 2 + var4 / 2 + 15), 84.0F, 16777215);
       }
 
    }
 
-   public static String humanReadableByteCount(long var0) {
-      boolean var2 = true;
-      if (var0 < 1024L) {
-         return var0 + " B";
-      } else {
-         int var3 = (int)(Math.log((double)var0) / Math.log(1024.0D));
-         String var4 = "KMGTPE".charAt(var3 - 1) + "";
-         return String.format(Locale.ROOT, "%.1f %sB/s", (double)var0 / Math.pow(1024.0D, (double)var3), var4);
-      }
-   }
-
    public void tick() {
       super.tick();
-      ++this.animTick;
+      ++this.tickCount;
       if (this.status != null && this.narrationRateLimiter.tryAcquire(1)) {
          ArrayList var1 = Lists.newArrayList();
-         var1.add(this.status);
+         var1.add(this.status.getString());
          if (this.progress != null) {
             var1.add(this.progress + "%");
          }
 
          if (this.errorMessage != null) {
-            var1.add(this.errorMessage);
+            Stream.of(this.errorMessage).map(Component::getString).forEach(var1::add);
          }
 
-         Realms.narrateNow(String.join(System.lineSeparator(), var1));
+         NarrationHelper.now(String.join(System.lineSeparator(), var1));
       }
 
    }
 
-   public static RealmsUploadScreen.Unit getLargestUnit(long var0) {
-      if (var0 < 1024L) {
-         return RealmsUploadScreen.Unit.B;
-      } else {
-         int var2 = (int)(Math.log((double)var0) / Math.log(1024.0D));
-         String var3 = "KMGTPE".charAt(var2 - 1) + "";
-
-         try {
-            return RealmsUploadScreen.Unit.valueOf(var3 + "B");
-         } catch (Exception var5) {
-            return RealmsUploadScreen.Unit.GB;
-         }
-      }
-   }
-
-   public static double convertToUnit(long var0, RealmsUploadScreen.Unit var2) {
-      return var2.equals(RealmsUploadScreen.Unit.B) ? (double)var0 : (double)var0 / Math.pow(1024.0D, (double)var2.ordinal());
-   }
-
-   public static String humanReadableSize(long var0, RealmsUploadScreen.Unit var2) {
-      return String.format("%." + (var2.equals(RealmsUploadScreen.Unit.GB) ? "1" : "0") + "f %s", convertToUnit(var0, var2), var2.name());
-   }
-
    private void upload() {
       this.uploadStarted = true;
       (new Thread(() -> {
          File var1 = null;
-         RealmsClient var2 = RealmsClient.createRealmsClient();
+         RealmsClient var2 = RealmsClient.create();
          long var3 = this.worldId;
 
          try {
-            if (!uploadLock.tryLock(1L, TimeUnit.SECONDS)) {
+            if (!UPLOAD_LOCK.tryLock(1L, TimeUnit.SECONDS)) {
+               this.status = new TranslatableComponent("mco.upload.close.failure");
                return;
             }
 
-            this.status = getLocalizedString("mco.upload.preparing");
             UploadInfo var5 = null;
             int var6 = 0;
 
             while(var6 < 20) {
                try {
@@ -298,54 +264,54 @@
                   ++var6;
                }
             }
 
             if (var5 == null) {
-               this.status = getLocalizedString("mco.upload.close.failure");
+               this.status = new TranslatableComponent("mco.upload.close.failure");
                return;
             }
 
             UploadTokenCache.put(var3, var5.getToken());
             if (var5.isWorldClosed()) {
                if (this.cancelled) {
                   this.uploadCancelled();
                   return;
                }
 
-               File var25 = new File(Realms.getGameDirectoryPath(), "saves");
+               File var25 = new File(this.minecraft.gameDirectory.getAbsolutePath(), "saves");
                var1 = this.tarGzipArchive(new File(var25, this.selectedLevel.getLevelId()));
                if (this.cancelled) {
                   this.uploadCancelled();
                   return;
                }
 
                if (!this.verify(var1)) {
                   long var26 = var1.length();
-                  RealmsUploadScreen.Unit var9 = getLargestUnit(var26);
-                  RealmsUploadScreen.Unit var10 = getLargestUnit(5368709120L);
-                  if (!humanReadableSize(var26, var9).equals(humanReadableSize(5368709120L, var10)) || var9 == RealmsUploadScreen.Unit.B) {
-                     this.errorMessage = getLocalizedString("mco.upload.size.failure.line1", new Object[]{this.selectedLevel.getLevelName()}) + "\\n" + getLocalizedString("mco.upload.size.failure.line2", new Object[]{humanReadableSize(var26, var9), humanReadableSize(5368709120L, var10)});
+                  Unit var9 = Unit.getLargest(var26);
+                  Unit var10 = Unit.getLargest(5368709120L);
+                  if (Unit.humanReadable(var26, var9).equals(Unit.humanReadable(5368709120L, var10)) && var9 != Unit.B) {
+                     Unit var11 = Unit.values()[var9.ordinal() - 1];
+                     this.setErrorMessage(new TranslatableComponent("mco.upload.size.failure.line1", new Object[]{this.selectedLevel.getLevelName()}), new TranslatableComponent("mco.upload.size.failure.line2", new Object[]{Unit.humanReadable(var26, var11), Unit.humanReadable(5368709120L, var11)}));
                      return;
                   }
 
-                  RealmsUploadScreen.Unit var11 = RealmsUploadScreen.Unit.values()[var9.ordinal() - 1];
-                  this.errorMessage = getLocalizedString("mco.upload.size.failure.line1", new Object[]{this.selectedLevel.getLevelName()}) + "\\n" + getLocalizedString("mco.upload.size.failure.line2", new Object[]{humanReadableSize(var26, var11), humanReadableSize(5368709120L, var11)});
+                  this.setErrorMessage(new TranslatableComponent("mco.upload.size.failure.line1", new Object[]{this.selectedLevel.getLevelName()}), new TranslatableComponent("mco.upload.size.failure.line2", new Object[]{Unit.humanReadable(var26, var9), Unit.humanReadable(5368709120L, var10)}));
                   return;
                }
 
-               this.status = getLocalizedString("mco.upload.uploading", new Object[]{this.selectedLevel.getLevelName()});
-               FileUpload var7 = new FileUpload(var1, this.worldId, this.slotId, var5, Realms.getSessionId(), Realms.getName(), Realms.getMinecraftVersionString(), this.uploadStatus);
+               this.status = new TranslatableComponent("mco.upload.uploading", new Object[]{this.selectedLevel.getLevelName()});
+               FileUpload var7 = new FileUpload(var1, this.worldId, this.slotId, var5, this.minecraft.getUser(), SharedConstants.getCurrentVersion().getName(), this.uploadStatus);
                var7.upload((var3x) -> {
                   if (var3x.statusCode >= 200 && var3x.statusCode < 300) {
                      this.uploadFinished = true;
-                     this.status = getLocalizedString("mco.upload.done");
-                     this.backButton.setMessage(getLocalizedString("gui.done"));
+                     this.status = new TranslatableComponent("mco.upload.done");
+                     this.backButton.setMessage(CommonComponents.GUI_DONE);
                      UploadTokenCache.invalidate(var3);
                   } else if (var3x.statusCode == 400 && var3x.errorMessage != null) {
-                     this.errorMessage = getLocalizedString("mco.upload.failed", new Object[]{var3x.errorMessage});
+                     this.setErrorMessage(new TranslatableComponent("mco.upload.failed", new Object[]{var3x.errorMessage}));
                   } else {
-                     this.errorMessage = getLocalizedString("mco.upload.failed", new Object[]{var3x.statusCode});
+                     this.setErrorMessage(new TranslatableComponent("mco.upload.failed", new Object[]{var3x.statusCode}));
                   }
 
                });
 
                while(!var7.isFinished()) {
@@ -363,27 +329,27 @@
                }
 
                return;
             }
 
-            this.status = getLocalizedString("mco.upload.close.failure");
+            this.status = new TranslatableComponent("mco.upload.close.failure");
          } catch (IOException var21) {
-            this.errorMessage = getLocalizedString("mco.upload.failed", new Object[]{var21.getMessage()});
+            this.setErrorMessage(new TranslatableComponent("mco.upload.failed", new Object[]{var21.getMessage()}));
             return;
          } catch (RealmsServiceException var22) {
-            this.errorMessage = getLocalizedString("mco.upload.failed", new Object[]{var22.toString()});
+            this.setErrorMessage(new TranslatableComponent("mco.upload.failed", new Object[]{var22.toString()}));
             return;
          } catch (InterruptedException var23) {
             LOGGER.error("Could not acquire upload lock");
             return;
          } finally {
             this.uploadFinished = true;
-            if (uploadLock.isHeldByCurrentThread()) {
-               uploadLock.unlock();
+            if (UPLOAD_LOCK.isHeldByCurrentThread()) {
+               UPLOAD_LOCK.unlock();
                this.showDots = false;
-               this.childrenClear();
-               this.buttonsAdd(this.backButton);
+               this.children.clear();
+               this.addButton(this.backButton);
                if (var1 != null) {
                   LOGGER.debug("Deleting file " + var1.getAbsolutePath());
                   var1.delete();
                }
 
@@ -393,12 +359,16 @@
          }
 
       })).start();
    }
 
+   private void setErrorMessage(Component... var1) {
+      this.errorMessage = var1;
+   }
+
    private void uploadCancelled() {
-      this.status = getLocalizedString("mco.upload.cancelled");
+      this.status = new TranslatableComponent("mco.upload.cancelled");
       LOGGER.debug("Upload was cancelled");
    }
 
    private boolean verify(File var1) {
       return var1.length() < 5368709120L;
@@ -448,16 +418,6 @@
             }
          }
 
       }
    }
-
-   static enum Unit {
-      B,
-      KB,
-      MB,
-      GB;
-
-      private Unit() {
-      }
-   }
 }
