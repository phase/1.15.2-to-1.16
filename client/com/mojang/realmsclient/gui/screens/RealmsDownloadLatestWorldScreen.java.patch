--- com/mojang/realmsclient/gui/screens/RealmsDownloadLatestWorldScreen.java
+++ com/mojang/realmsclient/gui/screens/RealmsDownloadLatestWorldScreen.java
@@ -1,35 +1,48 @@
 package com.mojang.realmsclient.gui.screens;
 
 import com.google.common.collect.Lists;
 import com.google.common.util.concurrent.RateLimiter;
 import com.mojang.blaze3d.systems.RenderSystem;
+import com.mojang.blaze3d.vertex.BufferBuilder;
+import com.mojang.blaze3d.vertex.DefaultVertexFormat;
+import com.mojang.blaze3d.vertex.PoseStack;
+import com.mojang.blaze3d.vertex.Tesselator;
+import com.mojang.realmsclient.Unit;
 import com.mojang.realmsclient.client.FileDownload;
 import com.mojang.realmsclient.dto.WorldDownload;
+import it.unimi.dsi.fastutil.booleans.BooleanConsumer;
 import java.util.ArrayList;
 import java.util.Locale;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.locks.ReentrantLock;
-import net.minecraft.realms.Realms;
-import net.minecraft.realms.RealmsButton;
-import net.minecraft.realms.RealmsDefaultVertexFormat;
+import java.util.stream.Collectors;
+import net.minecraft.Util;
+import net.minecraft.client.gui.components.Button;
+import net.minecraft.client.gui.screens.Screen;
+import net.minecraft.network.chat.CommonComponents;
+import net.minecraft.network.chat.Component;
+import net.minecraft.network.chat.FormattedText;
+import net.minecraft.network.chat.TextComponent;
+import net.minecraft.network.chat.TranslatableComponent;
+import net.minecraft.realms.NarrationHelper;
 import net.minecraft.realms.RealmsScreen;
-import net.minecraft.realms.Tezzelator;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
 public class RealmsDownloadLatestWorldScreen extends RealmsScreen {
    private static final Logger LOGGER = LogManager.getLogger();
-   private final RealmsScreen lastScreen;
+   private static final ReentrantLock DOWNLOAD_LOCK = new ReentrantLock();
+   private final Screen lastScreen;
    private final WorldDownload worldDownload;
-   private final String downloadTitle;
+   private final Component downloadTitle;
    private final RateLimiter narrationRateLimiter;
-   private RealmsButton cancelButton;
+   private Button cancelButton;
    private final String worldName;
    private final RealmsDownloadLatestWorldScreen.DownloadStatus downloadStatus;
-   private volatile String errorMessage;
-   private volatile String status;
+   private volatile Component errorMessage;
+   private volatile Component status = new TranslatableComponent("mco.download.preparing");
    private volatile String progress;
    private volatile boolean cancelled;
    private volatile boolean showDots = true;
    private volatile boolean finished;
    private volatile boolean extracting;
@@ -37,58 +50,49 @@
    private Long previousTimeSnapshot;
    private long bytesPersSecond;
    private int animTick;
    private static final String[] DOTS = new String[]{"", ".", ". .", ". . ."};
    private int dotIndex;
-   private final int WARNING_ID = 100;
-   private int confirmationId = -1;
    private boolean checked;
-   private static final ReentrantLock downloadLock = new ReentrantLock();
+   private final BooleanConsumer callback;
 
-   public RealmsDownloadLatestWorldScreen(RealmsScreen var1, WorldDownload var2, String var3) {
+   public RealmsDownloadLatestWorldScreen(Screen var1, WorldDownload var2, String var3, BooleanConsumer var4) {
+      this.callback = var4;
       this.lastScreen = var1;
       this.worldName = var3;
       this.worldDownload = var2;
       this.downloadStatus = new RealmsDownloadLatestWorldScreen.DownloadStatus();
-      this.downloadTitle = getLocalizedString("mco.download.title");
+      this.downloadTitle = new TranslatableComponent("mco.download.title");
       this.narrationRateLimiter = RateLimiter.create(0.10000000149011612D);
    }
 
-   public void setConfirmationId(int var1) {
-      this.confirmationId = var1;
-   }
-
    public void init() {
-      this.setKeyboardHandlerSendRepeatsToGui(true);
-      this.buttonsAdd(this.cancelButton = new RealmsButton(0, this.width() / 2 - 100, this.height() - 42, 200, 20, getLocalizedString("gui.cancel")) {
-         public void onPress() {
-            RealmsDownloadLatestWorldScreen.this.cancelled = true;
-            RealmsDownloadLatestWorldScreen.this.backButtonClicked();
-         }
-      });
+      this.minecraft.keyboardHandler.setSendRepeatsToGui(true);
+      this.cancelButton = (Button)this.addButton(new Button(this.width / 2 - 100, this.height - 42, 200, 20, CommonComponents.GUI_CANCEL, (var1) -> {
+         this.cancelled = true;
+         this.backButtonClicked();
+      }));
       this.checkDownloadSize();
    }
 
    private void checkDownloadSize() {
       if (!this.finished) {
          if (!this.checked && this.getContentLength(this.worldDownload.downloadLink) >= 5368709120L) {
-            String var1 = getLocalizedString("mco.download.confirmation.line1", new Object[]{humanReadableSize(5368709120L)});
-            String var2 = getLocalizedString("mco.download.confirmation.line2");
-            Realms.setScreen(new RealmsLongConfirmationScreen(this, RealmsLongConfirmationScreen.Type.Warning, var1, var2, false, 100));
+            TranslatableComponent var1 = new TranslatableComponent("mco.download.confirmation.line1", new Object[]{Unit.humanReadable(5368709120L)});
+            TranslatableComponent var2 = new TranslatableComponent("mco.download.confirmation.line2");
+            this.minecraft.setScreen(new RealmsLongConfirmationScreen((var1x) -> {
+               this.checked = true;
+               this.minecraft.setScreen(this);
+               this.downloadSave();
+            }, RealmsLongConfirmationScreen.Type.Warning, var1, var2, false));
          } else {
             this.downloadSave();
          }
 
       }
    }
 
-   public void confirmResult(boolean var1, int var2) {
-      this.checked = true;
-      Realms.setScreen(this);
-      this.downloadSave();
-   }
-
    private long getContentLength(String var1) {
       FileDownload var2 = new FileDownload();
       return var2.contentLength(var1);
    }
 
@@ -98,20 +102,20 @@
       if (this.status != null && this.narrationRateLimiter.tryAcquire(1)) {
          ArrayList var1 = Lists.newArrayList();
          var1.add(this.downloadTitle);
          var1.add(this.status);
          if (this.progress != null) {
-            var1.add(this.progress + "%");
-            var1.add(humanReadableSpeed(this.bytesPersSecond));
+            var1.add(new TextComponent(this.progress + "%"));
+            var1.add(new TextComponent(Unit.humanReadable(this.bytesPersSecond) + "/s"));
          }
 
          if (this.errorMessage != null) {
             var1.add(this.errorMessage);
          }
 
-         String var2 = String.join(System.lineSeparator(), var1);
-         Realms.narrateNow(var2);
+         String var2 = (String)var1.stream().map(Component::getString).collect(Collectors.joining("\n"));
+         NarrationHelper.now(var2);
       }
 
    }
 
    public boolean keyPressed(int var1, int var2, int var3) {
@@ -123,147 +127,126 @@
          return super.keyPressed(var1, var2, var3);
       }
    }
 
    private void backButtonClicked() {
-      if (this.finished && this.confirmationId != -1 && this.errorMessage == null) {
-         this.lastScreen.confirmResult(true, this.confirmationId);
+      if (this.finished && this.callback != null && this.errorMessage == null) {
+         this.callback.accept(true);
       }
 
-      Realms.setScreen(this.lastScreen);
+      this.minecraft.setScreen(this.lastScreen);
    }
 
-   public void render(int var1, int var2, float var3) {
-      this.renderBackground();
+   public void render(PoseStack var1, int var2, int var3, float var4) {
+      this.renderBackground(var1);
       if (this.extracting && !this.finished) {
-         this.status = getLocalizedString("mco.download.extracting");
+         this.status = new TranslatableComponent("mco.download.extracting");
       }
 
-      this.drawCenteredString(this.downloadTitle, this.width() / 2, 20, 16777215);
-      this.drawCenteredString(this.status, this.width() / 2, 50, 16777215);
+      this.drawCenteredString(var1, this.font, this.downloadTitle, this.width / 2, 20, 16777215);
+      this.drawCenteredString(var1, this.font, this.status, this.width / 2, 50, 16777215);
       if (this.showDots) {
-         this.drawDots();
+         this.drawDots(var1);
       }
 
       if (this.downloadStatus.bytesWritten != 0L && !this.cancelled) {
-         this.drawProgressBar();
-         this.drawDownloadSpeed();
+         this.drawProgressBar(var1);
+         this.drawDownloadSpeed(var1);
       }
 
       if (this.errorMessage != null) {
-         this.drawCenteredString(this.errorMessage, this.width() / 2, 110, 16711680);
+         this.drawCenteredString(var1, this.font, this.errorMessage, this.width / 2, 110, 16711680);
       }
 
-      super.render(var1, var2, var3);
+      super.render(var1, var2, var3, var4);
    }
 
-   private void drawDots() {
-      int var1 = this.fontWidth(this.status);
+   private void drawDots(PoseStack var1) {
+      int var2 = this.font.width((FormattedText)this.status);
       if (this.animTick % 10 == 0) {
          ++this.dotIndex;
       }
 
-      this.drawString(DOTS[this.dotIndex % DOTS.length], this.width() / 2 + var1 / 2 + 5, 50, 16777215);
+      this.font.draw(var1, DOTS[this.dotIndex % DOTS.length], (float)(this.width / 2 + var2 / 2 + 5), 50.0F, 16777215);
    }
 
-   private void drawProgressBar() {
-      double var1 = this.downloadStatus.bytesWritten.doubleValue() / this.downloadStatus.totalBytes.doubleValue() * 100.0D;
-      this.progress = String.format(Locale.ROOT, "%.1f", var1);
+   private void drawProgressBar(PoseStack var1) {
+      double var2 = this.downloadStatus.bytesWritten.doubleValue() / this.downloadStatus.totalBytes.doubleValue() * 100.0D;
+      this.progress = String.format(Locale.ROOT, "%.1f", var2);
       RenderSystem.color4f(1.0F, 1.0F, 1.0F, 1.0F);
       RenderSystem.disableTexture();
-      Tezzelator var3 = Tezzelator.instance;
-      var3.begin(7, RealmsDefaultVertexFormat.POSITION_COLOR);
-      double var4 = (double)(this.width() / 2 - 100);
-      double var6 = 0.5D;
-      var3.vertex(var4 - 0.5D, 95.5D, 0.0D).color(217, 210, 210, 255).endVertex();
-      var3.vertex(var4 + 200.0D * var1 / 100.0D + 0.5D, 95.5D, 0.0D).color(217, 210, 210, 255).endVertex();
-      var3.vertex(var4 + 200.0D * var1 / 100.0D + 0.5D, 79.5D, 0.0D).color(217, 210, 210, 255).endVertex();
-      var3.vertex(var4 - 0.5D, 79.5D, 0.0D).color(217, 210, 210, 255).endVertex();
-      var3.vertex(var4, 95.0D, 0.0D).color(128, 128, 128, 255).endVertex();
-      var3.vertex(var4 + 200.0D * var1 / 100.0D, 95.0D, 0.0D).color(128, 128, 128, 255).endVertex();
-      var3.vertex(var4 + 200.0D * var1 / 100.0D, 80.0D, 0.0D).color(128, 128, 128, 255).endVertex();
-      var3.vertex(var4, 80.0D, 0.0D).color(128, 128, 128, 255).endVertex();
-      var3.end();
+      Tesselator var4 = Tesselator.getInstance();
+      BufferBuilder var5 = var4.getBuilder();
+      var5.begin(7, DefaultVertexFormat.POSITION_COLOR);
+      double var6 = (double)(this.width / 2 - 100);
+      double var8 = 0.5D;
+      var5.vertex(var6 - 0.5D, 95.5D, 0.0D).color(217, 210, 210, 255).endVertex();
+      var5.vertex(var6 + 200.0D * var2 / 100.0D + 0.5D, 95.5D, 0.0D).color(217, 210, 210, 255).endVertex();
+      var5.vertex(var6 + 200.0D * var2 / 100.0D + 0.5D, 79.5D, 0.0D).color(217, 210, 210, 255).endVertex();
+      var5.vertex(var6 - 0.5D, 79.5D, 0.0D).color(217, 210, 210, 255).endVertex();
+      var5.vertex(var6, 95.0D, 0.0D).color(128, 128, 128, 255).endVertex();
+      var5.vertex(var6 + 200.0D * var2 / 100.0D, 95.0D, 0.0D).color(128, 128, 128, 255).endVertex();
+      var5.vertex(var6 + 200.0D * var2 / 100.0D, 80.0D, 0.0D).color(128, 128, 128, 255).endVertex();
+      var5.vertex(var6, 80.0D, 0.0D).color(128, 128, 128, 255).endVertex();
+      var4.end();
       RenderSystem.enableTexture();
-      this.drawCenteredString(this.progress + " %", this.width() / 2, 84, 16777215);
+      this.drawCenteredString(var1, this.font, this.progress + " %", this.width / 2, 84, 16777215);
    }
 
-   private void drawDownloadSpeed() {
+   private void drawDownloadSpeed(PoseStack var1) {
       if (this.animTick % 20 == 0) {
          if (this.previousWrittenBytes != null) {
-            long var1 = System.currentTimeMillis() - this.previousTimeSnapshot;
-            if (var1 == 0L) {
-               var1 = 1L;
+            long var2 = Util.getMillis() - this.previousTimeSnapshot;
+            if (var2 == 0L) {
+               var2 = 1L;
             }
 
-            this.bytesPersSecond = 1000L * (this.downloadStatus.bytesWritten - this.previousWrittenBytes) / var1;
-            this.drawDownloadSpeed0(this.bytesPersSecond);
+            this.bytesPersSecond = 1000L * (this.downloadStatus.bytesWritten - this.previousWrittenBytes) / var2;
+            this.drawDownloadSpeed0(var1, this.bytesPersSecond);
          }
 
          this.previousWrittenBytes = this.downloadStatus.bytesWritten;
-         this.previousTimeSnapshot = System.currentTimeMillis();
+         this.previousTimeSnapshot = Util.getMillis();
       } else {
-         this.drawDownloadSpeed0(this.bytesPersSecond);
+         this.drawDownloadSpeed0(var1, this.bytesPersSecond);
       }
 
    }
 
-   private void drawDownloadSpeed0(long var1) {
-      if (var1 > 0L) {
-         int var3 = this.fontWidth(this.progress);
-         String var4 = "(" + humanReadableSpeed(var1) + ")";
-         this.drawString(var4, this.width() / 2 + var3 / 2 + 15, 84, 16777215);
+   private void drawDownloadSpeed0(PoseStack var1, long var2) {
+      if (var2 > 0L) {
+         int var4 = this.font.width(this.progress);
+         String var5 = "(" + Unit.humanReadable(var2) + "/s)";
+         this.font.draw(var1, var5, (float)(this.width / 2 + var4 / 2 + 15), 84.0F, 16777215);
       }
 
    }
 
-   public static String humanReadableSpeed(long var0) {
-      boolean var2 = true;
-      if (var0 < 1024L) {
-         return var0 + " B/s";
-      } else {
-         int var3 = (int)(Math.log((double)var0) / Math.log(1024.0D));
-         String var4 = "KMGTPE".charAt(var3 - 1) + "";
-         return String.format(Locale.ROOT, "%.1f %sB/s", (double)var0 / Math.pow(1024.0D, (double)var3), var4);
-      }
-   }
-
-   public static String humanReadableSize(long var0) {
-      boolean var2 = true;
-      if (var0 < 1024L) {
-         return var0 + " B";
-      } else {
-         int var3 = (int)(Math.log((double)var0) / Math.log(1024.0D));
-         String var4 = "KMGTPE".charAt(var3 - 1) + "";
-         return String.format(Locale.ROOT, "%.0f %sB", (double)var0 / Math.pow(1024.0D, (double)var3), var4);
-      }
-   }
-
    private void downloadSave() {
       (new Thread(() -> {
          try {
             try {
-               if (!downloadLock.tryLock(1L, TimeUnit.SECONDS)) {
+               if (!DOWNLOAD_LOCK.tryLock(1L, TimeUnit.SECONDS)) {
+                  this.status = new TranslatableComponent("mco.download.failed");
                   return;
                }
 
-               this.status = getLocalizedString("mco.download.preparing");
                if (this.cancelled) {
                   this.downloadCancelled();
                   return;
                }
 
-               this.status = getLocalizedString("mco.download.downloading", new Object[]{this.worldName});
+               this.status = new TranslatableComponent("mco.download.downloading", new Object[]{this.worldName});
                FileDownload var1 = new FileDownload();
                var1.contentLength(this.worldDownload.downloadLink);
-               var1.download(this.worldDownload, this.worldName, this.downloadStatus, this.getLevelStorageSource());
+               var1.download(this.worldDownload, this.worldName, this.downloadStatus, this.minecraft.getLevelSource());
 
                while(!var1.isFinished()) {
                   if (var1.isError()) {
                      var1.cancel();
-                     this.errorMessage = getLocalizedString("mco.download.failed");
-                     this.cancelButton.setMessage(getLocalizedString("gui.done"));
+                     this.errorMessage = new TranslatableComponent("mco.download.failed");
+                     this.cancelButton.setMessage(CommonComponents.GUI_DONE);
                      return;
                   }
 
                   if (var1.isExtracting()) {
                      this.extracting = true;
@@ -281,34 +264,34 @@
                      LOGGER.error("Failed to check Realms backup download status");
                   }
                }
 
                this.finished = true;
-               this.status = getLocalizedString("mco.download.done");
-               this.cancelButton.setMessage(getLocalizedString("gui.done"));
+               this.status = new TranslatableComponent("mco.download.done");
+               this.cancelButton.setMessage(CommonComponents.GUI_DONE);
                return;
             } catch (InterruptedException var9) {
                LOGGER.error("Could not acquire upload lock");
             } catch (Exception var10) {
-               this.errorMessage = getLocalizedString("mco.download.failed");
+               this.errorMessage = new TranslatableComponent("mco.download.failed");
                var10.printStackTrace();
             }
 
          } finally {
-            if (!downloadLock.isHeldByCurrentThread()) {
+            if (!DOWNLOAD_LOCK.isHeldByCurrentThread()) {
                return;
             } else {
-               downloadLock.unlock();
+               DOWNLOAD_LOCK.unlock();
                this.showDots = false;
                this.finished = true;
             }
          }
       })).start();
    }
 
    private void downloadCancelled() {
-      this.status = getLocalizedString("mco.download.cancelled");
+      this.status = new TranslatableComponent("mco.download.cancelled");
    }
 
    public class DownloadStatus {
       public volatile Long bytesWritten = 0L;
       public volatile Long totalBytes = 0L;
