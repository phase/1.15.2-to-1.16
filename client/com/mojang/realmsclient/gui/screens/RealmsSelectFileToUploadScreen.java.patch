--- com/mojang/realmsclient/gui/screens/RealmsSelectFileToUploadScreen.java
+++ com/mojang/realmsclient/gui/screens/RealmsSelectFileToUploadScreen.java
@@ -1,230 +1,226 @@
 package com.mojang.realmsclient.gui.screens;
 
 import com.google.common.collect.Lists;
-import com.mojang.realmsclient.gui.ChatFormatting;
-import com.mojang.realmsclient.gui.RealmsConstants;
+import com.mojang.blaze3d.vertex.PoseStack;
 import java.text.DateFormat;
 import java.text.SimpleDateFormat;
 import java.util.Arrays;
-import java.util.Collections;
 import java.util.Date;
 import java.util.Iterator;
 import java.util.List;
-import net.minecraft.realms.RealmListEntry;
-import net.minecraft.realms.Realms;
-import net.minecraft.realms.RealmsAnvilLevelStorageSource;
-import net.minecraft.realms.RealmsButton;
+import java.util.stream.Collectors;
+import javax.annotation.Nullable;
+import net.minecraft.ChatFormatting;
+import net.minecraft.client.gui.components.Button;
+import net.minecraft.client.gui.components.ObjectSelectionList;
+import net.minecraft.client.resources.language.I18n;
+import net.minecraft.network.chat.CommonComponents;
+import net.minecraft.network.chat.TextComponent;
+import net.minecraft.network.chat.TranslatableComponent;
+import net.minecraft.realms.NarrationHelper;
 import net.minecraft.realms.RealmsLabel;
-import net.minecraft.realms.RealmsLevelSummary;
 import net.minecraft.realms.RealmsObjectSelectionList;
 import net.minecraft.realms.RealmsScreen;
-import net.minecraft.realms.Tezzelator;
+import net.minecraft.world.level.storage.LevelSummary;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
 public class RealmsSelectFileToUploadScreen extends RealmsScreen {
    private static final Logger LOGGER = LogManager.getLogger();
+   private static final DateFormat DATE_FORMAT = new SimpleDateFormat();
    private final RealmsResetWorldScreen lastScreen;
    private final long worldId;
    private final int slotId;
-   private RealmsButton uploadButton;
-   private final DateFormat DATE_FORMAT = new SimpleDateFormat();
-   private List<RealmsLevelSummary> levelList = Lists.newArrayList();
+   private Button uploadButton;
+   private List<LevelSummary> levelList = Lists.newArrayList();
    private int selectedWorld = -1;
    private RealmsSelectFileToUploadScreen.WorldSelectionList worldSelectionList;
    private String worldLang;
    private String conversionLang;
-   private final String[] gameModesLang = new String[4];
    private RealmsLabel titleLabel;
    private RealmsLabel subtitleLabel;
    private RealmsLabel noWorldsLabel;
+   private final Runnable callback;
 
-   public RealmsSelectFileToUploadScreen(long var1, int var3, RealmsResetWorldScreen var4) {
+   public RealmsSelectFileToUploadScreen(long var1, int var3, RealmsResetWorldScreen var4, Runnable var5) {
       this.lastScreen = var4;
       this.worldId = var1;
       this.slotId = var3;
+      this.callback = var5;
    }
 
    private void loadLevelList() throws Exception {
-      RealmsAnvilLevelStorageSource var1 = this.getLevelStorageSource();
-      this.levelList = var1.getLevelList();
-      Collections.sort(this.levelList);
-      Iterator var2 = this.levelList.iterator();
+      this.levelList = (List)this.minecraft.getLevelSource().getLevelList().stream().sorted((var0, var1x) -> {
+         if (var0.getLastPlayed() < var1x.getLastPlayed()) {
+            return 1;
+         } else {
+            return var0.getLastPlayed() > var1x.getLastPlayed() ? -1 : var0.getLevelId().compareTo(var1x.getLevelId());
+         }
+      }).collect(Collectors.toList());
+      Iterator var1 = this.levelList.iterator();
 
-      while(var2.hasNext()) {
-         RealmsLevelSummary var3 = (RealmsLevelSummary)var2.next();
-         this.worldSelectionList.addEntry(var3);
+      while(var1.hasNext()) {
+         LevelSummary var2 = (LevelSummary)var1.next();
+         this.worldSelectionList.addEntry(var2);
       }
 
    }
 
    public void init() {
-      this.setKeyboardHandlerSendRepeatsToGui(true);
+      this.minecraft.keyboardHandler.setSendRepeatsToGui(true);
       this.worldSelectionList = new RealmsSelectFileToUploadScreen.WorldSelectionList();
 
       try {
          this.loadLevelList();
       } catch (Exception var2) {
          LOGGER.error("Couldn't load level list", var2);
-         Realms.setScreen(new RealmsGenericErrorScreen("Unable to load worlds", var2.getMessage(), this.lastScreen));
+         this.minecraft.setScreen(new RealmsGenericErrorScreen(new TextComponent("Unable to load worlds"), new TextComponent(var2.getMessage()), this.lastScreen));
          return;
       }
 
-      this.worldLang = getLocalizedString("selectWorld.world");
-      this.conversionLang = getLocalizedString("selectWorld.conversion");
-      this.gameModesLang[Realms.survivalId()] = getLocalizedString("gameMode.survival");
-      this.gameModesLang[Realms.creativeId()] = getLocalizedString("gameMode.creative");
-      this.gameModesLang[Realms.adventureId()] = getLocalizedString("gameMode.adventure");
-      this.gameModesLang[Realms.spectatorId()] = getLocalizedString("gameMode.spectator");
+      this.worldLang = I18n.get("selectWorld.world");
+      this.conversionLang = I18n.get("selectWorld.conversion");
       this.addWidget(this.worldSelectionList);
-      this.buttonsAdd(new RealmsButton(1, this.width() / 2 + 6, this.height() - 32, 153, 20, getLocalizedString("gui.back")) {
-         public void onPress() {
-            Realms.setScreen(RealmsSelectFileToUploadScreen.this.lastScreen);
-         }
-      });
-      this.buttonsAdd(this.uploadButton = new RealmsButton(2, this.width() / 2 - 154, this.height() - 32, 153, 20, getLocalizedString("mco.upload.button.name")) {
-         public void onPress() {
-            RealmsSelectFileToUploadScreen.this.upload();
-         }
-      });
-      this.uploadButton.active(this.selectedWorld >= 0 && this.selectedWorld < this.levelList.size());
-      this.addWidget(this.titleLabel = new RealmsLabel(getLocalizedString("mco.upload.select.world.title"), this.width() / 2, 13, 16777215));
-      this.addWidget(this.subtitleLabel = new RealmsLabel(getLocalizedString("mco.upload.select.world.subtitle"), this.width() / 2, RealmsConstants.row(-1), 10526880));
+      this.uploadButton = (Button)this.addButton(new Button(this.width / 2 - 154, this.height - 32, 153, 20, new TranslatableComponent("mco.upload.button.name"), (var1) -> {
+         this.upload();
+      }));
+      this.uploadButton.active = this.selectedWorld >= 0 && this.selectedWorld < this.levelList.size();
+      this.addButton(new Button(this.width / 2 + 6, this.height - 32, 153, 20, CommonComponents.GUI_BACK, (var1) -> {
+         this.minecraft.setScreen(this.lastScreen);
+      }));
+      this.titleLabel = (RealmsLabel)this.addWidget(new RealmsLabel(new TranslatableComponent("mco.upload.select.world.title"), this.width / 2, 13, 16777215));
+      this.subtitleLabel = (RealmsLabel)this.addWidget(new RealmsLabel(new TranslatableComponent("mco.upload.select.world.subtitle"), this.width / 2, row(-1), 10526880));
       if (this.levelList.isEmpty()) {
-         this.addWidget(this.noWorldsLabel = new RealmsLabel(getLocalizedString("mco.upload.select.world.none"), this.width() / 2, this.height() / 2 - 20, 16777215));
+         this.noWorldsLabel = (RealmsLabel)this.addWidget(new RealmsLabel(new TranslatableComponent("mco.upload.select.world.none"), this.width / 2, this.height / 2 - 20, 16777215));
       } else {
          this.noWorldsLabel = null;
       }
 
       this.narrateLabels();
    }
 
    public void removed() {
-      this.setKeyboardHandlerSendRepeatsToGui(false);
+      this.minecraft.keyboardHandler.setSendRepeatsToGui(false);
    }
 
    private void upload() {
-      if (this.selectedWorld != -1 && !((RealmsLevelSummary)this.levelList.get(this.selectedWorld)).isHardcore()) {
-         RealmsLevelSummary var1 = (RealmsLevelSummary)this.levelList.get(this.selectedWorld);
-         Realms.setScreen(new RealmsUploadScreen(this.worldId, this.slotId, this.lastScreen, var1));
+      if (this.selectedWorld != -1 && !((LevelSummary)this.levelList.get(this.selectedWorld)).isHardcore()) {
+         LevelSummary var1 = (LevelSummary)this.levelList.get(this.selectedWorld);
+         this.minecraft.setScreen(new RealmsUploadScreen(this.worldId, this.slotId, this.lastScreen, var1, this.callback));
       }
 
    }
 
-   public void render(int var1, int var2, float var3) {
-      this.renderBackground();
-      this.worldSelectionList.render(var1, var2, var3);
-      this.titleLabel.render(this);
-      this.subtitleLabel.render(this);
+   public void render(PoseStack var1, int var2, int var3, float var4) {
+      this.renderBackground(var1);
+      this.worldSelectionList.render(var1, var2, var3, var4);
+      this.titleLabel.render(this, var1);
+      this.subtitleLabel.render(this, var1);
       if (this.noWorldsLabel != null) {
-         this.noWorldsLabel.render(this);
+         this.noWorldsLabel.render(this, var1);
       }
 
-      super.render(var1, var2, var3);
+      super.render(var1, var2, var3, var4);
    }
 
    public boolean keyPressed(int var1, int var2, int var3) {
       if (var1 == 256) {
-         Realms.setScreen(this.lastScreen);
+         this.minecraft.setScreen(this.lastScreen);
          return true;
       } else {
          return super.keyPressed(var1, var2, var3);
       }
    }
 
-   public void tick() {
-      super.tick();
+   private static String gameModeName(LevelSummary var0) {
+      return var0.getGameMode().getDisplayName().getString();
    }
 
-   private String gameModeName(RealmsLevelSummary var1) {
-      return this.gameModesLang[var1.getGameMode()];
+   private static String formatLastPlayed(LevelSummary var0) {
+      return DATE_FORMAT.format(new Date(var0.getLastPlayed()));
    }
 
-   private String formatLastPlayed(RealmsLevelSummary var1) {
-      return this.DATE_FORMAT.format(new Date(var1.getLastPlayed()));
-   }
+   class Entry extends ObjectSelectionList.Entry<RealmsSelectFileToUploadScreen.Entry> {
+      private final LevelSummary levelSummary;
 
-   class WorldListEntry extends RealmListEntry {
-      final RealmsLevelSummary levelSummary;
-
-      public WorldListEntry(RealmsLevelSummary var2) {
+      public Entry(LevelSummary var2) {
          this.levelSummary = var2;
       }
 
-      public void render(int var1, int var2, int var3, int var4, int var5, int var6, int var7, boolean var8, float var9) {
-         this.renderItem(this.levelSummary, var1, var3, var2, var5, Tezzelator.instance, var6, var7);
+      public void render(PoseStack var1, int var2, int var3, int var4, int var5, int var6, int var7, int var8, boolean var9, float var10) {
+         this.renderItem(var1, this.levelSummary, var2, var4, var3);
       }
 
       public boolean mouseClicked(double var1, double var3, int var5) {
          RealmsSelectFileToUploadScreen.this.worldSelectionList.selectItem(RealmsSelectFileToUploadScreen.this.levelList.indexOf(this.levelSummary));
          return true;
       }
 
-      protected void renderItem(RealmsLevelSummary var1, int var2, int var3, int var4, int var5, Tezzelator var6, int var7, int var8) {
-         String var9 = var1.getLevelName();
-         if (var9 == null || var9.isEmpty()) {
-            var9 = RealmsSelectFileToUploadScreen.this.worldLang + " " + (var2 + 1);
+      protected void renderItem(PoseStack var1, LevelSummary var2, int var3, int var4, int var5) {
+         String var6 = var2.getLevelName();
+         if (var6 == null || var6.isEmpty()) {
+            var6 = RealmsSelectFileToUploadScreen.this.worldLang + " " + (var3 + 1);
          }
 
-         String var10 = var1.getLevelId();
-         var10 = var10 + " (" + RealmsSelectFileToUploadScreen.this.formatLastPlayed(var1);
-         var10 = var10 + ")";
-         String var11 = "";
-         if (var1.isRequiresConversion()) {
-            var11 = RealmsSelectFileToUploadScreen.this.conversionLang + " " + var11;
+         String var7 = var2.getLevelId();
+         var7 = var7 + " (" + RealmsSelectFileToUploadScreen.formatLastPlayed(var2);
+         var7 = var7 + ")";
+         String var8 = "";
+         if (var2.isRequiresConversion()) {
+            var8 = RealmsSelectFileToUploadScreen.this.conversionLang + " " + var8;
          } else {
-            var11 = RealmsSelectFileToUploadScreen.this.gameModeName(var1);
-            if (var1.isHardcore()) {
-               var11 = ChatFormatting.DARK_RED + RealmsScreen.getLocalizedString("mco.upload.hardcore") + ChatFormatting.RESET;
+            var8 = RealmsSelectFileToUploadScreen.gameModeName(var2);
+            if (var2.isHardcore()) {
+               var8 = ChatFormatting.DARK_RED + I18n.get("mco.upload.hardcore") + ChatFormatting.RESET;
             }
 
-            if (var1.hasCheats()) {
-               var11 = var11 + ", " + RealmsScreen.getLocalizedString("selectWorld.cheats");
+            if (var2.hasCheats()) {
+               var8 = var8 + ", " + I18n.get("selectWorld.cheats");
             }
          }
 
-         RealmsSelectFileToUploadScreen.this.drawString(var9, var3 + 2, var4 + 1, 16777215);
-         RealmsSelectFileToUploadScreen.this.drawString(var10, var3 + 2, var4 + 12, 8421504);
-         RealmsSelectFileToUploadScreen.this.drawString(var11, var3 + 2, var4 + 12 + 10, 8421504);
+         RealmsSelectFileToUploadScreen.this.font.draw(var1, var6, (float)(var4 + 2), (float)(var5 + 1), 16777215);
+         RealmsSelectFileToUploadScreen.this.font.draw(var1, var7, (float)(var4 + 2), (float)(var5 + 12), 8421504);
+         RealmsSelectFileToUploadScreen.this.font.draw(var1, var8, (float)(var4 + 2), (float)(var5 + 12 + 10), 8421504);
       }
    }
 
-   class WorldSelectionList extends RealmsObjectSelectionList {
+   class WorldSelectionList extends RealmsObjectSelectionList<RealmsSelectFileToUploadScreen.Entry> {
       public WorldSelectionList() {
-         super(RealmsSelectFileToUploadScreen.this.width(), RealmsSelectFileToUploadScreen.this.height(), RealmsConstants.row(0), RealmsSelectFileToUploadScreen.this.height() - 40, 36);
+         super(RealmsSelectFileToUploadScreen.this.width, RealmsSelectFileToUploadScreen.this.height, RealmsSelectFileToUploadScreen.row(0), RealmsSelectFileToUploadScreen.this.height - 40, 36);
       }
 
-      public void addEntry(RealmsLevelSummary var1) {
-         this.addEntry(RealmsSelectFileToUploadScreen.this.new WorldListEntry(var1));
+      public void addEntry(LevelSummary var1) {
+         this.addEntry(RealmsSelectFileToUploadScreen.this.new Entry(var1));
       }
 
-      public int getItemCount() {
-         return RealmsSelectFileToUploadScreen.this.levelList.size();
-      }
-
       public int getMaxPosition() {
          return RealmsSelectFileToUploadScreen.this.levelList.size() * 36;
       }
 
       public boolean isFocused() {
-         return RealmsSelectFileToUploadScreen.this.isFocused(this);
+         return RealmsSelectFileToUploadScreen.this.getFocused() == this;
       }
 
-      public void renderBackground() {
-         RealmsSelectFileToUploadScreen.this.renderBackground();
+      public void renderBackground(PoseStack var1) {
+         RealmsSelectFileToUploadScreen.this.renderBackground(var1);
       }
 
       public void selectItem(int var1) {
-         this.setSelected(var1);
+         this.setSelectedItem(var1);
          if (var1 != -1) {
-            RealmsLevelSummary var2 = (RealmsLevelSummary)RealmsSelectFileToUploadScreen.this.levelList.get(var1);
-            String var3 = RealmsScreen.getLocalizedString("narrator.select.list.position", var1 + 1, RealmsSelectFileToUploadScreen.this.levelList.size());
-            String var4 = Realms.joinNarrations(Arrays.asList(var2.getLevelName(), RealmsSelectFileToUploadScreen.this.formatLastPlayed(var2), RealmsSelectFileToUploadScreen.this.gameModeName(var2), var3));
-            Realms.narrateNow(RealmsScreen.getLocalizedString("narrator.select", var4));
+            LevelSummary var2 = (LevelSummary)RealmsSelectFileToUploadScreen.this.levelList.get(var1);
+            String var3 = I18n.get("narrator.select.list.position", var1 + 1, RealmsSelectFileToUploadScreen.this.levelList.size());
+            String var4 = NarrationHelper.join(Arrays.asList(var2.getLevelName(), RealmsSelectFileToUploadScreen.formatLastPlayed(var2), RealmsSelectFileToUploadScreen.gameModeName(var2), var3));
+            NarrationHelper.now(I18n.get("narrator.select", var4));
          }
 
-         RealmsSelectFileToUploadScreen.this.selectedWorld = var1;
-         RealmsSelectFileToUploadScreen.this.uploadButton.active(RealmsSelectFileToUploadScreen.this.selectedWorld >= 0 && RealmsSelectFileToUploadScreen.this.selectedWorld < this.getItemCount() && !((RealmsLevelSummary)RealmsSelectFileToUploadScreen.this.levelList.get(RealmsSelectFileToUploadScreen.this.selectedWorld)).isHardcore());
       }
+
+      public void setSelected(@Nullable RealmsSelectFileToUploadScreen.Entry var1) {
+         super.setSelected(var1);
+         RealmsSelectFileToUploadScreen.this.selectedWorld = this.children().indexOf(var1);
+         RealmsSelectFileToUploadScreen.this.uploadButton.active = RealmsSelectFileToUploadScreen.this.selectedWorld >= 0 && RealmsSelectFileToUploadScreen.this.selectedWorld < this.getItemCount() && !((LevelSummary)RealmsSelectFileToUploadScreen.this.levelList.get(RealmsSelectFileToUploadScreen.this.selectedWorld)).isHardcore();
+      }
    }
 }
