--- com/mojang/realmsclient/RealmsMainScreen.java
+++ com/mojang/realmsclient/RealmsMainScreen.java
@@ -3,74 +3,103 @@
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.Lists;
 import com.google.common.util.concurrent.RateLimiter;
 import com.mojang.blaze3d.platform.GlStateManager;
 import com.mojang.blaze3d.systems.RenderSystem;
+import com.mojang.blaze3d.vertex.PoseStack;
 import com.mojang.realmsclient.client.Ping;
 import com.mojang.realmsclient.client.RealmsClient;
 import com.mojang.realmsclient.dto.PingResult;
 import com.mojang.realmsclient.dto.RealmsServer;
 import com.mojang.realmsclient.dto.RealmsServerPlayerList;
 import com.mojang.realmsclient.dto.RealmsServerPlayerLists;
 import com.mojang.realmsclient.exception.RealmsServiceException;
-import com.mojang.realmsclient.gui.ChatFormatting;
 import com.mojang.realmsclient.gui.RealmsDataFetcher;
 import com.mojang.realmsclient.gui.screens.RealmsClientOutdatedScreen;
 import com.mojang.realmsclient.gui.screens.RealmsConfigureWorldScreen;
 import com.mojang.realmsclient.gui.screens.RealmsCreateRealmScreen;
 import com.mojang.realmsclient.gui.screens.RealmsGenericErrorScreen;
 import com.mojang.realmsclient.gui.screens.RealmsLongConfirmationScreen;
 import com.mojang.realmsclient.gui.screens.RealmsLongRunningMcoTaskScreen;
 import com.mojang.realmsclient.gui.screens.RealmsParentalConsentScreen;
 import com.mojang.realmsclient.gui.screens.RealmsPendingInvitesScreen;
 import com.mojang.realmsclient.util.RealmsPersistence;
-import com.mojang.realmsclient.util.RealmsTasks;
 import com.mojang.realmsclient.util.RealmsTextureManager;
-import com.mojang.realmsclient.util.RealmsUtil;
-import java.io.IOException;
+import com.mojang.realmsclient.util.task.GetServerDetailsTask;
 import java.util.ArrayList;
+import java.util.Arrays;
 import java.util.Collection;
 import java.util.Iterator;
 import java.util.List;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.locks.ReentrantLock;
 import javax.annotation.Nullable;
+import net.minecraft.ChatFormatting;
+import net.minecraft.Util;
 import net.minecraft.client.Minecraft;
-import net.minecraft.realms.RealmListEntry;
-import net.minecraft.realms.Realms;
-import net.minecraft.realms.RealmsButton;
-import net.minecraft.realms.RealmsMth;
+import net.minecraft.client.gui.GuiComponent;
+import net.minecraft.client.gui.components.Button;
+import net.minecraft.client.gui.components.ObjectSelectionList;
+import net.minecraft.client.gui.components.TickableWidget;
+import net.minecraft.client.gui.screens.Screen;
+import net.minecraft.client.resources.language.I18n;
+import net.minecraft.network.chat.CommonComponents;
+import net.minecraft.network.chat.Component;
+import net.minecraft.network.chat.FormattedText;
+import net.minecraft.network.chat.TextComponent;
+import net.minecraft.network.chat.TranslatableComponent;
+import net.minecraft.realms.NarrationHelper;
 import net.minecraft.realms.RealmsObjectSelectionList;
 import net.minecraft.realms.RealmsScreen;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.server.packs.resources.ResourceManager;
+import net.minecraft.util.Mth;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
 public class RealmsMainScreen extends RealmsScreen {
    private static final Logger LOGGER = LogManager.getLogger();
+   private static final ResourceLocation ON_ICON_LOCATION = new ResourceLocation("realms", "textures/gui/realms/on_icon.png");
+   private static final ResourceLocation OFF_ICON_LOCATION = new ResourceLocation("realms", "textures/gui/realms/off_icon.png");
+   private static final ResourceLocation EXPIRED_ICON_LOCATION = new ResourceLocation("realms", "textures/gui/realms/expired_icon.png");
+   private static final ResourceLocation EXPIRES_SOON_ICON_LOCATION = new ResourceLocation("realms", "textures/gui/realms/expires_soon_icon.png");
+   private static final ResourceLocation LEAVE_ICON_LOCATION = new ResourceLocation("realms", "textures/gui/realms/leave_icon.png");
+   private static final ResourceLocation INVITATION_ICONS_LOCATION = new ResourceLocation("realms", "textures/gui/realms/invitation_icons.png");
+   private static final ResourceLocation INVITE_ICON_LOCATION = new ResourceLocation("realms", "textures/gui/realms/invite_icon.png");
+   private static final ResourceLocation WORLDICON_LOCATION = new ResourceLocation("realms", "textures/gui/realms/world_icon.png");
+   private static final ResourceLocation LOGO_LOCATION = new ResourceLocation("realms", "textures/gui/title/realms.png");
+   private static final ResourceLocation CONFIGURE_LOCATION = new ResourceLocation("realms", "textures/gui/realms/configure_icon.png");
+   private static final ResourceLocation QUESTIONMARK_LOCATION = new ResourceLocation("realms", "textures/gui/realms/questionmark.png");
+   private static final ResourceLocation NEWS_LOCATION = new ResourceLocation("realms", "textures/gui/realms/news_icon.png");
+   private static final ResourceLocation POPUP_LOCATION = new ResourceLocation("realms", "textures/gui/realms/popup.png");
+   private static final ResourceLocation DARKEN_LOCATION = new ResourceLocation("realms", "textures/gui/realms/darken.png");
+   private static final ResourceLocation CROSS_ICON_LOCATION = new ResourceLocation("realms", "textures/gui/realms/cross_icon.png");
+   private static final ResourceLocation TRIAL_ICON_LOCATION = new ResourceLocation("realms", "textures/gui/realms/trial_icon.png");
+   private static final ResourceLocation BUTTON_LOCATION = new ResourceLocation("minecraft", "textures/gui/widgets.png");
+   private static List<ResourceLocation> teaserImages = ImmutableList.of();
+   private static final RealmsDataFetcher REALMS_DATA_FETCHER = new RealmsDataFetcher();
    private static boolean overrideConfigure;
+   private static int lastScrollYPosition = -1;
+   private static volatile boolean hasParentalConsent;
+   private static volatile boolean checkedParentalConsent;
+   private static volatile boolean checkedClientCompatability;
+   private static Screen realmsGenericErrorScreen;
+   private static boolean regionsPinged;
    private final RateLimiter inviteNarrationLimiter;
    private boolean dontSetConnectedToRealms;
-   private static List<ResourceLocation> teaserImages = ImmutableList.of();
-   private static final RealmsDataFetcher realmsDataFetcher = new RealmsDataFetcher();
-   private static int lastScrollYPosition = -1;
-   private final RealmsScreen lastScreen;
+   private final Screen lastScreen;
    private volatile RealmsMainScreen.RealmSelectionList realmSelectionList;
    private long selectedServerId = -1L;
-   private RealmsButton playButton;
-   private RealmsButton backButton;
-   private RealmsButton renewButton;
-   private RealmsButton configureButton;
-   private RealmsButton leaveButton;
-   private String toolTip;
+   private Button playButton;
+   private Button backButton;
+   private Button renewButton;
+   private Button configureButton;
+   private Button leaveButton;
+   private List<Component> toolTip;
    private List<RealmsServer> realmsServers = Lists.newArrayList();
    private volatile int numberOfPendingInvites;
    private int animTick;
-   private static volatile boolean hasParentalConsent;
-   private static volatile boolean checkedParentalConsent;
-   private static volatile boolean checkedClientCompatability;
    private boolean hasFetchedServers;
    private boolean popupOpenedByUser;
    private boolean justClosedPopup;
    private volatile boolean trialsAvailable;
    private volatile boolean createdTrial;
@@ -78,30 +107,28 @@
    private volatile boolean hasUnreadNews;
    private volatile String newsLink;
    private int carouselIndex;
    private int carouselTick;
    private boolean hasSwitchedCarouselImage;
-   private static RealmsScreen realmsGenericErrorScreen;
-   private static boolean regionsPinged;
    private List<KeyCombo> keyCombos;
    private int clicks;
    private ReentrantLock connectLock = new ReentrantLock();
-   private boolean expiredHover;
-   private RealmsMainScreen.ShowPopupButton showPopupButton;
-   private RealmsMainScreen.PendingInvitesButton pendingInvitesButton;
-   private RealmsMainScreen.NewsButton newsButton;
-   private RealmsButton createTrialButton;
-   private RealmsButton buyARealmButton;
-   private RealmsButton closeButton;
+   private RealmsMainScreen.HoveredElement hoveredElement;
+   private Button showPopupButton;
+   private Button pendingInvitesButton;
+   private Button newsButton;
+   private Button createTrialButton;
+   private Button buyARealmButton;
+   private Button closeButton;
 
-   public RealmsMainScreen(RealmsScreen var1) {
+   public RealmsMainScreen(Screen var1) {
       this.lastScreen = var1;
       this.inviteNarrationLimiter = RateLimiter.create(0.01666666753590107D);
    }
 
    public boolean shouldShowMessageInList() {
-      if (this.hasParentalConsent() && this.hasFetchedServers) {
+      if (hasParentalConsent() && this.hasFetchedServers) {
          if (this.trialsAvailable && !this.createdTrial) {
             return true;
          } else {
             Iterator var1 = this.realmsServers.iterator();
 
@@ -110,21 +137,21 @@
                if (!var1.hasNext()) {
                   return true;
                }
 
                var2 = (RealmsServer)var1.next();
-            } while(!var2.ownerUUID.equals(Realms.getUUID()));
+            } while(!var2.ownerUUID.equals(this.minecraft.getUser().getUuid()));
 
             return false;
          }
       } else {
          return false;
       }
    }
 
    public boolean shouldShowPopup() {
-      if (this.hasParentalConsent() && this.hasFetchedServers) {
+      if (hasParentalConsent() && this.hasFetchedServers) {
          if (this.popupOpenedByUser) {
             return true;
          } else {
             return this.trialsAvailable && !this.createdTrial && this.realmsServers.isEmpty() ? true : this.realmsServers.isEmpty();
          }
@@ -135,167 +162,155 @@
 
    public void init() {
       this.keyCombos = Lists.newArrayList(new KeyCombo[]{new KeyCombo(new char[]{'3', '2', '1', '4', '5', '6'}, () -> {
          overrideConfigure = !overrideConfigure;
       }), new KeyCombo(new char[]{'9', '8', '7', '1', '2', '3'}, () -> {
-         if (RealmsClient.currentEnvironment.equals(RealmsClient.Environment.STAGE)) {
+         if (RealmsClient.currentEnvironment == RealmsClient.Environment.STAGE) {
             this.switchToProd();
          } else {
             this.switchToStage();
          }
 
       }), new KeyCombo(new char[]{'9', '8', '7', '4', '5', '6'}, () -> {
-         if (RealmsClient.currentEnvironment.equals(RealmsClient.Environment.LOCAL)) {
+         if (RealmsClient.currentEnvironment == RealmsClient.Environment.LOCAL) {
             this.switchToProd();
          } else {
             this.switchToLocal();
          }
 
       })});
       if (realmsGenericErrorScreen != null) {
-         Realms.setScreen(realmsGenericErrorScreen);
+         this.minecraft.setScreen(realmsGenericErrorScreen);
       } else {
          this.connectLock = new ReentrantLock();
-         if (checkedClientCompatability && !this.hasParentalConsent()) {
+         if (checkedClientCompatability && !hasParentalConsent()) {
             this.checkParentalConsent();
          }
 
          this.checkClientCompatability();
          this.checkUnreadNews();
          if (!this.dontSetConnectedToRealms) {
-            Realms.setConnectedToRealms(false);
+            this.minecraft.setConnectedToRealms(false);
          }
 
-         this.setKeyboardHandlerSendRepeatsToGui(true);
-         if (this.hasParentalConsent()) {
-            realmsDataFetcher.forceUpdate();
+         this.minecraft.keyboardHandler.setSendRepeatsToGui(true);
+         if (hasParentalConsent()) {
+            REALMS_DATA_FETCHER.forceUpdate();
          }
 
          this.showingPopup = false;
-         this.postInit();
+         if (hasParentalConsent() && this.hasFetchedServers) {
+            this.addButtons();
+         }
+
+         this.realmSelectionList = new RealmsMainScreen.RealmSelectionList();
+         if (lastScrollYPosition != -1) {
+            this.realmSelectionList.setScrollAmount((double)lastScrollYPosition);
+         }
+
+         this.addWidget(this.realmSelectionList);
+         this.magicalSpecialHackyFocus(this.realmSelectionList);
       }
    }
 
-   private boolean hasParentalConsent() {
+   private static boolean hasParentalConsent() {
       return checkedParentalConsent && hasParentalConsent;
    }
 
    public void addButtons() {
-      this.buttonsAdd(this.configureButton = new RealmsButton(1, this.width() / 2 - 190, this.height() - 32, 90, 20, getLocalizedString("mco.selectServer.configure")) {
-         public void onPress() {
-            RealmsMainScreen.this.configureClicked(RealmsMainScreen.this.findServer(RealmsMainScreen.this.selectedServerId));
+      this.configureButton = (Button)this.addButton(new Button(this.width / 2 - 190, this.height - 32, 90, 20, new TranslatableComponent("mco.selectServer.configure"), (var1x) -> {
+         this.configureClicked(this.findServer(this.selectedServerId));
+      }));
+      this.playButton = (Button)this.addButton(new Button(this.width / 2 - 93, this.height - 32, 90, 20, new TranslatableComponent("mco.selectServer.play"), (var1x) -> {
+         RealmsServer var2 = this.findServer(this.selectedServerId);
+         if (var2 != null) {
+            this.play(var2, this);
          }
-      });
-      this.buttonsAdd(this.playButton = new RealmsButton(3, this.width() / 2 - 93, this.height() - 32, 90, 20, getLocalizedString("mco.selectServer.play")) {
-         public void onPress() {
-            RealmsMainScreen.this.onPlay();
+      }));
+      this.backButton = (Button)this.addButton(new Button(this.width / 2 + 4, this.height - 32, 90, 20, CommonComponents.GUI_BACK, (var1x) -> {
+         if (!this.justClosedPopup) {
+            this.minecraft.setScreen(this.lastScreen);
          }
-      });
-      this.buttonsAdd(this.backButton = new RealmsButton(2, this.width() / 2 + 4, this.height() - 32, 90, 20, getLocalizedString("gui.back")) {
-         public void onPress() {
-            if (!RealmsMainScreen.this.justClosedPopup) {
-               Realms.setScreen(RealmsMainScreen.this.lastScreen);
-            }
 
+      }));
+      this.renewButton = (Button)this.addButton(new Button(this.width / 2 + 100, this.height - 32, 90, 20, new TranslatableComponent("mco.selectServer.expiredRenew"), (var1x) -> {
+         this.onRenew();
+      }));
+      this.leaveButton = (Button)this.addButton(new Button(this.width / 2 - 202, this.height - 32, 90, 20, new TranslatableComponent("mco.selectServer.leave"), (var1x) -> {
+         this.leaveClicked(this.findServer(this.selectedServerId));
+      }));
+      this.pendingInvitesButton = (Button)this.addButton(new RealmsMainScreen.PendingInvitesButton());
+      this.newsButton = (Button)this.addButton(new RealmsMainScreen.NewsButton());
+      this.showPopupButton = (Button)this.addButton(new RealmsMainScreen.ShowPopupButton());
+      this.closeButton = (Button)this.addButton(new RealmsMainScreen.CloseButton());
+      this.createTrialButton = (Button)this.addButton(new Button(this.width / 2 + 52, this.popupY0() + 137 - 20, 98, 20, new TranslatableComponent("mco.selectServer.trial"), (var1x) -> {
+         if (this.trialsAvailable && !this.createdTrial) {
+            Util.getPlatform().openUri("https://aka.ms/startjavarealmstrial");
+            this.minecraft.setScreen(this.lastScreen);
          }
-      });
-      this.buttonsAdd(this.renewButton = new RealmsButton(0, this.width() / 2 + 100, this.height() - 32, 90, 20, getLocalizedString("mco.selectServer.expiredRenew")) {
-         public void onPress() {
-            RealmsMainScreen.this.onRenew();
-         }
-      });
-      this.buttonsAdd(this.leaveButton = new RealmsButton(7, this.width() / 2 - 202, this.height() - 32, 90, 20, getLocalizedString("mco.selectServer.leave")) {
-         public void onPress() {
-            RealmsMainScreen.this.leaveClicked(RealmsMainScreen.this.findServer(RealmsMainScreen.this.selectedServerId));
-         }
-      });
-      this.buttonsAdd(this.pendingInvitesButton = new RealmsMainScreen.PendingInvitesButton());
-      this.buttonsAdd(this.newsButton = new RealmsMainScreen.NewsButton());
-      this.buttonsAdd(this.showPopupButton = new RealmsMainScreen.ShowPopupButton());
-      this.buttonsAdd(this.closeButton = new RealmsMainScreen.CloseButton());
-      this.buttonsAdd(this.createTrialButton = new RealmsButton(6, this.width() / 2 + 52, this.popupY0() + 137 - 20, 98, 20, getLocalizedString("mco.selectServer.trial")) {
-         public void onPress() {
-            RealmsMainScreen.this.createTrial();
-         }
-      });
-      this.buttonsAdd(this.buyARealmButton = new RealmsButton(5, this.width() / 2 + 52, this.popupY0() + 160 - 20, 98, 20, getLocalizedString("mco.selectServer.buy")) {
-         public void onPress() {
-            RealmsUtil.browseTo("https://aka.ms/BuyJavaRealms");
-         }
-      });
+      }));
+      this.buyARealmButton = (Button)this.addButton(new Button(this.width / 2 + 52, this.popupY0() + 160 - 20, 98, 20, new TranslatableComponent("mco.selectServer.buy"), (var0) -> {
+         Util.getPlatform().openUri("https://aka.ms/BuyJavaRealms");
+      }));
       RealmsServer var1 = this.findServer(this.selectedServerId);
       this.updateButtonStates(var1);
    }
 
-   private void updateButtonStates(RealmsServer var1) {
-      this.playButton.active(this.shouldPlayButtonBeActive(var1) && !this.shouldShowPopup());
-      this.renewButton.setVisible(this.shouldRenewButtonBeActive(var1));
-      this.configureButton.setVisible(this.shouldConfigureButtonBeVisible(var1));
-      this.leaveButton.setVisible(this.shouldLeaveButtonBeVisible(var1));
+   private void updateButtonStates(@Nullable RealmsServer var1) {
+      this.playButton.active = this.shouldPlayButtonBeActive(var1) && !this.shouldShowPopup();
+      this.renewButton.visible = this.shouldRenewButtonBeActive(var1);
+      this.configureButton.visible = this.shouldConfigureButtonBeVisible(var1);
+      this.leaveButton.visible = this.shouldLeaveButtonBeVisible(var1);
       boolean var2 = this.shouldShowPopup() && this.trialsAvailable && !this.createdTrial;
-      this.createTrialButton.setVisible(var2);
-      this.createTrialButton.active(var2);
-      this.buyARealmButton.setVisible(this.shouldShowPopup());
-      this.closeButton.setVisible(this.shouldShowPopup() && this.popupOpenedByUser);
-      this.renewButton.active(!this.shouldShowPopup());
-      this.configureButton.active(!this.shouldShowPopup());
-      this.leaveButton.active(!this.shouldShowPopup());
-      this.newsButton.active(true);
-      this.pendingInvitesButton.active(true);
-      this.backButton.active(true);
-      this.showPopupButton.active(!this.shouldShowPopup());
+      this.createTrialButton.visible = var2;
+      this.createTrialButton.active = var2;
+      this.buyARealmButton.visible = this.shouldShowPopup();
+      this.closeButton.visible = this.shouldShowPopup() && this.popupOpenedByUser;
+      this.renewButton.active = !this.shouldShowPopup();
+      this.configureButton.active = !this.shouldShowPopup();
+      this.leaveButton.active = !this.shouldShowPopup();
+      this.newsButton.active = true;
+      this.pendingInvitesButton.active = true;
+      this.backButton.active = true;
+      this.showPopupButton.active = !this.shouldShowPopup();
    }
 
    private boolean shouldShowPopupButton() {
-      return (!this.shouldShowPopup() || this.popupOpenedByUser) && this.hasParentalConsent() && this.hasFetchedServers;
+      return (!this.shouldShowPopup() || this.popupOpenedByUser) && hasParentalConsent() && this.hasFetchedServers;
    }
 
-   private boolean shouldPlayButtonBeActive(RealmsServer var1) {
+   private boolean shouldPlayButtonBeActive(@Nullable RealmsServer var1) {
       return var1 != null && !var1.expired && var1.state == RealmsServer.State.OPEN;
    }
 
-   private boolean shouldRenewButtonBeActive(RealmsServer var1) {
+   private boolean shouldRenewButtonBeActive(@Nullable RealmsServer var1) {
       return var1 != null && var1.expired && this.isSelfOwnedServer(var1);
    }
 
-   private boolean shouldConfigureButtonBeVisible(RealmsServer var1) {
+   private boolean shouldConfigureButtonBeVisible(@Nullable RealmsServer var1) {
       return var1 != null && this.isSelfOwnedServer(var1);
    }
 
-   private boolean shouldLeaveButtonBeVisible(RealmsServer var1) {
+   private boolean shouldLeaveButtonBeVisible(@Nullable RealmsServer var1) {
       return var1 != null && !this.isSelfOwnedServer(var1);
    }
 
-   public void postInit() {
-      if (this.hasParentalConsent() && this.hasFetchedServers) {
-         this.addButtons();
-      }
-
-      this.realmSelectionList = new RealmsMainScreen.RealmSelectionList();
-      if (lastScrollYPosition != -1) {
-         this.realmSelectionList.scroll(lastScrollYPosition);
-      }
-
-      this.addWidget(this.realmSelectionList);
-      this.focusOn(this.realmSelectionList);
-   }
-
    public void tick() {
-      this.tickButtons();
+      super.tick();
       this.justClosedPopup = false;
       ++this.animTick;
       --this.clicks;
       if (this.clicks < 0) {
          this.clicks = 0;
       }
 
-      if (this.hasParentalConsent()) {
-         realmsDataFetcher.init();
+      if (hasParentalConsent()) {
+         REALMS_DATA_FETCHER.init();
          Iterator var4;
          RealmsServer var5;
-         if (realmsDataFetcher.isFetchedSinceLastTry(RealmsDataFetcher.Task.SERVER_LIST)) {
-            List var1 = realmsDataFetcher.getServers();
+         if (REALMS_DATA_FETCHER.isFetchedSinceLastTry(RealmsDataFetcher.Task.SERVER_LIST)) {
+            List var1 = REALMS_DATA_FETCHER.getServers();
             this.realmSelectionList.clear();
             boolean var2 = !this.hasFetchedServers;
             if (var2) {
                this.hasFetchedServers = true;
             }
@@ -311,18 +326,18 @@
                   }
                }
 
                this.realmsServers = var1;
                if (this.shouldShowMessageInList()) {
-                  this.realmSelectionList.addEntry(new RealmsMainScreen.RealmSelectionListTrialEntry());
+                  this.realmSelectionList.addEntry(new RealmsMainScreen.TrialEntry());
                }
 
                var4 = this.realmsServers.iterator();
 
                while(var4.hasNext()) {
                   var5 = (RealmsServer)var4.next();
-                  this.realmSelectionList.addEntry(new RealmsMainScreen.RealmSelectionListEntry(var5));
+                  this.realmSelectionList.addEntry(new RealmsMainScreen.ServerEntry(var5));
                }
 
                if (!regionsPinged && var3) {
                   regionsPinged = true;
                   this.pingRegions();
@@ -332,29 +347,29 @@
             if (var2) {
                this.addButtons();
             }
          }
 
-         if (realmsDataFetcher.isFetchedSinceLastTry(RealmsDataFetcher.Task.PENDING_INVITE)) {
-            this.numberOfPendingInvites = realmsDataFetcher.getPendingInvitesCount();
+         if (REALMS_DATA_FETCHER.isFetchedSinceLastTry(RealmsDataFetcher.Task.PENDING_INVITE)) {
+            this.numberOfPendingInvites = REALMS_DATA_FETCHER.getPendingInvitesCount();
             if (this.numberOfPendingInvites > 0 && this.inviteNarrationLimiter.tryAcquire(1)) {
-               Realms.narrateNow(getLocalizedString("mco.configure.world.invite.narration", new Object[]{this.numberOfPendingInvites}));
+               NarrationHelper.now(I18n.get("mco.configure.world.invite.narration", this.numberOfPendingInvites));
             }
          }
 
-         if (realmsDataFetcher.isFetchedSinceLastTry(RealmsDataFetcher.Task.TRIAL_AVAILABLE) && !this.createdTrial) {
-            boolean var6 = realmsDataFetcher.isTrialAvailable();
+         if (REALMS_DATA_FETCHER.isFetchedSinceLastTry(RealmsDataFetcher.Task.TRIAL_AVAILABLE) && !this.createdTrial) {
+            boolean var6 = REALMS_DATA_FETCHER.isTrialAvailable();
             if (var6 != this.trialsAvailable && this.shouldShowPopup()) {
                this.trialsAvailable = var6;
                this.showingPopup = false;
             } else {
                this.trialsAvailable = var6;
             }
          }
 
-         if (realmsDataFetcher.isFetchedSinceLastTry(RealmsDataFetcher.Task.LIVE_STATS)) {
-            RealmsServerPlayerLists var7 = realmsDataFetcher.getLivestats();
+         if (REALMS_DATA_FETCHER.isFetchedSinceLastTry(RealmsDataFetcher.Task.LIVE_STATS)) {
+            RealmsServerPlayerLists var7 = REALMS_DATA_FETCHER.getLivestats();
             Iterator var8 = var7.servers.iterator();
 
             label87:
             while(true) {
                while(true) {
@@ -374,36 +389,31 @@
                   }
                }
             }
          }
 
-         if (realmsDataFetcher.isFetchedSinceLastTry(RealmsDataFetcher.Task.UNREAD_NEWS)) {
-            this.hasUnreadNews = realmsDataFetcher.hasUnreadNews();
-            this.newsLink = realmsDataFetcher.newsLink();
+         if (REALMS_DATA_FETCHER.isFetchedSinceLastTry(RealmsDataFetcher.Task.UNREAD_NEWS)) {
+            this.hasUnreadNews = REALMS_DATA_FETCHER.hasUnreadNews();
+            this.newsLink = REALMS_DATA_FETCHER.newsLink();
          }
 
-         realmsDataFetcher.markClean();
+         REALMS_DATA_FETCHER.markClean();
          if (this.shouldShowPopup()) {
             ++this.carouselTick;
          }
 
          if (this.showPopupButton != null) {
-            this.showPopupButton.setVisible(this.shouldShowPopupButton());
+            this.showPopupButton.visible = this.shouldShowPopupButton();
          }
 
       }
    }
 
-   private void browseURL(String var1) {
-      Realms.setClipboard(var1);
-      RealmsUtil.browseTo(var1);
-   }
-
    private void pingRegions() {
       (new Thread(() -> {
          List var1 = Ping.pingAllRegions();
-         RealmsClient var2 = RealmsClient.createRealmsClient();
+         RealmsClient var2 = RealmsClient.create();
          PingResult var3 = new PingResult();
          var3.pingResults = var1;
          var3.worldIds = this.getOwnedNonExpiredWorldIds();
 
          try {
@@ -428,68 +438,64 @@
 
       return var1;
    }
 
    public void removed() {
-      this.setKeyboardHandlerSendRepeatsToGui(false);
+      this.minecraft.keyboardHandler.setSendRepeatsToGui(false);
       this.stopRealmsFetcher();
    }
 
-   private void onPlay() {
-      RealmsServer var1 = this.findServer(this.selectedServerId);
-      if (var1 != null) {
-         this.play(var1, this);
-      }
-   }
-
    private void onRenew() {
       RealmsServer var1 = this.findServer(this.selectedServerId);
       if (var1 != null) {
-         String var2 = "https://aka.ms/ExtendJavaRealms?subscriptionId=" + var1.remoteSubscriptionId + "&profileId=" + Realms.getUUID() + "&ref=" + (var1.expiredTrial ? "expiredTrial" : "expiredRealm");
-         this.browseURL(var2);
+         String var2 = "https://aka.ms/ExtendJavaRealms?subscriptionId=" + var1.remoteSubscriptionId + "&profileId=" + this.minecraft.getUser().getUuid() + "&ref=" + (var1.expiredTrial ? "expiredTrial" : "expiredRealm");
+         this.minecraft.keyboardHandler.setClipboard(var2);
+         Util.getPlatform().openUri(var2);
       }
    }
 
-   private void createTrial() {
-      if (this.trialsAvailable && !this.createdTrial) {
-         RealmsUtil.browseTo("https://aka.ms/startjavarealmstrial");
-         Realms.setScreen(this.lastScreen);
-      }
-   }
-
    private void checkClientCompatability() {
       if (!checkedClientCompatability) {
          checkedClientCompatability = true;
          (new Thread("MCO Compatability Checker #1") {
             public void run() {
-               RealmsClient var1 = RealmsClient.createRealmsClient();
+               RealmsClient var1 = RealmsClient.create();
 
                try {
                   RealmsClient.CompatibleVersionResponse var2 = var1.clientCompatible();
-                  if (var2.equals(RealmsClient.CompatibleVersionResponse.OUTDATED)) {
+                  if (var2 == RealmsClient.CompatibleVersionResponse.OUTDATED) {
                      RealmsMainScreen.realmsGenericErrorScreen = new RealmsClientOutdatedScreen(RealmsMainScreen.this.lastScreen, true);
-                     Realms.setScreen(RealmsMainScreen.realmsGenericErrorScreen);
-                  } else if (var2.equals(RealmsClient.CompatibleVersionResponse.OTHER)) {
+                     RealmsMainScreen.this.minecraft.execute(() -> {
+                        RealmsMainScreen.this.minecraft.setScreen(RealmsMainScreen.realmsGenericErrorScreen);
+                     });
+                     return;
+                  }
+
+                  if (var2 == RealmsClient.CompatibleVersionResponse.OTHER) {
                      RealmsMainScreen.realmsGenericErrorScreen = new RealmsClientOutdatedScreen(RealmsMainScreen.this.lastScreen, false);
-                     Realms.setScreen(RealmsMainScreen.realmsGenericErrorScreen);
-                  } else {
-                     RealmsMainScreen.this.checkParentalConsent();
+                     RealmsMainScreen.this.minecraft.execute(() -> {
+                        RealmsMainScreen.this.minecraft.setScreen(RealmsMainScreen.realmsGenericErrorScreen);
+                     });
+                     return;
                   }
+
+                  RealmsMainScreen.this.checkParentalConsent();
                } catch (RealmsServiceException var3) {
                   RealmsMainScreen.checkedClientCompatability = false;
-                  RealmsMainScreen.LOGGER.error("Couldn't connect to realms: ", var3.toString());
+                  RealmsMainScreen.LOGGER.error("Couldn't connect to realms", var3);
                   if (var3.httpResultCode == 401) {
-                     RealmsMainScreen.realmsGenericErrorScreen = new RealmsGenericErrorScreen(RealmsScreen.getLocalizedString("mco.error.invalid.session.title"), RealmsScreen.getLocalizedString("mco.error.invalid.session.message"), RealmsMainScreen.this.lastScreen);
-                     Realms.setScreen(RealmsMainScreen.realmsGenericErrorScreen);
+                     RealmsMainScreen.realmsGenericErrorScreen = new RealmsGenericErrorScreen(new TranslatableComponent("mco.error.invalid.session.title"), new TranslatableComponent("mco.error.invalid.session.message"), RealmsMainScreen.this.lastScreen);
+                     RealmsMainScreen.this.minecraft.execute(() -> {
+                        RealmsMainScreen.this.minecraft.setScreen(RealmsMainScreen.realmsGenericErrorScreen);
+                     });
                   } else {
-                     Realms.setScreen(new RealmsGenericErrorScreen(var3, RealmsMainScreen.this.lastScreen));
+                     RealmsMainScreen.this.minecraft.execute(() -> {
+                        RealmsMainScreen.this.minecraft.setScreen(new RealmsGenericErrorScreen(var3, RealmsMainScreen.this.lastScreen));
+                     });
                   }
-               } catch (IOException var4) {
-                  RealmsMainScreen.checkedClientCompatability = false;
-                  RealmsMainScreen.LOGGER.error("Couldn't connect to realms: ", var4.getMessage());
-                  Realms.setScreen(new RealmsGenericErrorScreen(var4.getMessage(), RealmsMainScreen.this.lastScreen));
                }
+
             }
          }).start();
       }
 
    }
@@ -498,120 +504,115 @@
    }
 
    private void checkParentalConsent() {
       (new Thread("MCO Compatability Checker #1") {
          public void run() {
-            RealmsClient var1 = RealmsClient.createRealmsClient();
+            RealmsClient var1 = RealmsClient.create();
 
             try {
                Boolean var2 = var1.mcoEnabled();
                if (var2) {
                   RealmsMainScreen.LOGGER.info("Realms is available for this user");
                   RealmsMainScreen.hasParentalConsent = true;
                } else {
                   RealmsMainScreen.LOGGER.info("Realms is not available for this user");
                   RealmsMainScreen.hasParentalConsent = false;
-                  Realms.setScreen(new RealmsParentalConsentScreen(RealmsMainScreen.this.lastScreen));
+                  RealmsMainScreen.this.minecraft.execute(() -> {
+                     RealmsMainScreen.this.minecraft.setScreen(new RealmsParentalConsentScreen(RealmsMainScreen.this.lastScreen));
+                  });
                }
 
                RealmsMainScreen.checkedParentalConsent = true;
             } catch (RealmsServiceException var3) {
-               RealmsMainScreen.LOGGER.error("Couldn't connect to realms: ", var3.toString());
-               Realms.setScreen(new RealmsGenericErrorScreen(var3, RealmsMainScreen.this.lastScreen));
-            } catch (IOException var4) {
-               RealmsMainScreen.LOGGER.error("Couldn't connect to realms: ", var4.getMessage());
-               Realms.setScreen(new RealmsGenericErrorScreen(var4.getMessage(), RealmsMainScreen.this.lastScreen));
+               RealmsMainScreen.LOGGER.error("Couldn't connect to realms", var3);
+               RealmsMainScreen.this.minecraft.execute(() -> {
+                  RealmsMainScreen.this.minecraft.setScreen(new RealmsGenericErrorScreen(var3, RealmsMainScreen.this.lastScreen));
+               });
             }
 
          }
       }).start();
    }
 
    private void switchToStage() {
-      if (!RealmsClient.currentEnvironment.equals(RealmsClient.Environment.STAGE)) {
+      if (RealmsClient.currentEnvironment != RealmsClient.Environment.STAGE) {
          (new Thread("MCO Stage Availability Checker #1") {
             public void run() {
-               RealmsClient var1 = RealmsClient.createRealmsClient();
+               RealmsClient var1 = RealmsClient.create();
 
                try {
                   Boolean var2 = var1.stageAvailable();
                   if (var2) {
                      RealmsClient.switchToStage();
                      RealmsMainScreen.LOGGER.info("Switched to stage");
-                     RealmsMainScreen.realmsDataFetcher.forceUpdate();
+                     RealmsMainScreen.REALMS_DATA_FETCHER.forceUpdate();
                   }
                } catch (RealmsServiceException var3) {
                   RealmsMainScreen.LOGGER.error("Couldn't connect to Realms: " + var3);
-               } catch (IOException var4) {
-                  RealmsMainScreen.LOGGER.error("Couldn't parse response connecting to Realms: " + var4.getMessage());
                }
 
             }
          }).start();
       }
 
    }
 
    private void switchToLocal() {
-      if (!RealmsClient.currentEnvironment.equals(RealmsClient.Environment.LOCAL)) {
+      if (RealmsClient.currentEnvironment != RealmsClient.Environment.LOCAL) {
          (new Thread("MCO Local Availability Checker #1") {
             public void run() {
-               RealmsClient var1 = RealmsClient.createRealmsClient();
+               RealmsClient var1 = RealmsClient.create();
 
                try {
                   Boolean var2 = var1.stageAvailable();
                   if (var2) {
                      RealmsClient.switchToLocal();
                      RealmsMainScreen.LOGGER.info("Switched to local");
-                     RealmsMainScreen.realmsDataFetcher.forceUpdate();
+                     RealmsMainScreen.REALMS_DATA_FETCHER.forceUpdate();
                   }
                } catch (RealmsServiceException var3) {
                   RealmsMainScreen.LOGGER.error("Couldn't connect to Realms: " + var3);
-               } catch (IOException var4) {
-                  RealmsMainScreen.LOGGER.error("Couldn't parse response connecting to Realms: " + var4.getMessage());
                }
 
             }
          }).start();
       }
 
    }
 
    private void switchToProd() {
       RealmsClient.switchToProd();
-      realmsDataFetcher.forceUpdate();
+      REALMS_DATA_FETCHER.forceUpdate();
    }
 
    private void stopRealmsFetcher() {
-      realmsDataFetcher.stop();
+      REALMS_DATA_FETCHER.stop();
    }
 
    private void configureClicked(RealmsServer var1) {
-      if (Realms.getUUID().equals(var1.ownerUUID) || overrideConfigure) {
+      if (this.minecraft.getUser().getUuid().equals(var1.ownerUUID) || overrideConfigure) {
          this.saveListScrollPosition();
-         Minecraft var2 = Minecraft.getInstance();
-         var2.execute(() -> {
-            var2.setScreen((new RealmsConfigureWorldScreen(this, var1.id)).getProxy());
-         });
+         this.minecraft.setScreen(new RealmsConfigureWorldScreen(this, var1.id));
       }
 
    }
 
    private void leaveClicked(@Nullable RealmsServer var1) {
-      if (var1 != null && !Realms.getUUID().equals(var1.ownerUUID)) {
+      if (var1 != null && !this.minecraft.getUser().getUuid().equals(var1.ownerUUID)) {
          this.saveListScrollPosition();
-         String var2 = getLocalizedString("mco.configure.world.leave.question.line1");
-         String var3 = getLocalizedString("mco.configure.world.leave.question.line2");
-         Realms.setScreen(new RealmsLongConfirmationScreen(this, RealmsLongConfirmationScreen.Type.Info, var2, var3, true, 4));
+         TranslatableComponent var2 = new TranslatableComponent("mco.configure.world.leave.question.line1");
+         TranslatableComponent var3 = new TranslatableComponent("mco.configure.world.leave.question.line2");
+         this.minecraft.setScreen(new RealmsLongConfirmationScreen(this::leaveServer, RealmsLongConfirmationScreen.Type.Info, var2, var3, true));
       }
 
    }
 
    private void saveListScrollPosition() {
-      lastScrollYPosition = this.realmSelectionList.getScroll();
+      lastScrollYPosition = (int)this.realmSelectionList.getScrollAmount();
    }
 
+   @Nullable
    private RealmsServer findServer(long var1) {
       Iterator var3 = this.realmsServers.iterator();
 
       RealmsServer var4;
       do {
@@ -623,64 +624,62 @@
       } while(var4.id != var1);
 
       return var4;
    }
 
-   public void confirmResult(boolean var1, int var2) {
-      if (var2 == 4) {
-         if (var1) {
-            (new Thread("Realms-leave-server") {
-               public void run() {
-                  try {
-                     RealmsServer var1 = RealmsMainScreen.this.findServer(RealmsMainScreen.this.selectedServerId);
-                     if (var1 != null) {
-                        RealmsClient var2 = RealmsClient.createRealmsClient();
-                        var2.uninviteMyselfFrom(var1.id);
-                        RealmsMainScreen.realmsDataFetcher.removeItem(var1);
-                        RealmsMainScreen.this.realmsServers.remove(var1);
-                        RealmsMainScreen.this.realmSelectionList.children().removeIf((var1x) -> {
-                           return var1x instanceof RealmsMainScreen.RealmSelectionListEntry && ((RealmsMainScreen.RealmSelectionListEntry)var1x).mServerData.id == RealmsMainScreen.this.selectedServerId;
-                        });
-                        RealmsMainScreen.this.realmSelectionList.setSelected(-1);
-                        RealmsMainScreen.this.updateButtonStates((RealmsServer)null);
-                        RealmsMainScreen.this.selectedServerId = -1L;
-                        RealmsMainScreen.this.playButton.active(false);
-                     }
-                  } catch (RealmsServiceException var3) {
-                     RealmsMainScreen.LOGGER.error("Couldn't configure world");
-                     Realms.setScreen(new RealmsGenericErrorScreen(var3, RealmsMainScreen.this));
+   private void leaveServer(boolean var1) {
+      if (var1) {
+         (new Thread("Realms-leave-server") {
+            public void run() {
+               try {
+                  RealmsServer var1 = RealmsMainScreen.this.findServer(RealmsMainScreen.this.selectedServerId);
+                  if (var1 != null) {
+                     RealmsClient var2 = RealmsClient.create();
+                     var2.uninviteMyselfFrom(var1.id);
+                     RealmsMainScreen.REALMS_DATA_FETCHER.removeItem(var1);
+                     RealmsMainScreen.this.realmsServers.remove(var1);
+                     RealmsMainScreen.this.realmSelectionList.children().removeIf((var1x) -> {
+                        return var1x instanceof RealmsMainScreen.ServerEntry && ((RealmsMainScreen.ServerEntry)var1x).serverData.id == RealmsMainScreen.this.selectedServerId;
+                     });
+                     RealmsMainScreen.this.realmSelectionList.setSelected((RealmsMainScreen.Entry)null);
+                     RealmsMainScreen.this.updateButtonStates((RealmsServer)null);
+                     RealmsMainScreen.this.selectedServerId = -1L;
+                     RealmsMainScreen.this.playButton.active = false;
                   }
-
+               } catch (RealmsServiceException var3) {
+                  RealmsMainScreen.LOGGER.error("Couldn't configure world");
+                  RealmsMainScreen.this.minecraft.execute(() -> {
+                     RealmsMainScreen.this.minecraft.setScreen(new RealmsGenericErrorScreen(var3, RealmsMainScreen.this));
+                  });
                }
-            }).start();
-         }
 
-         Realms.setScreen(this);
+            }
+         }).start();
       }
 
+      this.minecraft.setScreen(this);
    }
 
    public void removeSelection() {
       this.selectedServerId = -1L;
    }
 
    public boolean keyPressed(int var1, int var2, int var3) {
-      switch(var1) {
-      case 256:
+      if (var1 == 256) {
          this.keyCombos.forEach(KeyCombo::reset);
          this.onClosePopup();
          return true;
-      default:
+      } else {
          return super.keyPressed(var1, var2, var3);
       }
    }
 
    private void onClosePopup() {
       if (this.shouldShowPopup() && this.popupOpenedByUser) {
          this.popupOpenedByUser = false;
       } else {
-         Realms.setScreen(this.lastScreen);
+         this.minecraft.setScreen(this.lastScreen);
       }
 
    }
 
    public boolean charTyped(char var1, int var2) {
@@ -688,68 +687,66 @@
          var1x.keyPressed(var1);
       });
       return true;
    }
 
-   public void render(int var1, int var2, float var3) {
-      this.expiredHover = false;
+   public void render(PoseStack var1, int var2, int var3, float var4) {
+      this.hoveredElement = RealmsMainScreen.HoveredElement.NONE;
       this.toolTip = null;
-      this.renderBackground();
-      this.realmSelectionList.render(var1, var2, var3);
-      this.drawRealmsLogo(this.width() / 2 - 50, 7);
-      if (RealmsClient.currentEnvironment.equals(RealmsClient.Environment.STAGE)) {
-         this.renderStage();
+      this.renderBackground(var1);
+      this.realmSelectionList.render(var1, var2, var3, var4);
+      this.drawRealmsLogo(var1, this.width / 2 - 50, 7);
+      if (RealmsClient.currentEnvironment == RealmsClient.Environment.STAGE) {
+         this.renderStage(var1);
       }
 
-      if (RealmsClient.currentEnvironment.equals(RealmsClient.Environment.LOCAL)) {
-         this.renderLocal();
+      if (RealmsClient.currentEnvironment == RealmsClient.Environment.LOCAL) {
+         this.renderLocal(var1);
       }
 
       if (this.shouldShowPopup()) {
-         this.drawPopup(var1, var2);
+         this.drawPopup(var1, var2, var3);
       } else {
          if (this.showingPopup) {
             this.updateButtonStates((RealmsServer)null);
-            if (!this.hasWidget(this.realmSelectionList)) {
-               this.addWidget(this.realmSelectionList);
+            if (!this.children.contains(this.realmSelectionList)) {
+               this.children.add(this.realmSelectionList);
             }
 
-            RealmsServer var4 = this.findServer(this.selectedServerId);
-            this.playButton.active(this.shouldPlayButtonBeActive(var4));
+            RealmsServer var5 = this.findServer(this.selectedServerId);
+            this.playButton.active = this.shouldPlayButtonBeActive(var5);
          }
 
          this.showingPopup = false;
       }
 
-      super.render(var1, var2, var3);
+      super.render(var1, var2, var3, var4);
       if (this.toolTip != null) {
-         this.renderMousehoverTooltip(this.toolTip, var1, var2);
+         this.renderMousehoverTooltip(var1, this.toolTip, var2, var3);
       }
 
       if (this.trialsAvailable && !this.createdTrial && this.shouldShowPopup()) {
-         RealmsScreen.bind("realms:textures/gui/realms/trial_icon.png");
+         this.minecraft.getTextureManager().bind(TRIAL_ICON_LOCATION);
          RenderSystem.color4f(1.0F, 1.0F, 1.0F, 1.0F);
-         RenderSystem.pushMatrix();
-         boolean var7 = true;
-         boolean var5 = true;
-         byte var6 = 0;
-         if ((System.currentTimeMillis() / 800L & 1L) == 1L) {
-            var6 = 8;
+         boolean var8 = true;
+         boolean var6 = true;
+         byte var7 = 0;
+         if ((Util.getMillis() / 800L & 1L) == 1L) {
+            var7 = 8;
          }
 
-         RealmsScreen.blit(this.createTrialButton.x() + this.createTrialButton.getWidth() - 8 - 4, this.createTrialButton.y() + this.createTrialButton.getHeight() / 2 - 4, 0.0F, (float)var6, 8, 8, 8, 16);
-         RenderSystem.popMatrix();
+         GuiComponent.blit(var1, this.createTrialButton.x + this.createTrialButton.getWidth() - 8 - 4, this.createTrialButton.y + this.createTrialButton.getHeight() / 2 - 4, 0.0F, (float)var7, 8, 8, 8, 16);
       }
 
    }
 
-   private void drawRealmsLogo(int var1, int var2) {
-      RealmsScreen.bind("realms:textures/gui/title/realms.png");
+   private void drawRealmsLogo(PoseStack var1, int var2, int var3) {
+      this.minecraft.getTextureManager().bind(LOGO_LOCATION);
       RenderSystem.color4f(1.0F, 1.0F, 1.0F, 1.0F);
       RenderSystem.pushMatrix();
       RenderSystem.scalef(0.5F, 0.5F, 0.5F);
-      RealmsScreen.blit(var1 * 2, var2 * 2 - 5, 0.0F, 0.0F, 200, 50, 200, 50);
+      GuiComponent.blit(var1, var2 * 2, var3 * 2 - 5, 0.0F, 0.0F, 200, 50, 200, 50);
       RenderSystem.popMatrix();
    }
 
    public boolean mouseClicked(double var1, double var3, int var5) {
       if (this.isOutsidePopup(var1, var3) && this.popupOpenedByUser) {
@@ -765,128 +762,124 @@
       int var5 = this.popupX0();
       int var6 = this.popupY0();
       return var1 < (double)(var5 - 5) || var1 > (double)(var5 + 315) || var3 < (double)(var6 - 5) || var3 > (double)(var6 + 171);
    }
 
-   private void drawPopup(int var1, int var2) {
-      int var3 = this.popupX0();
-      int var4 = this.popupY0();
-      String var5 = getLocalizedString("mco.selectServer.popup");
-      List var6 = this.fontSplit(var5, 100);
+   private void drawPopup(PoseStack var1, int var2, int var3) {
+      int var4 = this.popupX0();
+      int var5 = this.popupY0();
+      TranslatableComponent var6 = new TranslatableComponent("mco.selectServer.popup");
+      List var7 = this.font.split(var6, 100);
       if (!this.showingPopup) {
          this.carouselIndex = 0;
          this.carouselTick = 0;
          this.hasSwitchedCarouselImage = true;
          this.updateButtonStates((RealmsServer)null);
-         if (this.hasWidget(this.realmSelectionList)) {
-            this.removeWidget(this.realmSelectionList);
+         if (this.children.contains(this.realmSelectionList)) {
+            RealmsMainScreen.RealmSelectionList var8 = this.realmSelectionList;
+            if (!this.children.remove(var8)) {
+               LOGGER.error("Unable to remove widget: " + var8);
+            }
          }
 
-         Realms.narrateNow(var5);
+         NarrationHelper.now(var6.getString());
       }
 
       if (this.hasFetchedServers) {
          this.showingPopup = true;
       }
 
       RenderSystem.color4f(1.0F, 1.0F, 1.0F, 0.7F);
       RenderSystem.enableBlend();
-      RealmsScreen.bind("realms:textures/gui/realms/darken.png");
-      RenderSystem.pushMatrix();
-      boolean var7 = false;
-      boolean var8 = true;
-      RealmsScreen.blit(0, 32, 0.0F, 0.0F, this.width(), this.height() - 40 - 32, 310, 166);
-      RenderSystem.popMatrix();
+      this.minecraft.getTextureManager().bind(DARKEN_LOCATION);
+      boolean var14 = false;
+      boolean var9 = true;
+      GuiComponent.blit(var1, 0, 32, 0.0F, 0.0F, this.width, this.height - 40 - 32, 310, 166);
       RenderSystem.disableBlend();
       RenderSystem.color4f(1.0F, 1.0F, 1.0F, 1.0F);
-      RealmsScreen.bind("realms:textures/gui/realms/popup.png");
-      RenderSystem.pushMatrix();
-      RealmsScreen.blit(var3, var4, 0.0F, 0.0F, 310, 166, 310, 166);
-      RenderSystem.popMatrix();
+      this.minecraft.getTextureManager().bind(POPUP_LOCATION);
+      GuiComponent.blit(var1, var4, var5, 0.0F, 0.0F, 310, 166, 310, 166);
       if (!teaserImages.isEmpty()) {
-         RealmsScreen.bind(((ResourceLocation)teaserImages.get(this.carouselIndex)).toString());
+         this.minecraft.getTextureManager().bind((ResourceLocation)teaserImages.get(this.carouselIndex));
          RenderSystem.color4f(1.0F, 1.0F, 1.0F, 1.0F);
-         RenderSystem.pushMatrix();
-         RealmsScreen.blit(var3 + 7, var4 + 7, 0.0F, 0.0F, 195, 152, 195, 152);
-         RenderSystem.popMatrix();
+         GuiComponent.blit(var1, var4 + 7, var5 + 7, 0.0F, 0.0F, 195, 152, 195, 152);
          if (this.carouselTick % 95 < 5) {
             if (!this.hasSwitchedCarouselImage) {
                this.carouselIndex = (this.carouselIndex + 1) % teaserImages.size();
                this.hasSwitchedCarouselImage = true;
             }
          } else {
             this.hasSwitchedCarouselImage = false;
          }
       }
 
-      int var9 = 0;
-      Iterator var10 = var6.iterator();
+      int var10 = 0;
+      Iterator var11 = var7.iterator();
 
-      while(var10.hasNext()) {
-         String var11 = (String)var10.next();
-         int var10002 = this.width() / 2 + 52;
-         ++var9;
-         this.drawString(var11, var10002, var4 + 10 * var9 - 3, 8421504, false);
+      while(var11.hasNext()) {
+         FormattedText var12 = (FormattedText)var11.next();
+         ++var10;
+         int var13 = var5 + 10 * var10 - 3;
+         this.font.draw(var1, var12, (float)(this.width / 2 + 52), (float)var13, 5000268);
       }
 
    }
 
    private int popupX0() {
-      return (this.width() - 310) / 2;
+      return (this.width - 310) / 2;
    }
 
    private int popupY0() {
-      return this.height() / 2 - 80;
+      return this.height / 2 - 80;
    }
 
-   private void drawInvitationPendingIcon(int var1, int var2, int var3, int var4, boolean var5, boolean var6) {
-      int var7 = this.numberOfPendingInvites;
-      boolean var8 = this.inPendingInvitationArea((double)var1, (double)var2);
-      boolean var9 = var6 && var5;
-      if (var9) {
-         float var10 = 0.25F + (1.0F + RealmsMth.sin((float)this.animTick * 0.5F)) * 0.25F;
-         int var11 = -16777216 | (int)(var10 * 64.0F) << 16 | (int)(var10 * 64.0F) << 8 | (int)(var10 * 64.0F) << 0;
-         this.fillGradient(var3 - 2, var4 - 2, var3 + 18, var4 + 18, var11, var11);
-         var11 = -16777216 | (int)(var10 * 255.0F) << 16 | (int)(var10 * 255.0F) << 8 | (int)(var10 * 255.0F) << 0;
-         this.fillGradient(var3 - 2, var4 - 2, var3 + 18, var4 - 1, var11, var11);
-         this.fillGradient(var3 - 2, var4 - 2, var3 - 1, var4 + 18, var11, var11);
-         this.fillGradient(var3 + 17, var4 - 2, var3 + 18, var4 + 18, var11, var11);
-         this.fillGradient(var3 - 2, var4 + 17, var3 + 18, var4 + 18, var11, var11);
+   private void drawInvitationPendingIcon(PoseStack var1, int var2, int var3, int var4, int var5, boolean var6, boolean var7) {
+      int var8 = this.numberOfPendingInvites;
+      boolean var9 = this.inPendingInvitationArea((double)var2, (double)var3);
+      boolean var10 = var7 && var6;
+      if (var10) {
+         float var11 = 0.25F + (1.0F + Mth.sin((float)this.animTick * 0.5F)) * 0.25F;
+         int var12 = -16777216 | (int)(var11 * 64.0F) << 16 | (int)(var11 * 64.0F) << 8 | (int)(var11 * 64.0F) << 0;
+         this.fillGradient(var1, var4 - 2, var5 - 2, var4 + 18, var5 + 18, var12, var12);
+         var12 = -16777216 | (int)(var11 * 255.0F) << 16 | (int)(var11 * 255.0F) << 8 | (int)(var11 * 255.0F) << 0;
+         this.fillGradient(var1, var4 - 2, var5 - 2, var4 + 18, var5 - 1, var12, var12);
+         this.fillGradient(var1, var4 - 2, var5 - 2, var4 - 1, var5 + 18, var12, var12);
+         this.fillGradient(var1, var4 + 17, var5 - 2, var4 + 18, var5 + 18, var12, var12);
+         this.fillGradient(var1, var4 - 2, var5 + 17, var4 + 18, var5 + 18, var12, var12);
       }
 
-      RealmsScreen.bind("realms:textures/gui/realms/invite_icon.png");
+      this.minecraft.getTextureManager().bind(INVITE_ICON_LOCATION);
       RenderSystem.color4f(1.0F, 1.0F, 1.0F, 1.0F);
-      RenderSystem.pushMatrix();
-      boolean var17 = var6 && var5;
-      RealmsScreen.blit(var3, var4 - 6, var17 ? 16.0F : 0.0F, 0.0F, 15, 25, 31, 25);
-      RenderSystem.popMatrix();
-      boolean var18 = var6 && var7 != 0;
-      int var12;
-      if (var18) {
-         var12 = (Math.min(var7, 6) - 1) * 8;
-         int var13 = (int)(Math.max(0.0F, Math.max(RealmsMth.sin((float)(10 + this.animTick) * 0.57F), RealmsMth.cos((float)this.animTick * 0.35F))) * -6.0F);
-         RealmsScreen.bind("realms:textures/gui/realms/invitation_icons.png");
+      boolean var20 = var7 && var6;
+      float var21 = var20 ? 16.0F : 0.0F;
+      GuiComponent.blit(var1, var4, var5 - 6, var21, 0.0F, 15, 25, 31, 25);
+      boolean var13 = var7 && var8 != 0;
+      int var14;
+      if (var13) {
+         var14 = (Math.min(var8, 6) - 1) * 8;
+         int var15 = (int)(Math.max(0.0F, Math.max(Mth.sin((float)(10 + this.animTick) * 0.57F), Mth.cos((float)this.animTick * 0.35F))) * -6.0F);
+         this.minecraft.getTextureManager().bind(INVITATION_ICONS_LOCATION);
          RenderSystem.color4f(1.0F, 1.0F, 1.0F, 1.0F);
-         RenderSystem.pushMatrix();
-         RealmsScreen.blit(var3 + 4, var4 + 4 + var13, (float)var12, var8 ? 8.0F : 0.0F, 8, 8, 48, 16);
-         RenderSystem.popMatrix();
+         float var16 = var9 ? 8.0F : 0.0F;
+         GuiComponent.blit(var1, var4 + 4, var5 + 4 + var15, (float)var14, var16, 8, 8, 48, 16);
       }
 
-      var12 = var1 + 12;
-      boolean var14 = var6 && var8;
-      if (var14) {
-         String var15 = getLocalizedString(var7 == 0 ? "mco.invites.nopending" : "mco.invites.pending");
-         int var16 = this.fontWidth(var15);
-         this.fillGradient(var12 - 3, var2 - 3, var12 + var16 + 3, var2 + 8 + 3, -1073741824, -1073741824);
-         this.fontDrawShadow(var15, var12, var2, -1);
+      var14 = var2 + 12;
+      boolean var22 = var7 && var9;
+      if (var22) {
+         String var17 = var8 == 0 ? "mco.invites.nopending" : "mco.invites.pending";
+         String var18 = I18n.get(var17);
+         int var19 = this.font.width(var18);
+         this.fillGradient(var1, var14 - 3, var3 - 3, var14 + var19 + 3, var3 + 8 + 3, -1073741824, -1073741824);
+         this.font.drawShadow(var1, (String)var18, (float)var14, (float)var3, -1);
       }
 
    }
 
    private boolean inPendingInvitationArea(double var1, double var3) {
-      int var5 = this.width() / 2 + 50;
-      int var6 = this.width() / 2 + 66;
+      int var5 = this.width / 2 + 50;
+      int var6 = this.width / 2 + 66;
       int var7 = 11;
       int var8 = 23;
       if (this.numberOfPendingInvites != 0) {
          var5 -= 3;
          var6 += 3;
@@ -895,11 +888,11 @@
       }
 
       return (double)var5 <= var1 && var1 <= (double)var6 && (double)var7 <= var3 && var3 <= (double)var8;
    }
 
-   public void play(RealmsServer var1, RealmsScreen var2) {
+   public void play(RealmsServer var1, Screen var2) {
       if (var1 != null) {
          try {
             if (!this.connectLock.tryLock(1L, TimeUnit.SECONDS)) {
                return;
             }
@@ -910,225 +903,202 @@
          } catch (InterruptedException var4) {
             return;
          }
 
          this.dontSetConnectedToRealms = true;
-         this.connectToServer(var1, var2);
+         this.minecraft.setScreen(new RealmsLongRunningMcoTaskScreen(var2, new GetServerDetailsTask(this, var2, var1, this.connectLock)));
       }
 
    }
 
-   private void connectToServer(RealmsServer var1, RealmsScreen var2) {
-      RealmsLongRunningMcoTaskScreen var3 = new RealmsLongRunningMcoTaskScreen(var2, new RealmsTasks.RealmsGetServerDetailsTask(this, var2, var1, this.connectLock));
-      var3.start();
-      Realms.setScreen(var3);
-   }
-
    private boolean isSelfOwnedServer(RealmsServer var1) {
-      return var1.ownerUUID != null && var1.ownerUUID.equals(Realms.getUUID());
+      return var1.ownerUUID != null && var1.ownerUUID.equals(this.minecraft.getUser().getUuid());
    }
 
    private boolean isSelfOwnedNonExpiredServer(RealmsServer var1) {
-      return var1.ownerUUID != null && var1.ownerUUID.equals(Realms.getUUID()) && !var1.expired;
+      return this.isSelfOwnedServer(var1) && !var1.expired;
    }
 
-   private void drawExpired(int var1, int var2, int var3, int var4) {
-      RealmsScreen.bind("realms:textures/gui/realms/expired_icon.png");
+   private void drawExpired(PoseStack var1, int var2, int var3, int var4, int var5) {
+      this.minecraft.getTextureManager().bind(EXPIRED_ICON_LOCATION);
       RenderSystem.color4f(1.0F, 1.0F, 1.0F, 1.0F);
-      RenderSystem.pushMatrix();
-      RealmsScreen.blit(var1, var2, 0.0F, 0.0F, 10, 28, 10, 28);
-      RenderSystem.popMatrix();
-      if (var3 >= var1 && var3 <= var1 + 9 && var4 >= var2 && var4 <= var2 + 27 && var4 < this.height() - 40 && var4 > 32 && !this.shouldShowPopup()) {
-         this.toolTip = getLocalizedString("mco.selectServer.expired");
+      GuiComponent.blit(var1, var2, var3, 0.0F, 0.0F, 10, 28, 10, 28);
+      if (var4 >= var2 && var4 <= var2 + 9 && var5 >= var3 && var5 <= var3 + 27 && var5 < this.height - 40 && var5 > 32 && !this.shouldShowPopup()) {
+         this.setTooltip(new TranslatableComponent("mco.selectServer.expired"));
       }
 
    }
 
-   private void drawExpiring(int var1, int var2, int var3, int var4, int var5) {
-      RealmsScreen.bind("realms:textures/gui/realms/expires_soon_icon.png");
+   private void drawExpiring(PoseStack var1, int var2, int var3, int var4, int var5, int var6) {
+      this.minecraft.getTextureManager().bind(EXPIRES_SOON_ICON_LOCATION);
       RenderSystem.color4f(1.0F, 1.0F, 1.0F, 1.0F);
-      RenderSystem.pushMatrix();
       if (this.animTick % 20 < 10) {
-         RealmsScreen.blit(var1, var2, 0.0F, 0.0F, 10, 28, 20, 28);
+         GuiComponent.blit(var1, var2, var3, 0.0F, 0.0F, 10, 28, 20, 28);
       } else {
-         RealmsScreen.blit(var1, var2, 10.0F, 0.0F, 10, 28, 20, 28);
+         GuiComponent.blit(var1, var2, var3, 10.0F, 0.0F, 10, 28, 20, 28);
       }
 
-      RenderSystem.popMatrix();
-      if (var3 >= var1 && var3 <= var1 + 9 && var4 >= var2 && var4 <= var2 + 27 && var4 < this.height() - 40 && var4 > 32 && !this.shouldShowPopup()) {
-         if (var5 <= 0) {
-            this.toolTip = getLocalizedString("mco.selectServer.expires.soon");
-         } else if (var5 == 1) {
-            this.toolTip = getLocalizedString("mco.selectServer.expires.day");
+      if (var4 >= var2 && var4 <= var2 + 9 && var5 >= var3 && var5 <= var3 + 27 && var5 < this.height - 40 && var5 > 32 && !this.shouldShowPopup()) {
+         if (var6 <= 0) {
+            this.setTooltip(new TranslatableComponent("mco.selectServer.expires.soon"));
+         } else if (var6 == 1) {
+            this.setTooltip(new TranslatableComponent("mco.selectServer.expires.day"));
          } else {
-            this.toolTip = getLocalizedString("mco.selectServer.expires.days", new Object[]{var5});
+            this.setTooltip(new TranslatableComponent("mco.selectServer.expires.days", new Object[]{var6}));
          }
       }
 
    }
 
-   private void drawOpen(int var1, int var2, int var3, int var4) {
-      RealmsScreen.bind("realms:textures/gui/realms/on_icon.png");
+   private void drawOpen(PoseStack var1, int var2, int var3, int var4, int var5) {
+      this.minecraft.getTextureManager().bind(ON_ICON_LOCATION);
       RenderSystem.color4f(1.0F, 1.0F, 1.0F, 1.0F);
-      RenderSystem.pushMatrix();
-      RealmsScreen.blit(var1, var2, 0.0F, 0.0F, 10, 28, 10, 28);
-      RenderSystem.popMatrix();
-      if (var3 >= var1 && var3 <= var1 + 9 && var4 >= var2 && var4 <= var2 + 27 && var4 < this.height() - 40 && var4 > 32 && !this.shouldShowPopup()) {
-         this.toolTip = getLocalizedString("mco.selectServer.open");
+      GuiComponent.blit(var1, var2, var3, 0.0F, 0.0F, 10, 28, 10, 28);
+      if (var4 >= var2 && var4 <= var2 + 9 && var5 >= var3 && var5 <= var3 + 27 && var5 < this.height - 40 && var5 > 32 && !this.shouldShowPopup()) {
+         this.setTooltip(new TranslatableComponent("mco.selectServer.open"));
       }
 
    }
 
-   private void drawClose(int var1, int var2, int var3, int var4) {
-      RealmsScreen.bind("realms:textures/gui/realms/off_icon.png");
+   private void drawClose(PoseStack var1, int var2, int var3, int var4, int var5) {
+      this.minecraft.getTextureManager().bind(OFF_ICON_LOCATION);
       RenderSystem.color4f(1.0F, 1.0F, 1.0F, 1.0F);
-      RenderSystem.pushMatrix();
-      RealmsScreen.blit(var1, var2, 0.0F, 0.0F, 10, 28, 10, 28);
-      RenderSystem.popMatrix();
-      if (var3 >= var1 && var3 <= var1 + 9 && var4 >= var2 && var4 <= var2 + 27 && var4 < this.height() - 40 && var4 > 32 && !this.shouldShowPopup()) {
-         this.toolTip = getLocalizedString("mco.selectServer.closed");
+      GuiComponent.blit(var1, var2, var3, 0.0F, 0.0F, 10, 28, 10, 28);
+      if (var4 >= var2 && var4 <= var2 + 9 && var5 >= var3 && var5 <= var3 + 27 && var5 < this.height - 40 && var5 > 32 && !this.shouldShowPopup()) {
+         this.setTooltip(new TranslatableComponent("mco.selectServer.closed"));
       }
 
    }
 
-   private void drawLeave(int var1, int var2, int var3, int var4) {
-      boolean var5 = false;
-      if (var3 >= var1 && var3 <= var1 + 28 && var4 >= var2 && var4 <= var2 + 28 && var4 < this.height() - 40 && var4 > 32 && !this.shouldShowPopup()) {
-         var5 = true;
+   private void drawLeave(PoseStack var1, int var2, int var3, int var4, int var5) {
+      boolean var6 = false;
+      if (var4 >= var2 && var4 <= var2 + 28 && var5 >= var3 && var5 <= var3 + 28 && var5 < this.height - 40 && var5 > 32 && !this.shouldShowPopup()) {
+         var6 = true;
       }
 
-      RealmsScreen.bind("realms:textures/gui/realms/leave_icon.png");
+      this.minecraft.getTextureManager().bind(LEAVE_ICON_LOCATION);
       RenderSystem.color4f(1.0F, 1.0F, 1.0F, 1.0F);
-      RenderSystem.pushMatrix();
-      RealmsScreen.blit(var1, var2, var5 ? 28.0F : 0.0F, 0.0F, 28, 28, 56, 28);
-      RenderSystem.popMatrix();
-      if (var5) {
-         this.toolTip = getLocalizedString("mco.selectServer.leave");
+      float var7 = var6 ? 28.0F : 0.0F;
+      GuiComponent.blit(var1, var2, var3, var7, 0.0F, 28, 28, 56, 28);
+      if (var6) {
+         this.setTooltip(new TranslatableComponent("mco.selectServer.leave"));
+         this.hoveredElement = RealmsMainScreen.HoveredElement.LEAVE;
       }
 
    }
 
-   private void drawConfigure(int var1, int var2, int var3, int var4) {
-      boolean var5 = false;
-      if (var3 >= var1 && var3 <= var1 + 28 && var4 >= var2 && var4 <= var2 + 28 && var4 < this.height() - 40 && var4 > 32 && !this.shouldShowPopup()) {
-         var5 = true;
+   private void drawConfigure(PoseStack var1, int var2, int var3, int var4, int var5) {
+      boolean var6 = false;
+      if (var4 >= var2 && var4 <= var2 + 28 && var5 >= var3 && var5 <= var3 + 28 && var5 < this.height - 40 && var5 > 32 && !this.shouldShowPopup()) {
+         var6 = true;
       }
 
-      RealmsScreen.bind("realms:textures/gui/realms/configure_icon.png");
+      this.minecraft.getTextureManager().bind(CONFIGURE_LOCATION);
       RenderSystem.color4f(1.0F, 1.0F, 1.0F, 1.0F);
-      RenderSystem.pushMatrix();
-      RealmsScreen.blit(var1, var2, var5 ? 28.0F : 0.0F, 0.0F, 28, 28, 56, 28);
-      RenderSystem.popMatrix();
-      if (var5) {
-         this.toolTip = getLocalizedString("mco.selectServer.configure");
+      float var7 = var6 ? 28.0F : 0.0F;
+      GuiComponent.blit(var1, var2, var3, var7, 0.0F, 28, 28, 56, 28);
+      if (var6) {
+         this.setTooltip(new TranslatableComponent("mco.selectServer.configure"));
+         this.hoveredElement = RealmsMainScreen.HoveredElement.CONFIGURE;
       }
 
    }
 
-   protected void renderMousehoverTooltip(String var1, int var2, int var3) {
-      if (var1 != null) {
-         int var4 = 0;
+   protected void renderMousehoverTooltip(PoseStack var1, List<Component> var2, int var3, int var4) {
+      if (!var2.isEmpty()) {
          int var5 = 0;
-         String[] var6 = var1.split("\n");
-         int var7 = var6.length;
+         int var6 = 0;
+         Iterator var7 = var2.iterator();
 
-         int var10;
-         for(int var8 = 0; var8 < var7; ++var8) {
-            String var9 = var6[var8];
-            var10 = this.fontWidth(var9);
-            if (var10 > var5) {
-               var5 = var10;
+         while(var7.hasNext()) {
+            Component var8 = (Component)var7.next();
+            int var9 = this.font.width((FormattedText)var8);
+            if (var9 > var6) {
+               var6 = var9;
             }
          }
 
-         int var12 = var2 - var5 - 5;
-         var7 = var3;
+         int var12 = var3 - var6 - 5;
+         int var13 = var4;
          if (var12 < 0) {
-            var12 = var2 + 12;
+            var12 = var3 + 12;
          }
 
-         String[] var13 = var1.split("\n");
-         int var14 = var13.length;
-
-         for(var10 = 0; var10 < var14; ++var10) {
-            String var11 = var13[var10];
-            this.fillGradient(var12 - 3, var7 - (var4 == 0 ? 3 : 0) + var4, var12 + var5 + 3, var7 + 8 + 3 + var4, -1073741824, -1073741824);
-            this.fontDrawShadow(var11, var12, var7 + var4, 16777215);
-            var4 += 10;
+         for(Iterator var14 = var2.iterator(); var14.hasNext(); var5 += 10) {
+            Component var10 = (Component)var14.next();
+            int var11 = var13 - (var5 == 0 ? 3 : 0) + var5;
+            this.fillGradient(var1, var12 - 3, var11, var12 + var6 + 3, var13 + 8 + 3 + var5, -1073741824, -1073741824);
+            this.font.drawShadow(var1, (FormattedText)var10, (float)var12, (float)(var13 + var5), 16777215);
          }
 
       }
    }
 
-   private void renderMoreInfo(int var1, int var2, int var3, int var4, boolean var5) {
-      boolean var6 = false;
-      if (var1 >= var3 && var1 <= var3 + 20 && var2 >= var4 && var2 <= var4 + 20) {
-         var6 = true;
+   private void renderMoreInfo(PoseStack var1, int var2, int var3, int var4, int var5, boolean var6) {
+      boolean var7 = false;
+      if (var2 >= var4 && var2 <= var4 + 20 && var3 >= var5 && var3 <= var5 + 20) {
+         var7 = true;
       }
 
-      RealmsScreen.bind("realms:textures/gui/realms/questionmark.png");
+      this.minecraft.getTextureManager().bind(QUESTIONMARK_LOCATION);
       RenderSystem.color4f(1.0F, 1.0F, 1.0F, 1.0F);
-      RenderSystem.pushMatrix();
-      RealmsScreen.blit(var3, var4, var5 ? 20.0F : 0.0F, 0.0F, 20, 20, 40, 20);
-      RenderSystem.popMatrix();
-      if (var6) {
-         this.toolTip = getLocalizedString("mco.selectServer.info");
+      float var8 = var6 ? 20.0F : 0.0F;
+      GuiComponent.blit(var1, var4, var5, var8, 0.0F, 20, 20, 40, 20);
+      if (var7) {
+         this.setTooltip(new TranslatableComponent("mco.selectServer.info"));
       }
 
    }
 
-   private void renderNews(int var1, int var2, boolean var3, int var4, int var5, boolean var6, boolean var7) {
-      boolean var8 = false;
-      if (var1 >= var4 && var1 <= var4 + 20 && var2 >= var5 && var2 <= var5 + 20) {
-         var8 = true;
+   private void renderNews(PoseStack var1, int var2, int var3, boolean var4, int var5, int var6, boolean var7, boolean var8) {
+      boolean var9 = false;
+      if (var2 >= var5 && var2 <= var5 + 20 && var3 >= var6 && var3 <= var6 + 20) {
+         var9 = true;
       }
 
-      RealmsScreen.bind("realms:textures/gui/realms/news_icon.png");
-      if (var7) {
+      this.minecraft.getTextureManager().bind(NEWS_LOCATION);
+      if (var8) {
          RenderSystem.color4f(1.0F, 1.0F, 1.0F, 1.0F);
       } else {
          RenderSystem.color4f(0.5F, 0.5F, 0.5F, 1.0F);
       }
 
-      RenderSystem.pushMatrix();
-      boolean var9 = var7 && var6;
-      RealmsScreen.blit(var4, var5, var9 ? 20.0F : 0.0F, 0.0F, 20, 20, 40, 20);
-      RenderSystem.popMatrix();
-      if (var8 && var7) {
-         this.toolTip = getLocalizedString("mco.news");
+      boolean var10 = var8 && var7;
+      float var11 = var10 ? 20.0F : 0.0F;
+      GuiComponent.blit(var1, var5, var6, var11, 0.0F, 20, 20, 40, 20);
+      if (var9 && var8) {
+         this.setTooltip(new TranslatableComponent("mco.news"));
       }
 
-      if (var3 && var7) {
-         int var10 = var8 ? 0 : (int)(Math.max(0.0F, Math.max(RealmsMth.sin((float)(10 + this.animTick) * 0.57F), RealmsMth.cos((float)this.animTick * 0.35F))) * -6.0F);
-         RealmsScreen.bind("realms:textures/gui/realms/invitation_icons.png");
+      if (var4 && var8) {
+         int var12 = var9 ? 0 : (int)(Math.max(0.0F, Math.max(Mth.sin((float)(10 + this.animTick) * 0.57F), Mth.cos((float)this.animTick * 0.35F))) * -6.0F);
+         this.minecraft.getTextureManager().bind(INVITATION_ICONS_LOCATION);
          RenderSystem.color4f(1.0F, 1.0F, 1.0F, 1.0F);
-         RenderSystem.pushMatrix();
-         RealmsScreen.blit(var4 + 10, var5 + 2 + var10, 40.0F, 0.0F, 8, 8, 48, 16);
-         RenderSystem.popMatrix();
+         GuiComponent.blit(var1, var5 + 10, var6 + 2 + var12, 40.0F, 0.0F, 8, 8, 48, 16);
       }
 
    }
 
-   private void renderLocal() {
-      String var1 = "LOCAL!";
+   private void renderLocal(PoseStack var1) {
+      String var2 = "LOCAL!";
       RenderSystem.color4f(1.0F, 1.0F, 1.0F, 1.0F);
       RenderSystem.pushMatrix();
-      RenderSystem.translatef((float)(this.width() / 2 - 25), 20.0F, 0.0F);
+      RenderSystem.translatef((float)(this.width / 2 - 25), 20.0F, 0.0F);
       RenderSystem.rotatef(-20.0F, 0.0F, 0.0F, 1.0F);
       RenderSystem.scalef(1.5F, 1.5F, 1.5F);
-      this.drawString("LOCAL!", 0, 0, 8388479);
+      this.font.draw(var1, "LOCAL!", 0.0F, 0.0F, 8388479);
       RenderSystem.popMatrix();
    }
 
-   private void renderStage() {
-      String var1 = "STAGE!";
+   private void renderStage(PoseStack var1) {
+      String var2 = "STAGE!";
       RenderSystem.color4f(1.0F, 1.0F, 1.0F, 1.0F);
       RenderSystem.pushMatrix();
-      RenderSystem.translatef((float)(this.width() / 2 - 25), 20.0F, 0.0F);
+      RenderSystem.translatef((float)(this.width / 2 - 25), 20.0F, 0.0F);
       RenderSystem.rotatef(-20.0F, 0.0F, 0.0F, 1.0F);
       RenderSystem.scalef(1.5F, 1.5F, 1.5F);
-      this.drawString("STAGE!", 0, 0, -256);
+      this.font.draw(var1, (String)"STAGE!", 0.0F, 0.0F, -256);
       RenderSystem.popMatrix();
    }
 
    public RealmsMainScreen newScreen() {
       return new RealmsMainScreen(this.lastScreen);
@@ -1141,306 +1111,282 @@
       teaserImages = (List)var1.stream().filter((var0x) -> {
          return var0x.getNamespace().equals("realms");
       }).collect(ImmutableList.toImmutableList());
    }
 
-   class CloseButton extends RealmsButton {
-      public CloseButton() {
-         super(11, RealmsMainScreen.this.popupX0() + 4, RealmsMainScreen.this.popupY0() + 4, 12, 12, RealmsScreen.getLocalizedString("mco.selectServer.close"));
-      }
+   private void setTooltip(Component... var1) {
+      this.toolTip = Arrays.asList(var1);
+   }
 
-      public void tick() {
-         super.tick();
-      }
+   private void pendingButtonPress(Button var1) {
+      this.minecraft.setScreen(new RealmsPendingInvitesScreen(this.lastScreen));
+   }
 
-      public void render(int var1, int var2, float var3) {
-         super.render(var1, var2, var3);
+   class CloseButton extends Button {
+      public CloseButton() {
+         super(RealmsMainScreen.this.popupX0() + 4, RealmsMainScreen.this.popupY0() + 4, 12, 12, new TranslatableComponent("mco.selectServer.close"), (var1x) -> {
+            RealmsMainScreen.this.onClosePopup();
+         });
       }
 
-      public void renderButton(int var1, int var2, float var3) {
-         RealmsScreen.bind("realms:textures/gui/realms/cross_icon.png");
+      public void renderButton(PoseStack var1, int var2, int var3, float var4) {
+         RealmsMainScreen.this.minecraft.getTextureManager().bind(RealmsMainScreen.CROSS_ICON_LOCATION);
          RenderSystem.color4f(1.0F, 1.0F, 1.0F, 1.0F);
-         RenderSystem.pushMatrix();
-         RealmsScreen.blit(this.x(), this.y(), 0.0F, this.getProxy().isHovered() ? 12.0F : 0.0F, 12, 12, 12, 24);
-         RenderSystem.popMatrix();
-         if (this.getProxy().isMouseOver((double)var1, (double)var2)) {
-            RealmsMainScreen.this.toolTip = this.getProxy().getMessage();
+         float var5 = this.isHovered() ? 12.0F : 0.0F;
+         blit(var1, this.x, this.y, 0.0F, var5, 12, 12, 12, 24);
+         if (this.isMouseOver((double)var2, (double)var3)) {
+            RealmsMainScreen.this.setTooltip(this.getMessage());
          }
 
       }
-
-      public void onPress() {
-         RealmsMainScreen.this.onClosePopup();
-      }
    }
 
-   class ShowPopupButton extends RealmsButton {
+   class ShowPopupButton extends Button {
       public ShowPopupButton() {
-         super(10, RealmsMainScreen.this.width() - 37, 6, 20, 20, RealmsScreen.getLocalizedString("mco.selectServer.info"));
+         super(RealmsMainScreen.this.width - 37, 6, 20, 20, new TranslatableComponent("mco.selectServer.info"), (var1x) -> {
+            RealmsMainScreen.this.popupOpenedByUser = !RealmsMainScreen.this.popupOpenedByUser;
+         });
       }
 
-      public void tick() {
-         super.tick();
+      public void renderButton(PoseStack var1, int var2, int var3, float var4) {
+         RealmsMainScreen.this.renderMoreInfo(var1, var2, var3, this.x, this.y, this.isHovered());
       }
-
-      public void render(int var1, int var2, float var3) {
-         super.render(var1, var2, var3);
-      }
-
-      public void renderButton(int var1, int var2, float var3) {
-         RealmsMainScreen.this.renderMoreInfo(var1, var2, this.x(), this.y(), this.getProxy().isHovered());
-      }
-
-      public void onPress() {
-         RealmsMainScreen.this.popupOpenedByUser = !RealmsMainScreen.this.popupOpenedByUser;
-      }
    }
 
-   class NewsButton extends RealmsButton {
+   class NewsButton extends Button {
       public NewsButton() {
-         super(9, RealmsMainScreen.this.width() - 62, 6, 20, 20, "");
-      }
+         super(RealmsMainScreen.this.width - 62, 6, 20, 20, TextComponent.EMPTY, (var1x) -> {
+            if (RealmsMainScreen.this.newsLink != null) {
+               Util.getPlatform().openUri(RealmsMainScreen.this.newsLink);
+               if (RealmsMainScreen.this.hasUnreadNews) {
+                  RealmsPersistence.RealmsPersistenceData var2 = RealmsPersistence.readFile();
+                  var2.hasUnreadNews = false;
+                  RealmsMainScreen.this.hasUnreadNews = false;
+                  RealmsPersistence.writeFile(var2);
+               }
 
-      public void tick() {
-         this.setMessage(Realms.getLocalizedString("mco.news"));
-      }
-
-      public void render(int var1, int var2, float var3) {
-         super.render(var1, var2, var3);
-      }
-
-      public void onPress() {
-         if (RealmsMainScreen.this.newsLink != null) {
-            RealmsUtil.browseTo(RealmsMainScreen.this.newsLink);
-            if (RealmsMainScreen.this.hasUnreadNews) {
-               RealmsPersistence.RealmsPersistenceData var1 = RealmsPersistence.readFile();
-               var1.hasUnreadNews = false;
-               RealmsMainScreen.this.hasUnreadNews = false;
-               RealmsPersistence.writeFile(var1);
             }
-
-         }
+         });
+         this.setMessage(new TranslatableComponent("mco.news"));
       }
 
-      public void renderButton(int var1, int var2, float var3) {
-         RealmsMainScreen.this.renderNews(var1, var2, RealmsMainScreen.this.hasUnreadNews, this.x(), this.y(), this.getProxy().isHovered(), this.active());
+      public void renderButton(PoseStack var1, int var2, int var3, float var4) {
+         RealmsMainScreen.this.renderNews(var1, var2, var3, RealmsMainScreen.this.hasUnreadNews, this.x, this.y, this.isHovered(), this.active);
       }
    }
 
-   class PendingInvitesButton extends RealmsButton {
+   class PendingInvitesButton extends Button implements TickableWidget {
       public PendingInvitesButton() {
-         super(8, RealmsMainScreen.this.width() / 2 + 47, 6, 22, 22, "");
+         super(RealmsMainScreen.this.width / 2 + 47, 6, 22, 22, TextComponent.EMPTY, (var1x) -> {
+            RealmsMainScreen.this.pendingButtonPress(var1x);
+         });
       }
 
       public void tick() {
-         this.setMessage(Realms.getLocalizedString(RealmsMainScreen.this.numberOfPendingInvites == 0 ? "mco.invites.nopending" : "mco.invites.pending"));
+         this.setMessage(new TranslatableComponent(RealmsMainScreen.this.numberOfPendingInvites == 0 ? "mco.invites.nopending" : "mco.invites.pending"));
       }
 
-      public void render(int var1, int var2, float var3) {
-         super.render(var1, var2, var3);
+      public void renderButton(PoseStack var1, int var2, int var3, float var4) {
+         RealmsMainScreen.this.drawInvitationPendingIcon(var1, var2, var3, this.x, this.y, this.isHovered(), this.active);
       }
-
-      public void onPress() {
-         RealmsPendingInvitesScreen var1 = new RealmsPendingInvitesScreen(RealmsMainScreen.this.lastScreen);
-         Realms.setScreen(var1);
-      }
-
-      public void renderButton(int var1, int var2, float var3) {
-         RealmsMainScreen.this.drawInvitationPendingIcon(var1, var2, this.x(), this.y(), this.getProxy().isHovered(), this.active());
-      }
    }
 
-   class RealmSelectionListEntry extends RealmListEntry {
-      final RealmsServer mServerData;
+   class ServerEntry extends RealmsMainScreen.Entry {
+      private final RealmsServer serverData;
 
-      public RealmSelectionListEntry(RealmsServer var2) {
-         this.mServerData = var2;
+      public ServerEntry(RealmsServer var2) {
+         super(null);
+         this.serverData = var2;
       }
 
-      public void render(int var1, int var2, int var3, int var4, int var5, int var6, int var7, boolean var8, float var9) {
-         this.renderMcoServerItem(this.mServerData, var3, var2, var6, var7);
+      public void render(PoseStack var1, int var2, int var3, int var4, int var5, int var6, int var7, int var8, boolean var9, float var10) {
+         this.renderMcoServerItem(this.serverData, var1, var4, var3, var7, var8);
       }
 
       public boolean mouseClicked(double var1, double var3, int var5) {
-         if (this.mServerData.state == RealmsServer.State.UNINITIALIZED) {
+         if (this.serverData.state == RealmsServer.State.UNINITIALIZED) {
             RealmsMainScreen.this.selectedServerId = -1L;
-            Realms.setScreen(new RealmsCreateRealmScreen(this.mServerData, RealmsMainScreen.this));
+            RealmsMainScreen.this.minecraft.setScreen(new RealmsCreateRealmScreen(this.serverData, RealmsMainScreen.this));
          } else {
-            RealmsMainScreen.this.selectedServerId = this.mServerData.id;
+            RealmsMainScreen.this.selectedServerId = this.serverData.id;
          }
 
          return true;
       }
 
-      private void renderMcoServerItem(RealmsServer var1, int var2, int var3, int var4, int var5) {
-         this.renderLegacy(var1, var2 + 36, var3, var4, var5);
+      private void renderMcoServerItem(RealmsServer var1, PoseStack var2, int var3, int var4, int var5, int var6) {
+         this.renderLegacy(var1, var2, var3 + 36, var4, var5, var6);
       }
 
-      private void renderLegacy(RealmsServer var1, int var2, int var3, int var4, int var5) {
+      private void renderLegacy(RealmsServer var1, PoseStack var2, int var3, int var4, int var5, int var6) {
          if (var1.state == RealmsServer.State.UNINITIALIZED) {
-            RealmsScreen.bind("realms:textures/gui/realms/world_icon.png");
+            RealmsMainScreen.this.minecraft.getTextureManager().bind(RealmsMainScreen.WORLDICON_LOCATION);
             RenderSystem.color4f(1.0F, 1.0F, 1.0F, 1.0F);
             RenderSystem.enableAlphaTest();
-            RenderSystem.pushMatrix();
-            RealmsScreen.blit(var2 + 10, var3 + 6, 0.0F, 0.0F, 40, 20, 40, 20);
-            RenderSystem.popMatrix();
-            float var18 = 0.5F + (1.0F + RealmsMth.sin((float)RealmsMainScreen.this.animTick * 0.25F)) * 0.25F;
-            int var19 = -16777216 | (int)(127.0F * var18) << 16 | (int)(255.0F * var18) << 8 | (int)(127.0F * var18);
-            RealmsMainScreen.this.drawCenteredString(RealmsScreen.getLocalizedString("mco.selectServer.uninitialized"), var2 + 10 + 40 + 75, var3 + 12, var19);
+            GuiComponent.blit(var2, var3 + 10, var4 + 6, 0.0F, 0.0F, 40, 20, 40, 20);
+            float var19 = 0.5F + (1.0F + Mth.sin((float)RealmsMainScreen.this.animTick * 0.25F)) * 0.25F;
+            int var20 = -16777216 | (int)(127.0F * var19) << 16 | (int)(255.0F * var19) << 8 | (int)(127.0F * var19);
+            RealmsMainScreen.this.drawCenteredString(var2, RealmsMainScreen.this.font, I18n.get("mco.selectServer.uninitialized"), var3 + 10 + 40 + 75, var4 + 12, var20);
          } else {
-            boolean var6 = true;
             boolean var7 = true;
+            boolean var8 = true;
             if (var1.expired) {
-               RealmsMainScreen.this.drawExpired(var2 + 225 - 14, var3 + 2, var4, var5);
+               RealmsMainScreen.this.drawExpired(var2, var3 + 225 - 14, var4 + 2, var5, var6);
             } else if (var1.state == RealmsServer.State.CLOSED) {
-               RealmsMainScreen.this.drawClose(var2 + 225 - 14, var3 + 2, var4, var5);
+               RealmsMainScreen.this.drawClose(var2, var3 + 225 - 14, var4 + 2, var5, var6);
             } else if (RealmsMainScreen.this.isSelfOwnedServer(var1) && var1.daysLeft < 7) {
-               RealmsMainScreen.this.drawExpiring(var2 + 225 - 14, var3 + 2, var4, var5, var1.daysLeft);
+               RealmsMainScreen.this.drawExpiring(var2, var3 + 225 - 14, var4 + 2, var5, var6, var1.daysLeft);
             } else if (var1.state == RealmsServer.State.OPEN) {
-               RealmsMainScreen.this.drawOpen(var2 + 225 - 14, var3 + 2, var4, var5);
+               RealmsMainScreen.this.drawOpen(var2, var3 + 225 - 14, var4 + 2, var5, var6);
             }
 
             if (!RealmsMainScreen.this.isSelfOwnedServer(var1) && !RealmsMainScreen.overrideConfigure) {
-               RealmsMainScreen.this.drawLeave(var2 + 225, var3 + 2, var4, var5);
+               RealmsMainScreen.this.drawLeave(var2, var3 + 225, var4 + 2, var5, var6);
             } else {
-               RealmsMainScreen.this.drawConfigure(var2 + 225, var3 + 2, var4, var5);
+               RealmsMainScreen.this.drawConfigure(var2, var3 + 225, var4 + 2, var5, var6);
             }
 
+            String var9;
             if (!"0".equals(var1.serverPing.nrOfPlayers)) {
-               String var8 = ChatFormatting.GRAY + "" + var1.serverPing.nrOfPlayers;
-               RealmsMainScreen.this.drawString(var8, var2 + 207 - RealmsMainScreen.this.fontWidth(var8), var3 + 3, 8421504);
-               if (var4 >= var2 + 207 - RealmsMainScreen.this.fontWidth(var8) && var4 <= var2 + 207 && var5 >= var3 + 1 && var5 <= var3 + 10 && var5 < RealmsMainScreen.this.height() - 40 && var5 > 32 && !RealmsMainScreen.this.shouldShowPopup()) {
-                  RealmsMainScreen.this.toolTip = var1.serverPing.playerList;
+               var9 = ChatFormatting.GRAY + "" + var1.serverPing.nrOfPlayers;
+               RealmsMainScreen.this.font.draw(var2, var9, (float)(var3 + 207 - RealmsMainScreen.this.font.width(var9)), (float)(var4 + 3), 8421504);
+               if (var5 >= var3 + 207 - RealmsMainScreen.this.font.width(var9) && var5 <= var3 + 207 && var6 >= var4 + 1 && var6 <= var4 + 10 && var6 < RealmsMainScreen.this.height - 40 && var6 > 32 && !RealmsMainScreen.this.shouldShowPopup()) {
+                  RealmsMainScreen.this.setTooltip(new TextComponent(var1.serverPing.playerList));
                }
             }
 
-            String var9;
+            String var10;
+            int var11;
             if (RealmsMainScreen.this.isSelfOwnedServer(var1) && var1.expired) {
-               boolean var21 = false;
                RenderSystem.color4f(1.0F, 1.0F, 1.0F, 1.0F);
                RenderSystem.enableBlend();
-               RealmsScreen.bind("minecraft:textures/gui/widgets.png");
-               RenderSystem.pushMatrix();
+               RealmsMainScreen.this.minecraft.getTextureManager().bind(RealmsMainScreen.BUTTON_LOCATION);
                RenderSystem.blendFunc(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA);
-               var9 = RealmsScreen.getLocalizedString("mco.selectServer.expiredList");
-               String var22 = RealmsScreen.getLocalizedString("mco.selectServer.expiredRenew");
+               var9 = I18n.get("mco.selectServer.expiredList");
+               var10 = I18n.get("mco.selectServer.expiredRenew");
                if (var1.expiredTrial) {
-                  var9 = RealmsScreen.getLocalizedString("mco.selectServer.expiredTrial");
-                  var22 = RealmsScreen.getLocalizedString("mco.selectServer.expiredSubscribe");
+                  var9 = I18n.get("mco.selectServer.expiredTrial");
+                  var10 = I18n.get("mco.selectServer.expiredSubscribe");
                }
 
-               int var11 = RealmsMainScreen.this.fontWidth(var22) + 17;
+               var11 = RealmsMainScreen.this.font.width(var10) + 17;
                boolean var12 = true;
-               int var13 = var2 + RealmsMainScreen.this.fontWidth(var9) + 8;
-               int var14 = var3 + 13;
-               if (var4 >= var13 && var4 < var13 + var11 && var5 > var14 && var5 <= var14 + 16 & var5 < RealmsMainScreen.this.height() - 40 && var5 > 32 && !RealmsMainScreen.this.shouldShowPopup()) {
-                  var21 = true;
-                  RealmsMainScreen.this.expiredHover = true;
+               int var13 = var3 + RealmsMainScreen.this.font.width(var9) + 8;
+               int var14 = var4 + 13;
+               boolean var15 = false;
+               if (var5 >= var13 && var5 < var13 + var11 && var6 > var14 && var6 <= var14 + 16 & var6 < RealmsMainScreen.this.height - 40 && var6 > 32 && !RealmsMainScreen.this.shouldShowPopup()) {
+                  var15 = true;
+                  RealmsMainScreen.this.hoveredElement = RealmsMainScreen.HoveredElement.EXPIRED;
                }
 
-               int var15 = var21 ? 2 : 1;
-               RealmsScreen.blit(var13, var14, 0.0F, (float)(46 + var15 * 20), var11 / 2, 8, 256, 256);
-               RealmsScreen.blit(var13 + var11 / 2, var14, (float)(200 - var11 / 2), (float)(46 + var15 * 20), var11 / 2, 8, 256, 256);
-               RealmsScreen.blit(var13, var14 + 8, 0.0F, (float)(46 + var15 * 20 + 12), var11 / 2, 8, 256, 256);
-               RealmsScreen.blit(var13 + var11 / 2, var14 + 8, (float)(200 - var11 / 2), (float)(46 + var15 * 20 + 12), var11 / 2, 8, 256, 256);
-               RenderSystem.popMatrix();
+               int var16 = var15 ? 2 : 1;
+               GuiComponent.blit(var2, var13, var14, 0.0F, (float)(46 + var16 * 20), var11 / 2, 8, 256, 256);
+               GuiComponent.blit(var2, var13 + var11 / 2, var14, (float)(200 - var11 / 2), (float)(46 + var16 * 20), var11 / 2, 8, 256, 256);
+               GuiComponent.blit(var2, var13, var14 + 8, 0.0F, (float)(46 + var16 * 20 + 12), var11 / 2, 8, 256, 256);
+               GuiComponent.blit(var2, var13 + var11 / 2, var14 + 8, (float)(200 - var11 / 2), (float)(46 + var16 * 20 + 12), var11 / 2, 8, 256, 256);
                RenderSystem.disableBlend();
-               int var16 = var3 + 11 + 5;
-               int var17 = var21 ? 16777120 : 16777215;
-               RealmsMainScreen.this.drawString(var9, var2 + 2, var16 + 1, 15553363);
-               RealmsMainScreen.this.drawCenteredString(var22, var13 + var11 / 2, var16 + 1, var17);
+               int var17 = var4 + 11 + 5;
+               int var18 = var15 ? 16777120 : 16777215;
+               RealmsMainScreen.this.font.draw(var2, var9, (float)(var3 + 2), (float)(var17 + 1), 15553363);
+               RealmsMainScreen.this.drawCenteredString(var2, RealmsMainScreen.this.font, var10, var13 + var11 / 2, var17 + 1, var18);
             } else {
-               if (var1.worldType.equals(RealmsServer.WorldType.MINIGAME)) {
-                  int var20 = 13413468;
-                  var9 = RealmsScreen.getLocalizedString("mco.selectServer.minigame") + " ";
-                  int var10 = RealmsMainScreen.this.fontWidth(var9);
-                  RealmsMainScreen.this.drawString(var9, var2 + 2, var3 + 12, 13413468);
-                  RealmsMainScreen.this.drawString(var1.getMinigameName(), var2 + 2 + var10, var3 + 12, 8421504);
+               if (var1.worldType == RealmsServer.WorldType.MINIGAME) {
+                  int var21 = 13413468;
+                  var10 = I18n.get("mco.selectServer.minigame") + " ";
+                  var11 = RealmsMainScreen.this.font.width(var10);
+                  RealmsMainScreen.this.font.draw(var2, var10, (float)(var3 + 2), (float)(var4 + 12), 13413468);
+                  RealmsMainScreen.this.font.draw(var2, var1.getMinigameName(), (float)(var3 + 2 + var11), (float)(var4 + 12), 7105644);
                } else {
-                  RealmsMainScreen.this.drawString(var1.getDescription(), var2 + 2, var3 + 12, 8421504);
+                  RealmsMainScreen.this.font.draw(var2, var1.getDescription(), (float)(var3 + 2), (float)(var4 + 12), 7105644);
                }
 
                if (!RealmsMainScreen.this.isSelfOwnedServer(var1)) {
-                  RealmsMainScreen.this.drawString(var1.owner, var2 + 2, var3 + 12 + 11, 8421504);
+                  RealmsMainScreen.this.font.draw(var2, var1.owner, (float)(var3 + 2), (float)(var4 + 12 + 11), 5000268);
                }
             }
 
-            RealmsMainScreen.this.drawString(var1.getName(), var2 + 2, var3 + 1, 16777215);
+            RealmsMainScreen.this.font.draw(var2, var1.getName(), (float)(var3 + 2), (float)(var4 + 1), 16777215);
             RealmsTextureManager.withBoundFace(var1.ownerUUID, () -> {
                RenderSystem.color4f(1.0F, 1.0F, 1.0F, 1.0F);
-               RealmsScreen.blit(var2 - 36, var3, 8.0F, 8.0F, 8, 8, 32, 32, 64, 64);
-               RealmsScreen.blit(var2 - 36, var3, 40.0F, 8.0F, 8, 8, 32, 32, 64, 64);
+               GuiComponent.blit(var2, var3 - 36, var4, 32, 32, 8.0F, 8.0F, 8, 8, 64, 64);
+               GuiComponent.blit(var2, var3 - 36, var4, 32, 32, 40.0F, 8.0F, 8, 8, 64, 64);
             });
          }
       }
    }
 
-   class RealmSelectionListTrialEntry extends RealmListEntry {
-      public RealmSelectionListTrialEntry() {
+   class TrialEntry extends RealmsMainScreen.Entry {
+      private TrialEntry() {
+         super(null);
       }
 
-      public void render(int var1, int var2, int var3, int var4, int var5, int var6, int var7, boolean var8, float var9) {
-         this.renderTrialItem(var1, var3, var2, var6, var7);
+      public void render(PoseStack var1, int var2, int var3, int var4, int var5, int var6, int var7, int var8, boolean var9, float var10) {
+         this.renderTrialItem(var1, var2, var4, var3, var7, var8);
       }
 
       public boolean mouseClicked(double var1, double var3, int var5) {
          RealmsMainScreen.this.popupOpenedByUser = true;
          return true;
       }
 
-      private void renderTrialItem(int var1, int var2, int var3, int var4, int var5) {
-         int var6 = var3 + 8;
-         int var7 = 0;
-         String var8 = RealmsScreen.getLocalizedString("mco.trial.message.line1") + "\\n" + RealmsScreen.getLocalizedString("mco.trial.message.line2");
-         boolean var9 = false;
-         if (var2 <= var4 && var4 <= RealmsMainScreen.this.realmSelectionList.getScroll() && var3 <= var5 && var5 <= var3 + 32) {
-            var9 = true;
+      private void renderTrialItem(PoseStack var1, int var2, int var3, int var4, int var5, int var6) {
+         int var7 = var4 + 8;
+         int var8 = 0;
+         String var9 = I18n.get("mco.trial.message.line1") + "\\n" + I18n.get("mco.trial.message.line2");
+         boolean var10 = false;
+         if (var3 <= var5 && var5 <= (int)RealmsMainScreen.this.realmSelectionList.getScrollAmount() && var4 <= var6 && var6 <= var4 + 32) {
+            var10 = true;
          }
 
-         int var10 = 8388479;
-         if (var9 && !RealmsMainScreen.this.shouldShowPopup()) {
-            var10 = 6077788;
+         int var11 = 8388479;
+         if (var10 && !RealmsMainScreen.this.shouldShowPopup()) {
+            var11 = 6077788;
          }
 
-         String[] var11 = var8.split("\\\\n");
-         int var12 = var11.length;
+         String[] var12 = var9.split("\\\\n");
+         int var13 = var12.length;
 
-         for(int var13 = 0; var13 < var12; ++var13) {
-            String var14 = var11[var13];
-            RealmsMainScreen.this.drawCenteredString(var14, RealmsMainScreen.this.width() / 2, var6 + var7, var10);
-            var7 += 10;
+         for(int var14 = 0; var14 < var13; ++var14) {
+            String var15 = var12[var14];
+            RealmsMainScreen.this.drawCenteredString(var1, RealmsMainScreen.this.font, var15, RealmsMainScreen.this.width / 2, var7 + var8, var11);
+            var8 += 10;
          }
 
       }
    }
 
-   class RealmSelectionList extends RealmsObjectSelectionList<RealmListEntry> {
+   abstract class Entry extends ObjectSelectionList.Entry<RealmsMainScreen.Entry> {
+      private Entry() {
+      }
+   }
+
+   class RealmSelectionList extends RealmsObjectSelectionList<RealmsMainScreen.Entry> {
       public RealmSelectionList() {
-         super(RealmsMainScreen.this.width(), RealmsMainScreen.this.height(), 32, RealmsMainScreen.this.height() - 40, 36);
+         super(RealmsMainScreen.this.width, RealmsMainScreen.this.height, 32, RealmsMainScreen.this.height - 40, 36);
       }
 
       public boolean isFocused() {
-         return RealmsMainScreen.this.isFocused(this);
+         return RealmsMainScreen.this.getFocused() == this;
       }
 
       public boolean keyPressed(int var1, int var2, int var3) {
          if (var1 != 257 && var1 != 32 && var1 != 335) {
-            return false;
+            return super.keyPressed(var1, var2, var3);
          } else {
-            RealmListEntry var4 = this.getSelected();
+            ObjectSelectionList.Entry var4 = (ObjectSelectionList.Entry)this.getSelected();
             return var4 == null ? super.keyPressed(var1, var2, var3) : var4.mouseClicked(0.0D, 0.0D, 0);
          }
       }
 
       public boolean mouseClicked(double var1, double var3, int var5) {
-         if (var5 == 0 && var1 < (double)this.getScrollbarPosition() && var3 >= (double)this.y0() && var3 <= (double)this.y1()) {
+         if (var5 == 0 && var1 < (double)this.getScrollbarPosition() && var3 >= (double)this.y0 && var3 <= (double)this.y1) {
             int var6 = RealmsMainScreen.this.realmSelectionList.getRowLeft();
             int var7 = this.getScrollbarPosition();
-            int var8 = (int)Math.floor(var3 - (double)this.y0()) - this.headerHeight() + this.getScroll() - 4;
-            int var9 = var8 / this.itemHeight();
+            int var8 = (int)Math.floor(var3 - (double)this.y0) - this.headerHeight + (int)this.getScrollAmount() - 4;
+            int var9 = var8 / this.itemHeight;
             if (var1 >= (double)var6 && var1 <= (double)var7 && var9 >= 0 && var8 >= 0 && var9 < this.getItemCount()) {
-               this.itemClicked(var8, var9, var1, var3, this.width());
+               this.itemClicked(var8, var9, var1, var3, this.width);
                RealmsMainScreen.this.clicks = RealmsMainScreen.this.clicks + 7;
                this.selectItem(var9);
             }
 
             return true;
@@ -1448,16 +1394,16 @@
             return super.mouseClicked(var1, var3, var5);
          }
       }
 
       public void selectItem(int var1) {
-         this.setSelected(var1);
+         this.setSelectedItem(var1);
          if (var1 != -1) {
             RealmsServer var2;
             if (RealmsMainScreen.this.shouldShowMessageInList()) {
                if (var1 == 0) {
-                  Realms.narrateNow(RealmsScreen.getLocalizedString("mco.trial.message.line1"), RealmsScreen.getLocalizedString("mco.trial.message.line2"));
+                  NarrationHelper.now(I18n.get("mco.trial.message.line1"), I18n.get("mco.trial.message.line2"));
                   var2 = null;
                } else {
                   if (var1 - 1 >= RealmsMainScreen.this.realmsServers.size()) {
                      RealmsMainScreen.this.selectedServerId = -1L;
                      return;
@@ -1476,23 +1422,30 @@
 
             RealmsMainScreen.this.updateButtonStates(var2);
             if (var2 == null) {
                RealmsMainScreen.this.selectedServerId = -1L;
             } else if (var2.state == RealmsServer.State.UNINITIALIZED) {
-               Realms.narrateNow(RealmsScreen.getLocalizedString("mco.selectServer.uninitialized") + RealmsScreen.getLocalizedString("mco.gui.button"));
+               NarrationHelper.now(I18n.get("mco.selectServer.uninitialized") + I18n.get("mco.gui.button"));
                RealmsMainScreen.this.selectedServerId = -1L;
             } else {
                RealmsMainScreen.this.selectedServerId = var2.id;
-               if (RealmsMainScreen.this.clicks >= 10 && RealmsMainScreen.this.playButton.active()) {
+               if (RealmsMainScreen.this.clicks >= 10 && RealmsMainScreen.this.playButton.active) {
                   RealmsMainScreen.this.play(RealmsMainScreen.this.findServer(RealmsMainScreen.this.selectedServerId), RealmsMainScreen.this);
                }
 
-               Realms.narrateNow(RealmsScreen.getLocalizedString("narrator.select", var2.name));
+               NarrationHelper.now(I18n.get("narrator.select", var2.name));
             }
          }
       }
 
+      public void setSelected(@Nullable RealmsMainScreen.Entry var1) {
+         super.setSelected(var1);
+         RealmsServer var2 = (RealmsServer)RealmsMainScreen.this.realmsServers.get(this.children().indexOf(var1) - (RealmsMainScreen.this.shouldShowMessageInList() ? 1 : 0));
+         RealmsMainScreen.this.selectedServerId = var2.id;
+         RealmsMainScreen.this.updateButtonStates(var2);
+      }
+
       public void itemClicked(int var1, int var2, double var3, double var5, int var7) {
          if (RealmsMainScreen.this.shouldShowMessageInList()) {
             if (var2 == 0) {
                RealmsMainScreen.this.popupOpenedByUser = true;
                return;
@@ -1504,22 +1457,22 @@
          if (var2 < RealmsMainScreen.this.realmsServers.size()) {
             RealmsServer var8 = (RealmsServer)RealmsMainScreen.this.realmsServers.get(var2);
             if (var8 != null) {
                if (var8.state == RealmsServer.State.UNINITIALIZED) {
                   RealmsMainScreen.this.selectedServerId = -1L;
-                  Realms.setScreen(new RealmsCreateRealmScreen(var8, RealmsMainScreen.this));
+                  Minecraft.getInstance().setScreen(new RealmsCreateRealmScreen(var8, RealmsMainScreen.this));
                } else {
                   RealmsMainScreen.this.selectedServerId = var8.id;
                }
 
-               if (RealmsMainScreen.this.toolTip != null && RealmsMainScreen.this.toolTip.equals(RealmsScreen.getLocalizedString("mco.selectServer.configure"))) {
+               if (RealmsMainScreen.this.hoveredElement == RealmsMainScreen.HoveredElement.CONFIGURE) {
                   RealmsMainScreen.this.selectedServerId = var8.id;
                   RealmsMainScreen.this.configureClicked(var8);
-               } else if (RealmsMainScreen.this.toolTip != null && RealmsMainScreen.this.toolTip.equals(RealmsScreen.getLocalizedString("mco.selectServer.leave"))) {
+               } else if (RealmsMainScreen.this.hoveredElement == RealmsMainScreen.HoveredElement.LEAVE) {
                   RealmsMainScreen.this.selectedServerId = var8.id;
                   RealmsMainScreen.this.leaveClicked(var8);
-               } else if (RealmsMainScreen.this.isSelfOwnedServer(var8) && var8.expired && RealmsMainScreen.this.expiredHover) {
+               } else if (RealmsMainScreen.this.hoveredElement == RealmsMainScreen.HoveredElement.EXPIRED) {
                   RealmsMainScreen.this.onRenew();
                }
 
             }
          }
@@ -1531,6 +1484,16 @@
 
       public int getRowWidth() {
          return 300;
       }
    }
+
+   static enum HoveredElement {
+      NONE,
+      EXPIRED,
+      LEAVE,
+      CONFIGURE;
+
+      private HoveredElement() {
+      }
+   }
 }
