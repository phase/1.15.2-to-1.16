--- com/mojang/blaze3d/pipeline/RenderTarget.java
+++ com/mojang/blaze3d/pipeline/RenderTarget.java
@@ -14,12 +14,12 @@
    public int height;
    public int viewWidth;
    public int viewHeight;
    public final boolean useDepth;
    public int frameBufferId;
-   public int colorTextureId;
-   public int depthBufferId;
+   private int colorTextureId;
+   private int depthBufferId;
    public final float[] clearChannels;
    public int filterMode;
 
    public RenderTarget(int var1, int var2, boolean var3, boolean var4) {
       RenderSystem.assertThread(RenderSystem::isOnRenderThreadOrInit);
@@ -60,11 +60,11 @@
    public void destroyBuffers() {
       RenderSystem.assertThread(RenderSystem::isOnRenderThreadOrInit);
       this.unbindRead();
       this.unbindWrite();
       if (this.depthBufferId > -1) {
-         GlStateManager._glDeleteRenderbuffers(this.depthBufferId);
+         TextureUtil.releaseTextureId(this.depthBufferId);
          this.depthBufferId = -1;
       }
 
       if (this.colorTextureId > -1) {
          TextureUtil.releaseTextureId(this.colorTextureId);
@@ -77,31 +77,57 @@
          this.frameBufferId = -1;
       }
 
    }
 
+   public void copyDepthFrom(RenderTarget var1) {
+      RenderSystem.assertThread(RenderSystem::isOnRenderThreadOrInit);
+      if (GlStateManager.supportsFramebufferBlit()) {
+         GlStateManager._glBindFramebuffer(36008, var1.frameBufferId);
+         GlStateManager._glBindFramebuffer(36009, this.frameBufferId);
+         GlStateManager._glBlitFrameBuffer(0, 0, var1.width, var1.height, 0, 0, this.width, this.height, 256, 9728);
+      } else {
+         GlStateManager._glBindFramebuffer(GlConst.GL_FRAMEBUFFER, this.frameBufferId);
+         int var2 = GlStateManager.getFramebufferDepthTexture();
+         if (var2 != 0) {
+            int var3 = GlStateManager.getActiveTextureName();
+            GlStateManager._bindTexture(var2);
+            GlStateManager._glBindFramebuffer(GlConst.GL_FRAMEBUFFER, var1.frameBufferId);
+            GlStateManager._glCopyTexSubImage2D(3553, 0, 0, 0, 0, 0, Math.min(this.width, var1.width), Math.min(this.height, var1.height));
+            GlStateManager._bindTexture(var3);
+         }
+      }
+
+      GlStateManager._glBindFramebuffer(GlConst.GL_FRAMEBUFFER, 0);
+   }
+
    public void createBuffers(int var1, int var2, boolean var3) {
       RenderSystem.assertThread(RenderSystem::isOnRenderThreadOrInit);
       this.viewWidth = var1;
       this.viewHeight = var2;
       this.width = var1;
       this.height = var2;
       this.frameBufferId = GlStateManager.glGenFramebuffers();
       this.colorTextureId = TextureUtil.generateTextureId();
       if (this.useDepth) {
-         this.depthBufferId = GlStateManager.glGenRenderbuffers();
+         this.depthBufferId = TextureUtil.generateTextureId();
+         GlStateManager._bindTexture(this.depthBufferId);
+         GlStateManager._texParameter(3553, 10241, 9728);
+         GlStateManager._texParameter(3553, 10240, 9728);
+         GlStateManager._texParameter(3553, 10242, 10496);
+         GlStateManager._texParameter(3553, 10243, 10496);
+         GlStateManager._texParameter(3553, 34892, 0);
+         GlStateManager._texImage2D(3553, 0, 6402, this.width, this.height, 0, 6402, 5126, (IntBuffer)null);
       }
 
       this.setFilterMode(9728);
       GlStateManager._bindTexture(this.colorTextureId);
       GlStateManager._texImage2D(3553, 0, 32856, this.width, this.height, 0, 6408, 5121, (IntBuffer)null);
       GlStateManager._glBindFramebuffer(GlConst.GL_FRAMEBUFFER, this.frameBufferId);
       GlStateManager._glFramebufferTexture2D(GlConst.GL_FRAMEBUFFER, GlConst.GL_COLOR_ATTACHMENT0, 3553, this.colorTextureId, 0);
       if (this.useDepth) {
-         GlStateManager._glBindRenderbuffer(GlConst.GL_RENDERBUFFER, this.depthBufferId);
-         GlStateManager._glRenderbufferStorage(GlConst.GL_RENDERBUFFER, 33190, this.width, this.height);
-         GlStateManager._glFramebufferRenderbuffer(GlConst.GL_FRAMEBUFFER, GlConst.GL_DEPTH_ATTACHMENT, GlConst.GL_RENDERBUFFER, this.depthBufferId);
+         GlStateManager._glFramebufferTexture2D(GlConst.GL_FRAMEBUFFER, GlConst.GL_DEPTH_ATTACHMENT, 3553, this.depthBufferId, 0);
       }
 
       this.checkStatus();
       this.clear(var3);
       this.unbindRead();
@@ -250,6 +276,14 @@
       }
 
       GlStateManager._clear(var2, var1);
       this.unbindWrite();
    }
+
+   public int getColorTextureId() {
+      return this.colorTextureId;
+   }
+
+   public int getDepthTextureId() {
+      return this.depthBufferId;
+   }
 }
