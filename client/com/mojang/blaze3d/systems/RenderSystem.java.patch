--- com/mojang/blaze3d/systems/RenderSystem.java
+++ com/mojang/blaze3d/systems/RenderSystem.java
@@ -4,18 +4,22 @@
 import com.mojang.blaze3d.pipeline.RenderCall;
 import com.mojang.blaze3d.platform.GLX;
 import com.mojang.blaze3d.platform.GlStateManager;
 import com.mojang.blaze3d.vertex.Tesselator;
 import com.mojang.math.Matrix4f;
+import com.mojang.math.Vector3f;
 import java.nio.ByteBuffer;
 import java.nio.FloatBuffer;
 import java.nio.IntBuffer;
 import java.util.concurrent.ConcurrentLinkedQueue;
 import java.util.function.Consumer;
 import java.util.function.IntSupplier;
 import java.util.function.LongSupplier;
 import java.util.function.Supplier;
+import net.minecraft.client.GraphicsStatus;
+import net.minecraft.client.Minecraft;
+import net.minecraft.client.Options;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 import org.lwjgl.glfw.GLFW;
 import org.lwjgl.glfw.GLFWErrorCallbackI;
 
@@ -110,65 +114,77 @@
       }
 
       lastDrawTime = var3;
    }
 
+   @Deprecated
    public static void pushLightingAttributes() {
       assertThread(RenderSystem::isOnGameThread);
       GlStateManager._pushLightingAttributes();
    }
 
+   @Deprecated
    public static void pushTextureAttributes() {
       assertThread(RenderSystem::isOnGameThread);
       GlStateManager._pushTextureAttributes();
    }
 
+   @Deprecated
    public static void popAttributes() {
       assertThread(RenderSystem::isOnGameThread);
       GlStateManager._popAttributes();
    }
 
+   @Deprecated
    public static void disableAlphaTest() {
       assertThread(RenderSystem::isOnGameThread);
       GlStateManager._disableAlphaTest();
    }
 
+   @Deprecated
    public static void enableAlphaTest() {
       assertThread(RenderSystem::isOnGameThread);
       GlStateManager._enableAlphaTest();
    }
 
+   @Deprecated
    public static void alphaFunc(int var0, float var1) {
       assertThread(RenderSystem::isOnGameThread);
       GlStateManager._alphaFunc(var0, var1);
    }
 
+   @Deprecated
    public static void enableLighting() {
       assertThread(RenderSystem::isOnGameThread);
       GlStateManager._enableLighting();
    }
 
+   @Deprecated
    public static void disableLighting() {
       assertThread(RenderSystem::isOnGameThread);
       GlStateManager._disableLighting();
    }
 
+   @Deprecated
    public static void enableColorMaterial() {
       assertThread(RenderSystem::isOnGameThread);
       GlStateManager._enableColorMaterial();
    }
 
+   @Deprecated
    public static void disableColorMaterial() {
       assertThread(RenderSystem::isOnGameThread);
       GlStateManager._disableColorMaterial();
    }
 
+   @Deprecated
    public static void colorMaterial(int var0, int var1) {
       assertThread(RenderSystem::isOnGameThread);
       GlStateManager._colorMaterial(var0, var1);
    }
 
+   @Deprecated
    public static void normal3f(float var0, float var1, float var2) {
       assertThread(RenderSystem::isOnGameThread);
       GlStateManager._normal3f(var0, var1, var2);
    }
 
@@ -230,50 +246,59 @@
    public static void blendColor(float var0, float var1, float var2, float var3) {
       assertThread(RenderSystem::isOnGameThread);
       GlStateManager._blendColor(var0, var1, var2, var3);
    }
 
+   @Deprecated
    public static void enableFog() {
       assertThread(RenderSystem::isOnGameThread);
       GlStateManager._enableFog();
    }
 
+   @Deprecated
    public static void disableFog() {
       assertThread(RenderSystem::isOnGameThread);
       GlStateManager._disableFog();
    }
 
+   @Deprecated
    public static void fogMode(GlStateManager.FogMode var0) {
       assertThread(RenderSystem::isOnGameThread);
       GlStateManager._fogMode(var0.value);
    }
 
+   @Deprecated
    public static void fogMode(int var0) {
       assertThread(RenderSystem::isOnGameThread);
       GlStateManager._fogMode(var0);
    }
 
+   @Deprecated
    public static void fogDensity(float var0) {
       assertThread(RenderSystem::isOnGameThread);
       GlStateManager._fogDensity(var0);
    }
 
+   @Deprecated
    public static void fogStart(float var0) {
       assertThread(RenderSystem::isOnGameThread);
       GlStateManager._fogStart(var0);
    }
 
+   @Deprecated
    public static void fogEnd(float var0) {
       assertThread(RenderSystem::isOnGameThread);
       GlStateManager._fogEnd(var0);
    }
 
+   @Deprecated
    public static void fog(int var0, float var1, float var2, float var3, float var4) {
       assertThread(RenderSystem::isOnGameThread);
       GlStateManager._fog(var0, new float[]{var1, var2, var3, var4});
    }
 
+   @Deprecated
    public static void fogi(int var0, int var1) {
       assertThread(RenderSystem::isOnGameThread);
       GlStateManager._fogi(var0, var1);
    }
 
@@ -358,20 +383,23 @@
 
    public static void bindTexture(int var0) {
       GlStateManager._bindTexture(var0);
    }
 
+   @Deprecated
    public static void shadeModel(int var0) {
       assertThread(RenderSystem::isOnGameThread);
       GlStateManager._shadeModel(var0);
    }
 
+   @Deprecated
    public static void enableRescaleNormal() {
       assertThread(RenderSystem::isOnGameThread);
       GlStateManager._enableRescaleNormal();
    }
 
+   @Deprecated
    public static void disableRescaleNormal() {
       assertThread(RenderSystem::isOnGameThread);
       GlStateManager._disableRescaleNormal();
    }
 
@@ -418,75 +446,89 @@
    public static void clear(int var0, boolean var1) {
       assertThread(RenderSystem::isOnGameThreadOrInit);
       GlStateManager._clear(var0, var1);
    }
 
+   @Deprecated
    public static void matrixMode(int var0) {
       assertThread(RenderSystem::isOnGameThread);
       GlStateManager._matrixMode(var0);
    }
 
+   @Deprecated
    public static void loadIdentity() {
       assertThread(RenderSystem::isOnGameThread);
       GlStateManager._loadIdentity();
    }
 
+   @Deprecated
    public static void pushMatrix() {
       assertThread(RenderSystem::isOnGameThread);
       GlStateManager._pushMatrix();
    }
 
+   @Deprecated
    public static void popMatrix() {
       assertThread(RenderSystem::isOnGameThread);
       GlStateManager._popMatrix();
    }
 
+   @Deprecated
    public static void ortho(double var0, double var2, double var4, double var6, double var8, double var10) {
       assertThread(RenderSystem::isOnGameThread);
       GlStateManager._ortho(var0, var2, var4, var6, var8, var10);
    }
 
+   @Deprecated
    public static void rotatef(float var0, float var1, float var2, float var3) {
       assertThread(RenderSystem::isOnGameThread);
       GlStateManager._rotatef(var0, var1, var2, var3);
    }
 
+   @Deprecated
    public static void scalef(float var0, float var1, float var2) {
       assertThread(RenderSystem::isOnGameThread);
       GlStateManager._scalef(var0, var1, var2);
    }
 
+   @Deprecated
    public static void scaled(double var0, double var2, double var4) {
       assertThread(RenderSystem::isOnGameThread);
       GlStateManager._scaled(var0, var2, var4);
    }
 
+   @Deprecated
    public static void translatef(float var0, float var1, float var2) {
       assertThread(RenderSystem::isOnGameThread);
       GlStateManager._translatef(var0, var1, var2);
    }
 
+   @Deprecated
    public static void translated(double var0, double var2, double var4) {
       assertThread(RenderSystem::isOnGameThread);
       GlStateManager._translated(var0, var2, var4);
    }
 
+   @Deprecated
    public static void multMatrix(Matrix4f var0) {
       assertThread(RenderSystem::isOnGameThread);
       GlStateManager._multMatrix(var0);
    }
 
+   @Deprecated
    public static void color4f(float var0, float var1, float var2, float var3) {
       assertThread(RenderSystem::isOnGameThread);
       GlStateManager._color4f(var0, var1, var2, var3);
    }
 
+   @Deprecated
    public static void color3f(float var0, float var1, float var2) {
       assertThread(RenderSystem::isOnGameThread);
       GlStateManager._color4f(var0, var1, var2, 1.0F);
    }
 
+   @Deprecated
    public static void clearCurrentColor() {
       assertThread(RenderSystem::isOnGameThread);
       GlStateManager._clearCurrentColor();
    }
 
@@ -552,10 +594,11 @@
    public static void setupNvFogDistance() {
       assertThread(RenderSystem::isOnGameThread);
       GLX._setupNvFogDistance();
    }
 
+   @Deprecated
    public static void glMultiTexCoord2f(int var0, float var1, float var2) {
       assertThread(RenderSystem::isOnGameThread);
       GlStateManager._glMultiTexCoord2f(var0, var1, var2);
    }
 
@@ -692,23 +735,23 @@
    public static void teardownOverlayColor() {
       assertThread(RenderSystem::isOnGameThread);
       GlStateManager.teardownOverlayColor();
    }
 
-   public static void setupLevelDiffuseLighting(Matrix4f var0) {
+   public static void setupLevelDiffuseLighting(Vector3f var0, Vector3f var1, Matrix4f var2) {
       assertThread(RenderSystem::isOnGameThread);
-      GlStateManager.setupLevelDiffuseLighting(var0);
+      GlStateManager.setupLevelDiffuseLighting(var0, var1, var2);
    }
 
-   public static void setupGuiFlatDiffuseLighting() {
+   public static void setupGuiFlatDiffuseLighting(Vector3f var0, Vector3f var1) {
       assertThread(RenderSystem::isOnGameThread);
-      GlStateManager.setupGuiFlatDiffuseLighting();
+      GlStateManager.setupGuiFlatDiffuseLighting(var0, var1);
    }
 
-   public static void setupGui3DDiffuseLighting() {
+   public static void setupGui3DDiffuseLighting(Vector3f var0, Vector3f var1) {
       assertThread(RenderSystem::isOnGameThread);
-      GlStateManager.setupGui3DDiffuseLighting();
+      GlStateManager.setupGui3DDiffuseLighting(var0, var1);
    }
 
    public static void mulTextureByProjModelView() {
       assertThread(RenderSystem::isOnGameThread);
       GlStateManager.mulTextureByProjModelView();
@@ -760,6 +803,20 @@
    }
 
    public static void defaultAlphaFunc() {
       alphaFunc(516, 0.1F);
    }
+
+   @Deprecated
+   public static void runAsFancy(Runnable var0) {
+      boolean var1 = Minecraft.useShaderTransparency();
+      if (!var1) {
+         var0.run();
+      } else {
+         Options var2 = Minecraft.getInstance().options;
+         GraphicsStatus var3 = var2.graphicsMode;
+         var2.graphicsMode = GraphicsStatus.FANCY;
+         var0.run();
+         var2.graphicsMode = var3;
+      }
+   }
 }
