--- com/mojang/blaze3d/font/TrueTypeGlyphProvider.java
+++ com/mojang/blaze3d/font/TrueTypeGlyphProvider.java
@@ -1,35 +1,38 @@
 package com.mojang.blaze3d.font;
 
 import com.mojang.blaze3d.platform.NativeImage;
-import it.unimi.dsi.fastutil.chars.CharArraySet;
-import it.unimi.dsi.fastutil.chars.CharSet;
+import it.unimi.dsi.fastutil.ints.IntArraySet;
+import it.unimi.dsi.fastutil.ints.IntCollection;
+import it.unimi.dsi.fastutil.ints.IntOpenHashSet;
+import it.unimi.dsi.fastutil.ints.IntSet;
 import java.nio.ByteBuffer;
 import java.nio.IntBuffer;
+import java.util.stream.IntStream;
 import javax.annotation.Nullable;
 import org.lwjgl.stb.STBTTFontinfo;
 import org.lwjgl.stb.STBTruetype;
 import org.lwjgl.system.MemoryStack;
 import org.lwjgl.system.MemoryUtil;
 
 public class TrueTypeGlyphProvider implements GlyphProvider {
    private final ByteBuffer fontMemory;
    private final STBTTFontinfo font;
    private final float oversample;
-   private final CharSet skip = new CharArraySet();
+   private final IntSet skip = new IntArraySet();
    private final float shiftX;
    private final float shiftY;
    private final float pointScale;
    private final float ascent;
 
    public TrueTypeGlyphProvider(ByteBuffer var1, STBTTFontinfo var2, float var3, float var4, float var5, float var6, String var7) {
       this.fontMemory = var1;
       this.font = var2;
       this.oversample = var4;
-      var7.chars().forEach((var1x) -> {
-         this.skip.add((char)(var1x & '\uffff'));
-      });
+      IntStream var10000 = var7.codePoints();
+      IntSet var10001 = this.skip;
+      var10000.forEach(var10001::add);
       this.shiftX = var5 * var4;
       this.shiftY = var6 * var4;
       this.pointScale = STBTruetype.stbtt_ScaleForPixelHeight(var2, var3 * var4);
       MemoryStack var8 = MemoryStack.stackPush();
       Throwable var9 = null;
@@ -59,42 +62,42 @@
       }
 
    }
 
    @Nullable
-   public TrueTypeGlyphProvider.Glyph getGlyph(char var1) {
+   public TrueTypeGlyphProvider.Glyph getGlyph(int var1) {
       if (this.skip.contains(var1)) {
          return null;
       } else {
          MemoryStack var2 = MemoryStack.stackPush();
          Throwable var3 = null;
 
-         TrueTypeGlyphProvider.Glyph var13;
+         Object var9;
          try {
             IntBuffer var4 = var2.mallocInt(1);
             IntBuffer var5 = var2.mallocInt(1);
             IntBuffer var6 = var2.mallocInt(1);
             IntBuffer var7 = var2.mallocInt(1);
             int var8 = STBTruetype.stbtt_FindGlyphIndex(this.font, var1);
-            if (var8 == 0) {
-               Object var26 = null;
-               return (TrueTypeGlyphProvider.Glyph)var26;
-            }
+            if (var8 != 0) {
+               STBTruetype.stbtt_GetGlyphBitmapBoxSubpixel(this.font, var8, this.pointScale, this.pointScale, this.shiftX, this.shiftY, var4, var5, var6, var7);
+               int var26 = var6.get(0) - var4.get(0);
+               int var10 = var7.get(0) - var5.get(0);
+               IntBuffer var11;
+               if (var26 != 0 && var10 != 0) {
+                  var11 = var2.mallocInt(1);
+                  IntBuffer var12 = var2.mallocInt(1);
+                  STBTruetype.stbtt_GetGlyphHMetrics(this.font, var8, var11, var12);
+                  TrueTypeGlyphProvider.Glyph var13 = new TrueTypeGlyphProvider.Glyph(var4.get(0), var6.get(0), -var5.get(0), -var7.get(0), (float)var11.get(0) * this.pointScale, (float)var12.get(0) * this.pointScale, var8);
+                  return var13;
+               }
 
-            STBTruetype.stbtt_GetGlyphBitmapBoxSubpixel(this.font, var8, this.pointScale, this.pointScale, this.shiftX, this.shiftY, var4, var5, var6, var7);
-            int var9 = var6.get(0) - var4.get(0);
-            int var10 = var7.get(0) - var5.get(0);
-            IntBuffer var11;
-            if (var9 == 0 || var10 == 0) {
                var11 = null;
                return var11;
             }
 
-            var11 = var2.mallocInt(1);
-            IntBuffer var12 = var2.mallocInt(1);
-            STBTruetype.stbtt_GetGlyphHMetrics(this.font, var8, var11, var12);
-            var13 = new TrueTypeGlyphProvider.Glyph(var4.get(0), var6.get(0), -var5.get(0), -var7.get(0), (float)var11.get(0) * this.pointScale, (float)var12.get(0) * this.pointScale, var8);
+            var9 = null;
          } catch (Throwable var24) {
             var3 = var24;
             throw var24;
          } finally {
             if (var2 != null) {
@@ -109,19 +112,25 @@
                }
             }
 
          }
 
-         return var13;
+         return (TrueTypeGlyphProvider.Glyph)var9;
       }
    }
 
    public void close() {
       this.font.free();
       MemoryUtil.memFree(this.fontMemory);
    }
 
+   public IntSet getSupportedGlyphs() {
+      return (IntSet)IntStream.range(0, 65535).filter((var1) -> {
+         return !this.skip.contains(var1);
+      }).collect(IntOpenHashSet::new, IntCollection::add, IntCollection::addAll);
+   }
+
    class Glyph implements RawGlyph {
       private final int width;
       private final int height;
       private final float bearingX;
       private final float bearingY;
